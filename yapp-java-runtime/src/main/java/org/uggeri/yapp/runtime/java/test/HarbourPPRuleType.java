/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.parser.Rule;

public enum HarbourPPRuleType implements Rule<HarbourPPVisitor> {
   PRE_PROCESSOR {
      @Override
      public String getLabel() {
         return "PreProcessor";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterPreProcessor(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitPreProcessor(node);
      }
   },
   STATEMENTS {
      @Override
      public String getLabel() {
         return "Statements";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterStatements(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitStatements(node);
      }
   },
   IGNORE {
      @Override
      public String getLabel() {
         return "Ignore";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIgnore(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIgnore(node);
      }
   },
   WHITESPACE {
      @Override
      public String getLabel() {
         return "Whitespace";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterWhitespace(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitWhitespace(node);
      }
   },
   BLOCK_COMMENT {
      @Override
      public String getLabel() {
         return "BlockComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterBlockComment(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitBlockComment(node);
      }
   },
   LINE_COMMENT {
      @Override
      public String getLabel() {
         return "LineComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterLineComment(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitLineComment(node);
      }
   },
   CONTINUE_NL {
      @Override
      public String getLabel() {
         return "ContinueNL";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterContinueNL(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitContinueNL(node);
      }
   },
   SPACING {
      @Override
      public String getLabel() {
         return "Spacing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterSpacing(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitSpacing(node);
      }
   },
   STATEMENT {
      @Override
      public String getLabel() {
         return "Statement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterStatement(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitStatement(node);
      }
   },
   DIRECTIVE_STATEMENT {
      @Override
      public String getLabel() {
         return "DirectiveStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDirectiveStatement(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDirectiveStatement(node);
      }
   },
   EMPTY_STATEMENT {
      @Override
      public String getLabel() {
         return "EmptyStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterEmptyStatement(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitEmptyStatement(node);
      }
   },
   ANY_STATEMENT {
      @Override
      public String getLabel() {
         return "AnyStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterAnyStatement(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitAnyStatement(node);
      }
   },
   END_STMT {
      @Override
      public String getLabel() {
         return "EndStmt";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterEndStmt(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitEndStmt(node);
      }
   },
   NEW_LINE {
      @Override
      public String getLabel() {
         return "NewLine";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterNewLine(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitNewLine(node);
      }
   },
   ALONE_LINE_COMMENT {
      @Override
      public String getLabel() {
         return "AloneLineComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterAloneLineComment(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitAloneLineComment(node);
      }
   },
   ANY_RULES {
      @Override
      public String getLabel() {
         return "AnyRules";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterAnyRules(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitAnyRules(node);
      }
   },
   DIRECTIVE_MARK {
      @Override
      public String getLabel() {
         return "DirectiveMark";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDirectiveMark(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDirectiveMark(node);
      }
   },
   DEFINE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "DefineDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDefineDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDefineDirective(node);
      }
   },
   STD_OUT_DIRECTIVE {
      @Override
      public String getLabel() {
         return "StdOutDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterStdOutDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitStdOutDirective(node);
      }
   },
   COMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "CommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterCommandDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitCommandDirective(node);
      }
   },
   XCOMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "XCommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXCommandDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXCommandDirective(node);
      }
   },
   YCOMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "YCommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYCommandDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYCommandDirective(node);
      }
   },
   TRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "TranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterTranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitTranslateDirective(node);
      }
   },
   XTRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "XTranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXTranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXTranslateDirective(node);
      }
   },
   YTRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "YTranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYTranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYTranslateDirective(node);
      }
   },
   IF_DEF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IfDefDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIfDefDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIfDefDirective(node);
      }
   },
   IF_NDEF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IfNDefDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIfNDefDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIfNDefDirective(node);
      }
   },
   ELSE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "ElseDirective";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterElseDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitElseDirective(node);
      }
   },
   ELSE_IF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "ElseIfDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterElseIfDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitElseIfDirective(node);
      }
   },
   END_IF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "EndIfDirective";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterEndIfDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitEndIfDirective(node);
      }
   },
   UNDEF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "UndefDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterUndefDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitUndefDirective(node);
      }
   },
   ERROR_DIRECTIVE {
      @Override
      public String getLabel() {
         return "ErrorDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterErrorDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitErrorDirective(node);
      }
   },
   INCLUDE_NAME {
      @Override
      public String getLabel() {
         return "IncludeName";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIncludeName(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIncludeName(node);
      }
   },
   INCLUDE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IncludeDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIncludeDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIncludeDirective(node);
      }
   },
   LINE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "LineDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterLineDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitLineDirective(node);
      }
   },
   UNCOMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "UncommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterUncommandDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitUncommandDirective(node);
      }
   },
   XUNCOMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "XUncommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXUncommandDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXUncommandDirective(node);
      }
   },
   YUNCOMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "YUncommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYUncommandDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYUncommandDirective(node);
      }
   },
   UNTRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "UntranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterUntranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitUntranslateDirective(node);
      }
   },
   XUNTRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "XUntranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXUntranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXUntranslateDirective(node);
      }
   },
   YUNTRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "YUntranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYUntranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYUntranslateDirective(node);
      }
   },
   DUMP_BLOCK {
      @Override
      public String getLabel() {
         return "DumpBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDumpBlock(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDumpBlock(node);
      }
   },
   DEFINE {
      @Override
      public String getLabel() {
         return "Define";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDefine(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDefine(node);
      }
   },
   DEFINE_PARAMETERS {
      @Override
      public String getLabel() {
         return "DefineParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDefineParameters(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDefineParameters(node);
      }
   },
   RESULT_RULES {
      @Override
      public String getLabel() {
         return "ResultRules";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterResultRules(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitResultRules(node);
      }
   },
   PARAMETERS_LIST {
      @Override
      public String getLabel() {
         return "ParametersList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterParametersList(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitParametersList(node);
      }
   },
   STD_OUT {
      @Override
      public String getLabel() {
         return "StdOut";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterStdOut(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitStdOut(node);
      }
   },
   COMMAND {
      @Override
      public String getLabel() {
         return "Command";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterCommand(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitCommand(node);
      }
   },
   MATCH_PATTERN {
      @Override
      public String getLabel() {
         return "MatchPattern";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMatchPattern(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMatchPattern(node);
      }
   },
   RESULT_SEP {
      @Override
      public String getLabel() {
         return "ResultSep";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterResultSep(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitResultSep(node);
      }
   },
   RESULT_PATTERN {
      @Override
      public String getLabel() {
         return "ResultPattern";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterResultPattern(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitResultPattern(node);
      }
   },
   YCOMMAND {
      @Override
      public String getLabel() {
         return "YCommand";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYCommand(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYCommand(node);
      }
   },
   DIRECTIVE_PATTERN {
      @Override
      public String getLabel() {
         return "directivePattern";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterdirectivePattern(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitdirectivePattern(node);
      }
   },
   UNDEF_DIRECTIVE_PATTERN {
      @Override
      public String getLabel() {
         return "undefDirectivePattern";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterundefDirectivePattern(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitundefDirectivePattern(node);
      }
   },
   UNCOMMAND {
      @Override
      public String getLabel() {
         return "Uncommand";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterUncommand(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitUncommand(node);
      }
   },
   XUNCOMMAND {
      @Override
      public String getLabel() {
         return "Xuncommand";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXuncommand(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXuncommand(node);
      }
   },
   YUNCOMMAND {
      @Override
      public String getLabel() {
         return "Yuncommand";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYuncommand(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYuncommand(node);
      }
   },
   XCOMMAND {
      @Override
      public String getLabel() {
         return "XCommand";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXCommand(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXCommand(node);
      }
   },
   UNTRANSLATE {
      @Override
      public String getLabel() {
         return "Untranslate";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterUntranslate(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitUntranslate(node);
      }
   },
   XUNTRANSLATE {
      @Override
      public String getLabel() {
         return "Xuntranslate";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXuntranslate(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXuntranslate(node);
      }
   },
   YUNTRANSLATE {
      @Override
      public String getLabel() {
         return "Yuntranslate";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYuntranslate(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYuntranslate(node);
      }
   },
   TRANSLATE {
      @Override
      public String getLabel() {
         return "Translate";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterTranslate(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitTranslate(node);
      }
   },
   YTRANSLATE {
      @Override
      public String getLabel() {
         return "YTranslate";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterYTranslate(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitYTranslate(node);
      }
   },
   XTRANSLATE {
      @Override
      public String getLabel() {
         return "XTranslate";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterXTranslate(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitXTranslate(node);
      }
   },
   ESCAPED_CHAR {
      @Override
      public String getLabel() {
         return "EscapedChar";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterEscapedChar(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitEscapedChar(node);
      }
   },
   OPTIONAL_MATCH_MARKER {
      @Override
      public String getLabel() {
         return "OptionalMatchMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterOptionalMatchMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitOptionalMatchMarker(node);
      }
   },
   OPTIONAL_MATCH_MARKER_CHUNK {
      @Override
      public String getLabel() {
         return "OptionalMatchMarkerChunk";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterOptionalMatchMarkerChunk(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitOptionalMatchMarkerChunk(node);
      }
   },
   MATCH_MARKER {
      @Override
      public String getLabel() {
         return "MatchMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMatchMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMatchMarker(node);
      }
   },
   LITERAL {
      @Override
      public String getLabel() {
         return "Literal";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterLiteral(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitLiteral(node);
      }
   },
   SEPARATOR {
      @Override
      public String getLabel() {
         return "Separator";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterSeparator(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitSeparator(node);
      }
   },
   MATCH_CHUNK {
      @Override
      public String getLabel() {
         return "MatchChunk";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMatchChunk(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMatchChunk(node);
      }
   },
   ID_MARKER {
      @Override
      public String getLabel() {
         return "IdMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIdMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIdMarker(node);
      }
   },
   LIST_MARKER {
      @Override
      public String getLabel() {
         return "ListMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterListMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitListMarker(node);
      }
   },
   RESTRICT_MARKER {
      @Override
      public String getLabel() {
         return "RestrictMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterRestrictMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitRestrictMarker(node);
      }
   },
   WILD_MARKER {
      @Override
      public String getLabel() {
         return "WildMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterWildMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitWildMarker(node);
      }
   },
   EXTENDED_MARKER {
      @Override
      public String getLabel() {
         return "ExtendedMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterExtendedMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitExtendedMarker(node);
      }
   },
   IDENTIFIER_MARKER {
      @Override
      public String getLabel() {
         return "IdentifierMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIdentifierMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIdentifierMarker(node);
      }
   },
   RESTRICT_VALUES {
      @Override
      public String getLabel() {
         return "RestrictValues";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterRestrictValues(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitRestrictValues(node);
      }
   },
   RESTRICT_VALUE {
      @Override
      public String getLabel() {
         return "RestrictValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterRestrictValue(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitRestrictValue(node);
      }
   },
   NULL_MARKER {
      @Override
      public String getLabel() {
         return "NullMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterNullMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitNullMarker(node);
      }
   },
   RESULT_MARKER {
      @Override
      public String getLabel() {
         return "ResultMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterResultMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitResultMarker(node);
      }
   },
   DUMB_STRINGIFY_MARKER {
      @Override
      public String getLabel() {
         return "DumbStringifyMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDumbStringifyMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDumbStringifyMarker(node);
      }
   },
   NORMAL_STRINGIFY_MARKER {
      @Override
      public String getLabel() {
         return "NormalStringifyMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterNormalStringifyMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitNormalStringifyMarker(node);
      }
   },
   SMART_STRINGIFY_MARKER {
      @Override
      public String getLabel() {
         return "SmartStringifyMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterSmartStringifyMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitSmartStringifyMarker(node);
      }
   },
   BLOCKIFY_MARKER {
      @Override
      public String getLabel() {
         return "BlockifyMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterBlockifyMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitBlockifyMarker(node);
      }
   },
   LOGIFY_MARKER {
      @Override
      public String getLabel() {
         return "LogifyMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterLogifyMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitLogifyMarker(node);
      }
   },
   OPTIONAL_RESULT_MARKER {
      @Override
      public String getLabel() {
         return "OptionalResultMarker";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterOptionalResultMarker(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitOptionalResultMarker(node);
      }
   },
   OPTIONAL_RESULT_MARKER_CHUNK {
      @Override
      public String getLabel() {
         return "OptionalResultMarkerChunk";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterOptionalResultMarkerChunk(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitOptionalResultMarkerChunk(node);
      }
   },
   RESULT_CHUNK {
      @Override
      public String getLabel() {
         return "ResultChunk";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterResultChunk(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitResultChunk(node);
      }
   },
   IF_DEF {
      @Override
      public String getLabel() {
         return "IfDef";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIfDef(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIfDef(node);
      }
   },
   IF_NDEF {
      @Override
      public String getLabel() {
         return "IfNDef";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIfNDef(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIfNDef(node);
      }
   },
   DISCARDED_REMAINING_LINE {
      @Override
      public String getLabel() {
         return "DiscardedRemainingLine";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDiscardedRemainingLine(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDiscardedRemainingLine(node);
      }
   },
   ELSE_IF {
      @Override
      public String getLabel() {
         return "ElseIf";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterElseIf(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitElseIf(node);
      }
   },
   END_IF {
      @Override
      public String getLabel() {
         return "EndIf";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterEndIf(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitEndIf(node);
      }
   },
   UNDEF {
      @Override
      public String getLabel() {
         return "Undef";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterUndef(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitUndef(node);
      }
   },
   INCLUDE {
      @Override
      public String getLabel() {
         return "Include";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterInclude(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitInclude(node);
      }
   },
   DOUBLE_QUOTE_STRING {
      @Override
      public String getLabel() {
         return "DoubleQuoteString";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDoubleQuoteString(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDoubleQuoteString(node);
      }
   },
   SINGLE_QUOTE_STRING {
      @Override
      public String getLabel() {
         return "SingleQuoteString";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterSingleQuoteString(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitSingleQuoteString(node);
      }
   },
   BEGIN_DUMP_BLOCK {
      @Override
      public String getLabel() {
         return "BeginDumpBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterBeginDumpBlock(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitBeginDumpBlock(node);
      }
   },
   END_DUMP_BLOCK {
      @Override
      public String getLabel() {
         return "EndDumpBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterEndDumpBlock(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitEndDumpBlock(node);
      }
   },
   BRACKET_SEQUENCE {
      @Override
      public String getLabel() {
         return "BracketSequence";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterBracketSequence(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitBracketSequence(node);
      }
   },
   ANY_RULE {
      @Override
      public String getLabel() {
         return "AnyRule";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterAnyRule(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitAnyRule(node);
      }
   },
   BRACKET_STRING {
      @Override
      public String getLabel() {
         return "BracketString";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterBracketString(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitBracketString(node);
      }
   },
   LOGICAL_LITERAL {
      @Override
      public String getLabel() {
         return "LogicalLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterLogicalLiteral(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitLogicalLiteral(node);
      }
   },
   DATE_TIME_LITERAL {
      @Override
      public String getLabel() {
         return "DateTimeLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDateTimeLiteral(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDateTimeLiteral(node);
      }
   },
   NUMBER_LITERAL {
      @Override
      public String getLabel() {
         return "NumberLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterNumberLiteral(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitNumberLiteral(node);
      }
   },
   MULTI_LINE_DOUBLE_QUOTE_STRING {
      @Override
      public String getLabel() {
         return "MultiLineDoubleQuoteString";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMultiLineDoubleQuoteString(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMultiLineDoubleQuoteString(node);
      }
   },
   MULTI_LINE_SINGLE_QUOTE_STRING {
      @Override
      public String getLabel() {
         return "MultiLineSingleQuoteString";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMultiLineSingleQuoteString(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMultiLineSingleQuoteString(node);
      }
   },
   BREAK_STRING {
      @Override
      public String getLabel() {
         return "BreakString";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterBreakString(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitBreakString(node);
      }
   },
   MULTILINE_DOUBLE_QUOTE_STRING_SEGMENT {
      @Override
      public String getLabel() {
         return "MultilineDoubleQuoteStringSegment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMultilineDoubleQuoteStringSegment(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMultilineDoubleQuoteStringSegment(node);
      }
   },
   MULTILINE_SINGLE_QUOTE_STRING_SEGMENT {
      @Override
      public String getLabel() {
         return "MultilineSingleQuoteStringSegment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterMultilineSingleQuoteStringSegment(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitMultilineSingleQuoteStringSegment(node);
      }
   },
   LETTER {
      @Override
      public String getLabel() {
         return "Letter";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterLetter(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitLetter(node);
      }
   },
   INTEGER_NUMBER {
      @Override
      public String getLabel() {
         return "IntegerNumber";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIntegerNumber(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIntegerNumber(node);
      }
   },
   TIME_PATTERN {
      @Override
      public String getLabel() {
         return "TimePattern";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterTimePattern(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitTimePattern(node);
      }
   },
   DATE_PATTERN {
      @Override
      public String getLabel() {
         return "DatePattern";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterDatePattern(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitDatePattern(node);
      }
   },
   IDENTIFIER {
      @Override
      public String getLabel() {
         return "Identifier";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourPPVisitor visitor, Node node) {
         visitor.enterIdentifier(node);
      }

      @Override
      public void exitRule(HarbourPPVisitor visitor, Node node) {
         visitor.exitIdentifier(node);
      }
   };

   @Override
   public int getValue() {
      return ordinal();
   }
}
