/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.parser.Parser;
import org.uggeri.yapp.runtime.java.parser.Rule;
import org.uggeri.yapp.runtime.java.parser.RuleProfile;
import org.uggeri.yapp.runtime.java.buffer.InputBuffer;
import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.node.NodeImpl;
import org.uggeri.yapp.runtime.java.parser.ParserError;
import org.uggeri.yapp.runtime.java.trace.TraceParser;
import java.util.Collections;
import java.util.Collection;
import java.util.Arrays;
import java.util.Map;

public class JavaParser implements Parser {

   private int index = 0;

   private InputBuffer buffer;

   private boolean currentRuleIsAtomic = false;

   private Node currentNode = new NodeImpl(null, 0, 0, false, false);

   private int annotations$RuleMemoStart = -1;
   private int annotations$RuleMemoEnd;
   private Node annotations$RuleMemoFirstNode;
   private Node annotations$RuleMemoLastNode;
   private int annotation$RuleMemoStart = -1;
   private int annotation$RuleMemoEnd;
   private Node annotation$RuleMemoFirstNode;
   private Node annotation$RuleMemoLastNode;
   private int qualifiedIdentifier$RuleMemoStart = -1;
   private int qualifiedIdentifier$RuleMemoEnd;
   private Node qualifiedIdentifier$RuleMemoFirstNode;
   private Node qualifiedIdentifier$RuleMemoLastNode;
   private int modifiers$RuleMemoStart = -1;
   private int modifiers$RuleMemoEnd;
   private Node modifiers$RuleMemoFirstNode;
   private Node modifiers$RuleMemoLastNode;
   private int classDeclaration$RuleMemoStart = -1;
   private int classDeclaration$RuleMemoEnd;
   private Node classDeclaration$RuleMemoFirstNode;
   private Node classDeclaration$RuleMemoLastNode;
   private int enumDeclaration$RuleMemoStart = -1;
   private int enumDeclaration$RuleMemoEnd;
   private Node enumDeclaration$RuleMemoFirstNode;
   private Node enumDeclaration$RuleMemoLastNode;
   private int interfaceDeclaration$RuleMemoStart = -1;
   private int interfaceDeclaration$RuleMemoEnd;
   private Node interfaceDeclaration$RuleMemoFirstNode;
   private Node interfaceDeclaration$RuleMemoLastNode;
   private int annotationDeclaration$RuleMemoStart = -1;
   private int annotationDeclaration$RuleMemoEnd;
   private Node annotationDeclaration$RuleMemoFirstNode;
   private Node annotationDeclaration$RuleMemoLastNode;
   private int qualifiedClassName$RuleMemoStart = -1;
   private int qualifiedClassName$RuleMemoEnd;
   private Node qualifiedClassName$RuleMemoFirstNode;
   private Node qualifiedClassName$RuleMemoLastNode;
   private int implements$RuleMemoStart = -1;
   private int implements$RuleMemoEnd;
   private Node implements$RuleMemoFirstNode;
   private Node implements$RuleMemoLastNode;
   private int classTypeList$RuleMemoStart = -1;
   private int classTypeList$RuleMemoEnd;
   private Node classTypeList$RuleMemoFirstNode;
   private Node classTypeList$RuleMemoLastNode;
   private int identifier$RuleMemoStart = -1;
   private int identifier$RuleMemoEnd;
   private Node identifier$RuleMemoFirstNode;
   private Node identifier$RuleMemoLastNode;
   private int typeParameters$RuleMemoStart = -1;
   private int typeParameters$RuleMemoEnd;
   private Node typeParameters$RuleMemoFirstNode;
   private Node typeParameters$RuleMemoLastNode;
   private int classBody$RuleMemoStart = -1;
   private int classBody$RuleMemoEnd;
   private Node classBody$RuleMemoFirstNode;
   private Node classBody$RuleMemoLastNode;
   private int classBodyDeclaration$RuleMemoStart = -1;
   private int classBodyDeclaration$RuleMemoEnd;
   private Node classBodyDeclaration$RuleMemoFirstNode;
   private Node classBodyDeclaration$RuleMemoLastNode;
   private int staticBlock$RuleMemoStart = -1;
   private int staticBlock$RuleMemoEnd;
   private Node staticBlock$RuleMemoFirstNode;
   private Node staticBlock$RuleMemoLastNode;
   private int block$RuleMemoStart = -1;
   private int block$RuleMemoEnd;
   private Node block$RuleMemoFirstNode;
   private Node block$RuleMemoLastNode;
   private int methodDeclaration$RuleMemoStart = -1;
   private int methodDeclaration$RuleMemoEnd;
   private Node methodDeclaration$RuleMemoFirstNode;
   private Node methodDeclaration$RuleMemoLastNode;
   private int constructorDeclaration$RuleMemoStart = -1;
   private int constructorDeclaration$RuleMemoEnd;
   private Node constructorDeclaration$RuleMemoFirstNode;
   private Node constructorDeclaration$RuleMemoLastNode;
   private int fieldsDeclarations$RuleMemoStart = -1;
   private int fieldsDeclarations$RuleMemoEnd;
   private Node fieldsDeclarations$RuleMemoFirstNode;
   private Node fieldsDeclarations$RuleMemoLastNode;
   private int type$RuleMemoStart = -1;
   private int type$RuleMemoEnd;
   private Node type$RuleMemoFirstNode;
   private Node type$RuleMemoLastNode;
   private int variableDeclarations$RuleMemoStart = -1;
   private int variableDeclarations$RuleMemoEnd;
   private Node variableDeclarations$RuleMemoFirstNode;
   private Node variableDeclarations$RuleMemoLastNode;
   private int throws$RuleMemoStart = -1;
   private int throws$RuleMemoEnd;
   private Node throws$RuleMemoFirstNode;
   private Node throws$RuleMemoLastNode;
   private int emptyBody$RuleMemoStart = -1;
   private int emptyBody$RuleMemoEnd;
   private Node emptyBody$RuleMemoFirstNode;
   private Node emptyBody$RuleMemoLastNode;
   private int methodSignature$RuleMemoStart = -1;
   private int methodSignature$RuleMemoEnd;
   private Node methodSignature$RuleMemoFirstNode;
   private Node methodSignature$RuleMemoLastNode;
   private int parametersDeclarations$RuleMemoStart = -1;
   private int parametersDeclarations$RuleMemoEnd;
   private Node parametersDeclarations$RuleMemoFirstNode;
   private Node parametersDeclarations$RuleMemoLastNode;
   private int dimensions$RuleMemoStart = -1;
   private int dimensions$RuleMemoEnd;
   private Node dimensions$RuleMemoFirstNode;
   private Node dimensions$RuleMemoLastNode;
   private int interfaceMethod$RuleMemoStart = -1;
   private int interfaceMethod$RuleMemoEnd;
   private Node interfaceMethod$RuleMemoFirstNode;
   private Node interfaceMethod$RuleMemoLastNode;
   private int constantsDeclarations$RuleMemoStart = -1;
   private int constantsDeclarations$RuleMemoEnd;
   private Node constantsDeclarations$RuleMemoFirstNode;
   private Node constantsDeclarations$RuleMemoLastNode;
   private int constantDeclaration$RuleMemoStart = -1;
   private int constantDeclaration$RuleMemoEnd;
   private Node constantDeclaration$RuleMemoFirstNode;
   private Node constantDeclaration$RuleMemoLastNode;
   private int variableInitializer$RuleMemoStart = -1;
   private int variableInitializer$RuleMemoEnd;
   private Node variableInitializer$RuleMemoFirstNode;
   private Node variableInitializer$RuleMemoLastNode;
   private int enumConstant$RuleMemoStart = -1;
   private int enumConstant$RuleMemoEnd;
   private Node enumConstant$RuleMemoFirstNode;
   private Node enumConstant$RuleMemoLastNode;
   private int arguments$RuleMemoStart = -1;
   private int arguments$RuleMemoEnd;
   private Node arguments$RuleMemoFirstNode;
   private Node arguments$RuleMemoLastNode;
   private int final$RuleMemoStart = -1;
   private int final$RuleMemoEnd;
   private Node final$RuleMemoFirstNode;
   private Node final$RuleMemoLastNode;
   private int variableModifiers$RuleMemoStart = -1;
   private int variableModifiers$RuleMemoEnd;
   private Node variableModifiers$RuleMemoFirstNode;
   private Node variableModifiers$RuleMemoLastNode;
   private int localVariableDeclarationStatement$RuleMemoStart = -1;
   private int localVariableDeclarationStatement$RuleMemoEnd;
   private Node localVariableDeclarationStatement$RuleMemoFirstNode;
   private Node localVariableDeclarationStatement$RuleMemoLastNode;
   private int variableDeclaration$RuleMemoStart = -1;
   private int variableDeclaration$RuleMemoEnd;
   private Node variableDeclaration$RuleMemoFirstNode;
   private Node variableDeclaration$RuleMemoLastNode;
   private int parametersDeclarationList$RuleMemoStart = -1;
   private int parametersDeclarationList$RuleMemoEnd;
   private Node parametersDeclarationList$RuleMemoFirstNode;
   private Node parametersDeclarationList$RuleMemoLastNode;
   private int parameterDeclaration$RuleMemoStart = -1;
   private int parameterDeclaration$RuleMemoEnd;
   private Node parameterDeclaration$RuleMemoFirstNode;
   private Node parameterDeclaration$RuleMemoLastNode;
   private int parameterVariableDeclaration$RuleMemoStart = -1;
   private int parameterVariableDeclaration$RuleMemoEnd;
   private Node parameterVariableDeclaration$RuleMemoFirstNode;
   private Node parameterVariableDeclaration$RuleMemoLastNode;
   private int blockStatements$RuleMemoStart = -1;
   private int blockStatements$RuleMemoEnd;
   private Node blockStatements$RuleMemoFirstNode;
   private Node blockStatements$RuleMemoLastNode;
   private int statement$RuleMemoStart = -1;
   private int statement$RuleMemoEnd;
   private Node statement$RuleMemoFirstNode;
   private Node statement$RuleMemoLastNode;
   private int assertStatement$RuleMemoStart = -1;
   private int assertStatement$RuleMemoEnd;
   private Node assertStatement$RuleMemoFirstNode;
   private Node assertStatement$RuleMemoLastNode;
   private int ifStatement$RuleMemoStart = -1;
   private int ifStatement$RuleMemoEnd;
   private Node ifStatement$RuleMemoFirstNode;
   private Node ifStatement$RuleMemoLastNode;
   private int forStatement$RuleMemoStart = -1;
   private int forStatement$RuleMemoEnd;
   private Node forStatement$RuleMemoFirstNode;
   private Node forStatement$RuleMemoLastNode;
   private int forIterableStatement$RuleMemoStart = -1;
   private int forIterableStatement$RuleMemoEnd;
   private Node forIterableStatement$RuleMemoFirstNode;
   private Node forIterableStatement$RuleMemoLastNode;
   private int whileStatement$RuleMemoStart = -1;
   private int whileStatement$RuleMemoEnd;
   private Node whileStatement$RuleMemoFirstNode;
   private Node whileStatement$RuleMemoLastNode;
   private int doWhileStatement$RuleMemoStart = -1;
   private int doWhileStatement$RuleMemoEnd;
   private Node doWhileStatement$RuleMemoFirstNode;
   private Node doWhileStatement$RuleMemoLastNode;
   private int tryCatchStatement$RuleMemoStart = -1;
   private int tryCatchStatement$RuleMemoEnd;
   private Node tryCatchStatement$RuleMemoFirstNode;
   private Node tryCatchStatement$RuleMemoLastNode;
   private int resource$RuleMemoStart = -1;
   private int resource$RuleMemoEnd;
   private Node resource$RuleMemoFirstNode;
   private Node resource$RuleMemoLastNode;
   private int switchStatement$RuleMemoStart = -1;
   private int switchStatement$RuleMemoEnd;
   private Node switchStatement$RuleMemoFirstNode;
   private Node switchStatement$RuleMemoLastNode;
   private int synchronizedStatement$RuleMemoStart = -1;
   private int synchronizedStatement$RuleMemoEnd;
   private Node synchronizedStatement$RuleMemoFirstNode;
   private Node synchronizedStatement$RuleMemoLastNode;
   private int returnStatement$RuleMemoStart = -1;
   private int returnStatement$RuleMemoEnd;
   private Node returnStatement$RuleMemoFirstNode;
   private Node returnStatement$RuleMemoLastNode;
   private int throwStatement$RuleMemoStart = -1;
   private int throwStatement$RuleMemoEnd;
   private Node throwStatement$RuleMemoFirstNode;
   private Node throwStatement$RuleMemoLastNode;
   private int breakStatement$RuleMemoStart = -1;
   private int breakStatement$RuleMemoEnd;
   private Node breakStatement$RuleMemoFirstNode;
   private Node breakStatement$RuleMemoLastNode;
   private int continueStatement$RuleMemoStart = -1;
   private int continueStatement$RuleMemoEnd;
   private Node continueStatement$RuleMemoFirstNode;
   private Node continueStatement$RuleMemoLastNode;
   private int identifiedStatement$RuleMemoStart = -1;
   private int identifiedStatement$RuleMemoEnd;
   private Node identifiedStatement$RuleMemoFirstNode;
   private Node identifiedStatement$RuleMemoLastNode;
   private int statementExpression$RuleMemoStart = -1;
   private int statementExpression$RuleMemoEnd;
   private Node statementExpression$RuleMemoFirstNode;
   private Node statementExpression$RuleMemoLastNode;
   private int parExpression$RuleMemoStart = -1;
   private int parExpression$RuleMemoEnd;
   private Node parExpression$RuleMemoFirstNode;
   private Node parExpression$RuleMemoLastNode;
   private int expression$RuleMemoStart = -1;
   private int expression$RuleMemoEnd;
   private Node expression$RuleMemoFirstNode;
   private Node expression$RuleMemoLastNode;
   private int forInitVariables$RuleMemoStart = -1;
   private int forInitVariables$RuleMemoEnd;
   private Node forInitVariables$RuleMemoFirstNode;
   private Node forInitVariables$RuleMemoLastNode;
   private int forInitExpressions$RuleMemoStart = -1;
   private int forInitExpressions$RuleMemoEnd;
   private Node forInitExpressions$RuleMemoFirstNode;
   private Node forInitExpressions$RuleMemoLastNode;
   private int assignmentExpression$RuleMemoStart = -1;
   private int assignmentExpression$RuleMemoEnd;
   private Node assignmentExpression$RuleMemoFirstNode;
   private Node assignmentExpression$RuleMemoLastNode;
   private int conditionalExpression$RuleMemoStart = -1;
   private int conditionalExpression$RuleMemoEnd;
   private Node conditionalExpression$RuleMemoFirstNode;
   private Node conditionalExpression$RuleMemoLastNode;
   private int ternaryExpression$RuleMemoStart = -1;
   private int ternaryExpression$RuleMemoEnd;
   private Node ternaryExpression$RuleMemoFirstNode;
   private Node ternaryExpression$RuleMemoLastNode;
   private int conditionalOrExpression$RuleMemoStart = -1;
   private int conditionalOrExpression$RuleMemoEnd;
   private Node conditionalOrExpression$RuleMemoFirstNode;
   private Node conditionalOrExpression$RuleMemoLastNode;
   private int orExpression$RuleMemoStart = -1;
   private int orExpression$RuleMemoEnd;
   private Node orExpression$RuleMemoFirstNode;
   private Node orExpression$RuleMemoLastNode;
   private int conditionalAndExpression$RuleMemoStart = -1;
   private int conditionalAndExpression$RuleMemoEnd;
   private Node conditionalAndExpression$RuleMemoFirstNode;
   private Node conditionalAndExpression$RuleMemoLastNode;
   private int andExpression$RuleMemoStart = -1;
   private int andExpression$RuleMemoEnd;
   private Node andExpression$RuleMemoFirstNode;
   private Node andExpression$RuleMemoLastNode;
   private int optionalBitOrExpression$RuleMemoStart = -1;
   private int optionalBitOrExpression$RuleMemoEnd;
   private Node optionalBitOrExpression$RuleMemoFirstNode;
   private Node optionalBitOrExpression$RuleMemoLastNode;
   private int bitOrExpression$RuleMemoStart = -1;
   private int bitOrExpression$RuleMemoEnd;
   private Node bitOrExpression$RuleMemoFirstNode;
   private Node bitOrExpression$RuleMemoLastNode;
   private int optionalBitXOrExpression$RuleMemoStart = -1;
   private int optionalBitXOrExpression$RuleMemoEnd;
   private Node optionalBitXOrExpression$RuleMemoFirstNode;
   private Node optionalBitXOrExpression$RuleMemoLastNode;
   private int bitXOrExpression$RuleMemoStart = -1;
   private int bitXOrExpression$RuleMemoEnd;
   private Node bitXOrExpression$RuleMemoFirstNode;
   private Node bitXOrExpression$RuleMemoLastNode;
   private int optionalBitAndExpression$RuleMemoStart = -1;
   private int optionalBitAndExpression$RuleMemoEnd;
   private Node optionalBitAndExpression$RuleMemoFirstNode;
   private Node optionalBitAndExpression$RuleMemoLastNode;
   private int bitAndExpression$RuleMemoStart = -1;
   private int bitAndExpression$RuleMemoEnd;
   private Node bitAndExpression$RuleMemoFirstNode;
   private Node bitAndExpression$RuleMemoLastNode;
   private int optionalRelationalExpression$RuleMemoStart = -1;
   private int optionalRelationalExpression$RuleMemoEnd;
   private Node optionalRelationalExpression$RuleMemoFirstNode;
   private Node optionalRelationalExpression$RuleMemoLastNode;
   private int relationalExpression$RuleMemoStart = -1;
   private int relationalExpression$RuleMemoEnd;
   private Node relationalExpression$RuleMemoFirstNode;
   private Node relationalExpression$RuleMemoLastNode;
   private int optionalInstanceOfExpression$RuleMemoStart = -1;
   private int optionalInstanceOfExpression$RuleMemoEnd;
   private Node optionalInstanceOfExpression$RuleMemoFirstNode;
   private Node optionalInstanceOfExpression$RuleMemoLastNode;
   private int instanceOfExpression$RuleMemoStart = -1;
   private int instanceOfExpression$RuleMemoEnd;
   private Node instanceOfExpression$RuleMemoFirstNode;
   private Node instanceOfExpression$RuleMemoLastNode;
   private int optionalAdditiveExpression$RuleMemoStart = -1;
   private int optionalAdditiveExpression$RuleMemoEnd;
   private Node optionalAdditiveExpression$RuleMemoFirstNode;
   private Node optionalAdditiveExpression$RuleMemoLastNode;
   private int referenceType$RuleMemoStart = -1;
   private int referenceType$RuleMemoEnd;
   private Node referenceType$RuleMemoFirstNode;
   private Node referenceType$RuleMemoLastNode;
   private int additiveExpression$RuleMemoStart = -1;
   private int additiveExpression$RuleMemoEnd;
   private Node additiveExpression$RuleMemoFirstNode;
   private Node additiveExpression$RuleMemoLastNode;
   private int optionalMultiplicativeExpression$RuleMemoStart = -1;
   private int optionalMultiplicativeExpression$RuleMemoEnd;
   private Node optionalMultiplicativeExpression$RuleMemoFirstNode;
   private Node optionalMultiplicativeExpression$RuleMemoLastNode;
   private int multiplicativeExpression$RuleMemoStart = -1;
   private int multiplicativeExpression$RuleMemoEnd;
   private Node multiplicativeExpression$RuleMemoFirstNode;
   private Node multiplicativeExpression$RuleMemoLastNode;
   private int optionalShiftExpression$RuleMemoStart = -1;
   private int optionalShiftExpression$RuleMemoEnd;
   private Node optionalShiftExpression$RuleMemoFirstNode;
   private Node optionalShiftExpression$RuleMemoLastNode;
   private int shiftExpression$RuleMemoStart = -1;
   private int shiftExpression$RuleMemoEnd;
   private Node shiftExpression$RuleMemoFirstNode;
   private Node shiftExpression$RuleMemoLastNode;
   private int unaryExpression$RuleMemoStart = -1;
   private int unaryExpression$RuleMemoEnd;
   private Node unaryExpression$RuleMemoFirstNode;
   private Node unaryExpression$RuleMemoLastNode;
   private int prefixedExpression$RuleMemoStart = -1;
   private int prefixedExpression$RuleMemoEnd;
   private Node prefixedExpression$RuleMemoFirstNode;
   private Node prefixedExpression$RuleMemoLastNode;
   private int castExpression$RuleMemoStart = -1;
   private int castExpression$RuleMemoEnd;
   private Node castExpression$RuleMemoFirstNode;
   private Node castExpression$RuleMemoLastNode;
   private int postfixedExpression$RuleMemoStart = -1;
   private int postfixedExpression$RuleMemoEnd;
   private Node postfixedExpression$RuleMemoFirstNode;
   private Node postfixedExpression$RuleMemoLastNode;
   private int primary$RuleMemoStart = -1;
   private int primary$RuleMemoEnd;
   private Node primary$RuleMemoFirstNode;
   private Node primary$RuleMemoLastNode;
   private int qualifiedExpression$RuleMemoStart = -1;
   private int qualifiedExpression$RuleMemoEnd;
   private Node qualifiedExpression$RuleMemoFirstNode;
   private Node qualifiedExpression$RuleMemoLastNode;
   private int arrayAccess$RuleMemoStart = -1;
   private int arrayAccess$RuleMemoEnd;
   private Node arrayAccess$RuleMemoFirstNode;
   private Node arrayAccess$RuleMemoLastNode;
   private int atomic$RuleMemoStart = -1;
   private int atomic$RuleMemoEnd;
   private Node atomic$RuleMemoFirstNode;
   private Node atomic$RuleMemoLastNode;
   private int classTypeReference$RuleMemoStart = -1;
   private int classTypeReference$RuleMemoEnd;
   private Node classTypeReference$RuleMemoFirstNode;
   private Node classTypeReference$RuleMemoLastNode;
   private int literal$RuleMemoStart = -1;
   private int literal$RuleMemoEnd;
   private Node literal$RuleMemoFirstNode;
   private Node literal$RuleMemoLastNode;
   private int basicTypeClassReference$RuleMemoStart = -1;
   private int basicTypeClassReference$RuleMemoEnd;
   private Node basicTypeClassReference$RuleMemoFirstNode;
   private Node basicTypeClassReference$RuleMemoLastNode;
   private int voidClassReference$RuleMemoStart = -1;
   private int voidClassReference$RuleMemoEnd;
   private Node voidClassReference$RuleMemoFirstNode;
   private Node voidClassReference$RuleMemoLastNode;
   private int thisMethodCall$RuleMemoStart = -1;
   private int thisMethodCall$RuleMemoEnd;
   private Node thisMethodCall$RuleMemoFirstNode;
   private Node thisMethodCall$RuleMemoLastNode;
   private int this$RuleMemoStart = -1;
   private int this$RuleMemoEnd;
   private Node this$RuleMemoFirstNode;
   private Node this$RuleMemoLastNode;
   private int super$RuleMemoStart = -1;
   private int super$RuleMemoEnd;
   private Node super$RuleMemoFirstNode;
   private Node super$RuleMemoLastNode;
   private int superMethodCall$RuleMemoStart = -1;
   private int superMethodCall$RuleMemoEnd;
   private Node superMethodCall$RuleMemoFirstNode;
   private Node superMethodCall$RuleMemoLastNode;
   private int superConstructorCall$RuleMemoStart = -1;
   private int superConstructorCall$RuleMemoEnd;
   private Node superConstructorCall$RuleMemoFirstNode;
   private Node superConstructorCall$RuleMemoLastNode;
   private int superFieldAccess$RuleMemoStart = -1;
   private int superFieldAccess$RuleMemoEnd;
   private Node superFieldAccess$RuleMemoFirstNode;
   private Node superFieldAccess$RuleMemoLastNode;
   private int new$RuleMemoStart = -1;
   private int new$RuleMemoEnd;
   private Node new$RuleMemoFirstNode;
   private Node new$RuleMemoLastNode;
   private int classCreator$RuleMemoStart = -1;
   private int classCreator$RuleMemoEnd;
   private Node classCreator$RuleMemoFirstNode;
   private Node classCreator$RuleMemoLastNode;
   private int arrayCreator$RuleMemoStart = -1;
   private int arrayCreator$RuleMemoEnd;
   private Node arrayCreator$RuleMemoFirstNode;
   private Node arrayCreator$RuleMemoLastNode;
   private int methodCall$RuleMemoStart = -1;
   private int methodCall$RuleMemoEnd;
   private Node methodCall$RuleMemoFirstNode;
   private Node methodCall$RuleMemoLastNode;
   private int dimExpr$RuleMemoStart = -1;
   private int dimExpr$RuleMemoEnd;
   private Node dimExpr$RuleMemoFirstNode;
   private Node dimExpr$RuleMemoLastNode;
   private int basicType$RuleMemoStart = -1;
   private int basicType$RuleMemoEnd;
   private Node basicType$RuleMemoFirstNode;
   private Node basicType$RuleMemoLastNode;
   private int nonWildcardTypeArguments$RuleMemoStart = -1;
   private int nonWildcardTypeArguments$RuleMemoEnd;
   private Node nonWildcardTypeArguments$RuleMemoFirstNode;
   private Node nonWildcardTypeArguments$RuleMemoLastNode;
   private int initializedArrayCreator$RuleMemoStart = -1;
   private int initializedArrayCreator$RuleMemoEnd;
   private Node initializedArrayCreator$RuleMemoFirstNode;
   private Node initializedArrayCreator$RuleMemoLastNode;
   private int emptyArrayCreator$RuleMemoStart = -1;
   private int emptyArrayCreator$RuleMemoEnd;
   private Node emptyArrayCreator$RuleMemoFirstNode;
   private Node emptyArrayCreator$RuleMemoLastNode;
   private int arrayType$RuleMemoStart = -1;
   private int arrayType$RuleMemoEnd;
   private Node arrayType$RuleMemoFirstNode;
   private Node arrayType$RuleMemoLastNode;
   private int dim$RuleMemoStart = -1;
   private int dim$RuleMemoEnd;
   private Node dim$RuleMemoFirstNode;
   private Node dim$RuleMemoLastNode;
   private int arrayInitializer$RuleMemoStart = -1;
   private int arrayInitializer$RuleMemoEnd;
   private Node arrayInitializer$RuleMemoFirstNode;
   private Node arrayInitializer$RuleMemoLastNode;
   private int typedName$RuleMemoStart = -1;
   private int typedName$RuleMemoEnd;
   private Node typedName$RuleMemoFirstNode;
   private Node typedName$RuleMemoLastNode;
   private int typeName$RuleMemoStart = -1;
   private int typeName$RuleMemoEnd;
   private Node typeName$RuleMemoFirstNode;
   private Node typeName$RuleMemoLastNode;
   private int array$RuleMemoStart = -1;
   private int array$RuleMemoEnd;
   private Node array$RuleMemoFirstNode;
   private Node array$RuleMemoLastNode;
   private int basicTypeArray$RuleMemoStart = -1;
   private int basicTypeArray$RuleMemoEnd;
   private Node basicTypeArray$RuleMemoFirstNode;
   private Node basicTypeArray$RuleMemoLastNode;
   private int qualifiedClassNameArray$RuleMemoStart = -1;
   private int qualifiedClassNameArray$RuleMemoEnd;
   private Node qualifiedClassNameArray$RuleMemoFirstNode;
   private Node qualifiedClassNameArray$RuleMemoLastNode;
   private int className$RuleMemoStart = -1;
   private int className$RuleMemoEnd;
   private Node className$RuleMemoFirstNode;
   private Node className$RuleMemoLastNode;
   private int typedClassName$RuleMemoStart = -1;
   private int typedClassName$RuleMemoEnd;
   private Node typedClassName$RuleMemoFirstNode;
   private Node typedClassName$RuleMemoLastNode;
   private int typeArgument$RuleMemoStart = -1;
   private int typeArgument$RuleMemoEnd;
   private Node typeArgument$RuleMemoFirstNode;
   private Node typeArgument$RuleMemoLastNode;
   private int queryType$RuleMemoStart = -1;
   private int queryType$RuleMemoEnd;
   private Node queryType$RuleMemoFirstNode;
   private Node queryType$RuleMemoLastNode;
   private int typeParameter$RuleMemoStart = -1;
   private int typeParameter$RuleMemoEnd;
   private Node typeParameter$RuleMemoFirstNode;
   private Node typeParameter$RuleMemoLastNode;
   private int annotationMethod$RuleMemoStart = -1;
   private int annotationMethod$RuleMemoEnd;
   private Node annotationMethod$RuleMemoFirstNode;
   private Node annotationMethod$RuleMemoLastNode;
   private int annotationsConstants$RuleMemoStart = -1;
   private int annotationsConstants$RuleMemoEnd;
   private Node annotationsConstants$RuleMemoFirstNode;
   private Node annotationsConstants$RuleMemoLastNode;
   private int elementValue$RuleMemoStart = -1;
   private int elementValue$RuleMemoEnd;
   private Node elementValue$RuleMemoFirstNode;
   private Node elementValue$RuleMemoLastNode;
   private int normalAnnotationRest$RuleMemoStart = -1;
   private int normalAnnotationRest$RuleMemoEnd;
   private Node normalAnnotationRest$RuleMemoFirstNode;
   private Node normalAnnotationRest$RuleMemoLastNode;
   private int singleElementAnnotationRest$RuleMemoStart = -1;
   private int singleElementAnnotationRest$RuleMemoEnd;
   private Node singleElementAnnotationRest$RuleMemoFirstNode;
   private Node singleElementAnnotationRest$RuleMemoLastNode;
   private int elementValuePair$RuleMemoStart = -1;
   private int elementValuePair$RuleMemoEnd;
   private Node elementValuePair$RuleMemoFirstNode;
   private Node elementValuePair$RuleMemoLastNode;
   private int elementValueArrayInitializer$RuleMemoStart = -1;
   private int elementValueArrayInitializer$RuleMemoEnd;
   private Node elementValueArrayInitializer$RuleMemoFirstNode;
   private Node elementValueArrayInitializer$RuleMemoLastNode;
   private int testNoAlpha$RuleMemoStart = -1;
   private int testNoAlpha$RuleMemoEnd;
   private Node testNoAlpha$RuleMemoFirstNode;
   private Node testNoAlpha$RuleMemoLastNode;
   private int optionalSpacing$RuleMemoStart = -1;
   private int optionalSpacing$RuleMemoEnd;
   private Node optionalSpacing$RuleMemoFirstNode;
   private Node optionalSpacing$RuleMemoLastNode;
   private int spaces$RuleMemoStart = -1;
   private int spaces$RuleMemoEnd;
   private Node spaces$RuleMemoFirstNode;
   private Node spaces$RuleMemoLastNode;
   private int blockComment$RuleMemoStart = -1;
   private int blockComment$RuleMemoEnd;
   private Node blockComment$RuleMemoFirstNode;
   private Node blockComment$RuleMemoLastNode;
   private int newLine$RuleMemoStart = -1;
   private int newLine$RuleMemoEnd;
   private Node newLine$RuleMemoFirstNode;
   private Node newLine$RuleMemoLastNode;
   private int lineComment$RuleMemoStart = -1;
   private int lineComment$RuleMemoEnd;
   private Node lineComment$RuleMemoFirstNode;
   private Node lineComment$RuleMemoLastNode;
   private int floatLiteral$RuleMemoStart = -1;
   private int floatLiteral$RuleMemoEnd;
   private Node floatLiteral$RuleMemoFirstNode;
   private Node floatLiteral$RuleMemoLastNode;
   private int longLiteral$RuleMemoStart = -1;
   private int longLiteral$RuleMemoEnd;
   private Node longLiteral$RuleMemoFirstNode;
   private Node longLiteral$RuleMemoLastNode;
   private int integerLiteral$RuleMemoStart = -1;
   private int integerLiteral$RuleMemoEnd;
   private Node integerLiteral$RuleMemoFirstNode;
   private Node integerLiteral$RuleMemoLastNode;
   private int charLiteral$RuleMemoStart = -1;
   private int charLiteral$RuleMemoEnd;
   private Node charLiteral$RuleMemoFirstNode;
   private Node charLiteral$RuleMemoLastNode;
   private int stringLiteral$RuleMemoStart = -1;
   private int stringLiteral$RuleMemoEnd;
   private Node stringLiteral$RuleMemoFirstNode;
   private Node stringLiteral$RuleMemoLastNode;
   private int true$RuleMemoStart = -1;
   private int true$RuleMemoEnd;
   private Node true$RuleMemoFirstNode;
   private Node true$RuleMemoLastNode;
   private int false$RuleMemoStart = -1;
   private int false$RuleMemoEnd;
   private Node false$RuleMemoFirstNode;
   private Node false$RuleMemoLastNode;
   private int null$RuleMemoStart = -1;
   private int null$RuleMemoEnd;
   private Node null$RuleMemoFirstNode;
   private Node null$RuleMemoLastNode;
   private int hexFloat$RuleMemoStart = -1;
   private int hexFloat$RuleMemoEnd;
   private Node hexFloat$RuleMemoFirstNode;
   private Node hexFloat$RuleMemoLastNode;
   private int decimalFloat$RuleMemoStart = -1;
   private int decimalFloat$RuleMemoEnd;
   private Node decimalFloat$RuleMemoFirstNode;
   private Node decimalFloat$RuleMemoLastNode;
   private int semicolon$RuleMemoStart = -1;
   private int semicolon$RuleMemoEnd;
   private Node semicolon$RuleMemoFirstNode;
   private Node semicolon$RuleMemoLastNode;

   private int[] newArrayInt(final int size) {
      final int[] array = new int[size];
      Arrays.fill(array, -1);
      return array;
   }

   protected boolean charMatcher(char c) {
      if (buffer.matchChar(index, c)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean ignoreCaseCharMatcher(char c) {
      if (buffer.matchIgnoreCaseChar(index, c)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean stringMatcher(String str, int strLen) {
      if (buffer.matchString(index, str, strLen)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + strLen, false, false));
            currentNode = currentNode.getSibling();
         }
         index += strLen;
         return true;
      }
      return false;
   }

   protected boolean partialStringMatcher(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + i, false, false));
         currentNode = currentNode.getSibling();
      }
      index += i;
      return true;
   }

   protected boolean ignoreCaseStringMatcher(String str, int strLen) {
      if (buffer.matchIgnoreCaseString(index, str, strLen)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + strLen, false, false));
            currentNode = currentNode.getSibling();
         }
         index += strLen;
         return true;
      }
      return false;
   }

   protected boolean partialIgnoreCaseStringMatcher(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchIgnoreCaseChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + i, false, false));
         currentNode = currentNode.getSibling();
      }
      index += i;
      return true;
   }

   protected boolean charRangeMatcher(char charIni, char charEnd) {
      if (buffer.matchCharRange(index, charIni, charEnd)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean anyCharMatcher() {
      if (buffer.getChar(index) != '\0') {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean eoi() {
      if (buffer.getChar(index) == '\0') {
         return true;
      }
      return false;
   }

   protected boolean charTest(char c) {
      return buffer.getChar(index) == c;
   }

   protected boolean ignoreCaseCharTest(char c) {
      return buffer.matchIgnoreCaseChar(index, c);
   }

   protected boolean stringTest(String str, int strLen) {
      return buffer.matchString(index, str, strLen);
   }

   protected boolean partialStringTest(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      return true;
   }

   protected boolean ignoreCaseStringTest(String str, int strLen) {
      return buffer.matchIgnoreCaseString(index, str, strLen);
   }

   protected boolean partialIgnoreCaseStringTest(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchIgnoreCaseChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      return true;
   }

   protected boolean charRangeTest(char charIni, char charEnd) {
      return buffer.matchCharRange(index, charIni, charEnd);
   }

   protected boolean anyCharTest() {
      return buffer.getChar(index) != '\0';
   }

   protected boolean eoiTest() {
      return buffer.getChar(index) == '\0';
   }
   @Override
   public Map<Rule, RuleProfile> getProfilesMap() {
      return Collections.emptyMap();
   }

   @Override
   public void setProfilesMap(Map<Rule, RuleProfile> profilesMap) {
   }

   @Override
   public Collection<ParserError> getMismatches() {
      return Collections.emptyList();
   }

   @Override
   public void setTraceParser(TraceParser tracePath) {
   }

   @Override
   public void setTrace(boolean trace) {
   }

   private Node lastChild(Node node) {
      Node child = node.getFirstChild();
      if (child != null) {
         while (child.getSibling() != null) {
            child = child.getSibling();
         }
      }
      return child;
   }

   private Node removeNode(Node parent, Node left, Node node) {
      if (node.getFirstChild() != null) {
         if (node.getSibling() != null) {
            lastChild(node).setSibling(node.getSibling());
         }
         if (left == null) {
            parent.setFirstChild(node.getFirstChild());
         } else {
            left.setSibling(node.getFirstChild());
         }
         return node.getFirstChild();
      } else if (left == null) {
         parent.setFirstChild(node.getSibling());
      } else {
         left.setSibling(node.getSibling());
      }
      return node.getSibling();
   }

   private void removeSkipedNodes(Node node) {
      if (node != null) {
         Node leftNode = null;
         Node child = node.getFirstChild();
         while (child != null) {
            if (child.isSkiped()) {
               child = removeNode(node, leftNode, child);
            } else {
               removeSkipedNodes(child);
               leftNode = child;
               child = child.getSibling();
            }
         }
      }
   }

   @Override
   public Node parse(InputBuffer inputBuffer) {
      buffer = inputBuffer;
      if (compilationUnit$Rule()) {
         removeSkipedNodes(currentNode);
         return currentNode;
      } else {
         return null;
      }
   }


   //CompilationUnit : (Spacing? PackageDeclaration? ImportDeclaration* TypeDeclaration* <EOI>)
   protected boolean compilationUnit$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Spacing? PackageDeclaration? ImportDeclaration* TypeDeclaration* <EOI>)
      // Spacing?
      // Spacing
      spacing$Rule();
      // PackageDeclaration?
      // PackageDeclaration
      packageDeclaration$Rule();
      // ImportDeclaration*
      do {
         // ImportDeclaration
         match = importDeclaration$Rule();
      } while(match);
      // TypeDeclaration*
      do {
         // TypeDeclaration
         match = typeDeclaration$Rule();
      } while(match);
      // <EOI>
      match = eoi();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.COMPILATION_UNIT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PackageDeclaration : (Annotations 'package' TestNoAlpha OptionalSpacing QualifiedIdentifier Semicolon)
   protected boolean packageDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Annotations 'package' TestNoAlpha OptionalSpacing QualifiedIdentifier Semicolon)
      // Annotations
      match = annotations$Rule();
      if (match) {
         // 'package'
         match = stringMatcher("package", 7);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // QualifiedIdentifier
                  match = qualifiedIdentifier$Rule();
                  if (match) {
                     // Semicolon
                     match = semicolon$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.PACKAGE_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ImportDeclaration : ('import' TestNoAlpha OptionalSpacing ('static' TestNoAlpha OptionalSpacing)? QualifiedIdentifier DotStar? Semicolon)
   protected boolean importDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('import' TestNoAlpha OptionalSpacing ('static' TestNoAlpha OptionalSpacing)? QualifiedIdentifier DotStar? Semicolon)
      // 'import'
      match = stringMatcher("import", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ('static' TestNoAlpha OptionalSpacing)?
               // ('static' TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // 'static'
               match = stringMatcher("static", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // QualifiedIdentifier
               match = qualifiedIdentifier$Rule();
               if (match) {
                  // DotStar?
                  // DotStar
                  dotStar$Rule();
                  // Semicolon
                  match = semicolon$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.IMPORT_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeDeclaration : (ClassDeclaration | EnumDeclaration | InterfaceDeclaration | AnnotationDeclaration | Semicolon)
   protected boolean typeDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ClassDeclaration | EnumDeclaration | InterfaceDeclaration | AnnotationDeclaration | Semicolon)
      switch(buffer.getChar(index)) {
         case ';': {
            // Semicolon
            match = semicolon$Rule();
            break;
         }
         case '@':
         case 'p':
         case 'a':
         case 's':
         case 't':
         case 'f':
         case 'v':
         case 'n': {
            // ClassDeclaration
            match = classDeclaration$Rule();
            if (! match) {
               // EnumDeclaration
               match = enumDeclaration$Rule();
               if (! match) {
                  // InterfaceDeclaration
                  match = interfaceDeclaration$Rule();
                  if (! match) {
                     // AnnotationDeclaration
                     match = annotationDeclaration$Rule();
                  }
               }
            }
            break;
         }
         case 'c': {
            // ClassDeclaration
            match = classDeclaration$Rule();
            break;
         }
         case 'e': {
            // EnumDeclaration
            match = enumDeclaration$Rule();
            break;
         }
         case 'i': {
            // InterfaceDeclaration
            match = interfaceDeclaration$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.TYPE_DECLARATION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Annotations : Annotation*
   protected boolean annotations$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (annotations$RuleMemoStart == index) {
         if (annotations$RuleMemoStart <= annotations$RuleMemoEnd) {
            index = annotations$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (annotations$RuleMemoStart == annotations$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ANNOTATIONS, annotations$RuleMemoStart, annotations$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(annotations$RuleMemoFirstNode != null) {
                  lastNode.setSibling(annotations$RuleMemoFirstNode);
                  currentNode = annotations$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // Annotation*
      do {
         // Annotation
         match = annotation$Rule();
      } while(match);
      annotations$RuleMemoStart = startIndex;
      annotations$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         annotations$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(JavaRuleType.ANNOTATIONS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         annotations$RuleMemoFirstNode = currentNode;
         annotations$RuleMemoLastNode = currentNode;
      }
      return true;
   }

   //Annotation : ('@' OptionalSpacing 'interface'! QualifiedIdentifier AnnotationParameters?)
   protected boolean annotation$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (annotation$RuleMemoStart == index) {
         if (annotation$RuleMemoStart <= annotation$RuleMemoEnd) {
            index = annotation$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (annotation$RuleMemoStart == annotation$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ANNOTATION, annotation$RuleMemoStart, annotation$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(annotation$RuleMemoFirstNode != null) {
                  lastNode.setSibling(annotation$RuleMemoFirstNode);
                  currentNode = annotation$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('@' OptionalSpacing 'interface'! QualifiedIdentifier AnnotationParameters?)
      // '@'
      match = charMatcher('@');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // 'interface'!
            // 'interface'
            match = stringTest("interface", 9);
            match = ! match;
            if (match) {
               // QualifiedIdentifier
               match = qualifiedIdentifier$Rule();
               if (match) {
                  // AnnotationParameters?
                  // AnnotationParameters
                  annotationParameters$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         annotation$RuleMemoStart = startIndex;
         annotation$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            annotation$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            annotation$RuleMemoFirstNode = currentNode;
            annotation$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         annotation$RuleMemoStart = startIndex;
         annotation$RuleMemoEnd = -1;
         annotation$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QualifiedIdentifier : (Identifier ('.' OptionalSpacing Identifier)*)
   protected boolean qualifiedIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (qualifiedIdentifier$RuleMemoStart == index) {
         if (qualifiedIdentifier$RuleMemoStart <= qualifiedIdentifier$RuleMemoEnd) {
            index = qualifiedIdentifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (qualifiedIdentifier$RuleMemoStart == qualifiedIdentifier$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.QUALIFIED_IDENTIFIER, qualifiedIdentifier$RuleMemoStart, qualifiedIdentifier$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(qualifiedIdentifier$RuleMemoFirstNode != null) {
                  lastNode.setSibling(qualifiedIdentifier$RuleMemoFirstNode);
                  currentNode = qualifiedIdentifier$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier ('.' OptionalSpacing Identifier)*)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // ('.' OptionalSpacing Identifier)*
         do {
            // ('.' OptionalSpacing Identifier)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Identifier
                  match = identifier$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         qualifiedIdentifier$RuleMemoStart = startIndex;
         qualifiedIdentifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            qualifiedIdentifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.QUALIFIED_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            qualifiedIdentifier$RuleMemoFirstNode = currentNode;
            qualifiedIdentifier$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         qualifiedIdentifier$RuleMemoStart = startIndex;
         qualifiedIdentifier$RuleMemoEnd = -1;
         qualifiedIdentifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DotStar : ('.' OptionalSpacing '*' OptionalSpacing)
   protected boolean dotStar$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('.' OptionalSpacing '*' OptionalSpacing)
      // '.'
      match = charMatcher('.');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '*'
            match = charMatcher('*');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.DOT_STAR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Modifiers : Modifier*
   protected boolean modifiers$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (modifiers$RuleMemoStart == index) {
         if (modifiers$RuleMemoStart <= modifiers$RuleMemoEnd) {
            index = modifiers$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (modifiers$RuleMemoStart == modifiers$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.MODIFIERS, modifiers$RuleMemoStart, modifiers$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(modifiers$RuleMemoFirstNode != null) {
                  lastNode.setSibling(modifiers$RuleMemoFirstNode);
                  currentNode = modifiers$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // Modifier*
      do {
         // Modifier
         match = modifier$Rule();
      } while(match);
      modifiers$RuleMemoStart = startIndex;
      modifiers$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         modifiers$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(JavaRuleType.MODIFIERS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         modifiers$RuleMemoFirstNode = currentNode;
         modifiers$RuleMemoLastNode = currentNode;
      }
      return true;
   }

   //Modifier : (Annotation | ('public' TestNoAlpha OptionalSpacing) | ('protected' TestNoAlpha OptionalSpacing) | ('private' TestNoAlpha OptionalSpacing) | ('static' TestNoAlpha OptionalSpacing) | ('abstract' TestNoAlpha OptionalSpacing) | ('final' TestNoAlpha OptionalSpacing) | ('native' TestNoAlpha OptionalSpacing) | ('synchronized' TestNoAlpha OptionalSpacing) | ('transient' TestNoAlpha OptionalSpacing) | ('volatile' TestNoAlpha OptionalSpacing) | ('strictfp' TestNoAlpha OptionalSpacing))
   protected boolean modifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Annotation | ('public' TestNoAlpha OptionalSpacing) | ('protected' TestNoAlpha OptionalSpacing) | ('private' TestNoAlpha OptionalSpacing) | ('static' TestNoAlpha OptionalSpacing) | ('abstract' TestNoAlpha OptionalSpacing) | ('final' TestNoAlpha OptionalSpacing) | ('native' TestNoAlpha OptionalSpacing) | ('synchronized' TestNoAlpha OptionalSpacing) | ('transient' TestNoAlpha OptionalSpacing) | ('volatile' TestNoAlpha OptionalSpacing) | ('strictfp' TestNoAlpha OptionalSpacing))
      // Annotation
      match = annotation$Rule();
      if (! match) {
         // ('public' TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // 'public'
         match = stringMatcher("public", 6);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         if (! match) {
            // ('protected' TestNoAlpha OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // 'protected'
            match = stringMatcher("protected", 9);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
            if (! match) {
               // ('private' TestNoAlpha OptionalSpacing)
               Node lastNode_3 = currentNode;
               int lastIndex_3 = index;
               // 'private'
               match = stringMatcher("private", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               }
               if (! match) {
                  // ('static' TestNoAlpha OptionalSpacing)
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // 'static'
                  match = stringMatcher("static", 6);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                           currentNode = lastNode_4;
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ('abstract' TestNoAlpha OptionalSpacing)
                     Node lastNode_5 = currentNode;
                     int lastIndex_5 = index;
                     // 'abstract'
                     match = stringMatcher("abstract", 8);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                              currentNode = lastNode_5;
                           }
                        } else {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ('final' TestNoAlpha OptionalSpacing)
                        Node lastNode_6 = currentNode;
                        int lastIndex_6 = index;
                        // 'final'
                        match = stringMatcher("final", 5);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                                 currentNode = lastNode_6;
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ('native' TestNoAlpha OptionalSpacing)
                           Node lastNode_7 = currentNode;
                           int lastIndex_7 = index;
                           // 'native'
                           match = stringMatcher("native", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                    currentNode = lastNode_7;
                                 }
                              } else {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ('synchronized' TestNoAlpha OptionalSpacing)
                              Node lastNode_8 = currentNode;
                              int lastIndex_8 = index;
                              // 'synchronized'
                              match = stringMatcher("synchronized", 12);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_8;
                                       lastNode_8.setSibling(null);
                                       currentNode = lastNode_8;
                                    }
                                 } else {
                                    index = lastIndex_8;
                                    lastNode_8.setSibling(null);
                                 }
                              }
                              if (! match) {
                                 // ('transient' TestNoAlpha OptionalSpacing)
                                 Node lastNode_9 = currentNode;
                                 int lastIndex_9 = index;
                                 // 'transient'
                                 match = stringMatcher("transient", 9);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_9;
                                          lastNode_9.setSibling(null);
                                          currentNode = lastNode_9;
                                       }
                                    } else {
                                       index = lastIndex_9;
                                       lastNode_9.setSibling(null);
                                    }
                                 }
                                 if (! match) {
                                    // ('volatile' TestNoAlpha OptionalSpacing)
                                    Node lastNode_10 = currentNode;
                                    int lastIndex_10 = index;
                                    // 'volatile'
                                    match = stringMatcher("volatile", 8);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_10;
                                             lastNode_10.setSibling(null);
                                             currentNode = lastNode_10;
                                          }
                                       } else {
                                          index = lastIndex_10;
                                          lastNode_10.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // ('strictfp' TestNoAlpha OptionalSpacing)
                                       Node lastNode_11 = currentNode;
                                       int lastIndex_11 = index;
                                       // 'strictfp'
                                       match = stringMatcher("strictfp", 8);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_11;
                                                lastNode_11.setSibling(null);
                                                currentNode = lastNode_11;
                                             }
                                          } else {
                                             index = lastIndex_11;
                                             lastNode_11.setSibling(null);
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.MODIFIER, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassDeclaration : (Modifiers 'class' TestNoAlpha OptionalSpacing Identifier TypeParameters? Extends? Implements? ClassBody)
   protected boolean classDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (classDeclaration$RuleMemoStart == index) {
         if (classDeclaration$RuleMemoStart <= classDeclaration$RuleMemoEnd) {
            index = classDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (classDeclaration$RuleMemoStart == classDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_DECLARATION, classDeclaration$RuleMemoStart, classDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(classDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(classDeclaration$RuleMemoFirstNode);
                  currentNode = classDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers 'class' TestNoAlpha OptionalSpacing Identifier TypeParameters? Extends? Implements? ClassBody)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // 'class'
         match = stringMatcher("class", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Identifier
                  match = identifier$Rule();
                  if (match) {
                     // TypeParameters?
                     // TypeParameters
                     typeParameters$Rule();
                     // Extends?
                     // Extends
                     extends$Rule();
                     // Implements?
                     // Implements
                     implements$Rule();
                     // ClassBody
                     match = classBody$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         classDeclaration$RuleMemoStart = startIndex;
         classDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            classDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            classDeclaration$RuleMemoFirstNode = currentNode;
            classDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         classDeclaration$RuleMemoStart = startIndex;
         classDeclaration$RuleMemoEnd = -1;
         classDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnumDeclaration : (Modifiers 'enum' TestNoAlpha OptionalSpacing Identifier Implements? EnumBody)
   protected boolean enumDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (enumDeclaration$RuleMemoStart == index) {
         if (enumDeclaration$RuleMemoStart <= enumDeclaration$RuleMemoEnd) {
            index = enumDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (enumDeclaration$RuleMemoStart == enumDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ENUM_DECLARATION, enumDeclaration$RuleMemoStart, enumDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(enumDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(enumDeclaration$RuleMemoFirstNode);
                  currentNode = enumDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers 'enum' TestNoAlpha OptionalSpacing Identifier Implements? EnumBody)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // 'enum'
         match = stringMatcher("enum", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Identifier
                  match = identifier$Rule();
                  if (match) {
                     // Implements?
                     // Implements
                     implements$Rule();
                     // EnumBody
                     match = enumBody$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         enumDeclaration$RuleMemoStart = startIndex;
         enumDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            enumDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ENUM_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            enumDeclaration$RuleMemoFirstNode = currentNode;
            enumDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         enumDeclaration$RuleMemoStart = startIndex;
         enumDeclaration$RuleMemoEnd = -1;
         enumDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InterfaceDeclaration : (Modifiers 'interface' TestNoAlpha OptionalSpacing Identifier TypeParameters? ExtendsInterfaces? InterfaceBody)
   protected boolean interfaceDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (interfaceDeclaration$RuleMemoStart == index) {
         if (interfaceDeclaration$RuleMemoStart <= interfaceDeclaration$RuleMemoEnd) {
            index = interfaceDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (interfaceDeclaration$RuleMemoStart == interfaceDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.INTERFACE_DECLARATION, interfaceDeclaration$RuleMemoStart, interfaceDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(interfaceDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(interfaceDeclaration$RuleMemoFirstNode);
                  currentNode = interfaceDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers 'interface' TestNoAlpha OptionalSpacing Identifier TypeParameters? ExtendsInterfaces? InterfaceBody)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // 'interface'
         match = stringMatcher("interface", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Identifier
                  match = identifier$Rule();
                  if (match) {
                     // TypeParameters?
                     // TypeParameters
                     typeParameters$Rule();
                     // ExtendsInterfaces?
                     // ExtendsInterfaces
                     extendsInterfaces$Rule();
                     // InterfaceBody
                     match = interfaceBody$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         interfaceDeclaration$RuleMemoStart = startIndex;
         interfaceDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            interfaceDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.INTERFACE_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            interfaceDeclaration$RuleMemoFirstNode = currentNode;
            interfaceDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         interfaceDeclaration$RuleMemoStart = startIndex;
         interfaceDeclaration$RuleMemoEnd = -1;
         interfaceDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnnotationDeclaration : (Modifiers '@' OptionalSpacing 'interface' TestNoAlpha OptionalSpacing Identifier AnnotationTypeBody)
   protected boolean annotationDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (annotationDeclaration$RuleMemoStart == index) {
         if (annotationDeclaration$RuleMemoStart <= annotationDeclaration$RuleMemoEnd) {
            index = annotationDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (annotationDeclaration$RuleMemoStart == annotationDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ANNOTATION_DECLARATION, annotationDeclaration$RuleMemoStart, annotationDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(annotationDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(annotationDeclaration$RuleMemoFirstNode);
                  currentNode = annotationDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers '@' OptionalSpacing 'interface' TestNoAlpha OptionalSpacing Identifier AnnotationTypeBody)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // '@'
         match = charMatcher('@');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // 'interface'
               match = stringMatcher("interface", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Identifier
                        match = identifier$Rule();
                        if (match) {
                           // AnnotationTypeBody
                           match = annotationTypeBody$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         annotationDeclaration$RuleMemoStart = startIndex;
         annotationDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            annotationDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATION_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            annotationDeclaration$RuleMemoFirstNode = currentNode;
            annotationDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         annotationDeclaration$RuleMemoStart = startIndex;
         annotationDeclaration$RuleMemoEnd = -1;
         annotationDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Extends : ('extends' TestNoAlpha OptionalSpacing QualifiedClassName)
   protected boolean extends$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('extends' TestNoAlpha OptionalSpacing QualifiedClassName)
      // 'extends'
      match = stringMatcher("extends", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // QualifiedClassName
               match = qualifiedClassName$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.EXTENDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QualifiedClassName : (ClassName ('.' OptionalSpacing ClassName)*)
   protected boolean qualifiedClassName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (qualifiedClassName$RuleMemoStart == index) {
         if (qualifiedClassName$RuleMemoStart <= qualifiedClassName$RuleMemoEnd) {
            index = qualifiedClassName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (qualifiedClassName$RuleMemoStart == qualifiedClassName$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.QUALIFIED_CLASS_NAME, qualifiedClassName$RuleMemoStart, qualifiedClassName$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(qualifiedClassName$RuleMemoFirstNode != null) {
                  lastNode.setSibling(qualifiedClassName$RuleMemoFirstNode);
                  currentNode = qualifiedClassName$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ClassName ('.' OptionalSpacing ClassName)*)
      // ClassName
      match = className$Rule();
      if (match) {
         // ('.' OptionalSpacing ClassName)*
         do {
            // ('.' OptionalSpacing ClassName)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ClassName
                  match = className$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         qualifiedClassName$RuleMemoStart = startIndex;
         qualifiedClassName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            qualifiedClassName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.QUALIFIED_CLASS_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            qualifiedClassName$RuleMemoFirstNode = currentNode;
            qualifiedClassName$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         qualifiedClassName$RuleMemoStart = startIndex;
         qualifiedClassName$RuleMemoEnd = -1;
         qualifiedClassName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Implements : ('implements' TestNoAlpha OptionalSpacing ClassTypeList)
   protected boolean implements$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (implements$RuleMemoStart == index) {
         if (implements$RuleMemoStart <= implements$RuleMemoEnd) {
            index = implements$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (implements$RuleMemoStart == implements$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.IMPLEMENTS, implements$RuleMemoStart, implements$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(implements$RuleMemoFirstNode != null) {
                  lastNode.setSibling(implements$RuleMemoFirstNode);
                  currentNode = implements$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('implements' TestNoAlpha OptionalSpacing ClassTypeList)
      // 'implements'
      match = stringMatcher("implements", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ClassTypeList
               match = classTypeList$Rule();
            }
         }
      }
      if (match) {
         implements$RuleMemoStart = startIndex;
         implements$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            implements$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.IMPLEMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            implements$RuleMemoFirstNode = currentNode;
            implements$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         implements$RuleMemoStart = startIndex;
         implements$RuleMemoEnd = -1;
         implements$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassTypeList : (QualifiedClassName (',' OptionalSpacing QualifiedClassName)*)
   protected boolean classTypeList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (classTypeList$RuleMemoStart == index) {
         if (classTypeList$RuleMemoStart <= classTypeList$RuleMemoEnd) {
            index = classTypeList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (classTypeList$RuleMemoStart == classTypeList$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_TYPE_LIST, classTypeList$RuleMemoStart, classTypeList$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(classTypeList$RuleMemoFirstNode != null) {
                  lastNode.setSibling(classTypeList$RuleMemoFirstNode);
                  currentNode = classTypeList$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QualifiedClassName (',' OptionalSpacing QualifiedClassName)*)
      // QualifiedClassName
      match = qualifiedClassName$Rule();
      if (match) {
         // (',' OptionalSpacing QualifiedClassName)*
         do {
            // (',' OptionalSpacing QualifiedClassName)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // QualifiedClassName
                  match = qualifiedClassName$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         classTypeList$RuleMemoStart = startIndex;
         classTypeList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            classTypeList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_TYPE_LIST, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            classTypeList$RuleMemoFirstNode = currentNode;
            classTypeList$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         classTypeList$RuleMemoStart = startIndex;
         classTypeList$RuleMemoEnd = -1;
         classTypeList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Identifier : (Keyword! IdentifierPattern OptionalSpacing)
   protected boolean identifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (identifier$RuleMemoStart == index) {
         if (identifier$RuleMemoStart <= identifier$RuleMemoEnd) {
            index = identifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (identifier$RuleMemoStart == identifier$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.IDENTIFIER, identifier$RuleMemoStart, identifier$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(identifier$RuleMemoFirstNode != null) {
                  lastNode.setSibling(identifier$RuleMemoFirstNode);
                  currentNode = identifier$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Keyword! IdentifierPattern OptionalSpacing)
      // Keyword!
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      boolean lastAtomic_1 = currentRuleIsAtomic;
      // (('abstract' | 'continue' | 'for' | 'new' | 'switch' | 'assert' | 'default' | 'goto' | 'package' | 'synchronized' | 'boolean' | 'do' | 'if' | 'private' | 'this' | 'break' | 'double' | 'implements' | 'protected' | 'throws' | 'throw' | 'byte' | 'else' | 'import' | 'public' | 'case' | 'enum' | 'instanceof' | 'return' | 'transient' | 'catch' | 'extends' | 'int' | 'short' | 'try' | 'char' | 'final' | 'interface' | 'static' | 'void' | 'class' | 'finally' | 'long' | 'strictfp' | 'volatile' | 'const' | 'float' | 'native' | 'super' | 'while') TestNoAlpha)
      // ('abstract' | 'continue' | 'for' | 'new' | 'switch' | 'assert' | 'default' | 'goto' | 'package' | 'synchronized' | 'boolean' | 'do' | 'if' | 'private' | 'this' | 'break' | 'double' | 'implements' | 'protected' | 'throws' | 'throw' | 'byte' | 'else' | 'import' | 'public' | 'case' | 'enum' | 'instanceof' | 'return' | 'transient' | 'catch' | 'extends' | 'int' | 'short' | 'try' | 'char' | 'final' | 'interface' | 'static' | 'void' | 'class' | 'finally' | 'long' | 'strictfp' | 'volatile' | 'const' | 'float' | 'native' | 'super' | 'while')
      int startIndex_2 = index;
      switch(buffer.getChar(index)) {
         case 'l': {
            ++index;
            // 'ong'
            if (match = stringTest("ong", 3)) {
               index += 3;
            }
            break;
         }
         case 'n': {
            ++index;
            // ('ative' | 'ew')
            switch(buffer.getChar(index)) {
               case 'a': {
                  ++index;
                  // 'tive'
                  if (match = stringTest("tive", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'e': {
                  ++index;
                  // 'w'
                  if (match = buffer.matchChar(index, 'w')) {
                     ++index;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'p': {
            ++index;
            // ('rotected' | 'ackage' | 'rivate' | 'ublic')
            switch(buffer.getChar(index)) {
               case 'a': {
                  ++index;
                  // 'ckage'
                  if (match = stringTest("ckage", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'r': {
                  ++index;
                  // ('otected' | 'ivate')
                  switch(buffer.getChar(index)) {
                     case 'o': {
                        ++index;
                        // 'tected'
                        if (match = stringTest("tected", 6)) {
                           index += 6;
                        }
                        break;
                     }
                     case 'i': {
                        ++index;
                        // 'vate'
                        if (match = stringTest("vate", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'u': {
                  ++index;
                  // 'blic'
                  if (match = stringTest("blic", 4)) {
                     index += 4;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'r': {
            ++index;
            // 'eturn'
            if (match = stringTest("eturn", 5)) {
               index += 5;
            }
            break;
         }
         case 's': {
            ++index;
            // ('ynchronized' | 'trictfp' | 'witch' | 'tatic' | 'hort' | 'uper')
            switch(buffer.getChar(index)) {
               case 't': {
                  ++index;
                  // ('rictfp' | 'atic')
                  switch(buffer.getChar(index)) {
                     case 'a': {
                        ++index;
                        // 'tic'
                        if (match = stringTest("tic", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 'r': {
                        ++index;
                        // 'ictfp'
                        if (match = stringTest("ictfp", 5)) {
                           index += 5;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'u': {
                  ++index;
                  // 'per'
                  if (match = stringTest("per", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'w': {
                  ++index;
                  // 'itch'
                  if (match = stringTest("itch", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'h': {
                  ++index;
                  // 'ort'
                  if (match = stringTest("ort", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'y': {
                  ++index;
                  // 'nchronized'
                  if (match = stringTest("nchronized", 10)) {
                     index += 10;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 't': {
            ++index;
            // ('ransient' | 'hrows' | 'hrow' | 'his' | 'ry')
            switch(buffer.getChar(index)) {
               case 'r': {
                  ++index;
                  // ('ansient' | 'y')
                  switch(buffer.getChar(index)) {
                     case 'a': {
                        ++index;
                        // 'nsient'
                        if (match = stringTest("nsient", 6)) {
                           index += 6;
                        }
                        break;
                     }
                     case 'y': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'h': {
                  ++index;
                  // ('rows' | 'row' | 'is')
                  switch(buffer.getChar(index)) {
                     case 'r': {
                        ++index;
                        // ('ows' | 'ow')
                        if (buffer.matchChar(index, 'o')) {
                           ++index;
                           // ('ws' | 'w')
                           if (buffer.matchChar(index, 'w')) {
                              ++index;
                              // ('s' | <EMPTY>)
                              if (buffer.matchChar(index, 's')) {
                                 ++index;
                                 // <EMPTY>
                                 match = true;
                              } else {
                                 match = true;
                              }
                           } else {
                              match = false;
                           }
                        } else {
                           match = false;
                        }
                        break;
                     }
                     case 'i': {
                        ++index;
                        // 's'
                        if (match = buffer.matchChar(index, 's')) {
                           ++index;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'v': {
            ++index;
            // ('olatile' | 'oid')
            if (buffer.matchChar(index, 'o')) {
               ++index;
               // ('latile' | 'id')
               switch(buffer.getChar(index)) {
                  case 'l': {
                     ++index;
                     // 'atile'
                     if (match = stringTest("atile", 5)) {
                        index += 5;
                     }
                     break;
                  }
                  case 'i': {
                     ++index;
                     // 'd'
                     if (match = buffer.matchChar(index, 'd')) {
                        ++index;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            } else {
               match = false;
            }
            break;
         }
         case 'w': {
            ++index;
            // 'hile'
            if (match = stringTest("hile", 4)) {
               index += 4;
            }
            break;
         }
         case 'a': {
            ++index;
            // ('bstract' | 'ssert')
            switch(buffer.getChar(index)) {
               case 'b': {
                  ++index;
                  // 'stract'
                  if (match = stringTest("stract", 6)) {
                     index += 6;
                  }
                  break;
               }
               case 's': {
                  ++index;
                  // 'sert'
                  if (match = stringTest("sert", 4)) {
                     index += 4;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'b': {
            ++index;
            // ('oolean' | 'reak' | 'yte')
            switch(buffer.getChar(index)) {
               case 'o': {
                  ++index;
                  // 'olean'
                  if (match = stringTest("olean", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'r': {
                  ++index;
                  // 'eak'
                  if (match = stringTest("eak", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'y': {
                  ++index;
                  // 'te'
                  if (match = stringTest("te", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'c': {
            ++index;
            // ('ontinue' | 'atch' | 'lass' | 'onst' | 'ase' | 'har')
            switch(buffer.getChar(index)) {
               case 'l': {
                  ++index;
                  // 'ass'
                  if (match = stringTest("ass", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'o': {
                  ++index;
                  // ('ntinue' | 'nst')
                  if (buffer.matchChar(index, 'n')) {
                     ++index;
                     // ('tinue' | 'st')
                     switch(buffer.getChar(index)) {
                        case 's': {
                           ++index;
                           // 't'
                           if (match = buffer.matchChar(index, 't')) {
                              ++index;
                           }
                           break;
                        }
                        case 't': {
                           ++index;
                           // 'inue'
                           if (match = stringTest("inue", 4)) {
                              index += 4;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'a': {
                  ++index;
                  // ('tch' | 'se')
                  switch(buffer.getChar(index)) {
                     case 's': {
                        ++index;
                        // 'e'
                        if (match = buffer.matchChar(index, 'e')) {
                           ++index;
                        }
                        break;
                     }
                     case 't': {
                        ++index;
                        // 'ch'
                        if (match = stringTest("ch", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'h': {
                  ++index;
                  // 'ar'
                  if (match = stringTest("ar", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'd': {
            ++index;
            // ('efault' | 'ouble' | 'o')
            switch(buffer.getChar(index)) {
               case 'o': {
                  ++index;
                  // ('uble' | <EMPTY>)
                  if (buffer.matchChar(index, 'u')) {
                     ++index;
                     // 'ble'
                     if (match = stringTest("ble", 3)) {
                        index += 3;
                     }
                  } else {
                     match = true;
                  }
                  break;
               }
               case 'e': {
                  ++index;
                  // 'fault'
                  if (match = stringTest("fault", 5)) {
                     index += 5;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'e': {
            ++index;
            // ('xtends' | 'lse' | 'num')
            switch(buffer.getChar(index)) {
               case 'l': {
                  ++index;
                  // 'se'
                  if (match = stringTest("se", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'n': {
                  ++index;
                  // 'um'
                  if (match = stringTest("um", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'x': {
                  ++index;
                  // 'tends'
                  if (match = stringTest("tends", 5)) {
                     index += 5;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'f': {
            ++index;
            // ('inally' | 'inal' | 'loat' | 'or')
            switch(buffer.getChar(index)) {
               case 'l': {
                  ++index;
                  // 'oat'
                  if (match = stringTest("oat", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'o': {
                  ++index;
                  // 'r'
                  if (match = buffer.matchChar(index, 'r')) {
                     ++index;
                  }
                  break;
               }
               case 'i': {
                  ++index;
                  // ('nally' | 'nal')
                  if (buffer.matchChar(index, 'n')) {
                     ++index;
                     // ('ally' | 'al')
                     if (buffer.matchChar(index, 'a')) {
                        ++index;
                        // ('lly' | 'l')
                        if (buffer.matchChar(index, 'l')) {
                           ++index;
                           // ('ly' | <EMPTY>)
                           if (buffer.matchChar(index, 'l')) {
                              ++index;
                              // 'y'
                              if (match = buffer.matchChar(index, 'y')) {
                                 ++index;
                              }
                           } else {
                              match = true;
                           }
                        } else {
                           match = false;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'g': {
            ++index;
            // 'oto'
            if (match = stringTest("oto", 3)) {
               index += 3;
            }
            break;
         }
         case 'i': {
            ++index;
            // ('mplements' | 'nstanceof' | 'nterface' | 'mport' | 'nt' | 'f')
            switch(buffer.getChar(index)) {
               case 'm': {
                  ++index;
                  // ('plements' | 'port')
                  if (buffer.matchChar(index, 'p')) {
                     ++index;
                     // ('lements' | 'ort')
                     switch(buffer.getChar(index)) {
                        case 'l': {
                           ++index;
                           // 'ements'
                           if (match = stringTest("ements", 6)) {
                              index += 6;
                           }
                           break;
                        }
                        case 'o': {
                           ++index;
                           // 'rt'
                           if (match = stringTest("rt", 2)) {
                              index += 2;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'n': {
                  ++index;
                  // ('stanceof' | 'terface' | 't')
                  switch(buffer.getChar(index)) {
                     case 's': {
                        ++index;
                        // 'tanceof'
                        if (match = stringTest("tanceof", 7)) {
                           index += 7;
                        }
                        break;
                     }
                     case 't': {
                        ++index;
                        // ('erface' | <EMPTY>)
                        if (buffer.matchChar(index, 'e')) {
                           ++index;
                           // 'rface'
                           if (match = stringTest("rface", 5)) {
                              index += 5;
                           }
                        } else {
                           match = true;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'f': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_2;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_2, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
      }
      currentRuleIsAtomic = lastAtomic_1;
      index = lastIndex_1;
      lastNode_1.setSibling(null);
      currentNode = lastNode_1;
      match = ! match;
      if (match) {
         // IdentifierPattern
         match = identifierPattern$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         identifier$RuleMemoStart = startIndex;
         identifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            identifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.IDENTIFIER, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            identifier$RuleMemoFirstNode = currentNode;
            identifier$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         identifier$RuleMemoStart = startIndex;
         identifier$RuleMemoEnd = -1;
         identifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IdentifierPattern : (('a'-'z' | 'A'-'Z' | '_' | '$') ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')*)
   protected boolean identifierPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (('a'-'z' | 'A'-'Z' | '_' | '$') ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')*)
      // ('a'-'z' | 'A'-'Z' | '_' | '$')
      // 'a'-'z'
      match = charRangeMatcher('a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = charRangeMatcher('A', 'Z');
         if (! match) {
            // '_'
            match = charMatcher('_');
            if (! match) {
               // '$'
               match = charMatcher('$');
            }
         }
      }
      if (match) {
         // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')*
         do {
            // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')
            // 'a'-'z'
            match = charRangeMatcher('a', 'z');
            if (! match) {
               // 'A'-'Z'
               match = charRangeMatcher('A', 'Z');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (! match) {
                     // '_'
                     match = charMatcher('_');
                     if (! match) {
                        // '$'
                        match = charMatcher('$');
                     }
                  }
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.IDENTIFIER, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeParameters : ('<' OptionalSpacing TypeParameter (',' OptionalSpacing TypeParameter)* '>' OptionalSpacing)
   protected boolean typeParameters$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typeParameters$RuleMemoStart == index) {
         if (typeParameters$RuleMemoStart <= typeParameters$RuleMemoEnd) {
            index = typeParameters$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (typeParameters$RuleMemoStart == typeParameters$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPE_PARAMETERS, typeParameters$RuleMemoStart, typeParameters$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(typeParameters$RuleMemoFirstNode != null) {
                  lastNode.setSibling(typeParameters$RuleMemoFirstNode);
                  currentNode = typeParameters$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('<' OptionalSpacing TypeParameter (',' OptionalSpacing TypeParameter)* '>' OptionalSpacing)
      // '<'
      match = charMatcher('<');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // TypeParameter
            match = typeParameter$Rule();
            if (match) {
               // (',' OptionalSpacing TypeParameter)*
               do {
                  // (',' OptionalSpacing TypeParameter)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // TypeParameter
                        match = typeParameter$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // '>'
               match = charMatcher('>');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         typeParameters$RuleMemoStart = startIndex;
         typeParameters$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typeParameters$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPE_PARAMETERS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typeParameters$RuleMemoFirstNode = currentNode;
            typeParameters$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         typeParameters$RuleMemoStart = startIndex;
         typeParameters$RuleMemoEnd = -1;
         typeParameters$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassBody : ('{' OptionalSpacing ClassBodyDeclaration* '}' OptionalSpacing)
   protected boolean classBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (classBody$RuleMemoStart == index) {
         if (classBody$RuleMemoStart <= classBody$RuleMemoEnd) {
            index = classBody$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (classBody$RuleMemoStart == classBody$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_BODY, classBody$RuleMemoStart, classBody$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(classBody$RuleMemoFirstNode != null) {
                  lastNode.setSibling(classBody$RuleMemoFirstNode);
                  currentNode = classBody$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('{' OptionalSpacing ClassBodyDeclaration* '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ClassBodyDeclaration*
            do {
               // ClassBodyDeclaration
               match = classBodyDeclaration$Rule();
            } while(match);
            // '}'
            match = charMatcher('}');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         classBody$RuleMemoStart = startIndex;
         classBody$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            classBody$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            classBody$RuleMemoFirstNode = currentNode;
            classBody$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         classBody$RuleMemoStart = startIndex;
         classBody$RuleMemoEnd = -1;
         classBody$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassBodyDeclaration : (Semicolon | StaticBlock | MethodDeclaration | ConstructorDeclaration | FieldsDeclarations | InterfaceDeclaration | ClassDeclaration | EnumDeclaration | AnnotationDeclaration)
   protected boolean classBodyDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (classBodyDeclaration$RuleMemoStart == index) {
         if (classBodyDeclaration$RuleMemoStart <= classBodyDeclaration$RuleMemoEnd) {
            index = classBodyDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (classBodyDeclaration$RuleMemoStart == classBodyDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_BODY_DECLARATION, classBodyDeclaration$RuleMemoStart, classBodyDeclaration$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(classBodyDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(classBodyDeclaration$RuleMemoFirstNode);
                  currentNode = classBodyDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Semicolon | StaticBlock | MethodDeclaration | ConstructorDeclaration | FieldsDeclarations | InterfaceDeclaration | ClassDeclaration | EnumDeclaration | AnnotationDeclaration)
      switch(buffer.getChar(index)) {
         case ';': {
            // Semicolon
            match = semicolon$Rule();
            break;
         }
         case '{': {
            // StaticBlock
            match = staticBlock$Rule();
            break;
         }
         case '<': {
            // MethodDeclaration
            match = methodDeclaration$Rule();
            if (! match) {
               // ConstructorDeclaration
               match = constructorDeclaration$Rule();
            }
            break;
         }
         case '@':
         case 'p':
         case 'a':
         case 't':
         case 'f':
         case 'v':
         case 'n': {
            // MethodDeclaration
            match = methodDeclaration$Rule();
            if (! match) {
               // ConstructorDeclaration
               match = constructorDeclaration$Rule();
               if (! match) {
                  // FieldsDeclarations
                  match = fieldsDeclarations$Rule();
                  if (! match) {
                     // InterfaceDeclaration
                     match = interfaceDeclaration$Rule();
                     if (! match) {
                        // ClassDeclaration
                        match = classDeclaration$Rule();
                        if (! match) {
                           // EnumDeclaration
                           match = enumDeclaration$Rule();
                           if (! match) {
                              // AnnotationDeclaration
                              match = annotationDeclaration$Rule();
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case 'd':
         case '$':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'q':
         case 'r':
         case 'u':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // MethodDeclaration
            match = methodDeclaration$Rule();
            if (! match) {
               // ConstructorDeclaration
               match = constructorDeclaration$Rule();
               if (! match) {
                  // FieldsDeclarations
                  match = fieldsDeclarations$Rule();
               }
            }
            break;
         }
         case 'c': {
            // MethodDeclaration
            match = methodDeclaration$Rule();
            if (! match) {
               // ConstructorDeclaration
               match = constructorDeclaration$Rule();
               if (! match) {
                  // FieldsDeclarations
                  match = fieldsDeclarations$Rule();
                  if (! match) {
                     // ClassDeclaration
                     match = classDeclaration$Rule();
                  }
               }
            }
            break;
         }
         case 's': {
            // StaticBlock
            match = staticBlock$Rule();
            if (! match) {
               // MethodDeclaration
               match = methodDeclaration$Rule();
               if (! match) {
                  // ConstructorDeclaration
                  match = constructorDeclaration$Rule();
                  if (! match) {
                     // FieldsDeclarations
                     match = fieldsDeclarations$Rule();
                     if (! match) {
                        // InterfaceDeclaration
                        match = interfaceDeclaration$Rule();
                        if (! match) {
                           // ClassDeclaration
                           match = classDeclaration$Rule();
                           if (! match) {
                              // EnumDeclaration
                              match = enumDeclaration$Rule();
                              if (! match) {
                                 // AnnotationDeclaration
                                 match = annotationDeclaration$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'e': {
            // MethodDeclaration
            match = methodDeclaration$Rule();
            if (! match) {
               // ConstructorDeclaration
               match = constructorDeclaration$Rule();
               if (! match) {
                  // FieldsDeclarations
                  match = fieldsDeclarations$Rule();
                  if (! match) {
                     // EnumDeclaration
                     match = enumDeclaration$Rule();
                  }
               }
            }
            break;
         }
         case 'i': {
            // MethodDeclaration
            match = methodDeclaration$Rule();
            if (! match) {
               // ConstructorDeclaration
               match = constructorDeclaration$Rule();
               if (! match) {
                  // FieldsDeclarations
                  match = fieldsDeclarations$Rule();
                  if (! match) {
                     // InterfaceDeclaration
                     match = interfaceDeclaration$Rule();
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         classBodyDeclaration$RuleMemoStart = startIndex;
         classBodyDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            classBodyDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_BODY_DECLARATION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            classBodyDeclaration$RuleMemoFirstNode = currentNode;
            classBodyDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         classBodyDeclaration$RuleMemoStart = startIndex;
         classBodyDeclaration$RuleMemoEnd = -1;
         classBodyDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StaticBlock : (('static' TestNoAlpha OptionalSpacing)? Block)
   protected boolean staticBlock$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (staticBlock$RuleMemoStart == index) {
         if (staticBlock$RuleMemoStart <= staticBlock$RuleMemoEnd) {
            index = staticBlock$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (staticBlock$RuleMemoStart == staticBlock$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.STATIC_BLOCK, staticBlock$RuleMemoStart, staticBlock$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(staticBlock$RuleMemoFirstNode != null) {
                  lastNode.setSibling(staticBlock$RuleMemoFirstNode);
                  currentNode = staticBlock$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (('static' TestNoAlpha OptionalSpacing)? Block)
      // ('static' TestNoAlpha OptionalSpacing)?
      // ('static' TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // 'static'
      match = stringMatcher("static", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // Block
      match = block$Rule();
      if (match) {
         staticBlock$RuleMemoStart = startIndex;
         staticBlock$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            staticBlock$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.STATIC_BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            staticBlock$RuleMemoFirstNode = currentNode;
            staticBlock$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         staticBlock$RuleMemoStart = startIndex;
         staticBlock$RuleMemoEnd = -1;
         staticBlock$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Block : ('{' OptionalSpacing BlockStatements '}' OptionalSpacing)
   protected boolean block$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (block$RuleMemoStart == index) {
         if (block$RuleMemoStart <= block$RuleMemoEnd) {
            index = block$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (block$RuleMemoStart == block$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BLOCK, block$RuleMemoStart, block$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(block$RuleMemoFirstNode != null) {
                  lastNode.setSibling(block$RuleMemoFirstNode);
                  currentNode = block$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('{' OptionalSpacing BlockStatements '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // BlockStatements
            match = blockStatements$Rule();
            if (match) {
               // '}'
               match = charMatcher('}');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         block$RuleMemoStart = startIndex;
         block$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            block$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            block$RuleMemoFirstNode = currentNode;
            block$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         block$RuleMemoStart = startIndex;
         block$RuleMemoEnd = -1;
         block$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MethodDeclaration : (Modifiers MethodSignature (Block | EmptyBody))
   protected boolean methodDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (methodDeclaration$RuleMemoStart == index) {
         if (methodDeclaration$RuleMemoStart <= methodDeclaration$RuleMemoEnd) {
            index = methodDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (methodDeclaration$RuleMemoStart == methodDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.METHOD_DECLARATION, methodDeclaration$RuleMemoStart, methodDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(methodDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(methodDeclaration$RuleMemoFirstNode);
                  currentNode = methodDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers MethodSignature (Block | EmptyBody))
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // MethodSignature
         match = methodSignature$Rule();
         if (match) {
            // (Block | EmptyBody)
            switch(buffer.getChar(index)) {
               case '{': {
                  // Block
                  match = block$Rule();
                  break;
               }
               case ';': {
                  // EmptyBody
                  match = emptyBody$Rule();
                  break;
               }
               default: {
                  match = false;
               }
            }
         }
      }
      if (match) {
         methodDeclaration$RuleMemoStart = startIndex;
         methodDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            methodDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.METHOD_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            methodDeclaration$RuleMemoFirstNode = currentNode;
            methodDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         methodDeclaration$RuleMemoStart = startIndex;
         methodDeclaration$RuleMemoEnd = -1;
         methodDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConstructorDeclaration : (Modifiers TypeParameters? Identifier ParametersDeclarations Throws? Block)
   protected boolean constructorDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (constructorDeclaration$RuleMemoStart == index) {
         if (constructorDeclaration$RuleMemoStart <= constructorDeclaration$RuleMemoEnd) {
            index = constructorDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (constructorDeclaration$RuleMemoStart == constructorDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONSTRUCTOR_DECLARATION, constructorDeclaration$RuleMemoStart, constructorDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(constructorDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(constructorDeclaration$RuleMemoFirstNode);
                  currentNode = constructorDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers TypeParameters? Identifier ParametersDeclarations Throws? Block)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // TypeParameters?
         // TypeParameters
         typeParameters$Rule();
         // Identifier
         match = identifier$Rule();
         if (match) {
            // ParametersDeclarations
            match = parametersDeclarations$Rule();
            if (match) {
               // Throws?
               // Throws
               throws$Rule();
               // Block
               match = block$Rule();
            }
         }
      }
      if (match) {
         constructorDeclaration$RuleMemoStart = startIndex;
         constructorDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            constructorDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONSTRUCTOR_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            constructorDeclaration$RuleMemoFirstNode = currentNode;
            constructorDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         constructorDeclaration$RuleMemoStart = startIndex;
         constructorDeclaration$RuleMemoEnd = -1;
         constructorDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FieldsDeclarations : (Modifiers Type VariableDeclarations Semicolon)
   protected boolean fieldsDeclarations$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (fieldsDeclarations$RuleMemoStart == index) {
         if (fieldsDeclarations$RuleMemoStart <= fieldsDeclarations$RuleMemoEnd) {
            index = fieldsDeclarations$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (fieldsDeclarations$RuleMemoStart == fieldsDeclarations$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FIELDS_DECLARATIONS, fieldsDeclarations$RuleMemoStart, fieldsDeclarations$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(fieldsDeclarations$RuleMemoFirstNode != null) {
                  lastNode.setSibling(fieldsDeclarations$RuleMemoFirstNode);
                  currentNode = fieldsDeclarations$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers Type VariableDeclarations Semicolon)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // VariableDeclarations
            match = variableDeclarations$Rule();
            if (match) {
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         fieldsDeclarations$RuleMemoStart = startIndex;
         fieldsDeclarations$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            fieldsDeclarations$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FIELDS_DECLARATIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            fieldsDeclarations$RuleMemoFirstNode = currentNode;
            fieldsDeclarations$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         fieldsDeclarations$RuleMemoStart = startIndex;
         fieldsDeclarations$RuleMemoEnd = -1;
         fieldsDeclarations$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Type : (Array | BasicType | QualifiedClassName)
   protected boolean type$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (type$RuleMemoStart == index) {
         if (type$RuleMemoStart <= type$RuleMemoEnd) {
            index = type$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (type$RuleMemoStart == type$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPE, type$RuleMemoStart, type$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(type$RuleMemoFirstNode != null) {
                  lastNode.setSibling(type$RuleMemoFirstNode);
                  currentNode = type$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Array | BasicType | QualifiedClassName)
      switch(buffer.getChar(index)) {
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // Array
            match = array$Rule();
            if (! match) {
               // QualifiedClassName
               match = qualifiedClassName$Rule();
            }
            break;
         }
         case 'b':
         case 'c':
         case 's':
         case 'd':
         case 'f':
         case 'i':
         case 'l': {
            // Array
            match = array$Rule();
            if (! match) {
               // BasicType
               match = basicType$Rule();
               if (! match) {
                  // QualifiedClassName
                  match = qualifiedClassName$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         type$RuleMemoStart = startIndex;
         type$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            type$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            type$RuleMemoFirstNode = currentNode;
            type$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         type$RuleMemoStart = startIndex;
         type$RuleMemoEnd = -1;
         type$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VariableDeclarations : (VariableDeclaration (',' OptionalSpacing VariableDeclaration)*)
   protected boolean variableDeclarations$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (variableDeclarations$RuleMemoStart == index) {
         if (variableDeclarations$RuleMemoStart <= variableDeclarations$RuleMemoEnd) {
            index = variableDeclarations$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (variableDeclarations$RuleMemoStart == variableDeclarations$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.VARIABLE_DECLARATIONS, variableDeclarations$RuleMemoStart, variableDeclarations$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(variableDeclarations$RuleMemoFirstNode != null) {
                  lastNode.setSibling(variableDeclarations$RuleMemoFirstNode);
                  currentNode = variableDeclarations$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (VariableDeclaration (',' OptionalSpacing VariableDeclaration)*)
      // VariableDeclaration
      match = variableDeclaration$Rule();
      if (match) {
         // (',' OptionalSpacing VariableDeclaration)*
         do {
            // (',' OptionalSpacing VariableDeclaration)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // VariableDeclaration
                  match = variableDeclaration$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         variableDeclarations$RuleMemoStart = startIndex;
         variableDeclarations$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            variableDeclarations$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.VARIABLE_DECLARATIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            variableDeclarations$RuleMemoFirstNode = currentNode;
            variableDeclarations$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         variableDeclarations$RuleMemoStart = startIndex;
         variableDeclarations$RuleMemoEnd = -1;
         variableDeclarations$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Throws : ('throws' TestNoAlpha OptionalSpacing ClassTypeList)
   protected boolean throws$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (throws$RuleMemoStart == index) {
         if (throws$RuleMemoStart <= throws$RuleMemoEnd) {
            index = throws$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (throws$RuleMemoStart == throws$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.THROWS, throws$RuleMemoStart, throws$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(throws$RuleMemoFirstNode != null) {
                  lastNode.setSibling(throws$RuleMemoFirstNode);
                  currentNode = throws$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('throws' TestNoAlpha OptionalSpacing ClassTypeList)
      // 'throws'
      match = stringMatcher("throws", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ClassTypeList
               match = classTypeList$Rule();
            }
         }
      }
      if (match) {
         throws$RuleMemoStart = startIndex;
         throws$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            throws$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.THROWS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            throws$RuleMemoFirstNode = currentNode;
            throws$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         throws$RuleMemoStart = startIndex;
         throws$RuleMemoEnd = -1;
         throws$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EmptyBody : Semicolon
   protected boolean emptyBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (emptyBody$RuleMemoStart == index) {
         if (emptyBody$RuleMemoStart <= emptyBody$RuleMemoEnd) {
            index = emptyBody$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (emptyBody$RuleMemoStart == emptyBody$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.EMPTY_BODY, emptyBody$RuleMemoStart, emptyBody$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(emptyBody$RuleMemoFirstNode != null) {
                  lastNode.setSibling(emptyBody$RuleMemoFirstNode);
                  currentNode = emptyBody$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // Semicolon
      match = semicolon$Rule();
      if (match) {
         emptyBody$RuleMemoStart = startIndex;
         emptyBody$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            emptyBody$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.EMPTY_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            emptyBody$RuleMemoFirstNode = currentNode;
            emptyBody$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         emptyBody$RuleMemoStart = startIndex;
         emptyBody$RuleMemoEnd = -1;
         emptyBody$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReturnType : (Type | ('void' TestNoAlpha OptionalSpacing))
   protected boolean returnType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Type | ('void' TestNoAlpha OptionalSpacing))
      // Type
      match = type$Rule();
      if (! match) {
         // ('void' TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // 'void'
         match = stringMatcher("void", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.RETURN_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MethodSignature : (TypeParameters? ReturnType Identifier ParametersDeclarations Dimensions Throws?)
   protected boolean methodSignature$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (methodSignature$RuleMemoStart == index) {
         if (methodSignature$RuleMemoStart <= methodSignature$RuleMemoEnd) {
            index = methodSignature$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (methodSignature$RuleMemoStart == methodSignature$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.METHOD_SIGNATURE, methodSignature$RuleMemoStart, methodSignature$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(methodSignature$RuleMemoFirstNode != null) {
                  lastNode.setSibling(methodSignature$RuleMemoFirstNode);
                  currentNode = methodSignature$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TypeParameters? ReturnType Identifier ParametersDeclarations Dimensions Throws?)
      // TypeParameters?
      // TypeParameters
      typeParameters$Rule();
      // ReturnType
      match = returnType$Rule();
      if (match) {
         // Identifier
         match = identifier$Rule();
         if (match) {
            // ParametersDeclarations
            match = parametersDeclarations$Rule();
            if (match) {
               // Dimensions
               match = dimensions$Rule();
               if (match) {
                  // Throws?
                  // Throws
                  throws$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         methodSignature$RuleMemoStart = startIndex;
         methodSignature$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            methodSignature$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.METHOD_SIGNATURE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            methodSignature$RuleMemoFirstNode = currentNode;
            methodSignature$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         methodSignature$RuleMemoStart = startIndex;
         methodSignature$RuleMemoEnd = -1;
         methodSignature$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParametersDeclarations : ('(' OptionalSpacing ParametersDeclarationList? ')' OptionalSpacing)
   protected boolean parametersDeclarations$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parametersDeclarations$RuleMemoStart == index) {
         if (parametersDeclarations$RuleMemoStart <= parametersDeclarations$RuleMemoEnd) {
            index = parametersDeclarations$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (parametersDeclarations$RuleMemoStart == parametersDeclarations$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PARAMETERS_DECLARATIONS, parametersDeclarations$RuleMemoStart, parametersDeclarations$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(parametersDeclarations$RuleMemoFirstNode != null) {
                  lastNode.setSibling(parametersDeclarations$RuleMemoFirstNode);
                  currentNode = parametersDeclarations$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing ParametersDeclarationList? ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ParametersDeclarationList?
            // ParametersDeclarationList
            parametersDeclarationList$Rule();
            // ')'
            match = charMatcher(')');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         parametersDeclarations$RuleMemoStart = startIndex;
         parametersDeclarations$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parametersDeclarations$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PARAMETERS_DECLARATIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parametersDeclarations$RuleMemoFirstNode = currentNode;
            parametersDeclarations$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         parametersDeclarations$RuleMemoStart = startIndex;
         parametersDeclarations$RuleMemoEnd = -1;
         parametersDeclarations$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Dimensions : Dim*
   protected boolean dimensions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dimensions$RuleMemoStart == index) {
         if (dimensions$RuleMemoStart <= dimensions$RuleMemoEnd) {
            index = dimensions$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (dimensions$RuleMemoStart == dimensions$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.DIMENSIONS, dimensions$RuleMemoStart, dimensions$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(dimensions$RuleMemoFirstNode != null) {
                  lastNode.setSibling(dimensions$RuleMemoFirstNode);
                  currentNode = dimensions$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // Dim*
      do {
         // Dim
         match = dim$Rule();
      } while(match);
      dimensions$RuleMemoStart = startIndex;
      dimensions$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         dimensions$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(JavaRuleType.DIMENSIONS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         dimensions$RuleMemoFirstNode = currentNode;
         dimensions$RuleMemoLastNode = currentNode;
      }
      return true;
   }

   //ExtendsInterfaces : ('extends' TestNoAlpha OptionalSpacing ClassTypeList)
   protected boolean extendsInterfaces$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('extends' TestNoAlpha OptionalSpacing ClassTypeList)
      // 'extends'
      match = stringMatcher("extends", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ClassTypeList
               match = classTypeList$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.IMPLEMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InterfaceBody : ('{' OptionalSpacing InterfaceBodyDeclaration* '}' OptionalSpacing)
   protected boolean interfaceBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('{' OptionalSpacing InterfaceBodyDeclaration* '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // InterfaceBodyDeclaration*
            do {
               // InterfaceBodyDeclaration
               match = interfaceBodyDeclaration$Rule();
            } while(match);
            // '}'
            match = charMatcher('}');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.INTERFACE_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InterfaceBodyDeclaration : (InterfaceMethod | ConstantsDeclarations | InterfaceDeclaration | AnnotationDeclaration | ClassDeclaration | EnumDeclaration | Semicolon)
   protected boolean interfaceBodyDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (InterfaceMethod | ConstantsDeclarations | InterfaceDeclaration | AnnotationDeclaration | ClassDeclaration | EnumDeclaration | Semicolon)
      switch(buffer.getChar(index)) {
         case ';': {
            // Semicolon
            match = semicolon$Rule();
            break;
         }
         case '<': {
            // InterfaceMethod
            match = interfaceMethod$Rule();
            break;
         }
         case '@':
         case 'p':
         case 'a':
         case 's':
         case 't':
         case 'f':
         case 'v':
         case 'n': {
            // InterfaceMethod
            match = interfaceMethod$Rule();
            if (! match) {
               // ConstantsDeclarations
               match = constantsDeclarations$Rule();
               if (! match) {
                  // InterfaceDeclaration
                  match = interfaceDeclaration$Rule();
                  if (! match) {
                     // AnnotationDeclaration
                     match = annotationDeclaration$Rule();
                     if (! match) {
                        // ClassDeclaration
                        match = classDeclaration$Rule();
                        if (! match) {
                           // EnumDeclaration
                           match = enumDeclaration$Rule();
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case 'd':
         case '$':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'q':
         case 'r':
         case 'u':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // InterfaceMethod
            match = interfaceMethod$Rule();
            if (! match) {
               // ConstantsDeclarations
               match = constantsDeclarations$Rule();
            }
            break;
         }
         case 'c': {
            // InterfaceMethod
            match = interfaceMethod$Rule();
            if (! match) {
               // ConstantsDeclarations
               match = constantsDeclarations$Rule();
               if (! match) {
                  // ClassDeclaration
                  match = classDeclaration$Rule();
               }
            }
            break;
         }
         case 'e': {
            // InterfaceMethod
            match = interfaceMethod$Rule();
            if (! match) {
               // ConstantsDeclarations
               match = constantsDeclarations$Rule();
               if (! match) {
                  // EnumDeclaration
                  match = enumDeclaration$Rule();
               }
            }
            break;
         }
         case 'i': {
            // InterfaceMethod
            match = interfaceMethod$Rule();
            if (! match) {
               // ConstantsDeclarations
               match = constantsDeclarations$Rule();
               if (! match) {
                  // InterfaceDeclaration
                  match = interfaceDeclaration$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.INTERFACE_BODY_DECLARATION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InterfaceMethod : (Modifiers MethodSignature Semicolon)
   protected boolean interfaceMethod$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (interfaceMethod$RuleMemoStart == index) {
         if (interfaceMethod$RuleMemoStart <= interfaceMethod$RuleMemoEnd) {
            index = interfaceMethod$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (interfaceMethod$RuleMemoStart == interfaceMethod$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.INTERFACE_METHOD, interfaceMethod$RuleMemoStart, interfaceMethod$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(interfaceMethod$RuleMemoFirstNode != null) {
                  lastNode.setSibling(interfaceMethod$RuleMemoFirstNode);
                  currentNode = interfaceMethod$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers MethodSignature Semicolon)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // MethodSignature
         match = methodSignature$Rule();
         if (match) {
            // Semicolon
            match = semicolon$Rule();
         }
      }
      if (match) {
         interfaceMethod$RuleMemoStart = startIndex;
         interfaceMethod$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            interfaceMethod$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.INTERFACE_METHOD, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            interfaceMethod$RuleMemoFirstNode = currentNode;
            interfaceMethod$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         interfaceMethod$RuleMemoStart = startIndex;
         interfaceMethod$RuleMemoEnd = -1;
         interfaceMethod$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConstantsDeclarations : (Modifiers Type ConstantsDeclarationsList Semicolon)
   protected boolean constantsDeclarations$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (constantsDeclarations$RuleMemoStart == index) {
         if (constantsDeclarations$RuleMemoStart <= constantsDeclarations$RuleMemoEnd) {
            index = constantsDeclarations$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (constantsDeclarations$RuleMemoStart == constantsDeclarations$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONSTANTS_DECLARATIONS, constantsDeclarations$RuleMemoStart, constantsDeclarations$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(constantsDeclarations$RuleMemoFirstNode != null) {
                  lastNode.setSibling(constantsDeclarations$RuleMemoFirstNode);
                  currentNode = constantsDeclarations$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers Type ConstantsDeclarationsList Semicolon)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // ConstantsDeclarationsList
            match = constantsDeclarationsList$Rule();
            if (match) {
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         constantsDeclarations$RuleMemoStart = startIndex;
         constantsDeclarations$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            constantsDeclarations$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONSTANTS_DECLARATIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            constantsDeclarations$RuleMemoFirstNode = currentNode;
            constantsDeclarations$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         constantsDeclarations$RuleMemoStart = startIndex;
         constantsDeclarations$RuleMemoEnd = -1;
         constantsDeclarations$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConstantsDeclarationsList : (ConstantDeclaration (',' OptionalSpacing ConstantDeclaration)*)
   protected boolean constantsDeclarationsList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ConstantDeclaration (',' OptionalSpacing ConstantDeclaration)*)
      // ConstantDeclaration
      match = constantDeclaration$Rule();
      if (match) {
         // (',' OptionalSpacing ConstantDeclaration)*
         do {
            // (',' OptionalSpacing ConstantDeclaration)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ConstantDeclaration
                  match = constantDeclaration$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.CONSTANTS_DECLARATIONS_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConstantDeclaration : (Identifier Dimensions '=' OptionalSpacing VariableInitializer)
   protected boolean constantDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (constantDeclaration$RuleMemoStart == index) {
         if (constantDeclaration$RuleMemoStart <= constantDeclaration$RuleMemoEnd) {
            index = constantDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (constantDeclaration$RuleMemoStart == constantDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONSTANT_DECLARATION, constantDeclaration$RuleMemoStart, constantDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(constantDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(constantDeclaration$RuleMemoFirstNode);
                  currentNode = constantDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier Dimensions '=' OptionalSpacing VariableInitializer)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // Dimensions
         match = dimensions$Rule();
         if (match) {
            // '='
            match = charMatcher('=');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // VariableInitializer
                  match = variableInitializer$Rule();
               }
            }
         }
      }
      if (match) {
         constantDeclaration$RuleMemoStart = startIndex;
         constantDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            constantDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONSTANT_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            constantDeclaration$RuleMemoFirstNode = currentNode;
            constantDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         constantDeclaration$RuleMemoStart = startIndex;
         constantDeclaration$RuleMemoEnd = -1;
         constantDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VariableInitializer : (ArrayInitializer | Expression)
   protected boolean variableInitializer$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (variableInitializer$RuleMemoStart == index) {
         if (variableInitializer$RuleMemoStart <= variableInitializer$RuleMemoEnd) {
            index = variableInitializer$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (variableInitializer$RuleMemoStart == variableInitializer$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.VARIABLE_INITIALIZER, variableInitializer$RuleMemoStart, variableInitializer$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(variableInitializer$RuleMemoFirstNode != null) {
                  lastNode.setSibling(variableInitializer$RuleMemoFirstNode);
                  currentNode = variableInitializer$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ArrayInitializer | Expression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // Expression
            match = expression$Rule();
            break;
         }
         case '{': {
            // ArrayInitializer
            match = arrayInitializer$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         variableInitializer$RuleMemoStart = startIndex;
         variableInitializer$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            variableInitializer$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.VARIABLE_INITIALIZER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            variableInitializer$RuleMemoFirstNode = currentNode;
            variableInitializer$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         variableInitializer$RuleMemoStart = startIndex;
         variableInitializer$RuleMemoEnd = -1;
         variableInitializer$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnumBody : ('{' OptionalSpacing EnumConstants? (',' OptionalSpacing)? EnumBodyDeclarations? '}' OptionalSpacing)
   protected boolean enumBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('{' OptionalSpacing EnumConstants? (',' OptionalSpacing)? EnumBodyDeclarations? '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // EnumConstants?
            // EnumConstants
            enumConstants$Rule();
            match = true;
            // (',' OptionalSpacing)?
            // (',' OptionalSpacing)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
            // EnumBodyDeclarations?
            // EnumBodyDeclarations
            enumBodyDeclarations$Rule();
            // '}'
            match = charMatcher('}');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ENUM_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnumConstants : (EnumConstant (',' OptionalSpacing EnumConstant)*)
   protected boolean enumConstants$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (EnumConstant (',' OptionalSpacing EnumConstant)*)
      // EnumConstant
      match = enumConstant$Rule();
      if (match) {
         // (',' OptionalSpacing EnumConstant)*
         do {
            // (',' OptionalSpacing EnumConstant)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // EnumConstant
                  match = enumConstant$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ENUM_CONSTANTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnumBodyDeclarations : (Semicolon ClassBodyDeclaration*)
   protected boolean enumBodyDeclarations$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Semicolon ClassBodyDeclaration*)
      // Semicolon
      match = semicolon$Rule();
      if (match) {
         // ClassBodyDeclaration*
         do {
            // ClassBodyDeclaration
            match = classBodyDeclaration$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ENUM_BODY_DECLARATIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnumConstant : (Annotations Identifier Arguments? ClassBody?)
   protected boolean enumConstant$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (enumConstant$RuleMemoStart == index) {
         if (enumConstant$RuleMemoStart <= enumConstant$RuleMemoEnd) {
            index = enumConstant$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (enumConstant$RuleMemoStart == enumConstant$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ENUM_CONSTANT, enumConstant$RuleMemoStart, enumConstant$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(enumConstant$RuleMemoFirstNode != null) {
                  lastNode.setSibling(enumConstant$RuleMemoFirstNode);
                  currentNode = enumConstant$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Annotations Identifier Arguments? ClassBody?)
      // Annotations
      match = annotations$Rule();
      if (match) {
         // Identifier
         match = identifier$Rule();
         if (match) {
            // Arguments?
            // Arguments
            arguments$Rule();
            // ClassBody?
            // ClassBody
            classBody$Rule();
            match = true;
         }
      }
      if (match) {
         enumConstant$RuleMemoStart = startIndex;
         enumConstant$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            enumConstant$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ENUM_CONSTANT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            enumConstant$RuleMemoFirstNode = currentNode;
            enumConstant$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         enumConstant$RuleMemoStart = startIndex;
         enumConstant$RuleMemoEnd = -1;
         enumConstant$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Arguments : ('(' OptionalSpacing (Expression (',' OptionalSpacing Expression)*)? ')' OptionalSpacing)
   protected boolean arguments$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (arguments$RuleMemoStart == index) {
         if (arguments$RuleMemoStart <= arguments$RuleMemoEnd) {
            index = arguments$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (arguments$RuleMemoStart == arguments$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ARGUMENTS, arguments$RuleMemoStart, arguments$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(arguments$RuleMemoFirstNode != null) {
                  lastNode.setSibling(arguments$RuleMemoFirstNode);
                  currentNode = arguments$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing (Expression (',' OptionalSpacing Expression)*)? ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // (Expression (',' OptionalSpacing Expression)*)?
            // (Expression (',' OptionalSpacing Expression)*)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // Expression
            match = expression$Rule();
            if (match) {
               // (',' OptionalSpacing Expression)*
               do {
                  // (',' OptionalSpacing Expression)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Expression
                        match = expression$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
            // ')'
            match = charMatcher(')');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         arguments$RuleMemoStart = startIndex;
         arguments$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            arguments$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ARGUMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            arguments$RuleMemoFirstNode = currentNode;
            arguments$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         arguments$RuleMemoStart = startIndex;
         arguments$RuleMemoEnd = -1;
         arguments$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Final : ('final' TestNoAlpha OptionalSpacing)
   protected boolean final$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (final$RuleMemoStart == index) {
         if (final$RuleMemoStart <= final$RuleMemoEnd) {
            index = final$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (final$RuleMemoStart == final$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FINAL, final$RuleMemoStart, final$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(final$RuleMemoFirstNode != null) {
                  lastNode.setSibling(final$RuleMemoFirstNode);
                  currentNode = final$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('final' TestNoAlpha OptionalSpacing)
      // 'final'
      match = stringMatcher("final", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         final$RuleMemoStart = startIndex;
         final$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            final$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FINAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            final$RuleMemoFirstNode = currentNode;
            final$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         final$RuleMemoStart = startIndex;
         final$RuleMemoEnd = -1;
         final$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VariableModifiers : (Final | Annotation)*
   protected boolean variableModifiers$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (variableModifiers$RuleMemoStart == index) {
         if (variableModifiers$RuleMemoStart <= variableModifiers$RuleMemoEnd) {
            index = variableModifiers$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (variableModifiers$RuleMemoStart == variableModifiers$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.VARIABLE_MODIFIERS, variableModifiers$RuleMemoStart, variableModifiers$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(variableModifiers$RuleMemoFirstNode != null) {
                  lastNode.setSibling(variableModifiers$RuleMemoFirstNode);
                  currentNode = variableModifiers$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Final | Annotation)*
      do {
         // (Final | Annotation)
         switch(buffer.getChar(index)) {
            case '@': {
               // Annotation
               match = annotation$Rule();
               break;
            }
            case 'f': {
               // Final
               match = final$Rule();
               break;
            }
            default: {
               match = false;
            }
         }
      } while(match);
      variableModifiers$RuleMemoStart = startIndex;
      variableModifiers$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         variableModifiers$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(JavaRuleType.VARIABLE_MODIFIERS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         variableModifiers$RuleMemoFirstNode = currentNode;
         variableModifiers$RuleMemoLastNode = currentNode;
      }
      return true;
   }

   //LocalVariableDeclarationStatement : (VariableModifiers Type VariableDeclarations Semicolon)
   protected boolean localVariableDeclarationStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (localVariableDeclarationStatement$RuleMemoStart == index) {
         if (localVariableDeclarationStatement$RuleMemoStart <= localVariableDeclarationStatement$RuleMemoEnd) {
            index = localVariableDeclarationStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (localVariableDeclarationStatement$RuleMemoStart == localVariableDeclarationStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.LOCAL_VARIABLE_DECLARATION_STATEMENT, localVariableDeclarationStatement$RuleMemoStart, localVariableDeclarationStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(localVariableDeclarationStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(localVariableDeclarationStatement$RuleMemoFirstNode);
                  currentNode = localVariableDeclarationStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (VariableModifiers Type VariableDeclarations Semicolon)
      // VariableModifiers
      match = variableModifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // VariableDeclarations
            match = variableDeclarations$Rule();
            if (match) {
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         localVariableDeclarationStatement$RuleMemoStart = startIndex;
         localVariableDeclarationStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            localVariableDeclarationStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.LOCAL_VARIABLE_DECLARATION_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            localVariableDeclarationStatement$RuleMemoFirstNode = currentNode;
            localVariableDeclarationStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         localVariableDeclarationStatement$RuleMemoStart = startIndex;
         localVariableDeclarationStatement$RuleMemoEnd = -1;
         localVariableDeclarationStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VariableDeclaration : (Identifier Dimensions VariableInitialization?)
   protected boolean variableDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (variableDeclaration$RuleMemoStart == index) {
         if (variableDeclaration$RuleMemoStart <= variableDeclaration$RuleMemoEnd) {
            index = variableDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (variableDeclaration$RuleMemoStart == variableDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.VARIABLE_DECLARATION, variableDeclaration$RuleMemoStart, variableDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(variableDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(variableDeclaration$RuleMemoFirstNode);
                  currentNode = variableDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier Dimensions VariableInitialization?)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // Dimensions
         match = dimensions$Rule();
         if (match) {
            // VariableInitialization?
            // VariableInitialization
            variableInitialization$Rule();
            match = true;
         }
      }
      if (match) {
         variableDeclaration$RuleMemoStart = startIndex;
         variableDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            variableDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.VARIABLE_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            variableDeclaration$RuleMemoFirstNode = currentNode;
            variableDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         variableDeclaration$RuleMemoStart = startIndex;
         variableDeclaration$RuleMemoEnd = -1;
         variableDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VariableInitialization : ('=' OptionalSpacing VariableInitializer)
   protected boolean variableInitialization$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('=' OptionalSpacing VariableInitializer)
      // '='
      match = charMatcher('=');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // VariableInitializer
            match = variableInitializer$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.VARIABLE_INITIALIZATION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParametersDeclarationList : ((ParameterDeclaration ',' OptionalSpacing ParametersDeclarationList) | ParameterDeclaration | ParameterVariableDeclaration)
   protected boolean parametersDeclarationList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parametersDeclarationList$RuleMemoStart == index) {
         if (parametersDeclarationList$RuleMemoStart <= parametersDeclarationList$RuleMemoEnd) {
            index = parametersDeclarationList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (parametersDeclarationList$RuleMemoStart == parametersDeclarationList$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PARAMETERS_DECLARATION_LIST, parametersDeclarationList$RuleMemoStart, parametersDeclarationList$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(parametersDeclarationList$RuleMemoFirstNode != null) {
                  lastNode.setSibling(parametersDeclarationList$RuleMemoFirstNode);
                  currentNode = parametersDeclarationList$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((ParameterDeclaration ',' OptionalSpacing ParametersDeclarationList) | ParameterDeclaration | ParameterVariableDeclaration)
      // (ParameterDeclaration ',' OptionalSpacing ParametersDeclarationList)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // ParameterDeclaration
      match = parameterDeclaration$Rule();
      if (match) {
         // ','
         match = charMatcher(',');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ParametersDeclarationList
               match = parametersDeclarationList$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ParameterDeclaration
         match = parameterDeclaration$Rule();
         if (! match) {
            // ParameterVariableDeclaration
            match = parameterVariableDeclaration$Rule();
         }
      }
      if (match) {
         parametersDeclarationList$RuleMemoStart = startIndex;
         parametersDeclarationList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parametersDeclarationList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PARAMETERS_DECLARATION_LIST, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parametersDeclarationList$RuleMemoFirstNode = currentNode;
            parametersDeclarationList$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         parametersDeclarationList$RuleMemoStart = startIndex;
         parametersDeclarationList$RuleMemoEnd = -1;
         parametersDeclarationList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParameterDeclaration : (VariableModifiers Type Identifier Dimensions)
   protected boolean parameterDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parameterDeclaration$RuleMemoStart == index) {
         if (parameterDeclaration$RuleMemoStart <= parameterDeclaration$RuleMemoEnd) {
            index = parameterDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (parameterDeclaration$RuleMemoStart == parameterDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PARAMETER_DECLARATION, parameterDeclaration$RuleMemoStart, parameterDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(parameterDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(parameterDeclaration$RuleMemoFirstNode);
                  currentNode = parameterDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (VariableModifiers Type Identifier Dimensions)
      // VariableModifiers
      match = variableModifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // Identifier
            match = identifier$Rule();
            if (match) {
               // Dimensions
               match = dimensions$Rule();
            }
         }
      }
      if (match) {
         parameterDeclaration$RuleMemoStart = startIndex;
         parameterDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parameterDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PARAMETER_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parameterDeclaration$RuleMemoFirstNode = currentNode;
            parameterDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         parameterDeclaration$RuleMemoStart = startIndex;
         parameterDeclaration$RuleMemoEnd = -1;
         parameterDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParameterVariableDeclaration : (VariableModifiers Type '...' OptionalSpacing Identifier Dimensions)
   protected boolean parameterVariableDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parameterVariableDeclaration$RuleMemoStart == index) {
         if (parameterVariableDeclaration$RuleMemoStart <= parameterVariableDeclaration$RuleMemoEnd) {
            index = parameterVariableDeclaration$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (parameterVariableDeclaration$RuleMemoStart == parameterVariableDeclaration$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PARAMETER_VARIABLE_DECLARATION, parameterVariableDeclaration$RuleMemoStart, parameterVariableDeclaration$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(parameterVariableDeclaration$RuleMemoFirstNode != null) {
                  lastNode.setSibling(parameterVariableDeclaration$RuleMemoFirstNode);
                  currentNode = parameterVariableDeclaration$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (VariableModifiers Type '...' OptionalSpacing Identifier Dimensions)
      // VariableModifiers
      match = variableModifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // '...'
            match = stringMatcher("...", 3);
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Identifier
                  match = identifier$Rule();
                  if (match) {
                     // Dimensions
                     match = dimensions$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         parameterVariableDeclaration$RuleMemoStart = startIndex;
         parameterVariableDeclaration$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parameterVariableDeclaration$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PARAMETER_VARIABLE_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parameterVariableDeclaration$RuleMemoFirstNode = currentNode;
            parameterVariableDeclaration$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         parameterVariableDeclaration$RuleMemoStart = startIndex;
         parameterVariableDeclaration$RuleMemoEnd = -1;
         parameterVariableDeclaration$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BlockStatements : BlockStatement*
   protected boolean blockStatements$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (blockStatements$RuleMemoStart == index) {
         if (blockStatements$RuleMemoStart <= blockStatements$RuleMemoEnd) {
            index = blockStatements$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (blockStatements$RuleMemoStart == blockStatements$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BLOCK_STATEMENTS, blockStatements$RuleMemoStart, blockStatements$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(blockStatements$RuleMemoFirstNode != null) {
                  lastNode.setSibling(blockStatements$RuleMemoFirstNode);
                  currentNode = blockStatements$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // BlockStatement*
      do {
         // BlockStatement
         match = blockStatement$Rule();
      } while(match);
      blockStatements$RuleMemoStart = startIndex;
      blockStatements$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         blockStatements$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(JavaRuleType.BLOCK_STATEMENTS, startIndex, index, true, true);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         blockStatements$RuleMemoFirstNode = currentNode;
         blockStatements$RuleMemoLastNode = currentNode;
      }
      return true;
   }

   //BlockStatement : (LocalVariableDeclarationStatement | ClassDeclaration | EnumDeclaration | Statement)
   protected boolean blockStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (LocalVariableDeclarationStatement | ClassDeclaration | EnumDeclaration | Statement)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ';':
         case '{':
         case '~': {
            // Statement
            match = statement$Rule();
            break;
         }
         case '@': {
            // LocalVariableDeclarationStatement
            match = localVariableDeclarationStatement$Rule();
            if (! match) {
               // ClassDeclaration
               match = classDeclaration$Rule();
               if (! match) {
                  // EnumDeclaration
                  match = enumDeclaration$Rule();
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case 'd':
         case '$':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'q':
         case 'r':
         case 'u':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // LocalVariableDeclarationStatement
            match = localVariableDeclarationStatement$Rule();
            if (! match) {
               // Statement
               match = statement$Rule();
            }
            break;
         }
         case 'p':
         case 'a':
         case 's':
         case 't':
         case 'f':
         case 'v':
         case 'n': {
            // LocalVariableDeclarationStatement
            match = localVariableDeclarationStatement$Rule();
            if (! match) {
               // ClassDeclaration
               match = classDeclaration$Rule();
               if (! match) {
                  // EnumDeclaration
                  match = enumDeclaration$Rule();
                  if (! match) {
                     // Statement
                     match = statement$Rule();
                  }
               }
            }
            break;
         }
         case 'c': {
            // LocalVariableDeclarationStatement
            match = localVariableDeclarationStatement$Rule();
            if (! match) {
               // ClassDeclaration
               match = classDeclaration$Rule();
               if (! match) {
                  // Statement
                  match = statement$Rule();
               }
            }
            break;
         }
         case 'e': {
            // LocalVariableDeclarationStatement
            match = localVariableDeclarationStatement$Rule();
            if (! match) {
               // EnumDeclaration
               match = enumDeclaration$Rule();
               if (! match) {
                  // Statement
                  match = statement$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.BLOCK_STATEMENT, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Statement : (Block | AssertStatement | IfStatement | ForStatement | ForIterableStatement | WhileStatement | DoWhileStatement | TryCatchStatement | SwitchStatement | SynchronizedStatement | ReturnStatement | ThrowStatement | BreakStatement | ContinueStatement | IdentifiedStatement | StatementExpression | Semicolon)
   protected boolean statement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (statement$RuleMemoStart == index) {
         if (statement$RuleMemoStart <= statement$RuleMemoEnd) {
            index = statement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (statement$RuleMemoStart == statement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.STATEMENT, statement$RuleMemoStart, statement$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(statement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(statement$RuleMemoFirstNode);
                  currentNode = statement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Block | AssertStatement | IfStatement | ForStatement | ForIterableStatement | WhileStatement | DoWhileStatement | TryCatchStatement | SwitchStatement | SynchronizedStatement | ReturnStatement | ThrowStatement | BreakStatement | ContinueStatement | IdentifiedStatement | StatementExpression | Semicolon)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case '~': {
            // StatementExpression
            match = statementExpression$Rule();
            break;
         }
         case 'r': {
            // ReturnStatement
            match = returnStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         case 's': {
            // SwitchStatement
            match = switchStatement$Rule();
            if (! match) {
               // SynchronizedStatement
               match = synchronizedStatement$Rule();
               if (! match) {
                  // IdentifiedStatement
                  match = identifiedStatement$Rule();
                  if (! match) {
                     // StatementExpression
                     match = statementExpression$Rule();
                  }
               }
            }
            break;
         }
         case 't': {
            // TryCatchStatement
            match = tryCatchStatement$Rule();
            if (! match) {
               // ThrowStatement
               match = throwStatement$Rule();
               if (! match) {
                  // IdentifiedStatement
                  match = identifiedStatement$Rule();
                  if (! match) {
                     // StatementExpression
                     match = statementExpression$Rule();
                  }
               }
            }
            break;
         }
         case 'w': {
            // WhileStatement
            match = whileStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         case ';': {
            // Semicolon
            match = semicolon$Rule();
            break;
         }
         case '{': {
            // Block
            match = block$Rule();
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'u':
         case 'v':
         case 'x':
         case 'y':
         case 'z': {
            // IdentifiedStatement
            match = identifiedStatement$Rule();
            if (! match) {
               // StatementExpression
               match = statementExpression$Rule();
            }
            break;
         }
         case 'a': {
            // AssertStatement
            match = assertStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         case 'b': {
            // BreakStatement
            match = breakStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         case 'c': {
            // ContinueStatement
            match = continueStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         case 'd': {
            // DoWhileStatement
            match = doWhileStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         case 'f': {
            // ForStatement
            match = forStatement$Rule();
            if (! match) {
               // ForIterableStatement
               match = forIterableStatement$Rule();
               if (! match) {
                  // IdentifiedStatement
                  match = identifiedStatement$Rule();
                  if (! match) {
                     // StatementExpression
                     match = statementExpression$Rule();
                  }
               }
            }
            break;
         }
         case 'i': {
            // IfStatement
            match = ifStatement$Rule();
            if (! match) {
               // IdentifiedStatement
               match = identifiedStatement$Rule();
               if (! match) {
                  // StatementExpression
                  match = statementExpression$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         statement$RuleMemoStart = startIndex;
         statement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            statement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.STATEMENT, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            statement$RuleMemoFirstNode = currentNode;
            statement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         statement$RuleMemoStart = startIndex;
         statement$RuleMemoEnd = -1;
         statement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AssertStatement : ('assert' TestNoAlpha OptionalSpacing Expression (':' OptionalSpacing Expression)? Semicolon)
   protected boolean assertStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (assertStatement$RuleMemoStart == index) {
         if (assertStatement$RuleMemoStart <= assertStatement$RuleMemoEnd) {
            index = assertStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (assertStatement$RuleMemoStart == assertStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ASSERT_STATEMENT, assertStatement$RuleMemoStart, assertStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(assertStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(assertStatement$RuleMemoFirstNode);
                  currentNode = assertStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('assert' TestNoAlpha OptionalSpacing Expression (':' OptionalSpacing Expression)? Semicolon)
      // 'assert'
      match = stringMatcher("assert", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Expression
               match = expression$Rule();
               if (match) {
                  // (':' OptionalSpacing Expression)?
                  // (':' OptionalSpacing Expression)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ':'
                  match = charMatcher(':');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Expression
                        match = expression$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
                  // Semicolon
                  match = semicolon$Rule();
               }
            }
         }
      }
      if (match) {
         assertStatement$RuleMemoStart = startIndex;
         assertStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            assertStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ASSERT_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            assertStatement$RuleMemoFirstNode = currentNode;
            assertStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         assertStatement$RuleMemoStart = startIndex;
         assertStatement$RuleMemoEnd = -1;
         assertStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IfStatement : ('if' TestNoAlpha OptionalSpacing ParExpression Statement ElseStatement?)
   protected boolean ifStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (ifStatement$RuleMemoStart == index) {
         if (ifStatement$RuleMemoStart <= ifStatement$RuleMemoEnd) {
            index = ifStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (ifStatement$RuleMemoStart == ifStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.IF_STATEMENT, ifStatement$RuleMemoStart, ifStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(ifStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(ifStatement$RuleMemoFirstNode);
                  currentNode = ifStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('if' TestNoAlpha OptionalSpacing ParExpression Statement ElseStatement?)
      // 'if'
      match = stringMatcher("if", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ParExpression
               match = parExpression$Rule();
               if (match) {
                  // Statement
                  match = statement$Rule();
                  if (match) {
                     // ElseStatement?
                     // ElseStatement
                     elseStatement$Rule();
                     match = true;
                  }
               }
            }
         }
      }
      if (match) {
         ifStatement$RuleMemoStart = startIndex;
         ifStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            ifStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.IF_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            ifStatement$RuleMemoFirstNode = currentNode;
            ifStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         ifStatement$RuleMemoStart = startIndex;
         ifStatement$RuleMemoEnd = -1;
         ifStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForStatement : ('for' TestNoAlpha OptionalSpacing '(' OptionalSpacing ForInit? Semicolon Expression? Semicolon ForUpdate? ')' OptionalSpacing Statement)
   protected boolean forStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forStatement$RuleMemoStart == index) {
         if (forStatement$RuleMemoStart <= forStatement$RuleMemoEnd) {
            index = forStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (forStatement$RuleMemoStart == forStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FOR_STATEMENT, forStatement$RuleMemoStart, forStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(forStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(forStatement$RuleMemoFirstNode);
                  currentNode = forStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('for' TestNoAlpha OptionalSpacing '(' OptionalSpacing ForInit? Semicolon Expression? Semicolon ForUpdate? ')' OptionalSpacing Statement)
      // 'for'
      match = stringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ForInit?
                     // ForInit
                     forInit$Rule();
                     // Semicolon
                     match = semicolon$Rule();
                     if (match) {
                        // Expression?
                        // Expression
                        expression$Rule();
                        // Semicolon
                        match = semicolon$Rule();
                        if (match) {
                           // ForUpdate?
                           // ForUpdate
                           forUpdate$Rule();
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // Statement
                                 match = statement$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         forStatement$RuleMemoStart = startIndex;
         forStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FOR_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forStatement$RuleMemoFirstNode = currentNode;
            forStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         forStatement$RuleMemoStart = startIndex;
         forStatement$RuleMemoEnd = -1;
         forStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForIterableStatement : ('for' TestNoAlpha OptionalSpacing '(' OptionalSpacing ParameterDeclaration ':' OptionalSpacing Expression ')' OptionalSpacing Statement)
   protected boolean forIterableStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forIterableStatement$RuleMemoStart == index) {
         if (forIterableStatement$RuleMemoStart <= forIterableStatement$RuleMemoEnd) {
            index = forIterableStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (forIterableStatement$RuleMemoStart == forIterableStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FOR_ITERABLE_STATEMENT, forIterableStatement$RuleMemoStart, forIterableStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(forIterableStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(forIterableStatement$RuleMemoFirstNode);
                  currentNode = forIterableStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('for' TestNoAlpha OptionalSpacing '(' OptionalSpacing ParameterDeclaration ':' OptionalSpacing Expression ')' OptionalSpacing Statement)
      // 'for'
      match = stringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ParameterDeclaration
                     match = parameterDeclaration$Rule();
                     if (match) {
                        // ':'
                        match = charMatcher(':');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // Expression
                              match = expression$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // Statement
                                       match = statement$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         forIterableStatement$RuleMemoStart = startIndex;
         forIterableStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forIterableStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FOR_ITERABLE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forIterableStatement$RuleMemoFirstNode = currentNode;
            forIterableStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         forIterableStatement$RuleMemoStart = startIndex;
         forIterableStatement$RuleMemoEnd = -1;
         forIterableStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WhileStatement : ('while' TestNoAlpha OptionalSpacing ParExpression Statement)
   protected boolean whileStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (whileStatement$RuleMemoStart == index) {
         if (whileStatement$RuleMemoStart <= whileStatement$RuleMemoEnd) {
            index = whileStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (whileStatement$RuleMemoStart == whileStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.WHILE_STATEMENT, whileStatement$RuleMemoStart, whileStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(whileStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(whileStatement$RuleMemoFirstNode);
                  currentNode = whileStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('while' TestNoAlpha OptionalSpacing ParExpression Statement)
      // 'while'
      match = stringMatcher("while", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ParExpression
               match = parExpression$Rule();
               if (match) {
                  // Statement
                  match = statement$Rule();
               }
            }
         }
      }
      if (match) {
         whileStatement$RuleMemoStart = startIndex;
         whileStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            whileStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.WHILE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            whileStatement$RuleMemoFirstNode = currentNode;
            whileStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         whileStatement$RuleMemoStart = startIndex;
         whileStatement$RuleMemoEnd = -1;
         whileStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DoWhileStatement : ('do' TestNoAlpha OptionalSpacing Statement 'while' TestNoAlpha OptionalSpacing ParExpression Semicolon)
   protected boolean doWhileStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (doWhileStatement$RuleMemoStart == index) {
         if (doWhileStatement$RuleMemoStart <= doWhileStatement$RuleMemoEnd) {
            index = doWhileStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (doWhileStatement$RuleMemoStart == doWhileStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.DO_WHILE_STATEMENT, doWhileStatement$RuleMemoStart, doWhileStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(doWhileStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(doWhileStatement$RuleMemoFirstNode);
                  currentNode = doWhileStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('do' TestNoAlpha OptionalSpacing Statement 'while' TestNoAlpha OptionalSpacing ParExpression Semicolon)
      // 'do'
      match = stringMatcher("do", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Statement
               match = statement$Rule();
               if (match) {
                  // 'while'
                  match = stringMatcher("while", 5);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // ParExpression
                           match = parExpression$Rule();
                           if (match) {
                              // Semicolon
                              match = semicolon$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         doWhileStatement$RuleMemoStart = startIndex;
         doWhileStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            doWhileStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.DO_WHILE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            doWhileStatement$RuleMemoFirstNode = currentNode;
            doWhileStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         doWhileStatement$RuleMemoStart = startIndex;
         doWhileStatement$RuleMemoEnd = -1;
         doWhileStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TryCatchStatement : ('try' TestNoAlpha OptionalSpacing ResourceSpecification? Block Catch* Finally?)
   protected boolean tryCatchStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tryCatchStatement$RuleMemoStart == index) {
         if (tryCatchStatement$RuleMemoStart <= tryCatchStatement$RuleMemoEnd) {
            index = tryCatchStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (tryCatchStatement$RuleMemoStart == tryCatchStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TRY_CATCH_STATEMENT, tryCatchStatement$RuleMemoStart, tryCatchStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(tryCatchStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(tryCatchStatement$RuleMemoFirstNode);
                  currentNode = tryCatchStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('try' TestNoAlpha OptionalSpacing ResourceSpecification? Block Catch* Finally?)
      // 'try'
      match = stringMatcher("try", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ResourceSpecification?
               // ResourceSpecification
               resourceSpecification$Rule();
               // Block
               match = block$Rule();
               if (match) {
                  // Catch*
                  do {
                     // Catch
                     match = catch$Rule();
                  } while(match);
                  // Finally?
                  // Finally
                  finally$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         tryCatchStatement$RuleMemoStart = startIndex;
         tryCatchStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tryCatchStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TRY_CATCH_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tryCatchStatement$RuleMemoFirstNode = currentNode;
            tryCatchStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         tryCatchStatement$RuleMemoStart = startIndex;
         tryCatchStatement$RuleMemoEnd = -1;
         tryCatchStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ResourceSpecification : ('(' OptionalSpacing Resources (';' OptionalSpacing)? ')' OptionalSpacing)
   protected boolean resourceSpecification$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing Resources (';' OptionalSpacing)? ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Resources
            match = resources$Rule();
            if (match) {
               // (';' OptionalSpacing)?
               // (';' OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // ';'
               match = charMatcher(';');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               }
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.RESOURCE_SPECIFICATION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Resources : (Resource (';' OptionalSpacing Resource)*)
   protected boolean resources$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Resource (';' OptionalSpacing Resource)*)
      // Resource
      match = resource$Rule();
      if (match) {
         // (';' OptionalSpacing Resource)*
         do {
            // (';' OptionalSpacing Resource)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ';'
            match = charMatcher(';');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Resource
                  match = resource$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.RESOURCES, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Resource : (VariableModifiers QualifiedClassName Identifier Dimensions '=' OptionalSpacing Expression)
   protected boolean resource$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (resource$RuleMemoStart == index) {
         if (resource$RuleMemoStart <= resource$RuleMemoEnd) {
            index = resource$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (resource$RuleMemoStart == resource$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.RESOURCE, resource$RuleMemoStart, resource$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(resource$RuleMemoFirstNode != null) {
                  lastNode.setSibling(resource$RuleMemoFirstNode);
                  currentNode = resource$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (VariableModifiers QualifiedClassName Identifier Dimensions '=' OptionalSpacing Expression)
      // VariableModifiers
      match = variableModifiers$Rule();
      if (match) {
         // QualifiedClassName
         match = qualifiedClassName$Rule();
         if (match) {
            // Identifier
            match = identifier$Rule();
            if (match) {
               // Dimensions
               match = dimensions$Rule();
               if (match) {
                  // '='
                  match = charMatcher('=');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Expression
                        match = expression$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         resource$RuleMemoStart = startIndex;
         resource$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            resource$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.RESOURCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            resource$RuleMemoFirstNode = currentNode;
            resource$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         resource$RuleMemoStart = startIndex;
         resource$RuleMemoEnd = -1;
         resource$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SwitchStatement : ('switch' TestNoAlpha OptionalSpacing ParExpression '{' OptionalSpacing SwitchBlockStatementGroups '}' OptionalSpacing)
   protected boolean switchStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (switchStatement$RuleMemoStart == index) {
         if (switchStatement$RuleMemoStart <= switchStatement$RuleMemoEnd) {
            index = switchStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (switchStatement$RuleMemoStart == switchStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SWITCH_STATEMENT, switchStatement$RuleMemoStart, switchStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(switchStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(switchStatement$RuleMemoFirstNode);
                  currentNode = switchStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('switch' TestNoAlpha OptionalSpacing ParExpression '{' OptionalSpacing SwitchBlockStatementGroups '}' OptionalSpacing)
      // 'switch'
      match = stringMatcher("switch", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ParExpression
               match = parExpression$Rule();
               if (match) {
                  // '{'
                  match = charMatcher('{');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SwitchBlockStatementGroups
                        match = switchBlockStatementGroups$Rule();
                        if (match) {
                           // '}'
                           match = charMatcher('}');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         switchStatement$RuleMemoStart = startIndex;
         switchStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            switchStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SWITCH_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            switchStatement$RuleMemoFirstNode = currentNode;
            switchStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         switchStatement$RuleMemoStart = startIndex;
         switchStatement$RuleMemoEnd = -1;
         switchStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SynchronizedStatement : ('synchronized' TestNoAlpha OptionalSpacing ParExpression Block)
   protected boolean synchronizedStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (synchronizedStatement$RuleMemoStart == index) {
         if (synchronizedStatement$RuleMemoStart <= synchronizedStatement$RuleMemoEnd) {
            index = synchronizedStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (synchronizedStatement$RuleMemoStart == synchronizedStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SYNCHRONIZED_STATEMENT, synchronizedStatement$RuleMemoStart, synchronizedStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(synchronizedStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(synchronizedStatement$RuleMemoFirstNode);
                  currentNode = synchronizedStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('synchronized' TestNoAlpha OptionalSpacing ParExpression Block)
      // 'synchronized'
      match = stringMatcher("synchronized", 12);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ParExpression
               match = parExpression$Rule();
               if (match) {
                  // Block
                  match = block$Rule();
               }
            }
         }
      }
      if (match) {
         synchronizedStatement$RuleMemoStart = startIndex;
         synchronizedStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            synchronizedStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SYNCHRONIZED_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            synchronizedStatement$RuleMemoFirstNode = currentNode;
            synchronizedStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         synchronizedStatement$RuleMemoStart = startIndex;
         synchronizedStatement$RuleMemoEnd = -1;
         synchronizedStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReturnStatement : ('return' TestNoAlpha OptionalSpacing Expression? Semicolon)
   protected boolean returnStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (returnStatement$RuleMemoStart == index) {
         if (returnStatement$RuleMemoStart <= returnStatement$RuleMemoEnd) {
            index = returnStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (returnStatement$RuleMemoStart == returnStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.RETURN_STATEMENT, returnStatement$RuleMemoStart, returnStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(returnStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(returnStatement$RuleMemoFirstNode);
                  currentNode = returnStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('return' TestNoAlpha OptionalSpacing Expression? Semicolon)
      // 'return'
      match = stringMatcher("return", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Expression?
               // Expression
               expression$Rule();
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         returnStatement$RuleMemoStart = startIndex;
         returnStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            returnStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.RETURN_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            returnStatement$RuleMemoFirstNode = currentNode;
            returnStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         returnStatement$RuleMemoStart = startIndex;
         returnStatement$RuleMemoEnd = -1;
         returnStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ThrowStatement : ('throw' TestNoAlpha OptionalSpacing Expression Semicolon)
   protected boolean throwStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (throwStatement$RuleMemoStart == index) {
         if (throwStatement$RuleMemoStart <= throwStatement$RuleMemoEnd) {
            index = throwStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (throwStatement$RuleMemoStart == throwStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.THROW_STATEMENT, throwStatement$RuleMemoStart, throwStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(throwStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(throwStatement$RuleMemoFirstNode);
                  currentNode = throwStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('throw' TestNoAlpha OptionalSpacing Expression Semicolon)
      // 'throw'
      match = stringMatcher("throw", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Expression
               match = expression$Rule();
               if (match) {
                  // Semicolon
                  match = semicolon$Rule();
               }
            }
         }
      }
      if (match) {
         throwStatement$RuleMemoStart = startIndex;
         throwStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            throwStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.THROW_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            throwStatement$RuleMemoFirstNode = currentNode;
            throwStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         throwStatement$RuleMemoStart = startIndex;
         throwStatement$RuleMemoEnd = -1;
         throwStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BreakStatement : ('break' TestNoAlpha OptionalSpacing Identifier? Semicolon)
   protected boolean breakStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (breakStatement$RuleMemoStart == index) {
         if (breakStatement$RuleMemoStart <= breakStatement$RuleMemoEnd) {
            index = breakStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (breakStatement$RuleMemoStart == breakStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BREAK_STATEMENT, breakStatement$RuleMemoStart, breakStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(breakStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(breakStatement$RuleMemoFirstNode);
                  currentNode = breakStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('break' TestNoAlpha OptionalSpacing Identifier? Semicolon)
      // 'break'
      match = stringMatcher("break", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Identifier?
               // Identifier
               identifier$Rule();
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         breakStatement$RuleMemoStart = startIndex;
         breakStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            breakStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BREAK_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            breakStatement$RuleMemoFirstNode = currentNode;
            breakStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         breakStatement$RuleMemoStart = startIndex;
         breakStatement$RuleMemoEnd = -1;
         breakStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ContinueStatement : ('continue' TestNoAlpha OptionalSpacing Identifier? Semicolon)
   protected boolean continueStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (continueStatement$RuleMemoStart == index) {
         if (continueStatement$RuleMemoStart <= continueStatement$RuleMemoEnd) {
            index = continueStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (continueStatement$RuleMemoStart == continueStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONTINUE_STATEMENT, continueStatement$RuleMemoStart, continueStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(continueStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(continueStatement$RuleMemoFirstNode);
                  currentNode = continueStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('continue' TestNoAlpha OptionalSpacing Identifier? Semicolon)
      // 'continue'
      match = stringMatcher("continue", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Identifier?
               // Identifier
               identifier$Rule();
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         continueStatement$RuleMemoStart = startIndex;
         continueStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            continueStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONTINUE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            continueStatement$RuleMemoFirstNode = currentNode;
            continueStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         continueStatement$RuleMemoStart = startIndex;
         continueStatement$RuleMemoEnd = -1;
         continueStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IdentifiedStatement : (Identifier ':' OptionalSpacing Statement)
   protected boolean identifiedStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (identifiedStatement$RuleMemoStart == index) {
         if (identifiedStatement$RuleMemoStart <= identifiedStatement$RuleMemoEnd) {
            index = identifiedStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (identifiedStatement$RuleMemoStart == identifiedStatement$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.IDENTIFIED_STATEMENT, identifiedStatement$RuleMemoStart, identifiedStatement$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(identifiedStatement$RuleMemoFirstNode != null) {
                  lastNode.setSibling(identifiedStatement$RuleMemoFirstNode);
                  currentNode = identifiedStatement$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier ':' OptionalSpacing Statement)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // ':'
         match = charMatcher(':');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Statement
               match = statement$Rule();
            }
         }
      }
      if (match) {
         identifiedStatement$RuleMemoStart = startIndex;
         identifiedStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            identifiedStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.IDENTIFIED_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            identifiedStatement$RuleMemoFirstNode = currentNode;
            identifiedStatement$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         identifiedStatement$RuleMemoStart = startIndex;
         identifiedStatement$RuleMemoEnd = -1;
         identifiedStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StatementExpression : (Expression Semicolon)
   protected boolean statementExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (statementExpression$RuleMemoStart == index) {
         if (statementExpression$RuleMemoStart <= statementExpression$RuleMemoEnd) {
            index = statementExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (statementExpression$RuleMemoStart == statementExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.STATEMENT_EXPRESSION, statementExpression$RuleMemoStart, statementExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(statementExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(statementExpression$RuleMemoFirstNode);
                  currentNode = statementExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Expression Semicolon)
      // Expression
      match = expression$Rule();
      if (match) {
         // Semicolon
         match = semicolon$Rule();
      }
      if (match) {
         statementExpression$RuleMemoStart = startIndex;
         statementExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            statementExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.STATEMENT_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            statementExpression$RuleMemoFirstNode = currentNode;
            statementExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         statementExpression$RuleMemoStart = startIndex;
         statementExpression$RuleMemoEnd = -1;
         statementExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElseStatement : ('else' TestNoAlpha OptionalSpacing Statement)
   protected boolean elseStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('else' TestNoAlpha OptionalSpacing Statement)
      // 'else'
      match = stringMatcher("else", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Statement
               match = statement$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ELSE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParExpression : ('(' OptionalSpacing Expression ')' OptionalSpacing)
   protected boolean parExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parExpression$RuleMemoStart == index) {
         if (parExpression$RuleMemoStart <= parExpression$RuleMemoEnd) {
            index = parExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (parExpression$RuleMemoStart == parExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PAR_EXPRESSION, parExpression$RuleMemoStart, parExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(parExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(parExpression$RuleMemoFirstNode);
                  currentNode = parExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing Expression ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Expression
            match = expression$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         parExpression$RuleMemoStart = startIndex;
         parExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PAR_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parExpression$RuleMemoFirstNode = currentNode;
            parExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         parExpression$RuleMemoStart = startIndex;
         parExpression$RuleMemoEnd = -1;
         parExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Expression : (AssignmentExpression | ConditionalExpression)
   protected boolean expression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (expression$RuleMemoStart == index) {
         if (expression$RuleMemoStart <= expression$RuleMemoEnd) {
            index = expression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (expression$RuleMemoStart == expression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.EXPRESSION, expression$RuleMemoStart, expression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(expression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(expression$RuleMemoFirstNode);
                  currentNode = expression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (AssignmentExpression | ConditionalExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // AssignmentExpression
            match = assignmentExpression$Rule();
            if (! match) {
               // ConditionalExpression
               match = conditionalExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         expression$RuleMemoStart = startIndex;
         expression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            expression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            expression$RuleMemoFirstNode = currentNode;
            expression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         expression$RuleMemoStart = startIndex;
         expression$RuleMemoEnd = -1;
         expression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForInit : (ForInitVariables | ForInitExpressions)
   protected boolean forInit$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ForInitVariables | ForInitExpressions)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case '~': {
            // ForInitExpressions
            match = forInitExpressions$Rule();
            break;
         }
         case '@': {
            // ForInitVariables
            match = forInitVariables$Rule();
            break;
         }
         case '$':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ForInitVariables
            match = forInitVariables$Rule();
            if (! match) {
               // ForInitExpressions
               match = forInitExpressions$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.FOR_INIT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForUpdate : (Expression (',' OptionalSpacing Expression)*)
   protected boolean forUpdate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Expression (',' OptionalSpacing Expression)*)
      // Expression
      match = expression$Rule();
      if (match) {
         // (',' OptionalSpacing Expression)*
         do {
            // (',' OptionalSpacing Expression)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Expression
                  match = expression$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.FOR_UPDATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CatchType : (QualifiedIdentifier ('|' OptionalSpacing QualifiedIdentifier)*)
   protected boolean catchType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (QualifiedIdentifier ('|' OptionalSpacing QualifiedIdentifier)*)
      // QualifiedIdentifier
      match = qualifiedIdentifier$Rule();
      if (match) {
         // ('|' OptionalSpacing QualifiedIdentifier)*
         do {
            // ('|' OptionalSpacing QualifiedIdentifier)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '|'
            match = charMatcher('|');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // QualifiedIdentifier
                  match = qualifiedIdentifier$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.CATCH_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CatchParameter : (VariableModifiers CatchType Identifier)
   protected boolean catchParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (VariableModifiers CatchType Identifier)
      // VariableModifiers
      match = variableModifiers$Rule();
      if (match) {
         // CatchType
         match = catchType$Rule();
         if (match) {
            // Identifier
            match = identifier$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.CATCH_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Catch : ('catch' TestNoAlpha OptionalSpacing '(' OptionalSpacing CatchParameter ')' OptionalSpacing Block)
   protected boolean catch$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('catch' TestNoAlpha OptionalSpacing '(' OptionalSpacing CatchParameter ')' OptionalSpacing Block)
      // 'catch'
      match = stringMatcher("catch", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // CatchParameter
                     match = catchParameter$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // Block
                              match = block$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.CATCH, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Finally : ('finally' TestNoAlpha OptionalSpacing Block)
   protected boolean finally$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('finally' TestNoAlpha OptionalSpacing Block)
      // 'finally'
      match = stringMatcher("finally", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Block
               match = block$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.FINALLY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SwitchBlockStatementGroups : SwitchBlockStatementGroup*
   protected boolean switchBlockStatementGroups$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // SwitchBlockStatementGroup*
      do {
         // SwitchBlockStatementGroup
         match = switchBlockStatementGroup$Rule();
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(JavaRuleType.SWITCH_BLOCK_STATEMENT_GROUPS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //SwitchBlockStatementGroup : (SwitchLabel BlockStatements)
   protected boolean switchBlockStatementGroup$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SwitchLabel BlockStatements)
      // SwitchLabel
      match = switchLabel$Rule();
      if (match) {
         // BlockStatements
         match = blockStatements$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.SWITCH_BLOCK_STATEMENT_GROUP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SwitchLabel : (('case' TestNoAlpha OptionalSpacing Expression ':' OptionalSpacing) | ('case' TestNoAlpha OptionalSpacing EnumConstantName ':' OptionalSpacing) | ('default' TestNoAlpha OptionalSpacing ':' OptionalSpacing))
   protected boolean switchLabel$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (('case' TestNoAlpha OptionalSpacing Expression ':' OptionalSpacing) | ('case' TestNoAlpha OptionalSpacing EnumConstantName ':' OptionalSpacing) | ('default' TestNoAlpha OptionalSpacing ':' OptionalSpacing))
      // ('case' TestNoAlpha OptionalSpacing Expression ':' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // 'case'
      match = stringMatcher("case", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Expression
               match = expression$Rule();
               if (match) {
                  // ':'
                  match = charMatcher(':');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ('case' TestNoAlpha OptionalSpacing EnumConstantName ':' OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // 'case'
         match = stringMatcher("case", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // EnumConstantName
                  match = enumConstantName$Rule();
                  if (match) {
                     // ':'
                     match = charMatcher(':');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ('default' TestNoAlpha OptionalSpacing ':' OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // 'default'
            match = stringMatcher("default", 7);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ':'
                     match = charMatcher(':');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.SWITCH_LABEL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnumConstantName : Identifier
   protected boolean enumConstantName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // Identifier
      match = identifier$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ENUM_CONSTANT_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForInitVariables : (VariableModifiers Type VariableDeclarations)
   protected boolean forInitVariables$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forInitVariables$RuleMemoStart == index) {
         if (forInitVariables$RuleMemoStart <= forInitVariables$RuleMemoEnd) {
            index = forInitVariables$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (forInitVariables$RuleMemoStart == forInitVariables$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FOR_INIT_VARIABLES, forInitVariables$RuleMemoStart, forInitVariables$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(forInitVariables$RuleMemoFirstNode != null) {
                  lastNode.setSibling(forInitVariables$RuleMemoFirstNode);
                  currentNode = forInitVariables$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (VariableModifiers Type VariableDeclarations)
      // VariableModifiers
      match = variableModifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // VariableDeclarations
            match = variableDeclarations$Rule();
         }
      }
      if (match) {
         forInitVariables$RuleMemoStart = startIndex;
         forInitVariables$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forInitVariables$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FOR_INIT_VARIABLES, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forInitVariables$RuleMemoFirstNode = currentNode;
            forInitVariables$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         forInitVariables$RuleMemoStart = startIndex;
         forInitVariables$RuleMemoEnd = -1;
         forInitVariables$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForInitExpressions : (Expression (',' OptionalSpacing Expression)*)
   protected boolean forInitExpressions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forInitExpressions$RuleMemoStart == index) {
         if (forInitExpressions$RuleMemoStart <= forInitExpressions$RuleMemoEnd) {
            index = forInitExpressions$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (forInitExpressions$RuleMemoStart == forInitExpressions$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FOR_INIT_EXPRESSIONS, forInitExpressions$RuleMemoStart, forInitExpressions$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(forInitExpressions$RuleMemoFirstNode != null) {
                  lastNode.setSibling(forInitExpressions$RuleMemoFirstNode);
                  currentNode = forInitExpressions$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Expression (',' OptionalSpacing Expression)*)
      // Expression
      match = expression$Rule();
      if (match) {
         // (',' OptionalSpacing Expression)*
         do {
            // (',' OptionalSpacing Expression)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Expression
                  match = expression$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         forInitExpressions$RuleMemoStart = startIndex;
         forInitExpressions$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forInitExpressions$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FOR_INIT_EXPRESSIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forInitExpressions$RuleMemoFirstNode = currentNode;
            forInitExpressions$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         forInitExpressions$RuleMemoStart = startIndex;
         forInitExpressions$RuleMemoEnd = -1;
         forInitExpressions$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AssignmentExpression : (ConditionalExpression AssignmentOperator Expression)
   protected boolean assignmentExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (assignmentExpression$RuleMemoStart == index) {
         if (assignmentExpression$RuleMemoStart <= assignmentExpression$RuleMemoEnd) {
            index = assignmentExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (assignmentExpression$RuleMemoStart == assignmentExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ASSIGNMENT_EXPRESSION, assignmentExpression$RuleMemoStart, assignmentExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(assignmentExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(assignmentExpression$RuleMemoFirstNode);
                  currentNode = assignmentExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConditionalExpression AssignmentOperator Expression)
      // ConditionalExpression
      match = conditionalExpression$Rule();
      if (match) {
         // AssignmentOperator
         match = assignmentOperator$Rule();
         if (match) {
            // Expression
            match = expression$Rule();
         }
      }
      if (match) {
         assignmentExpression$RuleMemoStart = startIndex;
         assignmentExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            assignmentExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ASSIGNMENT_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            assignmentExpression$RuleMemoFirstNode = currentNode;
            assignmentExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         assignmentExpression$RuleMemoStart = startIndex;
         assignmentExpression$RuleMemoEnd = -1;
         assignmentExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalExpression : (TernaryExpression | ConditionalOrExpression)
   protected boolean conditionalExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (conditionalExpression$RuleMemoStart == index) {
         if (conditionalExpression$RuleMemoStart <= conditionalExpression$RuleMemoEnd) {
            index = conditionalExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (conditionalExpression$RuleMemoStart == conditionalExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONDITIONAL_EXPRESSION, conditionalExpression$RuleMemoStart, conditionalExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(conditionalExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(conditionalExpression$RuleMemoFirstNode);
                  currentNode = conditionalExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TernaryExpression | ConditionalOrExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // TernaryExpression
            match = ternaryExpression$Rule();
            if (! match) {
               // ConditionalOrExpression
               match = conditionalOrExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         conditionalExpression$RuleMemoStart = startIndex;
         conditionalExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            conditionalExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONDITIONAL_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            conditionalExpression$RuleMemoFirstNode = currentNode;
            conditionalExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         conditionalExpression$RuleMemoStart = startIndex;
         conditionalExpression$RuleMemoEnd = -1;
         conditionalExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AssignmentOperator : (('=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<<=' | '>>=' | '>>>=') OptionalSpacing)
   protected boolean assignmentOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (('=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<<=' | '>>=' | '>>>=') OptionalSpacing)
      // ('=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<<=' | '>>=' | '>>>=')
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case '+': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '|': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '<': {
            ++index;
            // '<='
            if (match = stringTest("<=", 2)) {
               index += 2;
            }
            break;
         }
         case '=': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '-': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '^': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '>': {
            ++index;
            // ('>>=' | '>=')
            if (buffer.matchChar(index, '>')) {
               ++index;
               // ('>=' | '=')
               switch(buffer.getChar(index)) {
                  case '=': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '>': {
                     ++index;
                     // '='
                     if (match = buffer.matchChar(index, '=')) {
                        ++index;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            } else {
               match = false;
            }
            break;
         }
         case '/': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '%': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '&': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         case '*': {
            ++index;
            // '='
            if (match = buffer.matchChar(index, '=')) {
               ++index;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ASSIGNMENT_OPERATOR, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TernaryExpression : (ConditionalOrExpression '?' OptionalSpacing Expression ':' OptionalSpacing ConditionalExpression)
   protected boolean ternaryExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (ternaryExpression$RuleMemoStart == index) {
         if (ternaryExpression$RuleMemoStart <= ternaryExpression$RuleMemoEnd) {
            index = ternaryExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (ternaryExpression$RuleMemoStart == ternaryExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TERNARY_EXPRESSION, ternaryExpression$RuleMemoStart, ternaryExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(ternaryExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(ternaryExpression$RuleMemoFirstNode);
                  currentNode = ternaryExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConditionalOrExpression '?' OptionalSpacing Expression ':' OptionalSpacing ConditionalExpression)
      // ConditionalOrExpression
      match = conditionalOrExpression$Rule();
      if (match) {
         // '?'
         match = charMatcher('?');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Expression
               match = expression$Rule();
               if (match) {
                  // ':'
                  match = charMatcher(':');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ConditionalExpression
                        match = conditionalExpression$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         ternaryExpression$RuleMemoStart = startIndex;
         ternaryExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            ternaryExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TERNARY_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            ternaryExpression$RuleMemoFirstNode = currentNode;
            ternaryExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         ternaryExpression$RuleMemoStart = startIndex;
         ternaryExpression$RuleMemoEnd = -1;
         ternaryExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalOrExpression : (OrExpression | ConditionalAndExpression)
   protected boolean conditionalOrExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (conditionalOrExpression$RuleMemoStart == index) {
         if (conditionalOrExpression$RuleMemoStart <= conditionalOrExpression$RuleMemoEnd) {
            index = conditionalOrExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (conditionalOrExpression$RuleMemoStart == conditionalOrExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONDITIONAL_OR_EXPRESSION, conditionalOrExpression$RuleMemoStart, conditionalOrExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(conditionalOrExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(conditionalOrExpression$RuleMemoFirstNode);
                  currentNode = conditionalOrExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OrExpression | ConditionalAndExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // OrExpression
            match = orExpression$Rule();
            if (! match) {
               // ConditionalAndExpression
               match = conditionalAndExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         conditionalOrExpression$RuleMemoStart = startIndex;
         conditionalOrExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            conditionalOrExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONDITIONAL_OR_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            conditionalOrExpression$RuleMemoFirstNode = currentNode;
            conditionalOrExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         conditionalOrExpression$RuleMemoStart = startIndex;
         conditionalOrExpression$RuleMemoEnd = -1;
         conditionalOrExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrExpression : (ConditionalAndExpression '||' OptionalSpacing ConditionalOrExpression)
   protected boolean orExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (orExpression$RuleMemoStart == index) {
         if (orExpression$RuleMemoStart <= orExpression$RuleMemoEnd) {
            index = orExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (orExpression$RuleMemoStart == orExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OR_EXPRESSION, orExpression$RuleMemoStart, orExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(orExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(orExpression$RuleMemoFirstNode);
                  currentNode = orExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConditionalAndExpression '||' OptionalSpacing ConditionalOrExpression)
      // ConditionalAndExpression
      match = conditionalAndExpression$Rule();
      if (match) {
         // '||'
         match = stringMatcher("||", 2);
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ConditionalOrExpression
               match = conditionalOrExpression$Rule();
            }
         }
      }
      if (match) {
         orExpression$RuleMemoStart = startIndex;
         orExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            orExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            orExpression$RuleMemoFirstNode = currentNode;
            orExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         orExpression$RuleMemoStart = startIndex;
         orExpression$RuleMemoEnd = -1;
         orExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalAndExpression : (AndExpression | OptionalBitOrExpression)
   protected boolean conditionalAndExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (conditionalAndExpression$RuleMemoStart == index) {
         if (conditionalAndExpression$RuleMemoStart <= conditionalAndExpression$RuleMemoEnd) {
            index = conditionalAndExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (conditionalAndExpression$RuleMemoStart == conditionalAndExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CONDITIONAL_AND_EXPRESSION, conditionalAndExpression$RuleMemoStart, conditionalAndExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(conditionalAndExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(conditionalAndExpression$RuleMemoFirstNode);
                  currentNode = conditionalAndExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (AndExpression | OptionalBitOrExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // AndExpression
            match = andExpression$Rule();
            if (! match) {
               // OptionalBitOrExpression
               match = optionalBitOrExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         conditionalAndExpression$RuleMemoStart = startIndex;
         conditionalAndExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            conditionalAndExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CONDITIONAL_AND_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            conditionalAndExpression$RuleMemoFirstNode = currentNode;
            conditionalAndExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         conditionalAndExpression$RuleMemoStart = startIndex;
         conditionalAndExpression$RuleMemoEnd = -1;
         conditionalAndExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AndExpression : (OptionalBitOrExpression '&&' OptionalSpacing ConditionalAndExpression)
   protected boolean andExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (andExpression$RuleMemoStart == index) {
         if (andExpression$RuleMemoStart <= andExpression$RuleMemoEnd) {
            index = andExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (andExpression$RuleMemoStart == andExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.AND_EXPRESSION, andExpression$RuleMemoStart, andExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(andExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(andExpression$RuleMemoFirstNode);
                  currentNode = andExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalBitOrExpression '&&' OptionalSpacing ConditionalAndExpression)
      // OptionalBitOrExpression
      match = optionalBitOrExpression$Rule();
      if (match) {
         // '&&'
         match = stringMatcher("&&", 2);
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ConditionalAndExpression
               match = conditionalAndExpression$Rule();
            }
         }
      }
      if (match) {
         andExpression$RuleMemoStart = startIndex;
         andExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            andExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.AND_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            andExpression$RuleMemoFirstNode = currentNode;
            andExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         andExpression$RuleMemoStart = startIndex;
         andExpression$RuleMemoEnd = -1;
         andExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalBitOrExpression : (BitOrExpression | OptionalBitXOrExpression)
   protected boolean optionalBitOrExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalBitOrExpression$RuleMemoStart == index) {
         if (optionalBitOrExpression$RuleMemoStart <= optionalBitOrExpression$RuleMemoEnd) {
            index = optionalBitOrExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalBitOrExpression$RuleMemoStart == optionalBitOrExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_BIT_OR_EXPRESSION, optionalBitOrExpression$RuleMemoStart, optionalBitOrExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalBitOrExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalBitOrExpression$RuleMemoFirstNode);
                  currentNode = optionalBitOrExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BitOrExpression | OptionalBitXOrExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // BitOrExpression
            match = bitOrExpression$Rule();
            if (! match) {
               // OptionalBitXOrExpression
               match = optionalBitXOrExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalBitOrExpression$RuleMemoStart = startIndex;
         optionalBitOrExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalBitOrExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_BIT_OR_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalBitOrExpression$RuleMemoFirstNode = currentNode;
            optionalBitOrExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalBitOrExpression$RuleMemoStart = startIndex;
         optionalBitOrExpression$RuleMemoEnd = -1;
         optionalBitOrExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BitOrExpression : (OptionalBitXOrExpression '|' OptionalSpacing OptionalBitOrExpression)
   protected boolean bitOrExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (bitOrExpression$RuleMemoStart == index) {
         if (bitOrExpression$RuleMemoStart <= bitOrExpression$RuleMemoEnd) {
            index = bitOrExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (bitOrExpression$RuleMemoStart == bitOrExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BIT_OR_EXPRESSION, bitOrExpression$RuleMemoStart, bitOrExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(bitOrExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(bitOrExpression$RuleMemoFirstNode);
                  currentNode = bitOrExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalBitXOrExpression '|' OptionalSpacing OptionalBitOrExpression)
      // OptionalBitXOrExpression
      match = optionalBitXOrExpression$Rule();
      if (match) {
         // '|'
         match = charMatcher('|');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // OptionalBitOrExpression
               match = optionalBitOrExpression$Rule();
            }
         }
      }
      if (match) {
         bitOrExpression$RuleMemoStart = startIndex;
         bitOrExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            bitOrExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BIT_OR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            bitOrExpression$RuleMemoFirstNode = currentNode;
            bitOrExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         bitOrExpression$RuleMemoStart = startIndex;
         bitOrExpression$RuleMemoEnd = -1;
         bitOrExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalBitXOrExpression : (BitXOrExpression | OptionalBitAndExpression)
   protected boolean optionalBitXOrExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalBitXOrExpression$RuleMemoStart == index) {
         if (optionalBitXOrExpression$RuleMemoStart <= optionalBitXOrExpression$RuleMemoEnd) {
            index = optionalBitXOrExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalBitXOrExpression$RuleMemoStart == optionalBitXOrExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_BIT_XOR_EXPRESSION, optionalBitXOrExpression$RuleMemoStart, optionalBitXOrExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalBitXOrExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalBitXOrExpression$RuleMemoFirstNode);
                  currentNode = optionalBitXOrExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BitXOrExpression | OptionalBitAndExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // BitXOrExpression
            match = bitXOrExpression$Rule();
            if (! match) {
               // OptionalBitAndExpression
               match = optionalBitAndExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalBitXOrExpression$RuleMemoStart = startIndex;
         optionalBitXOrExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalBitXOrExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_BIT_XOR_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalBitXOrExpression$RuleMemoFirstNode = currentNode;
            optionalBitXOrExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalBitXOrExpression$RuleMemoStart = startIndex;
         optionalBitXOrExpression$RuleMemoEnd = -1;
         optionalBitXOrExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BitXOrExpression : (OptionalBitAndExpression '^' OptionalSpacing OptionalBitXOrExpression)
   protected boolean bitXOrExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (bitXOrExpression$RuleMemoStart == index) {
         if (bitXOrExpression$RuleMemoStart <= bitXOrExpression$RuleMemoEnd) {
            index = bitXOrExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (bitXOrExpression$RuleMemoStart == bitXOrExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BIT_XOR_EXPRESSION, bitXOrExpression$RuleMemoStart, bitXOrExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(bitXOrExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(bitXOrExpression$RuleMemoFirstNode);
                  currentNode = bitXOrExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalBitAndExpression '^' OptionalSpacing OptionalBitXOrExpression)
      // OptionalBitAndExpression
      match = optionalBitAndExpression$Rule();
      if (match) {
         // '^'
         match = charMatcher('^');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // OptionalBitXOrExpression
               match = optionalBitXOrExpression$Rule();
            }
         }
      }
      if (match) {
         bitXOrExpression$RuleMemoStart = startIndex;
         bitXOrExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            bitXOrExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BIT_XOR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            bitXOrExpression$RuleMemoFirstNode = currentNode;
            bitXOrExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         bitXOrExpression$RuleMemoStart = startIndex;
         bitXOrExpression$RuleMemoEnd = -1;
         bitXOrExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalBitAndExpression : (BitAndExpression | OptionalRelationalExpression)
   protected boolean optionalBitAndExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalBitAndExpression$RuleMemoStart == index) {
         if (optionalBitAndExpression$RuleMemoStart <= optionalBitAndExpression$RuleMemoEnd) {
            index = optionalBitAndExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalBitAndExpression$RuleMemoStart == optionalBitAndExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_BIT_AND_EXPRESSION, optionalBitAndExpression$RuleMemoStart, optionalBitAndExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalBitAndExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalBitAndExpression$RuleMemoFirstNode);
                  currentNode = optionalBitAndExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BitAndExpression | OptionalRelationalExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // BitAndExpression
            match = bitAndExpression$Rule();
            if (! match) {
               // OptionalRelationalExpression
               match = optionalRelationalExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalBitAndExpression$RuleMemoStart = startIndex;
         optionalBitAndExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalBitAndExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_BIT_AND_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalBitAndExpression$RuleMemoFirstNode = currentNode;
            optionalBitAndExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalBitAndExpression$RuleMemoStart = startIndex;
         optionalBitAndExpression$RuleMemoEnd = -1;
         optionalBitAndExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BitAndExpression : (OptionalRelationalExpression '&' OptionalSpacing OptionalBitAndExpression)
   protected boolean bitAndExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (bitAndExpression$RuleMemoStart == index) {
         if (bitAndExpression$RuleMemoStart <= bitAndExpression$RuleMemoEnd) {
            index = bitAndExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (bitAndExpression$RuleMemoStart == bitAndExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BIT_AND_EXPRESSION, bitAndExpression$RuleMemoStart, bitAndExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(bitAndExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(bitAndExpression$RuleMemoFirstNode);
                  currentNode = bitAndExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalRelationalExpression '&' OptionalSpacing OptionalBitAndExpression)
      // OptionalRelationalExpression
      match = optionalRelationalExpression$Rule();
      if (match) {
         // '&'
         match = charMatcher('&');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // OptionalBitAndExpression
               match = optionalBitAndExpression$Rule();
            }
         }
      }
      if (match) {
         bitAndExpression$RuleMemoStart = startIndex;
         bitAndExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            bitAndExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BIT_AND_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            bitAndExpression$RuleMemoFirstNode = currentNode;
            bitAndExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         bitAndExpression$RuleMemoStart = startIndex;
         bitAndExpression$RuleMemoEnd = -1;
         bitAndExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalRelationalExpression : (RelationalExpression | OptionalInstanceOfExpression)
   protected boolean optionalRelationalExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalRelationalExpression$RuleMemoStart == index) {
         if (optionalRelationalExpression$RuleMemoStart <= optionalRelationalExpression$RuleMemoEnd) {
            index = optionalRelationalExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalRelationalExpression$RuleMemoStart == optionalRelationalExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_RELATIONAL_EXPRESSION, optionalRelationalExpression$RuleMemoStart, optionalRelationalExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalRelationalExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalRelationalExpression$RuleMemoFirstNode);
                  currentNode = optionalRelationalExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (RelationalExpression | OptionalInstanceOfExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // RelationalExpression
            match = relationalExpression$Rule();
            if (! match) {
               // OptionalInstanceOfExpression
               match = optionalInstanceOfExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalRelationalExpression$RuleMemoStart = startIndex;
         optionalRelationalExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalRelationalExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_RELATIONAL_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalRelationalExpression$RuleMemoFirstNode = currentNode;
            optionalRelationalExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalRelationalExpression$RuleMemoStart = startIndex;
         optionalRelationalExpression$RuleMemoEnd = -1;
         optionalRelationalExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RelationalExpression : (OptionalInstanceOfExpression (('==' | '!=' | '<=' | '>=' | '<' | '>') OptionalSpacing) OptionalRelationalExpression)
   protected boolean relationalExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (relationalExpression$RuleMemoStart == index) {
         if (relationalExpression$RuleMemoStart <= relationalExpression$RuleMemoEnd) {
            index = relationalExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (relationalExpression$RuleMemoStart == relationalExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.RELATIONAL_EXPRESSION, relationalExpression$RuleMemoStart, relationalExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(relationalExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(relationalExpression$RuleMemoFirstNode);
                  currentNode = relationalExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalInstanceOfExpression (('==' | '!=' | '<=' | '>=' | '<' | '>') OptionalSpacing) OptionalRelationalExpression)
      // OptionalInstanceOfExpression
      match = optionalInstanceOfExpression$Rule();
      if (match) {
         // (('==' | '!=' | '<=' | '>=' | '<' | '>') OptionalSpacing)
         // ('==' | '!=' | '<=' | '>=' | '<' | '>')
         int startIndex_1 = index;
         switch(buffer.getChar(index)) {
            case '<': {
               ++index;
               // ('=' | <EMPTY>)
               if (buffer.matchChar(index, '=')) {
                  ++index;
                  // <EMPTY>
                  match = true;
               } else {
                  match = true;
               }
               break;
            }
            case '=': {
               ++index;
               // '='
               if (match = buffer.matchChar(index, '=')) {
                  ++index;
               }
               break;
            }
            case '>': {
               ++index;
               // ('=' | <EMPTY>)
               if (buffer.matchChar(index, '=')) {
                  ++index;
                  // <EMPTY>
                  match = true;
               } else {
                  match = true;
               }
               break;
            }
            case '!': {
               ++index;
               // '='
               if (match = buffer.matchChar(index, '=')) {
                  ++index;
               }
               break;
            }
            default: {
               match = false;
            }
         }
         if (! match) {
            index = startIndex_1;
         } else if(! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
            currentNode = currentNode.getSibling();
         }
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
         if (match) {
            // OptionalRelationalExpression
            match = optionalRelationalExpression$Rule();
         }
      }
      if (match) {
         relationalExpression$RuleMemoStart = startIndex;
         relationalExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            relationalExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.RELATIONAL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            relationalExpression$RuleMemoFirstNode = currentNode;
            relationalExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         relationalExpression$RuleMemoStart = startIndex;
         relationalExpression$RuleMemoEnd = -1;
         relationalExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalInstanceOfExpression : (InstanceOfExpression | OptionalAdditiveExpression)
   protected boolean optionalInstanceOfExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalInstanceOfExpression$RuleMemoStart == index) {
         if (optionalInstanceOfExpression$RuleMemoStart <= optionalInstanceOfExpression$RuleMemoEnd) {
            index = optionalInstanceOfExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalInstanceOfExpression$RuleMemoStart == optionalInstanceOfExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_INSTANCE_OF_EXPRESSION, optionalInstanceOfExpression$RuleMemoStart, optionalInstanceOfExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalInstanceOfExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalInstanceOfExpression$RuleMemoFirstNode);
                  currentNode = optionalInstanceOfExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (InstanceOfExpression | OptionalAdditiveExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // InstanceOfExpression
            match = instanceOfExpression$Rule();
            if (! match) {
               // OptionalAdditiveExpression
               match = optionalAdditiveExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalInstanceOfExpression$RuleMemoStart = startIndex;
         optionalInstanceOfExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalInstanceOfExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_INSTANCE_OF_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalInstanceOfExpression$RuleMemoFirstNode = currentNode;
            optionalInstanceOfExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalInstanceOfExpression$RuleMemoStart = startIndex;
         optionalInstanceOfExpression$RuleMemoEnd = -1;
         optionalInstanceOfExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InstanceOfExpression : (OptionalAdditiveExpression 'instanceof' TestNoAlpha OptionalSpacing ReferenceType)
   protected boolean instanceOfExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (instanceOfExpression$RuleMemoStart == index) {
         if (instanceOfExpression$RuleMemoStart <= instanceOfExpression$RuleMemoEnd) {
            index = instanceOfExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (instanceOfExpression$RuleMemoStart == instanceOfExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.INSTANCE_OF_EXPRESSION, instanceOfExpression$RuleMemoStart, instanceOfExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(instanceOfExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(instanceOfExpression$RuleMemoFirstNode);
                  currentNode = instanceOfExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalAdditiveExpression 'instanceof' TestNoAlpha OptionalSpacing ReferenceType)
      // OptionalAdditiveExpression
      match = optionalAdditiveExpression$Rule();
      if (match) {
         // 'instanceof'
         match = stringMatcher("instanceof", 10);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ReferenceType
                  match = referenceType$Rule();
               }
            }
         }
      }
      if (match) {
         instanceOfExpression$RuleMemoStart = startIndex;
         instanceOfExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            instanceOfExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.INSTANCE_OF_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            instanceOfExpression$RuleMemoFirstNode = currentNode;
            instanceOfExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         instanceOfExpression$RuleMemoStart = startIndex;
         instanceOfExpression$RuleMemoEnd = -1;
         instanceOfExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalAdditiveExpression : (AdditiveExpression | OptionalMultiplicativeExpression)
   protected boolean optionalAdditiveExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalAdditiveExpression$RuleMemoStart == index) {
         if (optionalAdditiveExpression$RuleMemoStart <= optionalAdditiveExpression$RuleMemoEnd) {
            index = optionalAdditiveExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalAdditiveExpression$RuleMemoStart == optionalAdditiveExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_ADDITIVE_EXPRESSION, optionalAdditiveExpression$RuleMemoStart, optionalAdditiveExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalAdditiveExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalAdditiveExpression$RuleMemoFirstNode);
                  currentNode = optionalAdditiveExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (AdditiveExpression | OptionalMultiplicativeExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // AdditiveExpression
            match = additiveExpression$Rule();
            if (! match) {
               // OptionalMultiplicativeExpression
               match = optionalMultiplicativeExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalAdditiveExpression$RuleMemoStart = startIndex;
         optionalAdditiveExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalAdditiveExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_ADDITIVE_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalAdditiveExpression$RuleMemoFirstNode = currentNode;
            optionalAdditiveExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalAdditiveExpression$RuleMemoStart = startIndex;
         optionalAdditiveExpression$RuleMemoEnd = -1;
         optionalAdditiveExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReferenceType : (BasicTypeArray | QualifiedClassNameArray | QualifiedClassName)
   protected boolean referenceType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (referenceType$RuleMemoStart == index) {
         if (referenceType$RuleMemoStart <= referenceType$RuleMemoEnd) {
            index = referenceType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (referenceType$RuleMemoStart == referenceType$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.REFERENCE_TYPE, referenceType$RuleMemoStart, referenceType$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(referenceType$RuleMemoFirstNode != null) {
                  lastNode.setSibling(referenceType$RuleMemoFirstNode);
                  currentNode = referenceType$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BasicTypeArray | QualifiedClassNameArray | QualifiedClassName)
      switch(buffer.getChar(index)) {
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // QualifiedClassNameArray
            match = qualifiedClassNameArray$Rule();
            if (! match) {
               // QualifiedClassName
               match = qualifiedClassName$Rule();
            }
            break;
         }
         case 'b':
         case 'c':
         case 's':
         case 'd':
         case 'f':
         case 'i':
         case 'l': {
            // BasicTypeArray
            match = basicTypeArray$Rule();
            if (! match) {
               // QualifiedClassNameArray
               match = qualifiedClassNameArray$Rule();
               if (! match) {
                  // QualifiedClassName
                  match = qualifiedClassName$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         referenceType$RuleMemoStart = startIndex;
         referenceType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            referenceType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.REFERENCE_TYPE, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            referenceType$RuleMemoFirstNode = currentNode;
            referenceType$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         referenceType$RuleMemoStart = startIndex;
         referenceType$RuleMemoEnd = -1;
         referenceType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AdditiveExpression : (OptionalMultiplicativeExpression (('+' | '-') OptionalSpacing) OptionalAdditiveExpression)
   protected boolean additiveExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (additiveExpression$RuleMemoStart == index) {
         if (additiveExpression$RuleMemoStart <= additiveExpression$RuleMemoEnd) {
            index = additiveExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (additiveExpression$RuleMemoStart == additiveExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ADDITIVE_EXPRESSION, additiveExpression$RuleMemoStart, additiveExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(additiveExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(additiveExpression$RuleMemoFirstNode);
                  currentNode = additiveExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalMultiplicativeExpression (('+' | '-') OptionalSpacing) OptionalAdditiveExpression)
      // OptionalMultiplicativeExpression
      match = optionalMultiplicativeExpression$Rule();
      if (match) {
         // (('+' | '-') OptionalSpacing)
         // ('+' | '-')
         int startIndex_1 = index;
         switch(buffer.getChar(index)) {
            case '+': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            case '-': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            default: {
               match = false;
            }
         }
         if (! match) {
            index = startIndex_1;
         } else if(! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
            currentNode = currentNode.getSibling();
         }
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
         if (match) {
            // OptionalAdditiveExpression
            match = optionalAdditiveExpression$Rule();
         }
      }
      if (match) {
         additiveExpression$RuleMemoStart = startIndex;
         additiveExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            additiveExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ADDITIVE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            additiveExpression$RuleMemoFirstNode = currentNode;
            additiveExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         additiveExpression$RuleMemoStart = startIndex;
         additiveExpression$RuleMemoEnd = -1;
         additiveExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalMultiplicativeExpression : (MultiplicativeExpression | OptionalShiftExpression)
   protected boolean optionalMultiplicativeExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalMultiplicativeExpression$RuleMemoStart == index) {
         if (optionalMultiplicativeExpression$RuleMemoStart <= optionalMultiplicativeExpression$RuleMemoEnd) {
            index = optionalMultiplicativeExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalMultiplicativeExpression$RuleMemoStart == optionalMultiplicativeExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_MULTIPLICATIVE_EXPRESSION, optionalMultiplicativeExpression$RuleMemoStart, optionalMultiplicativeExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalMultiplicativeExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalMultiplicativeExpression$RuleMemoFirstNode);
                  currentNode = optionalMultiplicativeExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (MultiplicativeExpression | OptionalShiftExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // MultiplicativeExpression
            match = multiplicativeExpression$Rule();
            if (! match) {
               // OptionalShiftExpression
               match = optionalShiftExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalMultiplicativeExpression$RuleMemoStart = startIndex;
         optionalMultiplicativeExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalMultiplicativeExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_MULTIPLICATIVE_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalMultiplicativeExpression$RuleMemoFirstNode = currentNode;
            optionalMultiplicativeExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalMultiplicativeExpression$RuleMemoStart = startIndex;
         optionalMultiplicativeExpression$RuleMemoEnd = -1;
         optionalMultiplicativeExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MultiplicativeExpression : (OptionalShiftExpression (('*' | '/' | '%') OptionalSpacing) OptionalMultiplicativeExpression)
   protected boolean multiplicativeExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (multiplicativeExpression$RuleMemoStart == index) {
         if (multiplicativeExpression$RuleMemoStart <= multiplicativeExpression$RuleMemoEnd) {
            index = multiplicativeExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (multiplicativeExpression$RuleMemoStart == multiplicativeExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.MULTIPLICATIVE_EXPRESSION, multiplicativeExpression$RuleMemoStart, multiplicativeExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(multiplicativeExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(multiplicativeExpression$RuleMemoFirstNode);
                  currentNode = multiplicativeExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OptionalShiftExpression (('*' | '/' | '%') OptionalSpacing) OptionalMultiplicativeExpression)
      // OptionalShiftExpression
      match = optionalShiftExpression$Rule();
      if (match) {
         // (('*' | '/' | '%') OptionalSpacing)
         // ('*' | '/' | '%')
         int startIndex_1 = index;
         switch(buffer.getChar(index)) {
            case '/': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            case '%': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            case '*': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            default: {
               match = false;
            }
         }
         if (! match) {
            index = startIndex_1;
         } else if(! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
            currentNode = currentNode.getSibling();
         }
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
         if (match) {
            // OptionalMultiplicativeExpression
            match = optionalMultiplicativeExpression$Rule();
         }
      }
      if (match) {
         multiplicativeExpression$RuleMemoStart = startIndex;
         multiplicativeExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            multiplicativeExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.MULTIPLICATIVE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            multiplicativeExpression$RuleMemoFirstNode = currentNode;
            multiplicativeExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         multiplicativeExpression$RuleMemoStart = startIndex;
         multiplicativeExpression$RuleMemoEnd = -1;
         multiplicativeExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalShiftExpression : (ShiftExpression | UnaryExpression)
   protected boolean optionalShiftExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalShiftExpression$RuleMemoStart == index) {
         if (optionalShiftExpression$RuleMemoStart <= optionalShiftExpression$RuleMemoEnd) {
            index = optionalShiftExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalShiftExpression$RuleMemoStart == optionalShiftExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.OPTIONAL_SHIFT_EXPRESSION, optionalShiftExpression$RuleMemoStart, optionalShiftExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(optionalShiftExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalShiftExpression$RuleMemoFirstNode);
                  currentNode = optionalShiftExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ShiftExpression | UnaryExpression)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // ShiftExpression
            match = shiftExpression$Rule();
            if (! match) {
               // UnaryExpression
               match = unaryExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         optionalShiftExpression$RuleMemoStart = startIndex;
         optionalShiftExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            optionalShiftExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.OPTIONAL_SHIFT_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            optionalShiftExpression$RuleMemoFirstNode = currentNode;
            optionalShiftExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         optionalShiftExpression$RuleMemoStart = startIndex;
         optionalShiftExpression$RuleMemoEnd = -1;
         optionalShiftExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ShiftExpression : (UnaryExpression (('<<' | '>>>' | '>>') OptionalSpacing) OptionalShiftExpression)
   protected boolean shiftExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (shiftExpression$RuleMemoStart == index) {
         if (shiftExpression$RuleMemoStart <= shiftExpression$RuleMemoEnd) {
            index = shiftExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (shiftExpression$RuleMemoStart == shiftExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SHIFT_EXPRESSION, shiftExpression$RuleMemoStart, shiftExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(shiftExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(shiftExpression$RuleMemoFirstNode);
                  currentNode = shiftExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (UnaryExpression (('<<' | '>>>' | '>>') OptionalSpacing) OptionalShiftExpression)
      // UnaryExpression
      match = unaryExpression$Rule();
      if (match) {
         // (('<<' | '>>>' | '>>') OptionalSpacing)
         // ('<<' | '>>>' | '>>')
         int startIndex_1 = index;
         switch(buffer.getChar(index)) {
            case '<': {
               ++index;
               // '<'
               if (match = buffer.matchChar(index, '<')) {
                  ++index;
               }
               break;
            }
            case '>': {
               ++index;
               // ('>>' | '>')
               if (buffer.matchChar(index, '>')) {
                  ++index;
                  // ('>' | <EMPTY>)
                  if (buffer.matchChar(index, '>')) {
                     ++index;
                     // <EMPTY>
                     match = true;
                  } else {
                     match = true;
                  }
               } else {
                  match = false;
               }
               break;
            }
            default: {
               match = false;
            }
         }
         if (! match) {
            index = startIndex_1;
         } else if(! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
            currentNode = currentNode.getSibling();
         }
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
         if (match) {
            // OptionalShiftExpression
            match = optionalShiftExpression$Rule();
         }
      }
      if (match) {
         shiftExpression$RuleMemoStart = startIndex;
         shiftExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            shiftExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SHIFT_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            shiftExpression$RuleMemoFirstNode = currentNode;
            shiftExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         shiftExpression$RuleMemoStart = startIndex;
         shiftExpression$RuleMemoEnd = -1;
         shiftExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnaryExpression : (PrefixedExpression | CastExpression | PostfixedExpression | Primary)
   protected boolean unaryExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (unaryExpression$RuleMemoStart == index) {
         if (unaryExpression$RuleMemoStart <= unaryExpression$RuleMemoEnd) {
            index = unaryExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (unaryExpression$RuleMemoStart == unaryExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.UNARY_EXPRESSION, unaryExpression$RuleMemoStart, unaryExpression$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(unaryExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(unaryExpression$RuleMemoFirstNode);
                  currentNode = unaryExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (PrefixedExpression | CastExpression | PostfixedExpression | Primary)
      switch(buffer.getChar(index)) {
         case '!':
         case '+':
         case '-':
         case '~': {
            // PrefixedExpression
            match = prefixedExpression$Rule();
            break;
         }
         case '\"':
         case '$':
         case '\'':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // PostfixedExpression
            match = postfixedExpression$Rule();
            if (! match) {
               // Primary
               match = primary$Rule();
            }
            break;
         }
         case '(': {
            // CastExpression
            match = castExpression$Rule();
            if (! match) {
               // PostfixedExpression
               match = postfixedExpression$Rule();
               if (! match) {
                  // Primary
                  match = primary$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         unaryExpression$RuleMemoStart = startIndex;
         unaryExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            unaryExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.UNARY_EXPRESSION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            unaryExpression$RuleMemoFirstNode = currentNode;
            unaryExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         unaryExpression$RuleMemoStart = startIndex;
         unaryExpression$RuleMemoEnd = -1;
         unaryExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PrefixedExpression : (PrefixOp OptionalSpacing Expression)
   protected boolean prefixedExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (prefixedExpression$RuleMemoStart == index) {
         if (prefixedExpression$RuleMemoStart <= prefixedExpression$RuleMemoEnd) {
            index = prefixedExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (prefixedExpression$RuleMemoStart == prefixedExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PREFIXED_EXPRESSION, prefixedExpression$RuleMemoStart, prefixedExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(prefixedExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(prefixedExpression$RuleMemoFirstNode);
                  currentNode = prefixedExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (PrefixOp OptionalSpacing Expression)
      // PrefixOp
      match = prefixOp$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Expression
            match = expression$Rule();
         }
      }
      if (match) {
         prefixedExpression$RuleMemoStart = startIndex;
         prefixedExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            prefixedExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PREFIXED_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            prefixedExpression$RuleMemoFirstNode = currentNode;
            prefixedExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         prefixedExpression$RuleMemoStart = startIndex;
         prefixedExpression$RuleMemoEnd = -1;
         prefixedExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CastExpression : ('(' OptionalSpacing Type ')' OptionalSpacing Expression)
   protected boolean castExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (castExpression$RuleMemoStart == index) {
         if (castExpression$RuleMemoStart <= castExpression$RuleMemoEnd) {
            index = castExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (castExpression$RuleMemoStart == castExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CAST_EXPRESSION, castExpression$RuleMemoStart, castExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(castExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(castExpression$RuleMemoFirstNode);
                  currentNode = castExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing Type ')' OptionalSpacing Expression)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Type
            match = type$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // Expression
                     match = expression$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         castExpression$RuleMemoStart = startIndex;
         castExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            castExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CAST_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            castExpression$RuleMemoFirstNode = currentNode;
            castExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         castExpression$RuleMemoStart = startIndex;
         castExpression$RuleMemoEnd = -1;
         castExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PostfixedExpression : (Primary PostFixOp+)
   protected boolean postfixedExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (postfixedExpression$RuleMemoStart == index) {
         if (postfixedExpression$RuleMemoStart <= postfixedExpression$RuleMemoEnd) {
            index = postfixedExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (postfixedExpression$RuleMemoStart == postfixedExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.POSTFIXED_EXPRESSION, postfixedExpression$RuleMemoStart, postfixedExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(postfixedExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(postfixedExpression$RuleMemoFirstNode);
                  currentNode = postfixedExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Primary PostFixOp+)
      // Primary
      match = primary$Rule();
      if (match) {
         // PostFixOp+
         // PostFixOp
         match = postFixOp$Rule();
         if (match) {
            do {
               // PostFixOp
               match = postFixOp$Rule();
            } while(match);
            match = true;
         }
      }
      if (match) {
         postfixedExpression$RuleMemoStart = startIndex;
         postfixedExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            postfixedExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.POSTFIXED_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            postfixedExpression$RuleMemoFirstNode = currentNode;
            postfixedExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         postfixedExpression$RuleMemoStart = startIndex;
         postfixedExpression$RuleMemoEnd = -1;
         postfixedExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PrefixOp : ('++' | '--' | '!' | '~' | '+' | '-')
   protected boolean prefixOp$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('++' | '--' | '!' | '~' | '+' | '-')
      switch(buffer.getChar(index)) {
         case '+': {
            ++index;
            // ('+' | <EMPTY>)
            if (buffer.matchChar(index, '+')) {
               ++index;
               // <EMPTY>
               match = true;
            } else {
               match = true;
            }
            break;
         }
         case '-': {
            ++index;
            // ('-' | <EMPTY>)
            if (buffer.matchChar(index, '-')) {
               ++index;
               // <EMPTY>
               match = true;
            } else {
               match = true;
            }
            break;
         }
         case '~': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '!': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.PREFIX_OP, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PostFixOp : (('++' | '--') OptionalSpacing)
   protected boolean postFixOp$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (('++' | '--') OptionalSpacing)
      // ('++' | '--')
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case '+': {
            ++index;
            // '+'
            if (match = buffer.matchChar(index, '+')) {
               ++index;
            }
            break;
         }
         case '-': {
            ++index;
            // '-'
            if (match = buffer.matchChar(index, '-')) {
               ++index;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.POST_FIX_OP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Primary : (QualifiedExpression | ArrayAccess | Atomic)
   protected boolean primary$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (primary$RuleMemoStart == index) {
         if (primary$RuleMemoStart <= primary$RuleMemoEnd) {
            index = primary$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (primary$RuleMemoStart == primary$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.PRIMARY, primary$RuleMemoStart, primary$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(primary$RuleMemoFirstNode != null) {
                  lastNode.setSibling(primary$RuleMemoFirstNode);
                  currentNode = primary$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QualifiedExpression | ArrayAccess | Atomic)
      switch(buffer.getChar(index)) {
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // QualifiedExpression
            match = qualifiedExpression$Rule();
            if (! match) {
               // ArrayAccess
               match = arrayAccess$Rule();
               if (! match) {
                  // Atomic
                  match = atomic$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         primary$RuleMemoStart = startIndex;
         primary$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            primary$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.PRIMARY, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            primary$RuleMemoFirstNode = currentNode;
            primary$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         primary$RuleMemoStart = startIndex;
         primary$RuleMemoEnd = -1;
         primary$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QualifiedExpression : ((ArrayAccess | Atomic) ('.' OptionalSpacing NonWildcardTypeArguments? (ArrayAccess | Atomic))+)
   protected boolean qualifiedExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (qualifiedExpression$RuleMemoStart == index) {
         if (qualifiedExpression$RuleMemoStart <= qualifiedExpression$RuleMemoEnd) {
            index = qualifiedExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (qualifiedExpression$RuleMemoStart == qualifiedExpression$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.QUALIFIED_EXPRESSION, qualifiedExpression$RuleMemoStart, qualifiedExpression$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(qualifiedExpression$RuleMemoFirstNode != null) {
                  lastNode.setSibling(qualifiedExpression$RuleMemoFirstNode);
                  currentNode = qualifiedExpression$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((ArrayAccess | Atomic) ('.' OptionalSpacing NonWildcardTypeArguments? (ArrayAccess | Atomic))+)
      // (ArrayAccess | Atomic)
      switch(buffer.getChar(index)) {
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ArrayAccess
            match = arrayAccess$Rule();
            if (! match) {
               // Atomic
               match = atomic$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // ('.' OptionalSpacing NonWildcardTypeArguments? (ArrayAccess | Atomic))+
         // ('.' OptionalSpacing NonWildcardTypeArguments? (ArrayAccess | Atomic))
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // NonWildcardTypeArguments?
               // NonWildcardTypeArguments
               nonWildcardTypeArguments$Rule();
               match = true;
               // (ArrayAccess | Atomic)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '$':
                  case '\'':
                  case '(':
                  case '.':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // ArrayAccess
                     match = arrayAccess$Rule();
                     if (! match) {
                        // Atomic
                        match = atomic$Rule();
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         if (match) {
            do {
               // ('.' OptionalSpacing NonWildcardTypeArguments? (ArrayAccess | Atomic))
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // '.'
               match = charMatcher('.');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // NonWildcardTypeArguments?
                     // NonWildcardTypeArguments
                     nonWildcardTypeArguments$Rule();
                     match = true;
                     // (ArrayAccess | Atomic)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '$':
                        case '\'':
                        case '(':
                        case '.':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case 'A':
                        case 'B':
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'a':
                        case 'b':
                        case 'c':
                        case 'd':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // ArrayAccess
                           match = arrayAccess$Rule();
                           if (! match) {
                              // Atomic
                              match = atomic$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
            } while(match);
            match = true;
         }
      }
      if (match) {
         qualifiedExpression$RuleMemoStart = startIndex;
         qualifiedExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            qualifiedExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.QUALIFIED_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            qualifiedExpression$RuleMemoFirstNode = currentNode;
            qualifiedExpression$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         qualifiedExpression$RuleMemoStart = startIndex;
         qualifiedExpression$RuleMemoEnd = -1;
         qualifiedExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ArrayAccess : (Atomic ArrayIndex)
   protected boolean arrayAccess$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (arrayAccess$RuleMemoStart == index) {
         if (arrayAccess$RuleMemoStart <= arrayAccess$RuleMemoEnd) {
            index = arrayAccess$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (arrayAccess$RuleMemoStart == arrayAccess$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ARRAY_ACCESS, arrayAccess$RuleMemoStart, arrayAccess$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(arrayAccess$RuleMemoFirstNode != null) {
                  lastNode.setSibling(arrayAccess$RuleMemoFirstNode);
                  currentNode = arrayAccess$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Atomic ArrayIndex)
      // Atomic
      match = atomic$Rule();
      if (match) {
         // ArrayIndex
         match = arrayIndex$Rule();
      }
      if (match) {
         arrayAccess$RuleMemoStart = startIndex;
         arrayAccess$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            arrayAccess$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ARRAY_ACCESS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            arrayAccess$RuleMemoFirstNode = currentNode;
            arrayAccess$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         arrayAccess$RuleMemoStart = startIndex;
         arrayAccess$RuleMemoEnd = -1;
         arrayAccess$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Atomic : (ParExpression | ClassTypeReference | Literal | BasicTypeClassReference | VoidClassReference | ThisMethodCall | This | SuperMethodCall | SuperConstructorCall | SuperFieldAccess | ClassCreator | ArrayCreator | MethodCall | Identifier)
   protected boolean atomic$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (atomic$RuleMemoStart == index) {
         if (atomic$RuleMemoStart <= atomic$RuleMemoEnd) {
            index = atomic$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (atomic$RuleMemoStart == atomic$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ATOMIC, atomic$RuleMemoStart, atomic$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(atomic$RuleMemoFirstNode != null) {
                  lastNode.setSibling(atomic$RuleMemoFirstNode);
                  currentNode = atomic$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ParExpression | ClassTypeReference | Literal | BasicTypeClassReference | VoidClassReference | ThisMethodCall | This | SuperMethodCall | SuperConstructorCall | SuperFieldAccess | ClassCreator | ArrayCreator | MethodCall | Identifier)
      switch(buffer.getChar(index)) {
         case '\"':
         case '\'':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // Literal
            match = literal$Rule();
            break;
         }
         case 'n': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // Literal
               match = literal$Rule();
               if (! match) {
                  // ClassCreator
                  match = classCreator$Rule();
                  if (! match) {
                     // ArrayCreator
                     match = arrayCreator$Rule();
                     if (! match) {
                        // MethodCall
                        match = methodCall$Rule();
                        if (! match) {
                           // Identifier
                           match = identifier$Rule();
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 'u':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // MethodCall
               match = methodCall$Rule();
               if (! match) {
                  // Identifier
                  match = identifier$Rule();
               }
            }
            break;
         }
         case 'b':
         case 'c':
         case 'd':
         case 'i':
         case 'l': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // BasicTypeClassReference
               match = basicTypeClassReference$Rule();
               if (! match) {
                  // MethodCall
                  match = methodCall$Rule();
                  if (! match) {
                     // Identifier
                     match = identifier$Rule();
                  }
               }
            }
            break;
         }
         case 's': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // BasicTypeClassReference
               match = basicTypeClassReference$Rule();
               if (! match) {
                  // SuperMethodCall
                  match = superMethodCall$Rule();
                  if (! match) {
                     // SuperConstructorCall
                     match = superConstructorCall$Rule();
                     if (! match) {
                        // SuperFieldAccess
                        match = superFieldAccess$Rule();
                        if (! match) {
                           // MethodCall
                           match = methodCall$Rule();
                           if (! match) {
                              // Identifier
                              match = identifier$Rule();
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 't': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // Literal
               match = literal$Rule();
               if (! match) {
                  // ThisMethodCall
                  match = thisMethodCall$Rule();
                  if (! match) {
                     // This
                     match = this$Rule();
                     if (! match) {
                        // MethodCall
                        match = methodCall$Rule();
                        if (! match) {
                           // Identifier
                           match = identifier$Rule();
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'f': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // Literal
               match = literal$Rule();
               if (! match) {
                  // BasicTypeClassReference
                  match = basicTypeClassReference$Rule();
                  if (! match) {
                     // MethodCall
                     match = methodCall$Rule();
                     if (! match) {
                        // Identifier
                        match = identifier$Rule();
                     }
                  }
               }
            }
            break;
         }
         case 'v': {
            // ClassTypeReference
            match = classTypeReference$Rule();
            if (! match) {
               // VoidClassReference
               match = voidClassReference$Rule();
               if (! match) {
                  // MethodCall
                  match = methodCall$Rule();
                  if (! match) {
                     // Identifier
                     match = identifier$Rule();
                  }
               }
            }
            break;
         }
         case '(': {
            // ParExpression
            match = parExpression$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         atomic$RuleMemoStart = startIndex;
         atomic$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            atomic$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ATOMIC, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            atomic$RuleMemoFirstNode = currentNode;
            atomic$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         atomic$RuleMemoStart = startIndex;
         atomic$RuleMemoEnd = -1;
         atomic$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassTypeReference : (QualifiedIdentifier Dimensions '.' OptionalSpacing 'class' TestNoAlpha OptionalSpacing)
   protected boolean classTypeReference$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (classTypeReference$RuleMemoStart == index) {
         if (classTypeReference$RuleMemoStart <= classTypeReference$RuleMemoEnd) {
            index = classTypeReference$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (classTypeReference$RuleMemoStart == classTypeReference$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_TYPE_REFERENCE, classTypeReference$RuleMemoStart, classTypeReference$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(classTypeReference$RuleMemoFirstNode != null) {
                  lastNode.setSibling(classTypeReference$RuleMemoFirstNode);
                  currentNode = classTypeReference$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QualifiedIdentifier Dimensions '.' OptionalSpacing 'class' TestNoAlpha OptionalSpacing)
      // QualifiedIdentifier
      match = qualifiedIdentifier$Rule();
      if (match) {
         // Dimensions
         match = dimensions$Rule();
         if (match) {
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // 'class'
                  match = stringMatcher("class", 5);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         classTypeReference$RuleMemoStart = startIndex;
         classTypeReference$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            classTypeReference$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_TYPE_REFERENCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            classTypeReference$RuleMemoFirstNode = currentNode;
            classTypeReference$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         classTypeReference$RuleMemoStart = startIndex;
         classTypeReference$RuleMemoEnd = -1;
         classTypeReference$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Literal : ((FloatLiteral | LongLiteral | IntegerLiteral | CharLiteral | StringLiteral | True | False | Null) OptionalSpacing)
   protected boolean literal$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (literal$RuleMemoStart == index) {
         if (literal$RuleMemoStart <= literal$RuleMemoEnd) {
            index = literal$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (literal$RuleMemoStart == literal$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.LITERAL, literal$RuleMemoStart, literal$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(literal$RuleMemoFirstNode != null) {
                  lastNode.setSibling(literal$RuleMemoFirstNode);
                  currentNode = literal$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((FloatLiteral | LongLiteral | IntegerLiteral | CharLiteral | StringLiteral | True | False | Null) OptionalSpacing)
      // (FloatLiteral | LongLiteral | IntegerLiteral | CharLiteral | StringLiteral | True | False | Null)
      switch(buffer.getChar(index)) {
         case '.': {
            // FloatLiteral
            match = floatLiteral$Rule();
            break;
         }
         case 'n': {
            // Null
            match = null$Rule();
            break;
         }
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // FloatLiteral
            match = floatLiteral$Rule();
            if (! match) {
               // LongLiteral
               match = longLiteral$Rule();
               if (! match) {
                  // IntegerLiteral
                  match = integerLiteral$Rule();
               }
            }
            break;
         }
         case '\"': {
            // StringLiteral
            match = stringLiteral$Rule();
            break;
         }
         case 't': {
            // True
            match = true$Rule();
            break;
         }
         case 'f': {
            // False
            match = false$Rule();
            break;
         }
         case '\'': {
            // CharLiteral
            match = charLiteral$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         literal$RuleMemoStart = startIndex;
         literal$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            literal$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            literal$RuleMemoFirstNode = currentNode;
            literal$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         literal$RuleMemoStart = startIndex;
         literal$RuleMemoEnd = -1;
         literal$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BasicTypeClassReference : (BasicType Dimensions '.' OptionalSpacing 'class' TestNoAlpha OptionalSpacing)
   protected boolean basicTypeClassReference$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (basicTypeClassReference$RuleMemoStart == index) {
         if (basicTypeClassReference$RuleMemoStart <= basicTypeClassReference$RuleMemoEnd) {
            index = basicTypeClassReference$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (basicTypeClassReference$RuleMemoStart == basicTypeClassReference$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE_CLASS_REFERENCE, basicTypeClassReference$RuleMemoStart, basicTypeClassReference$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(basicTypeClassReference$RuleMemoFirstNode != null) {
                  lastNode.setSibling(basicTypeClassReference$RuleMemoFirstNode);
                  currentNode = basicTypeClassReference$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BasicType Dimensions '.' OptionalSpacing 'class' TestNoAlpha OptionalSpacing)
      // BasicType
      match = basicType$Rule();
      if (match) {
         // Dimensions
         match = dimensions$Rule();
         if (match) {
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // 'class'
                  match = stringMatcher("class", 5);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         basicTypeClassReference$RuleMemoStart = startIndex;
         basicTypeClassReference$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            basicTypeClassReference$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE_CLASS_REFERENCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            basicTypeClassReference$RuleMemoFirstNode = currentNode;
            basicTypeClassReference$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         basicTypeClassReference$RuleMemoStart = startIndex;
         basicTypeClassReference$RuleMemoEnd = -1;
         basicTypeClassReference$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VoidClassReference : ('void' TestNoAlpha OptionalSpacing '.' OptionalSpacing 'class' TestNoAlpha OptionalSpacing)
   protected boolean voidClassReference$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (voidClassReference$RuleMemoStart == index) {
         if (voidClassReference$RuleMemoStart <= voidClassReference$RuleMemoEnd) {
            index = voidClassReference$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (voidClassReference$RuleMemoStart == voidClassReference$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.VOID_CLASS_REFERENCE, voidClassReference$RuleMemoStart, voidClassReference$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(voidClassReference$RuleMemoFirstNode != null) {
                  lastNode.setSibling(voidClassReference$RuleMemoFirstNode);
                  currentNode = voidClassReference$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('void' TestNoAlpha OptionalSpacing '.' OptionalSpacing 'class' TestNoAlpha OptionalSpacing)
      // 'void'
      match = stringMatcher("void", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '.'
               match = charMatcher('.');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // 'class'
                     match = stringMatcher("class", 5);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         voidClassReference$RuleMemoStart = startIndex;
         voidClassReference$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            voidClassReference$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.VOID_CLASS_REFERENCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            voidClassReference$RuleMemoFirstNode = currentNode;
            voidClassReference$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         voidClassReference$RuleMemoStart = startIndex;
         voidClassReference$RuleMemoEnd = -1;
         voidClassReference$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ThisMethodCall : (This Arguments)
   protected boolean thisMethodCall$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (thisMethodCall$RuleMemoStart == index) {
         if (thisMethodCall$RuleMemoStart <= thisMethodCall$RuleMemoEnd) {
            index = thisMethodCall$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (thisMethodCall$RuleMemoStart == thisMethodCall$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.THIS_METHOD_CALL, thisMethodCall$RuleMemoStart, thisMethodCall$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(thisMethodCall$RuleMemoFirstNode != null) {
                  lastNode.setSibling(thisMethodCall$RuleMemoFirstNode);
                  currentNode = thisMethodCall$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (This Arguments)
      // This
      match = this$Rule();
      if (match) {
         // Arguments
         match = arguments$Rule();
      }
      if (match) {
         thisMethodCall$RuleMemoStart = startIndex;
         thisMethodCall$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            thisMethodCall$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.THIS_METHOD_CALL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            thisMethodCall$RuleMemoFirstNode = currentNode;
            thisMethodCall$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         thisMethodCall$RuleMemoStart = startIndex;
         thisMethodCall$RuleMemoEnd = -1;
         thisMethodCall$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //This : ('this' TestNoAlpha OptionalSpacing)
   protected boolean this$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (this$RuleMemoStart == index) {
         if (this$RuleMemoStart <= this$RuleMemoEnd) {
            index = this$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (this$RuleMemoStart == this$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.THIS, this$RuleMemoStart, this$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(this$RuleMemoFirstNode != null) {
                  lastNode.setSibling(this$RuleMemoFirstNode);
                  currentNode = this$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('this' TestNoAlpha OptionalSpacing)
      // 'this'
      match = stringMatcher("this", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         this$RuleMemoStart = startIndex;
         this$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            this$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.THIS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            this$RuleMemoFirstNode = currentNode;
            this$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         this$RuleMemoStart = startIndex;
         this$RuleMemoEnd = -1;
         this$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Super : ('super' TestNoAlpha OptionalSpacing)
   protected boolean super$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (super$RuleMemoStart == index) {
         if (super$RuleMemoStart <= super$RuleMemoEnd) {
            index = super$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (super$RuleMemoStart == super$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SUPER, super$RuleMemoStart, super$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(super$RuleMemoFirstNode != null) {
                  lastNode.setSibling(super$RuleMemoFirstNode);
                  currentNode = super$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('super' TestNoAlpha OptionalSpacing)
      // 'super'
      match = stringMatcher("super", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         super$RuleMemoStart = startIndex;
         super$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            super$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SUPER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            super$RuleMemoFirstNode = currentNode;
            super$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         super$RuleMemoStart = startIndex;
         super$RuleMemoEnd = -1;
         super$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SuperMethodCall : (Super '.' OptionalSpacing Identifier Arguments)
   protected boolean superMethodCall$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (superMethodCall$RuleMemoStart == index) {
         if (superMethodCall$RuleMemoStart <= superMethodCall$RuleMemoEnd) {
            index = superMethodCall$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (superMethodCall$RuleMemoStart == superMethodCall$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SUPER_METHOD_CALL, superMethodCall$RuleMemoStart, superMethodCall$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(superMethodCall$RuleMemoFirstNode != null) {
                  lastNode.setSibling(superMethodCall$RuleMemoFirstNode);
                  currentNode = superMethodCall$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Super '.' OptionalSpacing Identifier Arguments)
      // Super
      match = super$Rule();
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Identifier
               match = identifier$Rule();
               if (match) {
                  // Arguments
                  match = arguments$Rule();
               }
            }
         }
      }
      if (match) {
         superMethodCall$RuleMemoStart = startIndex;
         superMethodCall$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            superMethodCall$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SUPER_METHOD_CALL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            superMethodCall$RuleMemoFirstNode = currentNode;
            superMethodCall$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         superMethodCall$RuleMemoStart = startIndex;
         superMethodCall$RuleMemoEnd = -1;
         superMethodCall$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SuperConstructorCall : (Super Arguments)
   protected boolean superConstructorCall$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (superConstructorCall$RuleMemoStart == index) {
         if (superConstructorCall$RuleMemoStart <= superConstructorCall$RuleMemoEnd) {
            index = superConstructorCall$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (superConstructorCall$RuleMemoStart == superConstructorCall$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SUPER_CONSTRUCTOR_CALL, superConstructorCall$RuleMemoStart, superConstructorCall$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(superConstructorCall$RuleMemoFirstNode != null) {
                  lastNode.setSibling(superConstructorCall$RuleMemoFirstNode);
                  currentNode = superConstructorCall$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Super Arguments)
      // Super
      match = super$Rule();
      if (match) {
         // Arguments
         match = arguments$Rule();
      }
      if (match) {
         superConstructorCall$RuleMemoStart = startIndex;
         superConstructorCall$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            superConstructorCall$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SUPER_CONSTRUCTOR_CALL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            superConstructorCall$RuleMemoFirstNode = currentNode;
            superConstructorCall$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         superConstructorCall$RuleMemoStart = startIndex;
         superConstructorCall$RuleMemoEnd = -1;
         superConstructorCall$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SuperFieldAccess : (Super '.' OptionalSpacing Identifier)
   protected boolean superFieldAccess$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (superFieldAccess$RuleMemoStart == index) {
         if (superFieldAccess$RuleMemoStart <= superFieldAccess$RuleMemoEnd) {
            index = superFieldAccess$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (superFieldAccess$RuleMemoStart == superFieldAccess$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SUPER_FIELD_ACCESS, superFieldAccess$RuleMemoStart, superFieldAccess$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(superFieldAccess$RuleMemoFirstNode != null) {
                  lastNode.setSibling(superFieldAccess$RuleMemoFirstNode);
                  currentNode = superFieldAccess$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Super '.' OptionalSpacing Identifier)
      // Super
      match = super$Rule();
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Identifier
               match = identifier$Rule();
            }
         }
      }
      if (match) {
         superFieldAccess$RuleMemoStart = startIndex;
         superFieldAccess$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            superFieldAccess$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SUPER_FIELD_ACCESS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            superFieldAccess$RuleMemoFirstNode = currentNode;
            superFieldAccess$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         superFieldAccess$RuleMemoStart = startIndex;
         superFieldAccess$RuleMemoEnd = -1;
         superFieldAccess$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //New : ('new' TestNoAlpha OptionalSpacing)
   protected boolean new$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (new$RuleMemoStart == index) {
         if (new$RuleMemoStart <= new$RuleMemoEnd) {
            index = new$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (new$RuleMemoStart == new$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.NEW, new$RuleMemoStart, new$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(new$RuleMemoFirstNode != null) {
                  lastNode.setSibling(new$RuleMemoFirstNode);
                  currentNode = new$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('new' TestNoAlpha OptionalSpacing)
      // 'new'
      match = stringMatcher("new", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         new$RuleMemoStart = startIndex;
         new$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            new$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.NEW, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            new$RuleMemoFirstNode = currentNode;
            new$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         new$RuleMemoStart = startIndex;
         new$RuleMemoEnd = -1;
         new$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassCreator : (New CreatedName Arguments ClassBody?)
   protected boolean classCreator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (classCreator$RuleMemoStart == index) {
         if (classCreator$RuleMemoStart <= classCreator$RuleMemoEnd) {
            index = classCreator$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (classCreator$RuleMemoStart == classCreator$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_CREATOR, classCreator$RuleMemoStart, classCreator$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(classCreator$RuleMemoFirstNode != null) {
                  lastNode.setSibling(classCreator$RuleMemoFirstNode);
                  currentNode = classCreator$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (New CreatedName Arguments ClassBody?)
      // New
      match = new$Rule();
      if (match) {
         // CreatedName
         match = createdName$Rule();
         if (match) {
            // Arguments
            match = arguments$Rule();
            if (match) {
               // ClassBody?
               // ClassBody
               classBody$Rule();
               match = true;
            }
         }
      }
      if (match) {
         classCreator$RuleMemoStart = startIndex;
         classCreator$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            classCreator$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_CREATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            classCreator$RuleMemoFirstNode = currentNode;
            classCreator$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         classCreator$RuleMemoStart = startIndex;
         classCreator$RuleMemoEnd = -1;
         classCreator$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ArrayCreator : (InitializedArrayCreator | EmptyArrayCreator)
   protected boolean arrayCreator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (arrayCreator$RuleMemoStart == index) {
         if (arrayCreator$RuleMemoStart <= arrayCreator$RuleMemoEnd) {
            index = arrayCreator$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (arrayCreator$RuleMemoStart == arrayCreator$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ARRAY_CREATOR, arrayCreator$RuleMemoStart, arrayCreator$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(arrayCreator$RuleMemoFirstNode != null) {
                  lastNode.setSibling(arrayCreator$RuleMemoFirstNode);
                  currentNode = arrayCreator$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (InitializedArrayCreator | EmptyArrayCreator)
      switch(buffer.getChar(index)) {
         case 'n': {
            // InitializedArrayCreator
            match = initializedArrayCreator$Rule();
            if (! match) {
               // EmptyArrayCreator
               match = emptyArrayCreator$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         arrayCreator$RuleMemoStart = startIndex;
         arrayCreator$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            arrayCreator$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ARRAY_CREATOR, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            arrayCreator$RuleMemoFirstNode = currentNode;
            arrayCreator$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         arrayCreator$RuleMemoStart = startIndex;
         arrayCreator$RuleMemoEnd = -1;
         arrayCreator$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MethodCall : (Identifier Arguments)
   protected boolean methodCall$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (methodCall$RuleMemoStart == index) {
         if (methodCall$RuleMemoStart <= methodCall$RuleMemoEnd) {
            index = methodCall$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (methodCall$RuleMemoStart == methodCall$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.METHOD_CALL, methodCall$RuleMemoStart, methodCall$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(methodCall$RuleMemoFirstNode != null) {
                  lastNode.setSibling(methodCall$RuleMemoFirstNode);
                  currentNode = methodCall$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier Arguments)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // Arguments
         match = arguments$Rule();
      }
      if (match) {
         methodCall$RuleMemoStart = startIndex;
         methodCall$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            methodCall$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.METHOD_CALL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            methodCall$RuleMemoFirstNode = currentNode;
            methodCall$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         methodCall$RuleMemoStart = startIndex;
         methodCall$RuleMemoEnd = -1;
         methodCall$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ArrayIndex : DimExpr+
   protected boolean arrayIndex$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // DimExpr+
      // DimExpr
      match = dimExpr$Rule();
      if (match) {
         do {
            // DimExpr
            match = dimExpr$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ARRAY_INDEX, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DimExpr : ('[' OptionalSpacing Expression ']' OptionalSpacing)
   protected boolean dimExpr$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dimExpr$RuleMemoStart == index) {
         if (dimExpr$RuleMemoStart <= dimExpr$RuleMemoEnd) {
            index = dimExpr$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (dimExpr$RuleMemoStart == dimExpr$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.DIM_EXPR, dimExpr$RuleMemoStart, dimExpr$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(dimExpr$RuleMemoFirstNode != null) {
                  lastNode.setSibling(dimExpr$RuleMemoFirstNode);
                  currentNode = dimExpr$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('[' OptionalSpacing Expression ']' OptionalSpacing)
      // '['
      match = charMatcher('[');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Expression
            match = expression$Rule();
            if (match) {
               // ']'
               match = charMatcher(']');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         dimExpr$RuleMemoStart = startIndex;
         dimExpr$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            dimExpr$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.DIM_EXPR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            dimExpr$RuleMemoFirstNode = currentNode;
            dimExpr$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         dimExpr$RuleMemoStart = startIndex;
         dimExpr$RuleMemoEnd = -1;
         dimExpr$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BasicType : (BasicTypeName TestNoAlpha OptionalSpacing)
   protected boolean basicType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (basicType$RuleMemoStart == index) {
         if (basicType$RuleMemoStart <= basicType$RuleMemoEnd) {
            index = basicType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (basicType$RuleMemoStart == basicType$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE, basicType$RuleMemoStart, basicType$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(basicType$RuleMemoFirstNode != null) {
                  lastNode.setSibling(basicType$RuleMemoFirstNode);
                  currentNode = basicType$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BasicTypeName TestNoAlpha OptionalSpacing)
      // BasicTypeName
      match = basicTypeName$Rule();
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         basicType$RuleMemoStart = startIndex;
         basicType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            basicType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            basicType$RuleMemoFirstNode = currentNode;
            basicType$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         basicType$RuleMemoStart = startIndex;
         basicType$RuleMemoEnd = -1;
         basicType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BasicTypeName : ('byte' | 'short' | 'char' | 'int' | 'long' | 'float' | 'double' | 'boolean')
   protected boolean basicTypeName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('byte' | 'short' | 'char' | 'int' | 'long' | 'float' | 'double' | 'boolean')
      switch(buffer.getChar(index)) {
         case 'l': {
            ++index;
            // 'ong'
            if (match = stringTest("ong", 3)) {
               index += 3;
            }
            break;
         }
         case 'b': {
            ++index;
            // ('oolean' | 'yte')
            switch(buffer.getChar(index)) {
               case 'o': {
                  ++index;
                  // 'olean'
                  if (match = stringTest("olean", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'y': {
                  ++index;
                  // 'te'
                  if (match = stringTest("te", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 's': {
            ++index;
            // 'hort'
            if (match = stringTest("hort", 4)) {
               index += 4;
            }
            break;
         }
         case 'c': {
            ++index;
            // 'har'
            if (match = stringTest("har", 3)) {
               index += 3;
            }
            break;
         }
         case 'd': {
            ++index;
            // 'ouble'
            if (match = stringTest("ouble", 5)) {
               index += 5;
            }
            break;
         }
         case 'f': {
            ++index;
            // 'loat'
            if (match = stringTest("loat", 4)) {
               index += 4;
            }
            break;
         }
         case 'i': {
            ++index;
            // 'nt'
            if (match = stringTest("nt", 2)) {
               index += 2;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NonWildcardTypeArguments : ('<' OptionalSpacing (ReferenceType (',' OptionalSpacing ReferenceType)*)? '>' OptionalSpacing)
   protected boolean nonWildcardTypeArguments$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (nonWildcardTypeArguments$RuleMemoStart == index) {
         if (nonWildcardTypeArguments$RuleMemoStart <= nonWildcardTypeArguments$RuleMemoEnd) {
            index = nonWildcardTypeArguments$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (nonWildcardTypeArguments$RuleMemoStart == nonWildcardTypeArguments$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.NON_WILDCARD_TYPE_ARGUMENTS, nonWildcardTypeArguments$RuleMemoStart, nonWildcardTypeArguments$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(nonWildcardTypeArguments$RuleMemoFirstNode != null) {
                  lastNode.setSibling(nonWildcardTypeArguments$RuleMemoFirstNode);
                  currentNode = nonWildcardTypeArguments$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('<' OptionalSpacing (ReferenceType (',' OptionalSpacing ReferenceType)*)? '>' OptionalSpacing)
      // '<'
      match = charMatcher('<');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // (ReferenceType (',' OptionalSpacing ReferenceType)*)?
            // (ReferenceType (',' OptionalSpacing ReferenceType)*)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ReferenceType
            match = referenceType$Rule();
            if (match) {
               // (',' OptionalSpacing ReferenceType)*
               do {
                  // (',' OptionalSpacing ReferenceType)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ReferenceType
                        match = referenceType$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
            // '>'
            match = charMatcher('>');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         nonWildcardTypeArguments$RuleMemoStart = startIndex;
         nonWildcardTypeArguments$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            nonWildcardTypeArguments$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.NON_WILDCARD_TYPE_ARGUMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            nonWildcardTypeArguments$RuleMemoFirstNode = currentNode;
            nonWildcardTypeArguments$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         nonWildcardTypeArguments$RuleMemoStart = startIndex;
         nonWildcardTypeArguments$RuleMemoEnd = -1;
         nonWildcardTypeArguments$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CreatedName : (TypeName ('.' OptionalSpacing TypeName)*)
   protected boolean createdName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (TypeName ('.' OptionalSpacing TypeName)*)
      // TypeName
      match = typeName$Rule();
      if (match) {
         // ('.' OptionalSpacing TypeName)*
         do {
            // ('.' OptionalSpacing TypeName)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // TypeName
                  match = typeName$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.CREATED_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InitializedArrayCreator : (New ArrayType Dim+ ArrayInitializer)
   protected boolean initializedArrayCreator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (initializedArrayCreator$RuleMemoStart == index) {
         if (initializedArrayCreator$RuleMemoStart <= initializedArrayCreator$RuleMemoEnd) {
            index = initializedArrayCreator$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (initializedArrayCreator$RuleMemoStart == initializedArrayCreator$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.INITIALIZED_ARRAY_CREATOR, initializedArrayCreator$RuleMemoStart, initializedArrayCreator$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(initializedArrayCreator$RuleMemoFirstNode != null) {
                  lastNode.setSibling(initializedArrayCreator$RuleMemoFirstNode);
                  currentNode = initializedArrayCreator$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (New ArrayType Dim+ ArrayInitializer)
      // New
      match = new$Rule();
      if (match) {
         // ArrayType
         match = arrayType$Rule();
         if (match) {
            // Dim+
            // Dim
            match = dim$Rule();
            if (match) {
               do {
                  // Dim
                  match = dim$Rule();
               } while(match);
               match = true;
            }
            if (match) {
               // ArrayInitializer
               match = arrayInitializer$Rule();
            }
         }
      }
      if (match) {
         initializedArrayCreator$RuleMemoStart = startIndex;
         initializedArrayCreator$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            initializedArrayCreator$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.INITIALIZED_ARRAY_CREATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            initializedArrayCreator$RuleMemoFirstNode = currentNode;
            initializedArrayCreator$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         initializedArrayCreator$RuleMemoStart = startIndex;
         initializedArrayCreator$RuleMemoEnd = -1;
         initializedArrayCreator$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EmptyArrayCreator : (New ArrayType DimExpr+ Dimensions)
   protected boolean emptyArrayCreator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (emptyArrayCreator$RuleMemoStart == index) {
         if (emptyArrayCreator$RuleMemoStart <= emptyArrayCreator$RuleMemoEnd) {
            index = emptyArrayCreator$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (emptyArrayCreator$RuleMemoStart == emptyArrayCreator$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.EMPTY_ARRAY_CREATOR, emptyArrayCreator$RuleMemoStart, emptyArrayCreator$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(emptyArrayCreator$RuleMemoFirstNode != null) {
                  lastNode.setSibling(emptyArrayCreator$RuleMemoFirstNode);
                  currentNode = emptyArrayCreator$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (New ArrayType DimExpr+ Dimensions)
      // New
      match = new$Rule();
      if (match) {
         // ArrayType
         match = arrayType$Rule();
         if (match) {
            // DimExpr+
            // DimExpr
            match = dimExpr$Rule();
            if (match) {
               do {
                  // DimExpr
                  match = dimExpr$Rule();
               } while(match);
               match = true;
            }
            if (match) {
               // Dimensions
               match = dimensions$Rule();
            }
         }
      }
      if (match) {
         emptyArrayCreator$RuleMemoStart = startIndex;
         emptyArrayCreator$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            emptyArrayCreator$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.EMPTY_ARRAY_CREATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            emptyArrayCreator$RuleMemoFirstNode = currentNode;
            emptyArrayCreator$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         emptyArrayCreator$RuleMemoStart = startIndex;
         emptyArrayCreator$RuleMemoEnd = -1;
         emptyArrayCreator$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ArrayType : (QualifiedClassName | BasicType)
   protected boolean arrayType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (arrayType$RuleMemoStart == index) {
         if (arrayType$RuleMemoStart <= arrayType$RuleMemoEnd) {
            index = arrayType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (arrayType$RuleMemoStart == arrayType$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ARRAY_TYPE, arrayType$RuleMemoStart, arrayType$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(arrayType$RuleMemoFirstNode != null) {
                  lastNode.setSibling(arrayType$RuleMemoFirstNode);
                  currentNode = arrayType$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QualifiedClassName | BasicType)
      switch(buffer.getChar(index)) {
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // QualifiedClassName
            match = qualifiedClassName$Rule();
            break;
         }
         case 'b':
         case 'c':
         case 's':
         case 'd':
         case 'f':
         case 'i':
         case 'l': {
            // QualifiedClassName
            match = qualifiedClassName$Rule();
            if (! match) {
               // BasicType
               match = basicType$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         arrayType$RuleMemoStart = startIndex;
         arrayType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            arrayType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ARRAY_TYPE, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            arrayType$RuleMemoFirstNode = currentNode;
            arrayType$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         arrayType$RuleMemoStart = startIndex;
         arrayType$RuleMemoEnd = -1;
         arrayType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Dim : ('[' OptionalSpacing ']' OptionalSpacing)
   protected boolean dim$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dim$RuleMemoStart == index) {
         if (dim$RuleMemoStart <= dim$RuleMemoEnd) {
            index = dim$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (dim$RuleMemoStart == dim$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.DIM, dim$RuleMemoStart, dim$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(dim$RuleMemoFirstNode != null) {
                  lastNode.setSibling(dim$RuleMemoFirstNode);
                  currentNode = dim$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('[' OptionalSpacing ']' OptionalSpacing)
      // '['
      match = charMatcher('[');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ']'
            match = charMatcher(']');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         dim$RuleMemoStart = startIndex;
         dim$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            dim$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.DIM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            dim$RuleMemoFirstNode = currentNode;
            dim$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         dim$RuleMemoStart = startIndex;
         dim$RuleMemoEnd = -1;
         dim$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ArrayInitializer : ('{' OptionalSpacing (VariableInitializer (',' OptionalSpacing VariableInitializer)*)? (',' OptionalSpacing)? '}' OptionalSpacing)
   protected boolean arrayInitializer$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (arrayInitializer$RuleMemoStart == index) {
         if (arrayInitializer$RuleMemoStart <= arrayInitializer$RuleMemoEnd) {
            index = arrayInitializer$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (arrayInitializer$RuleMemoStart == arrayInitializer$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ARRAY_INITIALIZER, arrayInitializer$RuleMemoStart, arrayInitializer$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(arrayInitializer$RuleMemoFirstNode != null) {
                  lastNode.setSibling(arrayInitializer$RuleMemoFirstNode);
                  currentNode = arrayInitializer$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('{' OptionalSpacing (VariableInitializer (',' OptionalSpacing VariableInitializer)*)? (',' OptionalSpacing)? '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // (VariableInitializer (',' OptionalSpacing VariableInitializer)*)?
            // (VariableInitializer (',' OptionalSpacing VariableInitializer)*)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // VariableInitializer
            match = variableInitializer$Rule();
            if (match) {
               // (',' OptionalSpacing VariableInitializer)*
               do {
                  // (',' OptionalSpacing VariableInitializer)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // VariableInitializer
                        match = variableInitializer$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
            match = true;
            // (',' OptionalSpacing)?
            // (',' OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
                  currentNode = lastNode_3;
               }
            }
            // '}'
            match = charMatcher('}');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         arrayInitializer$RuleMemoStart = startIndex;
         arrayInitializer$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            arrayInitializer$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ARRAY_INITIALIZER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            arrayInitializer$RuleMemoFirstNode = currentNode;
            arrayInitializer$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         arrayInitializer$RuleMemoStart = startIndex;
         arrayInitializer$RuleMemoEnd = -1;
         arrayInitializer$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypedName : (Identifier NonWildcardTypeArguments)
   protected boolean typedName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typedName$RuleMemoStart == index) {
         if (typedName$RuleMemoStart <= typedName$RuleMemoEnd) {
            index = typedName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (typedName$RuleMemoStart == typedName$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPED_NAME, typedName$RuleMemoStart, typedName$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(typedName$RuleMemoFirstNode != null) {
                  lastNode.setSibling(typedName$RuleMemoFirstNode);
                  currentNode = typedName$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier NonWildcardTypeArguments)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // NonWildcardTypeArguments
         match = nonWildcardTypeArguments$Rule();
      }
      if (match) {
         typedName$RuleMemoStart = startIndex;
         typedName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typedName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPED_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typedName$RuleMemoFirstNode = currentNode;
            typedName$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         typedName$RuleMemoStart = startIndex;
         typedName$RuleMemoEnd = -1;
         typedName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeName : (TypedName | Identifier)
   protected boolean typeName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typeName$RuleMemoStart == index) {
         if (typeName$RuleMemoStart <= typeName$RuleMemoEnd) {
            index = typeName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (typeName$RuleMemoStart == typeName$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPE_NAME, typeName$RuleMemoStart, typeName$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(typeName$RuleMemoFirstNode != null) {
                  lastNode.setSibling(typeName$RuleMemoFirstNode);
                  currentNode = typeName$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TypedName | Identifier)
      switch(buffer.getChar(index)) {
         case '$':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // TypedName
            match = typedName$Rule();
            if (! match) {
               // Identifier
               match = identifier$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         typeName$RuleMemoStart = startIndex;
         typeName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typeName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPE_NAME, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typeName$RuleMemoFirstNode = currentNode;
            typeName$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         typeName$RuleMemoStart = startIndex;
         typeName$RuleMemoEnd = -1;
         typeName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Array : ((BasicType | QualifiedClassName) Dim+)
   protected boolean array$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (array$RuleMemoStart == index) {
         if (array$RuleMemoStart <= array$RuleMemoEnd) {
            index = array$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (array$RuleMemoStart == array$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ARRAY, array$RuleMemoStart, array$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(array$RuleMemoFirstNode != null) {
                  lastNode.setSibling(array$RuleMemoFirstNode);
                  currentNode = array$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((BasicType | QualifiedClassName) Dim+)
      // (BasicType | QualifiedClassName)
      switch(buffer.getChar(index)) {
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // QualifiedClassName
            match = qualifiedClassName$Rule();
            break;
         }
         case 'b':
         case 'c':
         case 's':
         case 'd':
         case 'f':
         case 'i':
         case 'l': {
            // BasicType
            match = basicType$Rule();
            if (! match) {
               // QualifiedClassName
               match = qualifiedClassName$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // Dim+
         // Dim
         match = dim$Rule();
         if (match) {
            do {
               // Dim
               match = dim$Rule();
            } while(match);
            match = true;
         }
      }
      if (match) {
         array$RuleMemoStart = startIndex;
         array$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            array$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ARRAY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            array$RuleMemoFirstNode = currentNode;
            array$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         array$RuleMemoStart = startIndex;
         array$RuleMemoEnd = -1;
         array$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BasicTypeArray : (BasicType Dim+)
   protected boolean basicTypeArray$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (basicTypeArray$RuleMemoStart == index) {
         if (basicTypeArray$RuleMemoStart <= basicTypeArray$RuleMemoEnd) {
            index = basicTypeArray$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (basicTypeArray$RuleMemoStart == basicTypeArray$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE_ARRAY, basicTypeArray$RuleMemoStart, basicTypeArray$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(basicTypeArray$RuleMemoFirstNode != null) {
                  lastNode.setSibling(basicTypeArray$RuleMemoFirstNode);
                  currentNode = basicTypeArray$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BasicType Dim+)
      // BasicType
      match = basicType$Rule();
      if (match) {
         // Dim+
         // Dim
         match = dim$Rule();
         if (match) {
            do {
               // Dim
               match = dim$Rule();
            } while(match);
            match = true;
         }
      }
      if (match) {
         basicTypeArray$RuleMemoStart = startIndex;
         basicTypeArray$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            basicTypeArray$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BASIC_TYPE_ARRAY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            basicTypeArray$RuleMemoFirstNode = currentNode;
            basicTypeArray$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         basicTypeArray$RuleMemoStart = startIndex;
         basicTypeArray$RuleMemoEnd = -1;
         basicTypeArray$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QualifiedClassNameArray : (QualifiedClassName Dim+)
   protected boolean qualifiedClassNameArray$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (qualifiedClassNameArray$RuleMemoStart == index) {
         if (qualifiedClassNameArray$RuleMemoStart <= qualifiedClassNameArray$RuleMemoEnd) {
            index = qualifiedClassNameArray$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (qualifiedClassNameArray$RuleMemoStart == qualifiedClassNameArray$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.QUALIFIED_CLASS_NAME_ARRAY, qualifiedClassNameArray$RuleMemoStart, qualifiedClassNameArray$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(qualifiedClassNameArray$RuleMemoFirstNode != null) {
                  lastNode.setSibling(qualifiedClassNameArray$RuleMemoFirstNode);
                  currentNode = qualifiedClassNameArray$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QualifiedClassName Dim+)
      // QualifiedClassName
      match = qualifiedClassName$Rule();
      if (match) {
         // Dim+
         // Dim
         match = dim$Rule();
         if (match) {
            do {
               // Dim
               match = dim$Rule();
            } while(match);
            match = true;
         }
      }
      if (match) {
         qualifiedClassNameArray$RuleMemoStart = startIndex;
         qualifiedClassNameArray$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            qualifiedClassNameArray$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.QUALIFIED_CLASS_NAME_ARRAY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            qualifiedClassNameArray$RuleMemoFirstNode = currentNode;
            qualifiedClassNameArray$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         qualifiedClassNameArray$RuleMemoStart = startIndex;
         qualifiedClassNameArray$RuleMemoEnd = -1;
         qualifiedClassNameArray$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClassName : (TypedClassName | Identifier)
   protected boolean className$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (className$RuleMemoStart == index) {
         if (className$RuleMemoStart <= className$RuleMemoEnd) {
            index = className$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (className$RuleMemoStart == className$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CLASS_NAME, className$RuleMemoStart, className$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(className$RuleMemoFirstNode != null) {
                  lastNode.setSibling(className$RuleMemoFirstNode);
                  currentNode = className$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TypedClassName | Identifier)
      switch(buffer.getChar(index)) {
         case '$':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // TypedClassName
            match = typedClassName$Rule();
            if (! match) {
               // Identifier
               match = identifier$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         className$RuleMemoStart = startIndex;
         className$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            className$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CLASS_NAME, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            className$RuleMemoFirstNode = currentNode;
            className$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         className$RuleMemoStart = startIndex;
         className$RuleMemoEnd = -1;
         className$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypedClassName : (Identifier TypeArguments)
   protected boolean typedClassName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typedClassName$RuleMemoStart == index) {
         if (typedClassName$RuleMemoStart <= typedClassName$RuleMemoEnd) {
            index = typedClassName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (typedClassName$RuleMemoStart == typedClassName$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPED_CLASS_NAME, typedClassName$RuleMemoStart, typedClassName$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(typedClassName$RuleMemoFirstNode != null) {
                  lastNode.setSibling(typedClassName$RuleMemoFirstNode);
                  currentNode = typedClassName$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier TypeArguments)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // TypeArguments
         match = typeArguments$Rule();
      }
      if (match) {
         typedClassName$RuleMemoStart = startIndex;
         typedClassName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typedClassName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPED_CLASS_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typedClassName$RuleMemoFirstNode = currentNode;
            typedClassName$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         typedClassName$RuleMemoStart = startIndex;
         typedClassName$RuleMemoEnd = -1;
         typedClassName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeArguments : ('<' OptionalSpacing TypeArgument (',' OptionalSpacing TypeArgument)* '>' OptionalSpacing)
   protected boolean typeArguments$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('<' OptionalSpacing TypeArgument (',' OptionalSpacing TypeArgument)* '>' OptionalSpacing)
      // '<'
      match = charMatcher('<');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // TypeArgument
            match = typeArgument$Rule();
            if (match) {
               // (',' OptionalSpacing TypeArgument)*
               do {
                  // (',' OptionalSpacing TypeArgument)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // TypeArgument
                        match = typeArgument$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // '>'
               match = charMatcher('>');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.TYPE_ARGUMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeArgument : (ReferenceType | QueryType)
   protected boolean typeArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typeArgument$RuleMemoStart == index) {
         if (typeArgument$RuleMemoStart <= typeArgument$RuleMemoEnd) {
            index = typeArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (typeArgument$RuleMemoStart == typeArgument$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPE_ARGUMENT, typeArgument$RuleMemoStart, typeArgument$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(typeArgument$RuleMemoFirstNode != null) {
                  lastNode.setSibling(typeArgument$RuleMemoFirstNode);
                  currentNode = typeArgument$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ReferenceType | QueryType)
      switch(buffer.getChar(index)) {
         case '?': {
            // QueryType
            match = queryType$Rule();
            break;
         }
         case '$':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ReferenceType
            match = referenceType$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         typeArgument$RuleMemoStart = startIndex;
         typeArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typeArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPE_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typeArgument$RuleMemoFirstNode = currentNode;
            typeArgument$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         typeArgument$RuleMemoStart = startIndex;
         typeArgument$RuleMemoEnd = -1;
         typeArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryType : ('?' OptionalSpacing ((('extends' | 'super') TestNoAlpha OptionalSpacing) ReferenceType)?)
   protected boolean queryType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (queryType$RuleMemoStart == index) {
         if (queryType$RuleMemoStart <= queryType$RuleMemoEnd) {
            index = queryType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (queryType$RuleMemoStart == queryType$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.QUERY_TYPE, queryType$RuleMemoStart, queryType$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(queryType$RuleMemoFirstNode != null) {
                  lastNode.setSibling(queryType$RuleMemoFirstNode);
                  currentNode = queryType$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('?' OptionalSpacing ((('extends' | 'super') TestNoAlpha OptionalSpacing) ReferenceType)?)
      // '?'
      match = charMatcher('?');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ((('extends' | 'super') TestNoAlpha OptionalSpacing) ReferenceType)?
            // ((('extends' | 'super') TestNoAlpha OptionalSpacing) ReferenceType)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // (('extends' | 'super') TestNoAlpha OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('extends' | 'super')
            int startIndex_3 = index;
            switch(buffer.getChar(index)) {
               case 's': {
                  ++index;
                  // 'uper'
                  if (match = stringTest("uper", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'e': {
                  ++index;
                  // 'xtends'
                  if (match = stringTest("xtends", 6)) {
                     index += 6;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            if (! match) {
               index = startIndex_3;
            } else if(! currentRuleIsAtomic) {
               currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
               currentNode = currentNode.getSibling();
            }
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
            if (match) {
               // ReferenceType
               match = referenceType$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
            match = true;
         }
      }
      if (match) {
         queryType$RuleMemoStart = startIndex;
         queryType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            queryType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.QUERY_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            queryType$RuleMemoFirstNode = currentNode;
            queryType$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         queryType$RuleMemoStart = startIndex;
         queryType$RuleMemoEnd = -1;
         queryType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeParameter : (Identifier Bound?)
   protected boolean typeParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typeParameter$RuleMemoStart == index) {
         if (typeParameter$RuleMemoStart <= typeParameter$RuleMemoEnd) {
            index = typeParameter$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (typeParameter$RuleMemoStart == typeParameter$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TYPE_PARAMETER, typeParameter$RuleMemoStart, typeParameter$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(typeParameter$RuleMemoFirstNode != null) {
                  lastNode.setSibling(typeParameter$RuleMemoFirstNode);
                  currentNode = typeParameter$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier Bound?)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // Bound?
         // Bound
         bound$Rule();
         match = true;
      }
      if (match) {
         typeParameter$RuleMemoStart = startIndex;
         typeParameter$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typeParameter$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TYPE_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typeParameter$RuleMemoFirstNode = currentNode;
            typeParameter$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         typeParameter$RuleMemoStart = startIndex;
         typeParameter$RuleMemoEnd = -1;
         typeParameter$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Bound : ('extends' TestNoAlpha OptionalSpacing QualifiedClassName ('&' OptionalSpacing QualifiedClassName)*)
   protected boolean bound$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('extends' TestNoAlpha OptionalSpacing QualifiedClassName ('&' OptionalSpacing QualifiedClassName)*)
      // 'extends'
      match = stringMatcher("extends", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // QualifiedClassName
               match = qualifiedClassName$Rule();
               if (match) {
                  // ('&' OptionalSpacing QualifiedClassName)*
                  do {
                     // ('&' OptionalSpacing QualifiedClassName)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // '&'
                     match = charMatcher('&');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // QualifiedClassName
                           match = qualifiedClassName$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.BOUND, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnnotationTypeBody : ('{' OptionalSpacing AnnotationTypeElementDeclaration* '}' OptionalSpacing)
   protected boolean annotationTypeBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('{' OptionalSpacing AnnotationTypeElementDeclaration* '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // AnnotationTypeElementDeclaration*
            do {
               // AnnotationTypeElementDeclaration
               match = annotationTypeElementDeclaration$Rule();
            } while(match);
            // '}'
            match = charMatcher('}');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATION_TYPE_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnnotationTypeElementDeclaration : (AnnotationMethod | AnnotationsConstants | ClassDeclaration | EnumDeclaration | InterfaceDeclaration | AnnotationDeclaration | Semicolon)
   protected boolean annotationTypeElementDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (AnnotationMethod | AnnotationsConstants | ClassDeclaration | EnumDeclaration | InterfaceDeclaration | AnnotationDeclaration | Semicolon)
      switch(buffer.getChar(index)) {
         case ';': {
            // Semicolon
            match = semicolon$Rule();
            break;
         }
         case '@':
         case 'p':
         case 'a':
         case 's':
         case 't':
         case 'f':
         case 'v':
         case 'n': {
            // AnnotationMethod
            match = annotationMethod$Rule();
            if (! match) {
               // AnnotationsConstants
               match = annotationsConstants$Rule();
               if (! match) {
                  // ClassDeclaration
                  match = classDeclaration$Rule();
                  if (! match) {
                     // EnumDeclaration
                     match = enumDeclaration$Rule();
                     if (! match) {
                        // InterfaceDeclaration
                        match = interfaceDeclaration$Rule();
                        if (! match) {
                           // AnnotationDeclaration
                           match = annotationDeclaration$Rule();
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case 'd':
         case '$':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'q':
         case 'r':
         case 'u':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // AnnotationMethod
            match = annotationMethod$Rule();
            if (! match) {
               // AnnotationsConstants
               match = annotationsConstants$Rule();
            }
            break;
         }
         case 'c': {
            // AnnotationMethod
            match = annotationMethod$Rule();
            if (! match) {
               // AnnotationsConstants
               match = annotationsConstants$Rule();
               if (! match) {
                  // ClassDeclaration
                  match = classDeclaration$Rule();
               }
            }
            break;
         }
         case 'e': {
            // AnnotationMethod
            match = annotationMethod$Rule();
            if (! match) {
               // AnnotationsConstants
               match = annotationsConstants$Rule();
               if (! match) {
                  // EnumDeclaration
                  match = enumDeclaration$Rule();
               }
            }
            break;
         }
         case 'i': {
            // AnnotationMethod
            match = annotationMethod$Rule();
            if (! match) {
               // AnnotationsConstants
               match = annotationsConstants$Rule();
               if (! match) {
                  // InterfaceDeclaration
                  match = interfaceDeclaration$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATION_TYPE_ELEMENT_DECLARATION, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnnotationMethod : (Modifiers Type Identifier '(' OptionalSpacing ')' OptionalSpacing DefaultValue? Semicolon)
   protected boolean annotationMethod$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (annotationMethod$RuleMemoStart == index) {
         if (annotationMethod$RuleMemoStart <= annotationMethod$RuleMemoEnd) {
            index = annotationMethod$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (annotationMethod$RuleMemoStart == annotationMethod$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ANNOTATION_METHOD, annotationMethod$RuleMemoStart, annotationMethod$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(annotationMethod$RuleMemoFirstNode != null) {
                  lastNode.setSibling(annotationMethod$RuleMemoFirstNode);
                  currentNode = annotationMethod$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers Type Identifier '(' OptionalSpacing ')' OptionalSpacing DefaultValue? Semicolon)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // Identifier
            match = identifier$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // DefaultValue?
                           // DefaultValue
                           defaultValue$Rule();
                           // Semicolon
                           match = semicolon$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         annotationMethod$RuleMemoStart = startIndex;
         annotationMethod$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            annotationMethod$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATION_METHOD, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            annotationMethod$RuleMemoFirstNode = currentNode;
            annotationMethod$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         annotationMethod$RuleMemoStart = startIndex;
         annotationMethod$RuleMemoEnd = -1;
         annotationMethod$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnnotationsConstants : (Modifiers Type VariableDeclarations Semicolon)
   protected boolean annotationsConstants$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (annotationsConstants$RuleMemoStart == index) {
         if (annotationsConstants$RuleMemoStart <= annotationsConstants$RuleMemoEnd) {
            index = annotationsConstants$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (annotationsConstants$RuleMemoStart == annotationsConstants$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ANNOTATIONS_CONSTANTS, annotationsConstants$RuleMemoStart, annotationsConstants$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(annotationsConstants$RuleMemoFirstNode != null) {
                  lastNode.setSibling(annotationsConstants$RuleMemoFirstNode);
                  currentNode = annotationsConstants$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Modifiers Type VariableDeclarations Semicolon)
      // Modifiers
      match = modifiers$Rule();
      if (match) {
         // Type
         match = type$Rule();
         if (match) {
            // VariableDeclarations
            match = variableDeclarations$Rule();
            if (match) {
               // Semicolon
               match = semicolon$Rule();
            }
         }
      }
      if (match) {
         annotationsConstants$RuleMemoStart = startIndex;
         annotationsConstants$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            annotationsConstants$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATIONS_CONSTANTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            annotationsConstants$RuleMemoFirstNode = currentNode;
            annotationsConstants$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         annotationsConstants$RuleMemoStart = startIndex;
         annotationsConstants$RuleMemoEnd = -1;
         annotationsConstants$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DefaultValue : ('default' TestNoAlpha OptionalSpacing ElementValue)
   protected boolean defaultValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('default' TestNoAlpha OptionalSpacing ElementValue)
      // 'default'
      match = stringMatcher("default", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ElementValue
               match = elementValue$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.DEFAULT_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElementValue : (ConditionalExpression | Annotation | ElementValueArrayInitializer)
   protected boolean elementValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (elementValue$RuleMemoStart == index) {
         if (elementValue$RuleMemoStart <= elementValue$RuleMemoEnd) {
            index = elementValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (elementValue$RuleMemoStart == elementValue$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE, elementValue$RuleMemoStart, elementValue$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(elementValue$RuleMemoFirstNode != null) {
                  lastNode.setSibling(elementValue$RuleMemoFirstNode);
                  currentNode = elementValue$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConditionalExpression | Annotation | ElementValueArrayInitializer)
      switch(buffer.getChar(index)) {
         case '!':
         case '\"':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '.':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z':
         case '~': {
            // ConditionalExpression
            match = conditionalExpression$Rule();
            break;
         }
         case '{': {
            // ElementValueArrayInitializer
            match = elementValueArrayInitializer$Rule();
            break;
         }
         case '@': {
            // Annotation
            match = annotation$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         elementValue$RuleMemoStart = startIndex;
         elementValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            elementValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            elementValue$RuleMemoFirstNode = currentNode;
            elementValue$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         elementValue$RuleMemoStart = startIndex;
         elementValue$RuleMemoEnd = -1;
         elementValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnnotationParameters : (NormalAnnotationRest | SingleElementAnnotationRest)
   protected boolean annotationParameters$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NormalAnnotationRest | SingleElementAnnotationRest)
      switch(buffer.getChar(index)) {
         case '(': {
            // NormalAnnotationRest
            match = normalAnnotationRest$Rule();
            if (! match) {
               // SingleElementAnnotationRest
               match = singleElementAnnotationRest$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ANNOTATION_PARAMETERS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NormalAnnotationRest : ('(' OptionalSpacing ElementValuePairs? ')' OptionalSpacing)
   protected boolean normalAnnotationRest$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (normalAnnotationRest$RuleMemoStart == index) {
         if (normalAnnotationRest$RuleMemoStart <= normalAnnotationRest$RuleMemoEnd) {
            index = normalAnnotationRest$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (normalAnnotationRest$RuleMemoStart == normalAnnotationRest$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.NORMAL_ANNOTATION_REST, normalAnnotationRest$RuleMemoStart, normalAnnotationRest$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(normalAnnotationRest$RuleMemoFirstNode != null) {
                  lastNode.setSibling(normalAnnotationRest$RuleMemoFirstNode);
                  currentNode = normalAnnotationRest$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing ElementValuePairs? ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ElementValuePairs?
            // ElementValuePairs
            elementValuePairs$Rule();
            // ')'
            match = charMatcher(')');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         normalAnnotationRest$RuleMemoStart = startIndex;
         normalAnnotationRest$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            normalAnnotationRest$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.NORMAL_ANNOTATION_REST, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            normalAnnotationRest$RuleMemoFirstNode = currentNode;
            normalAnnotationRest$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         normalAnnotationRest$RuleMemoStart = startIndex;
         normalAnnotationRest$RuleMemoEnd = -1;
         normalAnnotationRest$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SingleElementAnnotationRest : ('(' OptionalSpacing ElementValue ')' OptionalSpacing)
   protected boolean singleElementAnnotationRest$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (singleElementAnnotationRest$RuleMemoStart == index) {
         if (singleElementAnnotationRest$RuleMemoStart <= singleElementAnnotationRest$RuleMemoEnd) {
            index = singleElementAnnotationRest$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (singleElementAnnotationRest$RuleMemoStart == singleElementAnnotationRest$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SINGLE_ELEMENT_ANNOTATION_REST, singleElementAnnotationRest$RuleMemoStart, singleElementAnnotationRest$RuleMemoEnd, true, true);
                  lastNode.setSibling(currentNode);
               } else if(singleElementAnnotationRest$RuleMemoFirstNode != null) {
                  lastNode.setSibling(singleElementAnnotationRest$RuleMemoFirstNode);
                  currentNode = singleElementAnnotationRest$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing ElementValue ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ElementValue
            match = elementValue$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         singleElementAnnotationRest$RuleMemoStart = startIndex;
         singleElementAnnotationRest$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            singleElementAnnotationRest$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SINGLE_ELEMENT_ANNOTATION_REST, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            singleElementAnnotationRest$RuleMemoFirstNode = currentNode;
            singleElementAnnotationRest$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         singleElementAnnotationRest$RuleMemoStart = startIndex;
         singleElementAnnotationRest$RuleMemoEnd = -1;
         singleElementAnnotationRest$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElementValuePairs : (ElementValuePair (',' OptionalSpacing ElementValuePair)*)
   protected boolean elementValuePairs$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ElementValuePair (',' OptionalSpacing ElementValuePair)*)
      // ElementValuePair
      match = elementValuePair$Rule();
      if (match) {
         // (',' OptionalSpacing ElementValuePair)*
         do {
            // (',' OptionalSpacing ElementValuePair)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ElementValuePair
                  match = elementValuePair$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE_PAIRS, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElementValuePair : (Identifier '=' OptionalSpacing ElementValue)
   protected boolean elementValuePair$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (elementValuePair$RuleMemoStart == index) {
         if (elementValuePair$RuleMemoStart <= elementValuePair$RuleMemoEnd) {
            index = elementValuePair$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (elementValuePair$RuleMemoStart == elementValuePair$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE_PAIR, elementValuePair$RuleMemoStart, elementValuePair$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(elementValuePair$RuleMemoFirstNode != null) {
                  lastNode.setSibling(elementValuePair$RuleMemoFirstNode);
                  currentNode = elementValuePair$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Identifier '=' OptionalSpacing ElementValue)
      // Identifier
      match = identifier$Rule();
      if (match) {
         // '='
         match = charMatcher('=');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ElementValue
               match = elementValue$Rule();
            }
         }
      }
      if (match) {
         elementValuePair$RuleMemoStart = startIndex;
         elementValuePair$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            elementValuePair$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE_PAIR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            elementValuePair$RuleMemoFirstNode = currentNode;
            elementValuePair$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         elementValuePair$RuleMemoStart = startIndex;
         elementValuePair$RuleMemoEnd = -1;
         elementValuePair$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElementValueArrayInitializer : ('{' OptionalSpacing ElementValues? (',' OptionalSpacing)? '}' OptionalSpacing)
   protected boolean elementValueArrayInitializer$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (elementValueArrayInitializer$RuleMemoStart == index) {
         if (elementValueArrayInitializer$RuleMemoStart <= elementValueArrayInitializer$RuleMemoEnd) {
            index = elementValueArrayInitializer$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (elementValueArrayInitializer$RuleMemoStart == elementValueArrayInitializer$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE_ARRAY_INITIALIZER, elementValueArrayInitializer$RuleMemoStart, elementValueArrayInitializer$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(elementValueArrayInitializer$RuleMemoFirstNode != null) {
                  lastNode.setSibling(elementValueArrayInitializer$RuleMemoFirstNode);
                  currentNode = elementValueArrayInitializer$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('{' OptionalSpacing ElementValues? (',' OptionalSpacing)? '}' OptionalSpacing)
      // '{'
      match = charMatcher('{');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ElementValues?
            // ElementValues
            elementValues$Rule();
            match = true;
            // (',' OptionalSpacing)?
            // (',' OptionalSpacing)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
            // '}'
            match = charMatcher('}');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         elementValueArrayInitializer$RuleMemoStart = startIndex;
         elementValueArrayInitializer$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            elementValueArrayInitializer$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUE_ARRAY_INITIALIZER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            elementValueArrayInitializer$RuleMemoFirstNode = currentNode;
            elementValueArrayInitializer$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         elementValueArrayInitializer$RuleMemoStart = startIndex;
         elementValueArrayInitializer$RuleMemoEnd = -1;
         elementValueArrayInitializer$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElementValues : (ElementValue (',' OptionalSpacing ElementValue)*)
   protected boolean elementValues$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ElementValue (',' OptionalSpacing ElementValue)*)
      // ElementValue
      match = elementValue$Rule();
      if (match) {
         // (',' OptionalSpacing ElementValue)*
         do {
            // (',' OptionalSpacing ElementValue)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ElementValue
                  match = elementValue$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.ELEMENT_VALUES, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TestNoAlpha : ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')!
   protected boolean testNoAlpha$Rule() {
      boolean match;
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')!
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$')
      // 'a'-'z'
      match = buffer.matchCharRange(index, 'a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = buffer.matchCharRange(index, 'A', 'Z');
         if (! match) {
            // '0'-'9'
            match = buffer.matchCharRange(index, '0', '9');
            if (! match) {
               // '_'
               match = buffer.matchChar(index, '_');
               if (! match) {
                  // '$'
                  match = buffer.matchChar(index, '$');
               }
            }
         }
      }
      match = ! match;
      if (match) {
         return true;
      } else {
         return false;
      }
   }

   //Spacing : (BlockComment | LineComment | NewLine | Spaces)+
   protected boolean spacing$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (BlockComment | LineComment | NewLine | Spaces)+
      // (BlockComment | LineComment | NewLine | Spaces)
      switch(buffer.getChar(index)) {
         case ' ':
         case '\t':
         case '\f': {
            // Spaces
            match = spaces$Rule();
            break;
         }
         case '\r': {
            // NewLine
            match = newLine$Rule();
            if (! match) {
               // Spaces
               match = spaces$Rule();
            }
            break;
         }
         case '/': {
            // BlockComment
            match = blockComment$Rule();
            if (! match) {
               // LineComment
               match = lineComment$Rule();
            }
            break;
         }
         case '\n': {
            // NewLine
            match = newLine$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         do {
            // (BlockComment | LineComment | NewLine | Spaces)
            switch(buffer.getChar(index)) {
               case ' ':
               case '\t':
               case '\f': {
                  // Spaces
                  match = spaces$Rule();
                  break;
               }
               case '\r': {
                  // NewLine
                  match = newLine$Rule();
                  if (! match) {
                     // Spaces
                     match = spaces$Rule();
                  }
                  break;
               }
               case '/': {
                  // BlockComment
                  match = blockComment$Rule();
                  if (! match) {
                     // LineComment
                     match = lineComment$Rule();
                  }
                  break;
               }
               case '\n': {
                  // NewLine
                  match = newLine$Rule();
                  break;
               }
               default: {
                  match = false;
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(JavaRuleType.SPACING, startIndex, index, false, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalSpacing : (BlockComment | LineComment | NewLine | Spaces)*
   protected boolean optionalSpacing$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalSpacing$RuleMemoStart == index) {
         if (optionalSpacing$RuleMemoStart <= optionalSpacing$RuleMemoEnd) {
            index = optionalSpacing$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (optionalSpacing$RuleMemoStart == optionalSpacing$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SPACING, optionalSpacing$RuleMemoStart, optionalSpacing$RuleMemoEnd, false, false);
                  lastNode.setSibling(currentNode);
               } else if(optionalSpacing$RuleMemoFirstNode != null) {
                  lastNode.setSibling(optionalSpacing$RuleMemoFirstNode);
                  currentNode = optionalSpacing$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BlockComment | LineComment | NewLine | Spaces)*
      do {
         // (BlockComment | LineComment | NewLine | Spaces)
         switch(buffer.getChar(index)) {
            case ' ':
            case '\t':
            case '\f': {
               // Spaces
               match = spaces$Rule();
               break;
            }
            case '\r': {
               // NewLine
               match = newLine$Rule();
               if (! match) {
                  // Spaces
                  match = spaces$Rule();
               }
               break;
            }
            case '/': {
               // BlockComment
               match = blockComment$Rule();
               if (! match) {
                  // LineComment
                  match = lineComment$Rule();
               }
               break;
            }
            case '\n': {
               // NewLine
               match = newLine$Rule();
               break;
            }
            default: {
               match = false;
            }
         }
      } while(match);
      optionalSpacing$RuleMemoStart = startIndex;
      optionalSpacing$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         optionalSpacing$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(JavaRuleType.SPACING, startIndex, index, false, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         optionalSpacing$RuleMemoFirstNode = currentNode;
         optionalSpacing$RuleMemoLastNode = currentNode;
      }
      return true;
   }

   //Spaces : (' ' | '\r' | '\t' | '\f')+
   protected boolean spaces$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (spaces$RuleMemoStart == index) {
         if (spaces$RuleMemoStart <= spaces$RuleMemoEnd) {
            index = spaces$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (spaces$RuleMemoStart == spaces$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SPACES, spaces$RuleMemoStart, spaces$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(spaces$RuleMemoFirstNode != null) {
                  lastNode.setSibling(spaces$RuleMemoFirstNode);
                  currentNode = spaces$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // (' ' | '\r' | '\t' | '\f')+
      // (' ' | '\r' | '\t' | '\f')
      switch(buffer.getChar(index)) {
         case '\f': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '\r': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case ' ': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '\t': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         do {
            // (' ' | '\r' | '\t' | '\f')
            switch(buffer.getChar(index)) {
               case '\f': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\r': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case ' ': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\t': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         spaces$RuleMemoStart = startIndex;
         spaces$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            spaces$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SPACES, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            spaces$RuleMemoFirstNode = currentNode;
            spaces$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         spaces$RuleMemoStart = startIndex;
         spaces$RuleMemoEnd = -1;
         spaces$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BlockComment : ('/*' ('*/'! .)* '*/')
   protected boolean blockComment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (blockComment$RuleMemoStart == index) {
         if (blockComment$RuleMemoStart <= blockComment$RuleMemoEnd) {
            index = blockComment$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (blockComment$RuleMemoStart == blockComment$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.BLOCK_COMMENT, blockComment$RuleMemoStart, blockComment$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(blockComment$RuleMemoFirstNode != null) {
                  lastNode.setSibling(blockComment$RuleMemoFirstNode);
                  currentNode = blockComment$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('/*' ('*/'! .)* '*/')
      // '/*'
      match = stringMatcher("/*", 2);
      if (match) {
         // ('*/'! .)*
         do {
            // ('*/'! .)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '*/'!
            // '*/'
            match = stringTest("*/", 2);
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
         } while(match);
         // '*/'
         match = stringMatcher("*/", 2);
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         blockComment$RuleMemoStart = startIndex;
         blockComment$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            blockComment$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.BLOCK_COMMENT, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            blockComment$RuleMemoFirstNode = currentNode;
            blockComment$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         blockComment$RuleMemoStart = startIndex;
         blockComment$RuleMemoEnd = -1;
         blockComment$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NewLine : ('\n' | '\r\n')
   protected boolean newLine$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (newLine$RuleMemoStart == index) {
         if (newLine$RuleMemoStart <= newLine$RuleMemoEnd) {
            index = newLine$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (newLine$RuleMemoStart == newLine$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.NEW_LINE, newLine$RuleMemoStart, newLine$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(newLine$RuleMemoFirstNode != null) {
                  lastNode.setSibling(newLine$RuleMemoFirstNode);
                  currentNode = newLine$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('\n' | '\r\n')
      switch(buffer.getChar(index)) {
         case '\r': {
            ++index;
            // '\n'
            if (match = buffer.matchChar(index, '\n')) {
               ++index;
            }
            break;
         }
         case '\n': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         newLine$RuleMemoStart = startIndex;
         newLine$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            newLine$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.NEW_LINE, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            newLine$RuleMemoFirstNode = currentNode;
            newLine$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         newLine$RuleMemoStart = startIndex;
         newLine$RuleMemoEnd = -1;
         newLine$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LineComment : ('//' ('\n'! .)* (NewLine | <EOI>))
   protected boolean lineComment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (lineComment$RuleMemoStart == index) {
         if (lineComment$RuleMemoStart <= lineComment$RuleMemoEnd) {
            index = lineComment$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (lineComment$RuleMemoStart == lineComment$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.LINE_COMMENT, lineComment$RuleMemoStart, lineComment$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(lineComment$RuleMemoFirstNode != null) {
                  lastNode.setSibling(lineComment$RuleMemoFirstNode);
                  currentNode = lineComment$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('//' ('\n'! .)* (NewLine | <EOI>))
      // '//'
      match = stringMatcher("//", 2);
      if (match) {
         // ('\n'! .)*
         do {
            // ('\n'! .)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '\n'!
            // '\n'
            match = buffer.matchChar(index, '\n');
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
         } while(match);
         // (NewLine | <EOI>)
         // NewLine
         match = newLine$Rule();
         if (! match) {
            // <EOI>
            match = eoi();
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         lineComment$RuleMemoStart = startIndex;
         lineComment$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lineComment$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.LINE_COMMENT, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            lineComment$RuleMemoFirstNode = currentNode;
            lineComment$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         lineComment$RuleMemoStart = startIndex;
         lineComment$RuleMemoEnd = -1;
         lineComment$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FloatLiteral : (HexFloat | DecimalFloat)
   protected boolean floatLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (floatLiteral$RuleMemoStart == index) {
         if (floatLiteral$RuleMemoStart <= floatLiteral$RuleMemoEnd) {
            index = floatLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (floatLiteral$RuleMemoStart == floatLiteral$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FLOAT_LITERAL, floatLiteral$RuleMemoStart, floatLiteral$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(floatLiteral$RuleMemoFirstNode != null) {
                  lastNode.setSibling(floatLiteral$RuleMemoFirstNode);
                  currentNode = floatLiteral$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (HexFloat | DecimalFloat)
      switch(buffer.getChar(index)) {
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case '.': {
            // DecimalFloat
            match = decimalFloat$Rule();
            break;
         }
         case '0': {
            // HexFloat
            match = hexFloat$Rule();
            if (! match) {
               // DecimalFloat
               match = decimalFloat$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         floatLiteral$RuleMemoStart = startIndex;
         floatLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            floatLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FLOAT_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            floatLiteral$RuleMemoFirstNode = currentNode;
            floatLiteral$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         floatLiteral$RuleMemoStart = startIndex;
         floatLiteral$RuleMemoEnd = -1;
         floatLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LongLiteral : (IntegerLiteral ('l' | 'L'))
   protected boolean longLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (longLiteral$RuleMemoStart == index) {
         if (longLiteral$RuleMemoStart <= longLiteral$RuleMemoEnd) {
            index = longLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (longLiteral$RuleMemoStart == longLiteral$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.LONG_LITERAL, longLiteral$RuleMemoStart, longLiteral$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(longLiteral$RuleMemoFirstNode != null) {
                  lastNode.setSibling(longLiteral$RuleMemoFirstNode);
                  currentNode = longLiteral$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // (IntegerLiteral ('l' | 'L'))
      // IntegerLiteral
      match = integerLiteral$Rule();
      if (match) {
         // ('l' | 'L')
         switch(buffer.getChar(index)) {
            case 'l': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            case 'L': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            default: {
               match = false;
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         longLiteral$RuleMemoStart = startIndex;
         longLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            longLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.LONG_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            longLiteral$RuleMemoFirstNode = currentNode;
            longLiteral$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         longLiteral$RuleMemoStart = startIndex;
         longLiteral$RuleMemoEnd = -1;
         longLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntegerLiteral : (HexNumeral | OctalNumeral | DecimalNumeral)
   protected boolean integerLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (integerLiteral$RuleMemoStart == index) {
         if (integerLiteral$RuleMemoStart <= integerLiteral$RuleMemoEnd) {
            index = integerLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (integerLiteral$RuleMemoStart == integerLiteral$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.INTEGER_LITERAL, integerLiteral$RuleMemoStart, integerLiteral$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(integerLiteral$RuleMemoFirstNode != null) {
                  lastNode.setSibling(integerLiteral$RuleMemoFirstNode);
                  currentNode = integerLiteral$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // (HexNumeral | OctalNumeral | DecimalNumeral)
      switch(buffer.getChar(index)) {
         case '0': {
            // ('0' ('x' | 'X') HexDigit+)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '0'
            match = charMatcher('0');
            if (match) {
               // ('x' | 'X')
               switch(buffer.getChar(index)) {
                  case 'x': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'X': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // HexDigit+
                  // ('a'-'f' | 'A'-'F' | '0'-'9')
                  // 'a'-'f'
                  match = charRangeMatcher('a', 'f');
                  if (! match) {
                     // 'A'-'F'
                     match = charRangeMatcher('A', 'F');
                     if (! match) {
                        // '0'-'9'
                        match = charRangeMatcher('0', '9');
                     }
                  }
                  if (match) {
                     do {
                        // ('a'-'f' | 'A'-'F' | '0'-'9')
                        // 'a'-'f'
                        match = charRangeMatcher('a', 'f');
                        if (! match) {
                           // 'A'-'F'
                           match = charRangeMatcher('A', 'F');
                           if (! match) {
                              // '0'-'9'
                              match = charRangeMatcher('0', '9');
                           }
                        }
                     } while(match);
                     match = true;
                  }
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
            if (! match) {
               // ('0' '0'-'7'+)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // '0'
               match = charMatcher('0');
               if (match) {
                  // '0'-'7'+
                  // '0'-'7'
                  match = charRangeMatcher('0', '7');
                  if (match) {
                     do {
                        // '0'-'7'
                        match = charRangeMatcher('0', '7');
                     } while(match);
                     match = true;
                  }
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               }
               if (! match) {
                  // ('0' | ('1'-'9' Digit*))
                  // '0'
                  match = charMatcher('0');
                  if (! match) {
                     // ('1'-'9' Digit*)
                     Node lastNode_3 = currentNode;
                     int lastIndex_3 = index;
                     // '1'-'9'
                     match = charRangeMatcher('1', '9');
                     if (match) {
                        // Digit*
                        do {
                           // '0'-'9'
                           match = charRangeMatcher('0', '9');
                        } while(match);
                        match = true;
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     }
                  }
               }
            }
            break;
         }
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // ('0' | ('1'-'9' Digit*))
            // '0'
            match = charMatcher('0');
            if (! match) {
               // ('1'-'9' Digit*)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // '1'-'9'
               match = charRangeMatcher('1', '9');
               if (match) {
                  // Digit*
                  do {
                     // '0'-'9'
                     match = charRangeMatcher('0', '9');
                  } while(match);
                  match = true;
                  if (! match) {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                     currentNode = lastNode_4;
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         integerLiteral$RuleMemoStart = startIndex;
         integerLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            integerLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.INTEGER_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            integerLiteral$RuleMemoFirstNode = currentNode;
            integerLiteral$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         integerLiteral$RuleMemoStart = startIndex;
         integerLiteral$RuleMemoEnd = -1;
         integerLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CharLiteral : (''' (Escape | ((''' | '\')! .)) ''')
   protected boolean charLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (charLiteral$RuleMemoStart == index) {
         if (charLiteral$RuleMemoStart <= charLiteral$RuleMemoEnd) {
            index = charLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (charLiteral$RuleMemoStart == charLiteral$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.CHAR_LITERAL, charLiteral$RuleMemoStart, charLiteral$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(charLiteral$RuleMemoFirstNode != null) {
                  lastNode.setSibling(charLiteral$RuleMemoFirstNode);
                  currentNode = charLiteral$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // (''' (Escape | ((''' | '\')! .)) ''')
      // '''
      match = charMatcher('\'');
      if (match) {
         // (Escape | ((''' | '\')! .))
         // ('\' (('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\') | OctalEscape | UnicodeEscape))
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '\'
         match = charMatcher('\\');
         if (match) {
            // (('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\') | OctalEscape | UnicodeEscape)
            // ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\')
            switch(buffer.getChar(index)) {
               case '\\': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'n': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'b': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'r': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\"': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 't': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'f': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\'': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            if (! match) {
               // (('0'-'3' '0'-'7' '0'-'7') | ('0'-'7' '0'-'7') | '0'-'7')
               // ('0'-'3' '0'-'7' '0'-'7')
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // '0'-'3'
               match = charRangeMatcher('0', '3');
               if (match) {
                  // '0'-'7'
                  match = charRangeMatcher('0', '7');
                  if (match) {
                     // '0'-'7'
                     match = charRangeMatcher('0', '7');
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               if (! match) {
                  // ('0'-'7' '0'-'7')
                  Node lastNode_3 = currentNode;
                  int lastIndex_3 = index;
                  // '0'-'7'
                  match = charRangeMatcher('0', '7');
                  if (match) {
                     // '0'-'7'
                     match = charRangeMatcher('0', '7');
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  }
                  if (! match) {
                     // '0'-'7'
                     match = charRangeMatcher('0', '7');
                  }
               }
               if (! match) {
                  // (('u'+ "005C" ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\' | ('u'+ HexDigit HexDigit HexDigit HexDigit))) | ('u'+ HexDigit HexDigit HexDigit HexDigit))
                  // ('u'+ "005C" ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\' | ('u'+ HexDigit HexDigit HexDigit HexDigit)))
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // 'u'+
                  // 'u'
                  match = charMatcher('u');
                  if (match) {
                     do {
                        // 'u'
                        match = charMatcher('u');
                     } while(match);
                     match = true;
                  }
                  if (match) {
                     // "005C"
                     match = ignoreCaseStringMatcher("005C", 4);
                     if (match) {
                        // ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\' | ('u'+ HexDigit HexDigit HexDigit HexDigit))
                        // 'b'
                        match = charMatcher('b');
                        if (! match) {
                           // 't'
                           match = charMatcher('t');
                           if (! match) {
                              // 'n'
                              match = charMatcher('n');
                              if (! match) {
                                 // 'f'
                                 match = charMatcher('f');
                                 if (! match) {
                                    // 'r'
                                    match = charMatcher('r');
                                    if (! match) {
                                       // '"'
                                       match = charMatcher('\"');
                                       if (! match) {
                                          // '''
                                          match = charMatcher('\'');
                                          if (! match) {
                                             // '\'
                                             match = charMatcher('\\');
                                             if (! match) {
                                                // ('u'+ HexDigit HexDigit HexDigit HexDigit)
                                                Node lastNode_5 = currentNode;
                                                int lastIndex_5 = index;
                                                // 'u'+
                                                // 'u'
                                                match = charMatcher('u');
                                                if (match) {
                                                   do {
                                                      // 'u'
                                                      match = charMatcher('u');
                                                   } while(match);
                                                   match = true;
                                                }
                                                if (match) {
                                                   // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                   // 'a'-'f'
                                                   match = charRangeMatcher('a', 'f');
                                                   if (! match) {
                                                      // 'A'-'F'
                                                      match = charRangeMatcher('A', 'F');
                                                      if (! match) {
                                                         // '0'-'9'
                                                         match = charRangeMatcher('0', '9');
                                                      }
                                                   }
                                                   if (match) {
                                                      // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                      // 'a'-'f'
                                                      match = charRangeMatcher('a', 'f');
                                                      if (! match) {
                                                         // 'A'-'F'
                                                         match = charRangeMatcher('A', 'F');
                                                         if (! match) {
                                                            // '0'-'9'
                                                            match = charRangeMatcher('0', '9');
                                                         }
                                                      }
                                                      if (match) {
                                                         // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                         // 'a'-'f'
                                                         match = charRangeMatcher('a', 'f');
                                                         if (! match) {
                                                            // 'A'-'F'
                                                            match = charRangeMatcher('A', 'F');
                                                            if (! match) {
                                                               // '0'-'9'
                                                               match = charRangeMatcher('0', '9');
                                                            }
                                                         }
                                                         if (match) {
                                                            // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                            // 'a'-'f'
                                                            match = charRangeMatcher('a', 'f');
                                                            if (! match) {
                                                               // 'A'-'F'
                                                               match = charRangeMatcher('A', 'F');
                                                               if (! match) {
                                                                  // '0'-'9'
                                                                  match = charRangeMatcher('0', '9');
                                                               }
                                                            }
                                                            if (! match) {
                                                               index = lastIndex_5;
                                                               lastNode_5.setSibling(null);
                                                               currentNode = lastNode_5;
                                                            }
                                                         } else {
                                                            index = lastIndex_5;
                                                            lastNode_5.setSibling(null);
                                                         }
                                                      } else {
                                                         index = lastIndex_5;
                                                         lastNode_5.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_5;
                                                      lastNode_5.setSibling(null);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if (! match) {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                           currentNode = lastNode_4;
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ('u'+ HexDigit HexDigit HexDigit HexDigit)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // 'u'+
                     // 'u'
                     match = charMatcher('u');
                     if (match) {
                        do {
                           // 'u'
                           match = charMatcher('u');
                        } while(match);
                        match = true;
                     }
                     if (match) {
                        // ('a'-'f' | 'A'-'F' | '0'-'9')
                        // 'a'-'f'
                        match = charRangeMatcher('a', 'f');
                        if (! match) {
                           // 'A'-'F'
                           match = charRangeMatcher('A', 'F');
                           if (! match) {
                              // '0'-'9'
                              match = charRangeMatcher('0', '9');
                           }
                        }
                        if (match) {
                           // ('a'-'f' | 'A'-'F' | '0'-'9')
                           // 'a'-'f'
                           match = charRangeMatcher('a', 'f');
                           if (! match) {
                              // 'A'-'F'
                              match = charRangeMatcher('A', 'F');
                              if (! match) {
                                 // '0'-'9'
                                 match = charRangeMatcher('0', '9');
                              }
                           }
                           if (match) {
                              // ('a'-'f' | 'A'-'F' | '0'-'9')
                              // 'a'-'f'
                              match = charRangeMatcher('a', 'f');
                              if (! match) {
                                 // 'A'-'F'
                                 match = charRangeMatcher('A', 'F');
                                 if (! match) {
                                    // '0'-'9'
                                    match = charRangeMatcher('0', '9');
                                 }
                              }
                              if (match) {
                                 // ('a'-'f' | 'A'-'F' | '0'-'9')
                                 // 'a'-'f'
                                 match = charRangeMatcher('a', 'f');
                                 if (! match) {
                                    // 'A'-'F'
                                    match = charRangeMatcher('A', 'F');
                                    if (! match) {
                                       // '0'-'9'
                                       match = charRangeMatcher('0', '9');
                                    }
                                 }
                                 if (! match) {
                                    index = lastIndex_6;
                                    lastNode_6.setSibling(null);
                                    currentNode = lastNode_6;
                                 }
                              } else {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                  }
               }
            }
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         }
         if (! match) {
            // ((''' | '\')! .)
            Node lastNode_7 = currentNode;
            int lastIndex_7 = index;
            // (''' | '\')!
            // (''' | '\')
            int startIndex_8 = index;
            switch(buffer.getChar(index)) {
               case '\\': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\'': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            index = startIndex_8;
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_7;
                  lastNode_7.setSibling(null);
                  currentNode = lastNode_7;
               }
            }
         }
         if (match) {
            // '''
            match = charMatcher('\'');
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         charLiteral$RuleMemoStart = startIndex;
         charLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            charLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.CHAR_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            charLiteral$RuleMemoFirstNode = currentNode;
            charLiteral$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         charLiteral$RuleMemoStart = startIndex;
         charLiteral$RuleMemoEnd = -1;
         charLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StringLiteral : ('"' (Escape | (('\r' | '\n' | '"' | '\')! .))* '"')
   protected boolean stringLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (stringLiteral$RuleMemoStart == index) {
         if (stringLiteral$RuleMemoStart <= stringLiteral$RuleMemoEnd) {
            index = stringLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (stringLiteral$RuleMemoStart == stringLiteral$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.STRING_LITERAL, stringLiteral$RuleMemoStart, stringLiteral$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(stringLiteral$RuleMemoFirstNode != null) {
                  lastNode.setSibling(stringLiteral$RuleMemoFirstNode);
                  currentNode = stringLiteral$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('"' (Escape | (('\r' | '\n' | '"' | '\')! .))* '"')
      // '"'
      match = charMatcher('\"');
      if (match) {
         // (Escape | (('\r' | '\n' | '"' | '\')! .))*
         do {
            // (Escape | (('\r' | '\n' | '"' | '\')! .))
            // ('\' (('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\') | OctalEscape | UnicodeEscape))
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '\'
            match = charMatcher('\\');
            if (match) {
               // (('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\') | OctalEscape | UnicodeEscape)
               // ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\')
               switch(buffer.getChar(index)) {
                  case '\\': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'n': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'b': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'r': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '\"': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 't': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'f': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '\'': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! match) {
                  // (('0'-'3' '0'-'7' '0'-'7') | ('0'-'7' '0'-'7') | '0'-'7')
                  // ('0'-'3' '0'-'7' '0'-'7')
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // '0'-'3'
                  match = charRangeMatcher('0', '3');
                  if (match) {
                     // '0'-'7'
                     match = charRangeMatcher('0', '7');
                     if (match) {
                        // '0'-'7'
                        match = charRangeMatcher('0', '7');
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ('0'-'7' '0'-'7')
                     Node lastNode_3 = currentNode;
                     int lastIndex_3 = index;
                     // '0'-'7'
                     match = charRangeMatcher('0', '7');
                     if (match) {
                        // '0'-'7'
                        match = charRangeMatcher('0', '7');
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     }
                     if (! match) {
                        // '0'-'7'
                        match = charRangeMatcher('0', '7');
                     }
                  }
                  if (! match) {
                     // (('u'+ "005C" ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\' | ('u'+ HexDigit HexDigit HexDigit HexDigit))) | ('u'+ HexDigit HexDigit HexDigit HexDigit))
                     // ('u'+ "005C" ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\' | ('u'+ HexDigit HexDigit HexDigit HexDigit)))
                     Node lastNode_4 = currentNode;
                     int lastIndex_4 = index;
                     // 'u'+
                     // 'u'
                     match = charMatcher('u');
                     if (match) {
                        do {
                           // 'u'
                           match = charMatcher('u');
                        } while(match);
                        match = true;
                     }
                     if (match) {
                        // "005C"
                        match = ignoreCaseStringMatcher("005C", 4);
                        if (match) {
                           // ('b' | 't' | 'n' | 'f' | 'r' | '"' | ''' | '\' | ('u'+ HexDigit HexDigit HexDigit HexDigit))
                           // 'b'
                           match = charMatcher('b');
                           if (! match) {
                              // 't'
                              match = charMatcher('t');
                              if (! match) {
                                 // 'n'
                                 match = charMatcher('n');
                                 if (! match) {
                                    // 'f'
                                    match = charMatcher('f');
                                    if (! match) {
                                       // 'r'
                                       match = charMatcher('r');
                                       if (! match) {
                                          // '"'
                                          match = charMatcher('\"');
                                          if (! match) {
                                             // '''
                                             match = charMatcher('\'');
                                             if (! match) {
                                                // '\'
                                                match = charMatcher('\\');
                                                if (! match) {
                                                   // ('u'+ HexDigit HexDigit HexDigit HexDigit)
                                                   Node lastNode_5 = currentNode;
                                                   int lastIndex_5 = index;
                                                   // 'u'+
                                                   // 'u'
                                                   match = charMatcher('u');
                                                   if (match) {
                                                      do {
                                                         // 'u'
                                                         match = charMatcher('u');
                                                      } while(match);
                                                      match = true;
                                                   }
                                                   if (match) {
                                                      // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                      // 'a'-'f'
                                                      match = charRangeMatcher('a', 'f');
                                                      if (! match) {
                                                         // 'A'-'F'
                                                         match = charRangeMatcher('A', 'F');
                                                         if (! match) {
                                                            // '0'-'9'
                                                            match = charRangeMatcher('0', '9');
                                                         }
                                                      }
                                                      if (match) {
                                                         // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                         // 'a'-'f'
                                                         match = charRangeMatcher('a', 'f');
                                                         if (! match) {
                                                            // 'A'-'F'
                                                            match = charRangeMatcher('A', 'F');
                                                            if (! match) {
                                                               // '0'-'9'
                                                               match = charRangeMatcher('0', '9');
                                                            }
                                                         }
                                                         if (match) {
                                                            // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                            // 'a'-'f'
                                                            match = charRangeMatcher('a', 'f');
                                                            if (! match) {
                                                               // 'A'-'F'
                                                               match = charRangeMatcher('A', 'F');
                                                               if (! match) {
                                                                  // '0'-'9'
                                                                  match = charRangeMatcher('0', '9');
                                                               }
                                                            }
                                                            if (match) {
                                                               // ('a'-'f' | 'A'-'F' | '0'-'9')
                                                               // 'a'-'f'
                                                               match = charRangeMatcher('a', 'f');
                                                               if (! match) {
                                                                  // 'A'-'F'
                                                                  match = charRangeMatcher('A', 'F');
                                                                  if (! match) {
                                                                     // '0'-'9'
                                                                     match = charRangeMatcher('0', '9');
                                                                  }
                                                               }
                                                               if (! match) {
                                                                  index = lastIndex_5;
                                                                  lastNode_5.setSibling(null);
                                                                  currentNode = lastNode_5;
                                                               }
                                                            } else {
                                                               index = lastIndex_5;
                                                               lastNode_5.setSibling(null);
                                                            }
                                                         } else {
                                                            index = lastIndex_5;
                                                            lastNode_5.setSibling(null);
                                                         }
                                                      } else {
                                                         index = lastIndex_5;
                                                         lastNode_5.setSibling(null);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           if (! match) {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                              currentNode = lastNode_4;
                           }
                        } else {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ('u'+ HexDigit HexDigit HexDigit HexDigit)
                        Node lastNode_6 = currentNode;
                        int lastIndex_6 = index;
                        // 'u'+
                        // 'u'
                        match = charMatcher('u');
                        if (match) {
                           do {
                              // 'u'
                              match = charMatcher('u');
                           } while(match);
                           match = true;
                        }
                        if (match) {
                           // ('a'-'f' | 'A'-'F' | '0'-'9')
                           // 'a'-'f'
                           match = charRangeMatcher('a', 'f');
                           if (! match) {
                              // 'A'-'F'
                              match = charRangeMatcher('A', 'F');
                              if (! match) {
                                 // '0'-'9'
                                 match = charRangeMatcher('0', '9');
                              }
                           }
                           if (match) {
                              // ('a'-'f' | 'A'-'F' | '0'-'9')
                              // 'a'-'f'
                              match = charRangeMatcher('a', 'f');
                              if (! match) {
                                 // 'A'-'F'
                                 match = charRangeMatcher('A', 'F');
                                 if (! match) {
                                    // '0'-'9'
                                    match = charRangeMatcher('0', '9');
                                 }
                              }
                              if (match) {
                                 // ('a'-'f' | 'A'-'F' | '0'-'9')
                                 // 'a'-'f'
                                 match = charRangeMatcher('a', 'f');
                                 if (! match) {
                                    // 'A'-'F'
                                    match = charRangeMatcher('A', 'F');
                                    if (! match) {
                                       // '0'-'9'
                                       match = charRangeMatcher('0', '9');
                                    }
                                 }
                                 if (match) {
                                    // ('a'-'f' | 'A'-'F' | '0'-'9')
                                    // 'a'-'f'
                                    match = charRangeMatcher('a', 'f');
                                    if (! match) {
                                       // 'A'-'F'
                                       match = charRangeMatcher('A', 'F');
                                       if (! match) {
                                          // '0'-'9'
                                          match = charRangeMatcher('0', '9');
                                       }
                                    }
                                    if (! match) {
                                       index = lastIndex_6;
                                       lastNode_6.setSibling(null);
                                       currentNode = lastNode_6;
                                    }
                                 } else {
                                    index = lastIndex_6;
                                    lastNode_6.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        }
                     }
                  }
               }
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
            if (! match) {
               // (('\r' | '\n' | '"' | '\')! .)
               Node lastNode_7 = currentNode;
               int lastIndex_7 = index;
               // ('\r' | '\n' | '"' | '\')!
               // ('\r' | '\n' | '"' | '\')
               int startIndex_8 = index;
               switch(buffer.getChar(index)) {
                  case '\\': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '\r': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '\"': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '\n': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               index = startIndex_8;
               match = ! match;
               if (match) {
                  // .
                  match = anyCharMatcher();
                  if (! match) {
                     index = lastIndex_7;
                     lastNode_7.setSibling(null);
                     currentNode = lastNode_7;
                  }
               }
            }
         } while(match);
         // '"'
         match = charMatcher('\"');
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         stringLiteral$RuleMemoStart = startIndex;
         stringLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            stringLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.STRING_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            stringLiteral$RuleMemoFirstNode = currentNode;
            stringLiteral$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         stringLiteral$RuleMemoStart = startIndex;
         stringLiteral$RuleMemoEnd = -1;
         stringLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //True : ('true' TestNoAlpha OptionalSpacing)
   protected boolean true$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (true$RuleMemoStart == index) {
         if (true$RuleMemoStart <= true$RuleMemoEnd) {
            index = true$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (true$RuleMemoStart == true$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.TRUE, true$RuleMemoStart, true$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(true$RuleMemoFirstNode != null) {
                  lastNode.setSibling(true$RuleMemoFirstNode);
                  currentNode = true$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('true' TestNoAlpha OptionalSpacing)
      // 'true'
      match = stringMatcher("true", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         true$RuleMemoStart = startIndex;
         true$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            true$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.TRUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            true$RuleMemoFirstNode = currentNode;
            true$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         true$RuleMemoStart = startIndex;
         true$RuleMemoEnd = -1;
         true$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //False : ('false' TestNoAlpha OptionalSpacing)
   protected boolean false$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (false$RuleMemoStart == index) {
         if (false$RuleMemoStart <= false$RuleMemoEnd) {
            index = false$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (false$RuleMemoStart == false$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.FALSE, false$RuleMemoStart, false$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(false$RuleMemoFirstNode != null) {
                  lastNode.setSibling(false$RuleMemoFirstNode);
                  currentNode = false$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('false' TestNoAlpha OptionalSpacing)
      // 'false'
      match = stringMatcher("false", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         false$RuleMemoStart = startIndex;
         false$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            false$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.FALSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            false$RuleMemoFirstNode = currentNode;
            false$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         false$RuleMemoStart = startIndex;
         false$RuleMemoEnd = -1;
         false$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Null : ('null' TestNoAlpha OptionalSpacing)
   protected boolean null$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (null$RuleMemoStart == index) {
         if (null$RuleMemoStart <= null$RuleMemoEnd) {
            index = null$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (null$RuleMemoStart == null$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.NULL, null$RuleMemoStart, null$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(null$RuleMemoFirstNode != null) {
                  lastNode.setSibling(null$RuleMemoFirstNode);
                  currentNode = null$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('null' TestNoAlpha OptionalSpacing)
      // 'null'
      match = stringMatcher("null", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         null$RuleMemoStart = startIndex;
         null$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            null$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.NULL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            null$RuleMemoFirstNode = currentNode;
            null$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         null$RuleMemoStart = startIndex;
         null$RuleMemoEnd = -1;
         null$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //HexFloat : (HexSignificant BinaryExponent ('f' | 'F' | 'd' | 'D')?)
   protected boolean hexFloat$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (hexFloat$RuleMemoStart == index) {
         if (hexFloat$RuleMemoStart <= hexFloat$RuleMemoEnd) {
            index = hexFloat$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (hexFloat$RuleMemoStart == hexFloat$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.HEX_FLOAT, hexFloat$RuleMemoStart, hexFloat$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(hexFloat$RuleMemoFirstNode != null) {
                  lastNode.setSibling(hexFloat$RuleMemoFirstNode);
                  currentNode = hexFloat$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // (HexSignificant BinaryExponent ('f' | 'F' | 'd' | 'D')?)
      // ((('0x' | '0X') HexDigit* '.' HexDigit+) | (HexNumeral '.'?))
      // (('0x' | '0X') HexDigit* '.' HexDigit+)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // ('0x' | '0X')
      if (buffer.matchChar(index, '0')) {
         ++index;
         // ('x' | 'X')
         switch(buffer.getChar(index)) {
            case 'x': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            case 'X': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            default: {
               match = false;
            }
         }
      } else {
         match = false;
      }
      if (match) {
         // HexDigit*
         do {
            // ('a'-'f' | 'A'-'F' | '0'-'9')
            // 'a'-'f'
            match = charRangeMatcher('a', 'f');
            if (! match) {
               // 'A'-'F'
               match = charRangeMatcher('A', 'F');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
               }
            }
         } while(match);
         // '.'
         match = charMatcher('.');
         if (match) {
            // HexDigit+
            // ('a'-'f' | 'A'-'F' | '0'-'9')
            // 'a'-'f'
            match = charRangeMatcher('a', 'f');
            if (! match) {
               // 'A'-'F'
               match = charRangeMatcher('A', 'F');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
               }
            }
            if (match) {
               do {
                  // ('a'-'f' | 'A'-'F' | '0'-'9')
                  // 'a'-'f'
                  match = charRangeMatcher('a', 'f');
                  if (! match) {
                     // 'A'-'F'
                     match = charRangeMatcher('A', 'F');
                     if (! match) {
                        // '0'-'9'
                        match = charRangeMatcher('0', '9');
                     }
                  }
               } while(match);
               match = true;
            }
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // (HexNumeral '.'?)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // ('0' ('x' | 'X') HexDigit+)
         Node lastNode_3 = currentNode;
         int lastIndex_3 = index;
         // '0'
         match = charMatcher('0');
         if (match) {
            // ('x' | 'X')
            switch(buffer.getChar(index)) {
               case 'x': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'X': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            if (match) {
               // HexDigit+
               // ('a'-'f' | 'A'-'F' | '0'-'9')
               // 'a'-'f'
               match = charRangeMatcher('a', 'f');
               if (! match) {
                  // 'A'-'F'
                  match = charRangeMatcher('A', 'F');
                  if (! match) {
                     // '0'-'9'
                     match = charRangeMatcher('0', '9');
                  }
               }
               if (match) {
                  do {
                     // ('a'-'f' | 'A'-'F' | '0'-'9')
                     // 'a'-'f'
                     match = charRangeMatcher('a', 'f');
                     if (! match) {
                        // 'A'-'F'
                        match = charRangeMatcher('A', 'F');
                        if (! match) {
                           // '0'-'9'
                           match = charRangeMatcher('0', '9');
                        }
                     }
                  } while(match);
                  match = true;
               }
               if (! match) {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
                  currentNode = lastNode_3;
               }
            } else {
               index = lastIndex_3;
               lastNode_3.setSibling(null);
            }
         }
         if (match) {
            // '.'?
            // '.'
            charMatcher('.');
            match = true;
         }
      }
      if (match) {
         // (('p' | 'P') ('+' | '-')? Digit+)
         // ('p' | 'P')
         switch(buffer.getChar(index)) {
            case 'p': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            case 'P': {
               ++index;
               // <EMPTY>
               match = true;
               break;
            }
            default: {
               match = false;
            }
         }
         if (match) {
            // ('+' | '-')?
            // ('+' | '-')
            switch(buffer.getChar(index)) {
               case '+': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '-': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            // Digit+
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               do {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
               } while(match);
               match = true;
            }
         }
         if (match) {
            // ('f' | 'F' | 'd' | 'D')?
            // ('f' | 'F' | 'd' | 'D')
            switch(buffer.getChar(index)) {
               case 'd': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'D': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'f': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'F': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            match = true;
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         hexFloat$RuleMemoStart = startIndex;
         hexFloat$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            hexFloat$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.HEX_FLOAT, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            hexFloat$RuleMemoFirstNode = currentNode;
            hexFloat$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         hexFloat$RuleMemoStart = startIndex;
         hexFloat$RuleMemoEnd = -1;
         hexFloat$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DecimalFloat : ((Digit+ '.' Digit* Exponent? ('f' | 'F' | 'd' | 'D')?) | ('.' Digit+ Exponent? ('f' | 'F' | 'd' | 'D')?) | (Digit+ Exponent ('f' | 'F' | 'd' | 'D')?) | (Digit+ Exponent? ('f' | 'F' | 'd' | 'D')))
   protected boolean decimalFloat$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (decimalFloat$RuleMemoStart == index) {
         if (decimalFloat$RuleMemoStart <= decimalFloat$RuleMemoEnd) {
            index = decimalFloat$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (decimalFloat$RuleMemoStart == decimalFloat$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.DECIMAL_FLOAT, decimalFloat$RuleMemoStart, decimalFloat$RuleMemoEnd, true, false);
                  lastNode.setSibling(currentNode);
               } else if(decimalFloat$RuleMemoFirstNode != null) {
                  lastNode.setSibling(decimalFloat$RuleMemoFirstNode);
                  currentNode = decimalFloat$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ((Digit+ '.' Digit* Exponent? ('f' | 'F' | 'd' | 'D')?) | ('.' Digit+ Exponent? ('f' | 'F' | 'd' | 'D')?) | (Digit+ Exponent ('f' | 'F' | 'd' | 'D')?) | (Digit+ Exponent? ('f' | 'F' | 'd' | 'D')))
      // (Digit+ '.' Digit* Exponent? ('f' | 'F' | 'd' | 'D')?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // Digit+
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         do {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
         } while(match);
         match = true;
      }
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // Digit*
            do {
               // '0'-'9'
               match = charRangeMatcher('0', '9');
            } while(match);
            match = true;
            // Exponent?
            // (('e' | 'E') ('+' | '-')? Digit+)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('e' | 'E')
            switch(buffer.getChar(index)) {
               case 'e': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'E': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            // ('+' | '-')?
            // ('+' | '-')
            switch(buffer.getChar(index)) {
               case '+': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '-': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            // Digit+
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               do {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
               } while(match);
               match = true;
            }
            if (! match) {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
               currentNode = lastNode_2;
            }
            match = true;
            // ('f' | 'F' | 'd' | 'D')?
            // ('f' | 'F' | 'd' | 'D')
            switch(buffer.getChar(index)) {
               case 'd': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'D': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'f': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'F': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            match = true;
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ('.' Digit+ Exponent? ('f' | 'F' | 'd' | 'D')?)
         Node lastNode_3 = currentNode;
         int lastIndex_3 = index;
         // '.'
         match = charMatcher('.');
         if (match) {
            // Digit+
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               do {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
               } while(match);
               match = true;
            }
            if (match) {
               // Exponent?
               // (('e' | 'E') ('+' | '-')? Digit+)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // ('e' | 'E')
               switch(buffer.getChar(index)) {
                  case 'e': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'E': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // ('+' | '-')?
                  // ('+' | '-')
                  switch(buffer.getChar(index)) {
                     case '+': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case '-': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  // Digit+
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (match) {
                     do {
                        // '0'-'9'
                        match = charRangeMatcher('0', '9');
                     } while(match);
                     match = true;
                  }
                  if (! match) {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                     currentNode = lastNode_4;
                  }
               }
               match = true;
               // ('f' | 'F' | 'd' | 'D')?
               // ('f' | 'F' | 'd' | 'D')
               switch(buffer.getChar(index)) {
                  case 'd': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'D': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'f': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'F': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               match = true;
            } else {
               index = lastIndex_3;
               lastNode_3.setSibling(null);
            }
         }
         if (! match) {
            // (Digit+ Exponent ('f' | 'F' | 'd' | 'D')?)
            Node lastNode_5 = currentNode;
            int lastIndex_5 = index;
            // Digit+
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               do {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
               } while(match);
               match = true;
            }
            if (match) {
               // (('e' | 'E') ('+' | '-')? Digit+)
               Node lastNode_6 = currentNode;
               int lastIndex_6 = index;
               // ('e' | 'E')
               switch(buffer.getChar(index)) {
                  case 'e': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case 'E': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // ('+' | '-')?
                  // ('+' | '-')
                  switch(buffer.getChar(index)) {
                     case '+': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case '-': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  // Digit+
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (match) {
                     do {
                        // '0'-'9'
                        match = charRangeMatcher('0', '9');
                     } while(match);
                     match = true;
                  }
                  if (! match) {
                     index = lastIndex_6;
                     lastNode_6.setSibling(null);
                     currentNode = lastNode_6;
                  }
               }
               if (match) {
                  // ('f' | 'F' | 'd' | 'D')?
                  // ('f' | 'F' | 'd' | 'D')
                  switch(buffer.getChar(index)) {
                     case 'd': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'D': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'f': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'F': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  match = true;
               } else {
                  index = lastIndex_5;
                  lastNode_5.setSibling(null);
               }
            }
            if (! match) {
               // (Digit+ Exponent? ('f' | 'F' | 'd' | 'D'))
               Node lastNode_7 = currentNode;
               int lastIndex_7 = index;
               // Digit+
               // '0'-'9'
               match = charRangeMatcher('0', '9');
               if (match) {
                  do {
                     // '0'-'9'
                     match = charRangeMatcher('0', '9');
                  } while(match);
                  match = true;
               }
               if (match) {
                  // Exponent?
                  // (('e' | 'E') ('+' | '-')? Digit+)
                  Node lastNode_8 = currentNode;
                  int lastIndex_8 = index;
                  // ('e' | 'E')
                  switch(buffer.getChar(index)) {
                     case 'e': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'E': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  if (match) {
                     // ('+' | '-')?
                     // ('+' | '-')
                     switch(buffer.getChar(index)) {
                        case '+': {
                           ++index;
                           // <EMPTY>
                           match = true;
                           break;
                        }
                        case '-': {
                           ++index;
                           // <EMPTY>
                           match = true;
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     // Digit+
                     // '0'-'9'
                     match = charRangeMatcher('0', '9');
                     if (match) {
                        do {
                           // '0'-'9'
                           match = charRangeMatcher('0', '9');
                        } while(match);
                        match = true;
                     }
                     if (! match) {
                        index = lastIndex_8;
                        lastNode_8.setSibling(null);
                        currentNode = lastNode_8;
                     }
                  }
                  match = true;
                  // ('f' | 'F' | 'd' | 'D')
                  switch(buffer.getChar(index)) {
                     case 'd': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'D': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'f': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'F': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         decimalFloat$RuleMemoStart = startIndex;
         decimalFloat$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            decimalFloat$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.DECIMAL_FLOAT, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            decimalFloat$RuleMemoFirstNode = currentNode;
            decimalFloat$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         decimalFloat$RuleMemoStart = startIndex;
         decimalFloat$RuleMemoEnd = -1;
         decimalFloat$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Semicolon : (';' OptionalSpacing)
   protected boolean semicolon$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (semicolon$RuleMemoStart == index) {
         if (semicolon$RuleMemoStart <= semicolon$RuleMemoEnd) {
            index = semicolon$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               if (semicolon$RuleMemoStart == semicolon$RuleMemoEnd) {
                  currentNode = new NodeImpl(JavaRuleType.SEMICOLON, semicolon$RuleMemoStart, semicolon$RuleMemoEnd, false, false);
                  lastNode.setSibling(currentNode);
               } else if(semicolon$RuleMemoFirstNode != null) {
                  lastNode.setSibling(semicolon$RuleMemoFirstNode);
                  currentNode = semicolon$RuleMemoLastNode;
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (';' OptionalSpacing)
      // ';'
      match = charMatcher(';');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         semicolon$RuleMemoStart = startIndex;
         semicolon$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            semicolon$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(JavaRuleType.SEMICOLON, startIndex, index, false, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            semicolon$RuleMemoFirstNode = currentNode;
            semicolon$RuleMemoLastNode = currentNode;
         }
         return true;
      } else {
         semicolon$RuleMemoStart = startIndex;
         semicolon$RuleMemoEnd = -1;
         semicolon$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }
}
