/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.parser.Parser;
import org.uggeri.yapp.runtime.java.parser.Rule;
import org.uggeri.yapp.runtime.java.parser.RuleProfile;
import org.uggeri.yapp.runtime.java.buffer.InputBuffer;
import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.node.NodeImpl;
import org.uggeri.yapp.runtime.java.parser.ParserError;
import org.uggeri.yapp.runtime.java.trace.TraceParser;
import java.util.Collections;
import java.util.Collection;
import java.util.Arrays;
import java.util.Map;

public class OraclePlSqlParser implements Parser {

   private int index = 0;

   private InputBuffer buffer;

   private boolean currentRuleIsAtomic = false;

   private Node currentNode = new NodeImpl(null, 0, 0, false, false);

   private int waitMode$RuleMemoStart = -1;
   private int waitMode$RuleMemoEnd;
   private Node waitMode$RuleMemoFirstNode;
   private int forceCommit$RuleMemoStart = -1;
   private int forceCommit$RuleMemoEnd;
   private Node forceCommit$RuleMemoFirstNode;
   private int normalCommit$RuleMemoStart = -1;
   private int normalCommit$RuleMemoEnd;
   private Node normalCommit$RuleMemoFirstNode;
   private int commitStatement$RuleMemoStart = -1;
   private int commitStatement$RuleMemoEnd;
   private Node commitStatement$RuleMemoFirstNode;
   private int lockTableStatement$RuleMemoStart = -1;
   private int lockTableStatement$RuleMemoEnd;
   private Node lockTableStatement$RuleMemoFirstNode;
   private int toSavePoint$RuleMemoStart = -1;
   private int toSavePoint$RuleMemoEnd;
   private Node toSavePoint$RuleMemoFirstNode;
   private int forceRollback$RuleMemoStart = -1;
   private int forceRollback$RuleMemoEnd;
   private Node forceRollback$RuleMemoFirstNode;
   private int rollbacklStatement$RuleMemoStart = -1;
   private int rollbacklStatement$RuleMemoEnd;
   private Node rollbacklStatement$RuleMemoFirstNode;
   private int transactionName$RuleMemoStart = -1;
   private int transactionName$RuleMemoEnd;
   private Node transactionName$RuleMemoFirstNode;
   private int useRollbackSegment$RuleMemoStart = -1;
   private int useRollbackSegment$RuleMemoEnd;
   private Node useRollbackSegment$RuleMemoFirstNode;
   private int isolationLevel$RuleMemoStart = -1;
   private int isolationLevel$RuleMemoEnd;
   private Node isolationLevel$RuleMemoFirstNode;
   private int readMode$RuleMemoStart = -1;
   private int readMode$RuleMemoEnd;
   private Node readMode$RuleMemoFirstNode;
   private int setTransactionStatement$RuleMemoStart = -1;
   private int setTransactionStatement$RuleMemoEnd;
   private Node setTransactionStatement$RuleMemoFirstNode;
   private int savepointStatement$RuleMemoStart = -1;
   private int savepointStatement$RuleMemoEnd;
   private Node savepointStatement$RuleMemoFirstNode;
   private int selectStatement$RuleMemoStart = -1;
   private int selectStatement$RuleMemoEnd;
   private Node selectStatement$RuleMemoFirstNode;
   private int mergeUpdateClause$RuleMemoStart = -1;
   private int mergeUpdateClause$RuleMemoEnd;
   private Node mergeUpdateClause$RuleMemoFirstNode;
   private int mergeInsertClause$RuleMemoStart = -1;
   private int mergeInsertClause$RuleMemoEnd;
   private Node mergeInsertClause$RuleMemoFirstNode;
   private int mergeStatement$RuleMemoStart = -1;
   private int mergeStatement$RuleMemoEnd;
   private Node mergeStatement$RuleMemoFirstNode;
   private int blockHint$RuleMemoStart = -1;
   private int blockHint$RuleMemoEnd;
   private Node blockHint$RuleMemoFirstNode;
   private int lineHint$RuleMemoStart = -1;
   private int lineHint$RuleMemoEnd;
   private Node lineHint$RuleMemoFirstNode;
   private int hint$RuleMemoStart = -1;
   private int hint$RuleMemoEnd;
   private Node hint$RuleMemoFirstNode;
   private int listAllFields$RuleMemoStart = -1;
   private int listAllFields$RuleMemoEnd;
   private Node listAllFields$RuleMemoFirstNode;
   private int selectListExpressionElement$RuleMemoStart = -1;
   private int selectListExpressionElement$RuleMemoEnd;
   private Node selectListExpressionElement$RuleMemoFirstNode;
   private int selectListElement$RuleMemoStart = -1;
   private int selectListElement$RuleMemoEnd;
   private Node selectListElement$RuleMemoFirstNode;
   private int listOfSelectListElement$RuleMemoStart = -1;
   private int listOfSelectListElement$RuleMemoEnd;
   private Node listOfSelectListElement$RuleMemoFirstNode;
   private int selectList$RuleMemoStart = -1;
   private int selectList$RuleMemoEnd;
   private Node selectList$RuleMemoFirstNode;
   private int subqueryReadOnlyRestriction$RuleMemoStart = -1;
   private int subqueryReadOnlyRestriction$RuleMemoEnd;
   private Node subqueryReadOnlyRestriction$RuleMemoFirstNode;
   private int subqueryCheckOptionRestriction$RuleMemoStart = -1;
   private int subqueryCheckOptionRestriction$RuleMemoEnd;
   private Node subqueryCheckOptionRestriction$RuleMemoFirstNode;
   private int tableOrView$RuleMemoStart = -1;
   private int tableOrView$RuleMemoEnd;
   private Node tableOrView$RuleMemoFirstNode;
   private int queryTableExpression$RuleMemoStart = -1;
   private int queryTableExpression$RuleMemoEnd;
   private Node queryTableExpression$RuleMemoFirstNode;
   private int dBLink$RuleMemoStart = -1;
   private int dBLink$RuleMemoEnd;
   private Node dBLink$RuleMemoFirstNode;
   private int tableName$RuleMemoStart = -1;
   private int tableName$RuleMemoEnd;
   private Node tableName$RuleMemoFirstNode;
   private int tableCollectionExpression$RuleMemoStart = -1;
   private int tableCollectionExpression$RuleMemoEnd;
   private Node tableCollectionExpression$RuleMemoFirstNode;
   private int sqlExpression$RuleMemoStart = -1;
   private int sqlExpression$RuleMemoEnd;
   private Node sqlExpression$RuleMemoFirstNode;
   private int sqlMathExpression$RuleMemoStart = -1;
   private int sqlMathExpression$RuleMemoEnd;
   private Node sqlMathExpression$RuleMemoFirstNode;
   private int parenthesesSqlExpression$RuleMemoStart = -1;
   private int parenthesesSqlExpression$RuleMemoEnd;
   private Node parenthesesSqlExpression$RuleMemoFirstNode;
   private int sqlUnaryExpression$RuleMemoStart = -1;
   private int sqlUnaryExpression$RuleMemoEnd;
   private Node sqlUnaryExpression$RuleMemoFirstNode;
   private int sqlLeftAtomicExpression$RuleMemoStart = -1;
   private int sqlLeftAtomicExpression$RuleMemoEnd;
   private Node sqlLeftAtomicExpression$RuleMemoFirstNode;
   private int dateTimeExpression$RuleMemoStart = -1;
   private int dateTimeExpression$RuleMemoEnd;
   private Node dateTimeExpression$RuleMemoFirstNode;
   private int sqlAtomicExpression$RuleMemoStart = -1;
   private int sqlAtomicExpression$RuleMemoEnd;
   private Node sqlAtomicExpression$RuleMemoFirstNode;
   private int sqlCaseExpression$RuleMemoStart = -1;
   private int sqlCaseExpression$RuleMemoEnd;
   private Node sqlCaseExpression$RuleMemoFirstNode;
   private int sqlSimpleCaseExpression$RuleMemoStart = -1;
   private int sqlSimpleCaseExpression$RuleMemoEnd;
   private Node sqlSimpleCaseExpression$RuleMemoFirstNode;
   private int sqlWhenConditionThen$RuleMemoStart = -1;
   private int sqlWhenConditionThen$RuleMemoEnd;
   private Node sqlWhenConditionThen$RuleMemoFirstNode;
   private int sqlSearchedCaseExpression$RuleMemoStart = -1;
   private int sqlSearchedCaseExpression$RuleMemoEnd;
   private Node sqlSearchedCaseExpression$RuleMemoFirstNode;
   private int rowNum$RuleMemoStart = -1;
   private int rowNum$RuleMemoEnd;
   private Node rowNum$RuleMemoFirstNode;
   private int identifiedRowId$RuleMemoStart = -1;
   private int identifiedRowId$RuleMemoEnd;
   private Node identifiedRowId$RuleMemoFirstNode;
   private int rowId$RuleMemoStart = -1;
   private int rowId$RuleMemoEnd;
   private Node rowId$RuleMemoFirstNode;
   private int level$RuleMemoStart = -1;
   private int level$RuleMemoEnd;
   private Node level$RuleMemoFirstNode;
   private int sqlOuterJoinObject$RuleMemoStart = -1;
   private int sqlOuterJoinObject$RuleMemoEnd;
   private Node sqlOuterJoinObject$RuleMemoFirstNode;
   private int sqlSimpleExpression$RuleMemoStart = -1;
   private int sqlSimpleExpression$RuleMemoEnd;
   private Node sqlSimpleExpression$RuleMemoFirstNode;
   private int sysDate$RuleMemoStart = -1;
   private int sysDate$RuleMemoEnd;
   private Node sysDate$RuleMemoFirstNode;
   private int timeExpression$RuleMemoStart = -1;
   private int timeExpression$RuleMemoEnd;
   private Node timeExpression$RuleMemoFirstNode;
   private int outerJoinSign$RuleMemoStart = -1;
   private int outerJoinSign$RuleMemoEnd;
   private Node outerJoinSign$RuleMemoFirstNode;
   private int orderByFunctionClause$RuleMemoStart = -1;
   private int orderByFunctionClause$RuleMemoEnd;
   private Node orderByFunctionClause$RuleMemoFirstNode;
   private int avg$RuleMemoStart = -1;
   private int avg$RuleMemoEnd;
   private Node avg$RuleMemoFirstNode;
   private int cast$RuleMemoStart = -1;
   private int cast$RuleMemoEnd;
   private Node cast$RuleMemoFirstNode;
   private int chr$RuleMemoStart = -1;
   private int chr$RuleMemoEnd;
   private Node chr$RuleMemoFirstNode;
   private int miningAttributeClause$RuleMemoStart = -1;
   private int miningAttributeClause$RuleMemoEnd;
   private Node miningAttributeClause$RuleMemoFirstNode;
   private int clusterId$RuleMemoStart = -1;
   private int clusterId$RuleMemoEnd;
   private Node clusterId$RuleMemoFirstNode;
   private int clusterProbability$RuleMemoStart = -1;
   private int clusterProbability$RuleMemoEnd;
   private Node clusterProbability$RuleMemoFirstNode;
   private int clusterSet$RuleMemoStart = -1;
   private int clusterSet$RuleMemoEnd;
   private Node clusterSet$RuleMemoFirstNode;
   private int corr$RuleMemoStart = -1;
   private int corr$RuleMemoEnd;
   private Node corr$RuleMemoFirstNode;
   private int distinctExpression$RuleMemoStart = -1;
   private int distinctExpression$RuleMemoEnd;
   private Node distinctExpression$RuleMemoFirstNode;
   private int allExpression$RuleMemoStart = -1;
   private int allExpression$RuleMemoEnd;
   private Node allExpression$RuleMemoFirstNode;
   private int count$RuleMemoStart = -1;
   private int count$RuleMemoEnd;
   private Node count$RuleMemoFirstNode;
   private int covarPop$RuleMemoStart = -1;
   private int covarPop$RuleMemoEnd;
   private Node covarPop$RuleMemoFirstNode;
   private int covarSamp$RuleMemoStart = -1;
   private int covarSamp$RuleMemoEnd;
   private Node covarSamp$RuleMemoFirstNode;
   private int cumeDistAnalytic$RuleMemoStart = -1;
   private int cumeDistAnalytic$RuleMemoEnd;
   private Node cumeDistAnalytic$RuleMemoFirstNode;
   private int cumeDistAggregate$RuleMemoStart = -1;
   private int cumeDistAggregate$RuleMemoEnd;
   private Node cumeDistAggregate$RuleMemoFirstNode;
   private int decompose$RuleMemoStart = -1;
   private int decompose$RuleMemoEnd;
   private Node decompose$RuleMemoFirstNode;
   private int denseRankAggregate$RuleMemoStart = -1;
   private int denseRankAggregate$RuleMemoEnd;
   private Node denseRankAggregate$RuleMemoFirstNode;
   private int denseRankAnalytic$RuleMemoStart = -1;
   private int denseRankAnalytic$RuleMemoEnd;
   private Node denseRankAnalytic$RuleMemoFirstNode;
   private int overParenthesesQueryPartitionClause$RuleMemoStart = -1;
   private int overParenthesesQueryPartitionClause$RuleMemoEnd;
   private Node overParenthesesQueryPartitionClause$RuleMemoFirstNode;
   private int extract$RuleMemoStart = -1;
   private int extract$RuleMemoEnd;
   private Node extract$RuleMemoFirstNode;
   private int featureId$RuleMemoStart = -1;
   private int featureId$RuleMemoEnd;
   private Node featureId$RuleMemoFirstNode;
   private int featureSet$RuleMemoStart = -1;
   private int featureSet$RuleMemoEnd;
   private Node featureSet$RuleMemoFirstNode;
   private int featureValue$RuleMemoStart = -1;
   private int featureValue$RuleMemoEnd;
   private Node featureValue$RuleMemoFirstNode;
   private int ignoreNulls$RuleMemoStart = -1;
   private int ignoreNulls$RuleMemoEnd;
   private Node ignoreNulls$RuleMemoFirstNode;
   private int firstValue$RuleMemoStart = -1;
   private int firstValue$RuleMemoEnd;
   private Node firstValue$RuleMemoFirstNode;
   private int lag$RuleMemoStart = -1;
   private int lag$RuleMemoEnd;
   private Node lag$RuleMemoFirstNode;
   private int lastValue$RuleMemoStart = -1;
   private int lastValue$RuleMemoEnd;
   private Node lastValue$RuleMemoFirstNode;
   private int lead$RuleMemoStart = -1;
   private int lead$RuleMemoEnd;
   private Node lead$RuleMemoFirstNode;
   private int listAgg$RuleMemoStart = -1;
   private int listAgg$RuleMemoEnd;
   private Node listAgg$RuleMemoFirstNode;
   private int max$RuleMemoStart = -1;
   private int max$RuleMemoEnd;
   private Node max$RuleMemoFirstNode;
   private int median$RuleMemoStart = -1;
   private int median$RuleMemoEnd;
   private Node median$RuleMemoFirstNode;
   private int min$RuleMemoStart = -1;
   private int min$RuleMemoEnd;
   private Node min$RuleMemoFirstNode;
   private int nTile$RuleMemoStart = -1;
   private int nTile$RuleMemoEnd;
   private Node nTile$RuleMemoFirstNode;
   private int percentRankAggregate$RuleMemoStart = -1;
   private int percentRankAggregate$RuleMemoEnd;
   private Node percentRankAggregate$RuleMemoFirstNode;
   private int percentRankAnalytic$RuleMemoStart = -1;
   private int percentRankAnalytic$RuleMemoEnd;
   private Node percentRankAnalytic$RuleMemoFirstNode;
   private int percentileCont$RuleMemoStart = -1;
   private int percentileCont$RuleMemoEnd;
   private Node percentileCont$RuleMemoFirstNode;
   private int percentileDisc$RuleMemoStart = -1;
   private int percentileDisc$RuleMemoEnd;
   private Node percentileDisc$RuleMemoFirstNode;
   private int costMatrixClauseValues$RuleMemoStart = -1;
   private int costMatrixClauseValues$RuleMemoEnd;
   private Node costMatrixClauseValues$RuleMemoFirstNode;
   private int costMatrixClauseModel$RuleMemoStart = -1;
   private int costMatrixClauseModel$RuleMemoEnd;
   private Node costMatrixClauseModel$RuleMemoFirstNode;
   private int costMatrixClause$RuleMemoStart = -1;
   private int costMatrixClause$RuleMemoEnd;
   private Node costMatrixClause$RuleMemoFirstNode;
   private int prediction$RuleMemoStart = -1;
   private int prediction$RuleMemoEnd;
   private Node prediction$RuleMemoFirstNode;
   private int predictionBounds$RuleMemoStart = -1;
   private int predictionBounds$RuleMemoEnd;
   private Node predictionBounds$RuleMemoFirstNode;
   private int predictionCost$RuleMemoStart = -1;
   private int predictionCost$RuleMemoEnd;
   private Node predictionCost$RuleMemoFirstNode;
   private int predictionDetails$RuleMemoStart = -1;
   private int predictionDetails$RuleMemoEnd;
   private Node predictionDetails$RuleMemoFirstNode;
   private int predictionProbability$RuleMemoStart = -1;
   private int predictionProbability$RuleMemoEnd;
   private Node predictionProbability$RuleMemoFirstNode;
   private int predictionSet$RuleMemoStart = -1;
   private int predictionSet$RuleMemoEnd;
   private Node predictionSet$RuleMemoFirstNode;
   private int rankAggregate$RuleMemoStart = -1;
   private int rankAggregate$RuleMemoEnd;
   private Node rankAggregate$RuleMemoFirstNode;
   private int rankAnalytic$RuleMemoStart = -1;
   private int rankAnalytic$RuleMemoEnd;
   private Node rankAnalytic$RuleMemoFirstNode;
   private int ratioToReport$RuleMemoStart = -1;
   private int ratioToReport$RuleMemoEnd;
   private Node ratioToReport$RuleMemoFirstNode;
   private int regrLinearFunctions$RuleMemoStart = -1;
   private int regrLinearFunctions$RuleMemoEnd;
   private Node regrLinearFunctions$RuleMemoFirstNode;
   private int rowNumber$RuleMemoStart = -1;
   private int rowNumber$RuleMemoEnd;
   private Node rowNumber$RuleMemoFirstNode;
   private int stdDev$RuleMemoStart = -1;
   private int stdDev$RuleMemoEnd;
   private Node stdDev$RuleMemoFirstNode;
   private int stdDevPop$RuleMemoStart = -1;
   private int stdDevPop$RuleMemoEnd;
   private Node stdDevPop$RuleMemoFirstNode;
   private int stdDevSamp$RuleMemoStart = -1;
   private int stdDevSamp$RuleMemoEnd;
   private Node stdDevSamp$RuleMemoFirstNode;
   private int sum$RuleMemoStart = -1;
   private int sum$RuleMemoEnd;
   private Node sum$RuleMemoFirstNode;
   private int translate$RuleMemoStart = -1;
   private int translate$RuleMemoEnd;
   private Node translate$RuleMemoFirstNode;
   private int treat$RuleMemoStart = -1;
   private int treat$RuleMemoEnd;
   private Node treat$RuleMemoFirstNode;
   private int trim$RuleMemoStart = -1;
   private int trim$RuleMemoEnd;
   private Node trim$RuleMemoFirstNode;
   private int varPop$RuleMemoStart = -1;
   private int varPop$RuleMemoEnd;
   private Node varPop$RuleMemoFirstNode;
   private int varSamp$RuleMemoStart = -1;
   private int varSamp$RuleMemoEnd;
   private Node varSamp$RuleMemoFirstNode;
   private int variance$RuleMemoStart = -1;
   private int variance$RuleMemoEnd;
   private Node variance$RuleMemoFirstNode;
   private int xmlAgg$RuleMemoStart = -1;
   private int xmlAgg$RuleMemoEnd;
   private Node xmlAgg$RuleMemoFirstNode;
   private int xmlCast$RuleMemoStart = -1;
   private int xmlCast$RuleMemoEnd;
   private Node xmlCast$RuleMemoFirstNode;
   private int xmlPar$RuleMemoStart = -1;
   private int xmlPar$RuleMemoEnd;
   private Node xmlPar$RuleMemoFirstNode;
   private int xmlColAttVal$RuleMemoStart = -1;
   private int xmlColAttVal$RuleMemoEnd;
   private Node xmlColAttVal$RuleMemoFirstNode;
   private int xmlElement$RuleMemoStart = -1;
   private int xmlElement$RuleMemoEnd;
   private Node xmlElement$RuleMemoFirstNode;
   private int asAlias$RuleMemoStart = -1;
   private int asAlias$RuleMemoEnd;
   private Node asAlias$RuleMemoFirstNode;
   private int aliasedExpression$RuleMemoStart = -1;
   private int aliasedExpression$RuleMemoEnd;
   private Node aliasedExpression$RuleMemoFirstNode;
   private int xmlPassingClause$RuleMemoStart = -1;
   private int xmlPassingClause$RuleMemoEnd;
   private Node xmlPassingClause$RuleMemoFirstNode;
   private int xmlExists$RuleMemoStart = -1;
   private int xmlExists$RuleMemoEnd;
   private Node xmlExists$RuleMemoFirstNode;
   private int xmlForest$RuleMemoStart = -1;
   private int xmlForest$RuleMemoEnd;
   private Node xmlForest$RuleMemoFirstNode;
   private int xmlParse$RuleMemoStart = -1;
   private int xmlParse$RuleMemoEnd;
   private Node xmlParse$RuleMemoFirstNode;
   private int xmlPI$RuleMemoStart = -1;
   private int xmlPI$RuleMemoEnd;
   private Node xmlPI$RuleMemoFirstNode;
   private int xmlQuery$RuleMemoStart = -1;
   private int xmlQuery$RuleMemoEnd;
   private Node xmlQuery$RuleMemoFirstNode;
   private int xmlRoot$RuleMemoStart = -1;
   private int xmlRoot$RuleMemoEnd;
   private Node xmlRoot$RuleMemoFirstNode;
   private int xmlNamespacesArg$RuleMemoStart = -1;
   private int xmlNamespacesArg$RuleMemoEnd;
   private Node xmlNamespacesArg$RuleMemoFirstNode;
   private int xmlTableColumn$RuleMemoStart = -1;
   private int xmlTableColumn$RuleMemoEnd;
   private Node xmlTableColumn$RuleMemoFirstNode;
   private int xmlTable$RuleMemoStart = -1;
   private int xmlTable$RuleMemoEnd;
   private Node xmlTable$RuleMemoFirstNode;
   private int builtInFunctionCall$RuleMemoStart = -1;
   private int builtInFunctionCall$RuleMemoEnd;
   private Node builtInFunctionCall$RuleMemoFirstNode;
   private int analyticFunctionCall$RuleMemoStart = -1;
   private int analyticFunctionCall$RuleMemoEnd;
   private Node analyticFunctionCall$RuleMemoFirstNode;
   private int sqlIdentifiedFunctionParameter$RuleMemoStart = -1;
   private int sqlIdentifiedFunctionParameter$RuleMemoEnd;
   private Node sqlIdentifiedFunctionParameter$RuleMemoFirstNode;
   private int sqlFunctionParameter$RuleMemoStart = -1;
   private int sqlFunctionParameter$RuleMemoEnd;
   private Node sqlFunctionParameter$RuleMemoFirstNode;
   private int unboundedPreceding$RuleMemoStart = -1;
   private int unboundedPreceding$RuleMemoEnd;
   private Node unboundedPreceding$RuleMemoFirstNode;
   private int unboundedFollowing$RuleMemoStart = -1;
   private int unboundedFollowing$RuleMemoEnd;
   private Node unboundedFollowing$RuleMemoFirstNode;
   private int currentRow$RuleMemoStart = -1;
   private int currentRow$RuleMemoEnd;
   private Node currentRow$RuleMemoFirstNode;
   private int preceding$RuleMemoStart = -1;
   private int preceding$RuleMemoEnd;
   private Node preceding$RuleMemoFirstNode;
   private int following$RuleMemoStart = -1;
   private int following$RuleMemoEnd;
   private Node following$RuleMemoFirstNode;
   private int betweenWindowingClause$RuleMemoStart = -1;
   private int betweenWindowingClause$RuleMemoEnd;
   private Node betweenWindowingClause$RuleMemoFirstNode;
   private int analyticOverClause$RuleMemoStart = -1;
   private int analyticOverClause$RuleMemoEnd;
   private Node analyticOverClause$RuleMemoFirstNode;
   private int modelExpression$RuleMemoStart = -1;
   private int modelExpression$RuleMemoEnd;
   private Node modelExpression$RuleMemoFirstNode;
   private int cursorExpression$RuleMemoStart = -1;
   private int cursorExpression$RuleMemoEnd;
   private Node cursorExpression$RuleMemoFirstNode;
   private int conditionOrExpression$RuleMemoStart = -1;
   private int conditionOrExpression$RuleMemoEnd;
   private Node conditionOrExpression$RuleMemoFirstNode;
   private int cellReferenceArgumentsList$RuleMemoStart = -1;
   private int cellReferenceArgumentsList$RuleMemoEnd;
   private Node cellReferenceArgumentsList$RuleMemoFirstNode;
   private int cellReferenceArgument$RuleMemoStart = -1;
   private int cellReferenceArgument$RuleMemoEnd;
   private Node cellReferenceArgument$RuleMemoFirstNode;
   private int placeHolderExpression$RuleMemoStart = -1;
   private int placeHolderExpression$RuleMemoEnd;
   private Node placeHolderExpression$RuleMemoFirstNode;
   private int typeConstructorExpression$RuleMemoStart = -1;
   private int typeConstructorExpression$RuleMemoEnd;
   private Node typeConstructorExpression$RuleMemoFirstNode;
   private int pivotForClause$RuleMemoStart = -1;
   private int pivotForClause$RuleMemoEnd;
   private Node pivotForClause$RuleMemoFirstNode;
   private int anyList$RuleMemoStart = -1;
   private int anyList$RuleMemoEnd;
   private Node anyList$RuleMemoFirstNode;
   private int sqlExpressionList$RuleMemoStart = -1;
   private int sqlExpressionList$RuleMemoEnd;
   private Node sqlExpressionList$RuleMemoFirstNode;
   private int parenthesesSqlExpressionList$RuleMemoStart = -1;
   private int parenthesesSqlExpressionList$RuleMemoEnd;
   private Node parenthesesSqlExpressionList$RuleMemoFirstNode;
   private int pivoInExpressionList$RuleMemoStart = -1;
   private int pivoInExpressionList$RuleMemoEnd;
   private Node pivoInExpressionList$RuleMemoFirstNode;
   private int asOptionalAlias$RuleMemoStart = -1;
   private int asOptionalAlias$RuleMemoEnd;
   private Node asOptionalAlias$RuleMemoFirstNode;
   private int pivotInExpression$RuleMemoStart = -1;
   private int pivotInExpression$RuleMemoEnd;
   private Node pivotInExpression$RuleMemoFirstNode;
   private int includeNulls$RuleMemoStart = -1;
   private int includeNulls$RuleMemoEnd;
   private Node includeNulls$RuleMemoFirstNode;
   private int excludeNulls$RuleMemoStart = -1;
   private int excludeNulls$RuleMemoEnd;
   private Node excludeNulls$RuleMemoFirstNode;
   private int unpivotInElement$RuleMemoStart = -1;
   private int unpivotInElement$RuleMemoEnd;
   private Node unpivotInElement$RuleMemoFirstNode;
   private int sqlLiteralList$RuleMemoStart = -1;
   private int sqlLiteralList$RuleMemoEnd;
   private Node sqlLiteralList$RuleMemoFirstNode;
   private int parenthesesLiteralList$RuleMemoStart = -1;
   private int parenthesesLiteralList$RuleMemoEnd;
   private Node parenthesesLiteralList$RuleMemoFirstNode;
   private int parenthesesLiteralListList$RuleMemoStart = -1;
   private int parenthesesLiteralListList$RuleMemoEnd;
   private Node parenthesesLiteralListList$RuleMemoFirstNode;
   private int schema$RuleMemoStart = -1;
   private int schema$RuleMemoEnd;
   private Node schema$RuleMemoFirstNode;
   private int table$RuleMemoStart = -1;
   private int table$RuleMemoEnd;
   private Node table$RuleMemoFirstNode;
   private int object$RuleMemoStart = -1;
   private int object$RuleMemoEnd;
   private Node object$RuleMemoFirstNode;
   private int column$RuleMemoStart = -1;
   private int column$RuleMemoEnd;
   private Node column$RuleMemoFirstNode;
   private int schemaObjectName$RuleMemoStart = -1;
   private int schemaObjectName$RuleMemoEnd;
   private Node schemaObjectName$RuleMemoFirstNode;
   private int columnName$RuleMemoStart = -1;
   private int columnName$RuleMemoEnd;
   private Node columnName$RuleMemoFirstNode;
   private int columnsList$RuleMemoStart = -1;
   private int columnsList$RuleMemoEnd;
   private Node columnsList$RuleMemoFirstNode;
   private int onlyQueryTableExpression$RuleMemoStart = -1;
   private int onlyQueryTableExpression$RuleMemoEnd;
   private Node onlyQueryTableExpression$RuleMemoFirstNode;
   private int queryTableExpressionPivotClause$RuleMemoStart = -1;
   private int queryTableExpressionPivotClause$RuleMemoEnd;
   private Node queryTableExpressionPivotClause$RuleMemoFirstNode;
   private int queryTableExpressionUnpivotClause$RuleMemoStart = -1;
   private int queryTableExpressionUnpivotClause$RuleMemoEnd;
   private Node queryTableExpressionUnpivotClause$RuleMemoFirstNode;
   private int tableReference$RuleMemoStart = -1;
   private int tableReference$RuleMemoEnd;
   private Node tableReference$RuleMemoFirstNode;
   private int relationalOperator$RuleMemoStart = -1;
   private int relationalOperator$RuleMemoEnd;
   private Node relationalOperator$RuleMemoFirstNode;
   private int sqlCondition$RuleMemoStart = -1;
   private int sqlCondition$RuleMemoEnd;
   private Node sqlCondition$RuleMemoFirstNode;
   private int orCondition$RuleMemoStart = -1;
   private int orCondition$RuleMemoEnd;
   private Node orCondition$RuleMemoFirstNode;
   private int andCondition$RuleMemoStart = -1;
   private int andCondition$RuleMemoEnd;
   private Node andCondition$RuleMemoFirstNode;
   private int notCondition$RuleMemoStart = -1;
   private int notCondition$RuleMemoEnd;
   private Node notCondition$RuleMemoFirstNode;
   private int parenthesesCondition$RuleMemoStart = -1;
   private int parenthesesCondition$RuleMemoEnd;
   private Node parenthesesCondition$RuleMemoFirstNode;
   private int conditionExpression$RuleMemoStart = -1;
   private int conditionExpression$RuleMemoEnd;
   private Node conditionExpression$RuleMemoFirstNode;
   private int existsCondition$RuleMemoStart = -1;
   private int existsCondition$RuleMemoEnd;
   private Node existsCondition$RuleMemoFirstNode;
   private int not$RuleMemoStart = -1;
   private int not$RuleMemoEnd;
   private Node not$RuleMemoFirstNode;
   private int isCondition$RuleMemoStart = -1;
   private int isCondition$RuleMemoEnd;
   private Node isCondition$RuleMemoFirstNode;
   private int prior$RuleMemoStart = -1;
   private int prior$RuleMemoEnd;
   private Node prior$RuleMemoFirstNode;
   private int relationalCondition$RuleMemoStart = -1;
   private int relationalCondition$RuleMemoEnd;
   private Node relationalCondition$RuleMemoFirstNode;
   private int groupConditionCoverageType$RuleMemoStart = -1;
   private int groupConditionCoverageType$RuleMemoEnd;
   private Node groupConditionCoverageType$RuleMemoFirstNode;
   private int equalityGroupCondition$RuleMemoStart = -1;
   private int equalityGroupCondition$RuleMemoEnd;
   private Node equalityGroupCondition$RuleMemoFirstNode;
   private int anyRelationalGroupCondition$RuleMemoStart = -1;
   private int anyRelationalGroupCondition$RuleMemoEnd;
   private Node anyRelationalGroupCondition$RuleMemoFirstNode;
   private int relationalGroupCondition$RuleMemoStart = -1;
   private int relationalGroupCondition$RuleMemoEnd;
   private Node relationalGroupCondition$RuleMemoFirstNode;
   private int inCondition$RuleMemoStart = -1;
   private int inCondition$RuleMemoEnd;
   private Node inCondition$RuleMemoFirstNode;
   private int isASetCondition$RuleMemoStart = -1;
   private int isASetCondition$RuleMemoEnd;
   private Node isASetCondition$RuleMemoFirstNode;
   private int objectIs$RuleMemoStart = -1;
   private int objectIs$RuleMemoEnd;
   private Node objectIs$RuleMemoFirstNode;
   private int isAnyCondition$RuleMemoStart = -1;
   private int isAnyCondition$RuleMemoEnd;
   private Node isAnyCondition$RuleMemoFirstNode;
   private int isEmptyCondition$RuleMemoStart = -1;
   private int isEmptyCondition$RuleMemoEnd;
   private Node isEmptyCondition$RuleMemoFirstNode;
   private int isOfTypeCondition$RuleMemoStart = -1;
   private int isOfTypeCondition$RuleMemoEnd;
   private Node isOfTypeCondition$RuleMemoFirstNode;
   private int isTypeOfObject$RuleMemoStart = -1;
   private int isTypeOfObject$RuleMemoEnd;
   private Node isTypeOfObject$RuleMemoFirstNode;
   private int isPresentCondition$RuleMemoStart = -1;
   private int isPresentCondition$RuleMemoEnd;
   private Node isPresentCondition$RuleMemoFirstNode;
   private int likeCondition$RuleMemoStart = -1;
   private int likeCondition$RuleMemoEnd;
   private Node likeCondition$RuleMemoFirstNode;
   private int regexCondition$RuleMemoStart = -1;
   private int regexCondition$RuleMemoEnd;
   private Node regexCondition$RuleMemoFirstNode;
   private int memberCondition$RuleMemoStart = -1;
   private int memberCondition$RuleMemoEnd;
   private Node memberCondition$RuleMemoFirstNode;
   private int betweenCondition$RuleMemoStart = -1;
   private int betweenCondition$RuleMemoEnd;
   private Node betweenCondition$RuleMemoFirstNode;
   private int subMultiSetCondition$RuleMemoStart = -1;
   private int subMultiSetCondition$RuleMemoEnd;
   private Node subMultiSetCondition$RuleMemoFirstNode;
   private int correlationInteger$RuleMemoStart = -1;
   private int correlationInteger$RuleMemoEnd;
   private Node correlationInteger$RuleMemoFirstNode;
   private int equalsPathCondition$RuleMemoStart = -1;
   private int equalsPathCondition$RuleMemoEnd;
   private Node equalsPathCondition$RuleMemoFirstNode;
   private int underPathCondition$RuleMemoStart = -1;
   private int underPathCondition$RuleMemoEnd;
   private Node underPathCondition$RuleMemoFirstNode;
   private int identifierOrStringLiteral$RuleMemoStart = -1;
   private int identifierOrStringLiteral$RuleMemoEnd;
   private Node identifierOrStringLiteral$RuleMemoFirstNode;
   private int onCondition$RuleMemoStart = -1;
   private int onCondition$RuleMemoEnd;
   private Node onCondition$RuleMemoFirstNode;
   private int using$RuleMemoStart = -1;
   private int using$RuleMemoEnd;
   private Node using$RuleMemoFirstNode;
   private int innerCrossJoinClause$RuleMemoStart = -1;
   private int innerCrossJoinClause$RuleMemoEnd;
   private Node innerCrossJoinClause$RuleMemoFirstNode;
   private int naturalOuterJoin$RuleMemoStart = -1;
   private int naturalOuterJoin$RuleMemoEnd;
   private Node naturalOuterJoin$RuleMemoFirstNode;
   private int normalOuterJoin$RuleMemoStart = -1;
   private int normalOuterJoin$RuleMemoEnd;
   private Node normalOuterJoin$RuleMemoFirstNode;
   private int outerJoinClause$RuleMemoStart = -1;
   private int outerJoinClause$RuleMemoEnd;
   private Node outerJoinClause$RuleMemoFirstNode;
   private int outerJoinType$RuleMemoStart = -1;
   private int outerJoinType$RuleMemoEnd;
   private Node outerJoinType$RuleMemoFirstNode;
   private int queryPartitionClause$RuleMemoStart = -1;
   private int queryPartitionClause$RuleMemoEnd;
   private Node queryPartitionClause$RuleMemoFirstNode;
   private int fromArgument$RuleMemoStart = -1;
   private int fromArgument$RuleMemoEnd;
   private Node fromArgument$RuleMemoFirstNode;
   private int currentOf$RuleMemoStart = -1;
   private int currentOf$RuleMemoEnd;
   private Node currentOf$RuleMemoFirstNode;
   private int whereClause$RuleMemoStart = -1;
   private int whereClause$RuleMemoEnd;
   private Node whereClause$RuleMemoFirstNode;
   private int bulkCollect$RuleMemoStart = -1;
   private int bulkCollect$RuleMemoEnd;
   private Node bulkCollect$RuleMemoFirstNode;
   private int queryBlock$RuleMemoStart = -1;
   private int queryBlock$RuleMemoEnd;
   private Node queryBlock$RuleMemoFirstNode;
   private int enclosedSubquery$RuleMemoStart = -1;
   private int enclosedSubquery$RuleMemoEnd;
   private Node enclosedSubquery$RuleMemoFirstNode;
   private int subquery$RuleMemoStart = -1;
   private int subquery$RuleMemoEnd;
   private Node subquery$RuleMemoFirstNode;
   private int startWithCondition$RuleMemoStart = -1;
   private int startWithCondition$RuleMemoEnd;
   private Node startWithCondition$RuleMemoFirstNode;
   private int connectByCondition$RuleMemoStart = -1;
   private int connectByCondition$RuleMemoEnd;
   private Node connectByCondition$RuleMemoFirstNode;
   private int connectBy$RuleMemoStart = -1;
   private int connectBy$RuleMemoEnd;
   private Node connectBy$RuleMemoFirstNode;
   private int startWith$RuleMemoStart = -1;
   private int startWith$RuleMemoEnd;
   private Node startWith$RuleMemoFirstNode;
   private int groupByArgument$RuleMemoStart = -1;
   private int groupByArgument$RuleMemoEnd;
   private Node groupByArgument$RuleMemoFirstNode;
   private int rollupCubeClause$RuleMemoStart = -1;
   private int rollupCubeClause$RuleMemoEnd;
   private Node rollupCubeClause$RuleMemoFirstNode;
   private int groupingExpressionList$RuleMemoStart = -1;
   private int groupingExpressionList$RuleMemoEnd;
   private Node groupingExpressionList$RuleMemoFirstNode;
   private int groupingSetsClause$RuleMemoStart = -1;
   private int groupingSetsClause$RuleMemoEnd;
   private Node groupingSetsClause$RuleMemoFirstNode;
   private int groupingSetsClauseArgument$RuleMemoStart = -1;
   private int groupingSetsClauseArgument$RuleMemoEnd;
   private Node groupingSetsClauseArgument$RuleMemoFirstNode;
   private int havingClause$RuleMemoStart = -1;
   private int havingClause$RuleMemoEnd;
   private Node havingClause$RuleMemoFirstNode;
   private int cellReferenceOptions$RuleMemoStart = -1;
   private int cellReferenceOptions$RuleMemoEnd;
   private Node cellReferenceOptions$RuleMemoFirstNode;
   private int modelColumnClause$RuleMemoStart = -1;
   private int modelColumnClause$RuleMemoEnd;
   private Node modelColumnClause$RuleMemoFirstNode;
   private int modelColumnList$RuleMemoStart = -1;
   private int modelColumnList$RuleMemoEnd;
   private Node modelColumnList$RuleMemoFirstNode;
   private int modelColumn$RuleMemoStart = -1;
   private int modelColumn$RuleMemoEnd;
   private Node modelColumn$RuleMemoFirstNode;
   private int modelRulesClauseCellAssignment$RuleMemoStart = -1;
   private int modelRulesClauseCellAssignment$RuleMemoEnd;
   private Node modelRulesClauseCellAssignment$RuleMemoFirstNode;
   private int cellAssignmentArgumentsList$RuleMemoStart = -1;
   private int cellAssignmentArgumentsList$RuleMemoEnd;
   private Node cellAssignmentArgumentsList$RuleMemoFirstNode;
   private int cellAssignmentArgument$RuleMemoStart = -1;
   private int cellAssignmentArgument$RuleMemoEnd;
   private Node cellAssignmentArgument$RuleMemoFirstNode;
   private int forIn$RuleMemoStart = -1;
   private int forIn$RuleMemoEnd;
   private Node forIn$RuleMemoFirstNode;
   private int forLike$RuleMemoStart = -1;
   private int forLike$RuleMemoEnd;
   private Node forLike$RuleMemoFirstNode;
   private int singleColumnForLoop$RuleMemoStart = -1;
   private int singleColumnForLoop$RuleMemoEnd;
   private Node singleColumnForLoop$RuleMemoFirstNode;
   private int multiColumnForLoop$RuleMemoStart = -1;
   private int multiColumnForLoop$RuleMemoEnd;
   private Node multiColumnForLoop$RuleMemoFirstNode;
   private int sqlLiteral$RuleMemoStart = -1;
   private int sqlLiteral$RuleMemoEnd;
   private Node sqlLiteral$RuleMemoFirstNode;
   private int nullLiteral$RuleMemoStart = -1;
   private int nullLiteral$RuleMemoEnd;
   private Node nullLiteral$RuleMemoFirstNode;
   private int dateLiteral$RuleMemoStart = -1;
   private int dateLiteral$RuleMemoEnd;
   private Node dateLiteral$RuleMemoFirstNode;
   private int year$RuleMemoStart = -1;
   private int year$RuleMemoEnd;
   private Node year$RuleMemoFirstNode;
   private int month$RuleMemoStart = -1;
   private int month$RuleMemoEnd;
   private Node month$RuleMemoFirstNode;
   private int day$RuleMemoStart = -1;
   private int day$RuleMemoEnd;
   private Node day$RuleMemoFirstNode;
   private int timestampLiteral$RuleMemoStart = -1;
   private int timestampLiteral$RuleMemoEnd;
   private Node timestampLiteral$RuleMemoFirstNode;
   private int stringLiteral$RuleMemoStart = -1;
   private int stringLiteral$RuleMemoEnd;
   private Node stringLiteral$RuleMemoFirstNode;
   private int orderByArgument$RuleMemoStart = -1;
   private int orderByArgument$RuleMemoEnd;
   private Node orderByArgument$RuleMemoFirstNode;
   private int orderByArguments$RuleMemoStart = -1;
   private int orderByArguments$RuleMemoEnd;
   private Node orderByArguments$RuleMemoFirstNode;
   private int orderByClause$RuleMemoStart = -1;
   private int orderByClause$RuleMemoEnd;
   private Node orderByClause$RuleMemoFirstNode;
   private int subqueryFactoringSource$RuleMemoStart = -1;
   private int subqueryFactoringSource$RuleMemoEnd;
   private Node subqueryFactoringSource$RuleMemoFirstNode;
   private int onlyDmlTableExpresionClause$RuleMemoStart = -1;
   private int onlyDmlTableExpresionClause$RuleMemoEnd;
   private Node onlyDmlTableExpresionClause$RuleMemoFirstNode;
   private int updateStatement$RuleMemoStart = -1;
   private int updateStatement$RuleMemoEnd;
   private Node updateStatement$RuleMemoFirstNode;
   private int partitionName$RuleMemoStart = -1;
   private int partitionName$RuleMemoEnd;
   private Node partitionName$RuleMemoFirstNode;
   private int partitionKey$RuleMemoStart = -1;
   private int partitionKey$RuleMemoEnd;
   private Node partitionKey$RuleMemoFirstNode;
   private int tablePartitionName$RuleMemoStart = -1;
   private int tablePartitionName$RuleMemoEnd;
   private Node tablePartitionName$RuleMemoFirstNode;
   private int tableSubPartitionName$RuleMemoStart = -1;
   private int tableSubPartitionName$RuleMemoEnd;
   private Node tableSubPartitionName$RuleMemoFirstNode;
   private int subqueryDmlExpression$RuleMemoStart = -1;
   private int subqueryDmlExpression$RuleMemoEnd;
   private Node subqueryDmlExpression$RuleMemoFirstNode;
   private int dmlTableExpressionClause$RuleMemoStart = -1;
   private int dmlTableExpressionClause$RuleMemoEnd;
   private Node dmlTableExpressionClause$RuleMemoFirstNode;
   private int updateSetClause$RuleMemoStart = -1;
   private int updateSetClause$RuleMemoEnd;
   private Node updateSetClause$RuleMemoFirstNode;
   private int alias$RuleMemoStart = -1;
   private int alias$RuleMemoEnd;
   private Node alias$RuleMemoFirstNode;
   private int objectSetValue$RuleMemoStart = -1;
   private int objectSetValue$RuleMemoEnd;
   private Node objectSetValue$RuleMemoFirstNode;
   private int columnsGroupSetValue$RuleMemoStart = -1;
   private int columnsGroupSetValue$RuleMemoEnd;
   private Node columnsGroupSetValue$RuleMemoFirstNode;
   private int singleColumnSetValue$RuleMemoStart = -1;
   private int singleColumnSetValue$RuleMemoEnd;
   private Node singleColumnSetValue$RuleMemoFirstNode;
   private int columnSetValue$RuleMemoStart = -1;
   private int columnSetValue$RuleMemoEnd;
   private Node columnSetValue$RuleMemoFirstNode;
   private int columnSetValueList$RuleMemoStart = -1;
   private int columnSetValueList$RuleMemoEnd;
   private Node columnSetValueList$RuleMemoFirstNode;
   private int returningClause$RuleMemoStart = -1;
   private int returningClause$RuleMemoEnd;
   private Node returningClause$RuleMemoFirstNode;
   private int bindVariable$RuleMemoStart = -1;
   private int bindVariable$RuleMemoEnd;
   private Node bindVariable$RuleMemoFirstNode;
   private int returnIntoVariable$RuleMemoStart = -1;
   private int returnIntoVariable$RuleMemoEnd;
   private Node returnIntoVariable$RuleMemoFirstNode;
   private int insertStatement$RuleMemoStart = -1;
   private int insertStatement$RuleMemoEnd;
   private Node insertStatement$RuleMemoFirstNode;
   private int values$RuleMemoStart = -1;
   private int values$RuleMemoEnd;
   private Node values$RuleMemoFirstNode;
   private int singleTableInsert$RuleMemoStart = -1;
   private int singleTableInsert$RuleMemoEnd;
   private Node singleTableInsert$RuleMemoFirstNode;
   private int multiIntoClause$RuleMemoStart = -1;
   private int multiIntoClause$RuleMemoEnd;
   private Node multiIntoClause$RuleMemoFirstNode;
   private int multiTableInsert$RuleMemoStart = -1;
   private int multiTableInsert$RuleMemoEnd;
   private Node multiTableInsert$RuleMemoFirstNode;
   private int insertIntoValuesClauseList$RuleMemoStart = -1;
   private int insertIntoValuesClauseList$RuleMemoEnd;
   private Node insertIntoValuesClauseList$RuleMemoFirstNode;
   private int conditionalInsertClause$RuleMemoStart = -1;
   private int conditionalInsertClause$RuleMemoEnd;
   private Node conditionalInsertClause$RuleMemoFirstNode;
   private int insertIntoClause$RuleMemoStart = -1;
   private int insertIntoClause$RuleMemoEnd;
   private Node insertIntoClause$RuleMemoFirstNode;
   private int valueClauseData$RuleMemoStart = -1;
   private int valueClauseData$RuleMemoEnd;
   private Node valueClauseData$RuleMemoFirstNode;
   private int valuesClauseList$RuleMemoStart = -1;
   private int valuesClauseList$RuleMemoEnd;
   private Node valuesClauseList$RuleMemoFirstNode;
   private int valuesClause$RuleMemoStart = -1;
   private int valuesClause$RuleMemoEnd;
   private Node valuesClause$RuleMemoFirstNode;
   private int errorLogingClause$RuleMemoStart = -1;
   private int errorLogingClause$RuleMemoEnd;
   private Node errorLogingClause$RuleMemoFirstNode;
   private int deleteStatement$RuleMemoStart = -1;
   private int deleteStatement$RuleMemoEnd;
   private Node deleteStatement$RuleMemoFirstNode;
   private int unsignedNumber$RuleMemoStart = -1;
   private int unsignedNumber$RuleMemoEnd;
   private Node unsignedNumber$RuleMemoFirstNode;
   private int sign$RuleMemoStart = -1;
   private int sign$RuleMemoEnd;
   private Node sign$RuleMemoFirstNode;
   private int numberLiteral$RuleMemoStart = -1;
   private int numberLiteral$RuleMemoEnd;
   private Node numberLiteral$RuleMemoFirstNode;
   private int integerLiteral$RuleMemoStart = -1;
   private int integerLiteral$RuleMemoEnd;
   private Node integerLiteral$RuleMemoFirstNode;
   private int integerPattern$RuleMemoStart = -1;
   private int integerPattern$RuleMemoEnd;
   private Node integerPattern$RuleMemoFirstNode;
   private int size$RuleMemoStart = -1;
   private int size$RuleMemoEnd;
   private Node size$RuleMemoFirstNode;
   private int charSetDefinition$RuleMemoStart = -1;
   private int charSetDefinition$RuleMemoEnd;
   private Node charSetDefinition$RuleMemoFirstNode;
   private int charSize$RuleMemoStart = -1;
   private int charSize$RuleMemoEnd;
   private Node charSize$RuleMemoFirstNode;
   private int varChar2DataType$RuleMemoStart = -1;
   private int varChar2DataType$RuleMemoEnd;
   private Node varChar2DataType$RuleMemoFirstNode;
   private int varCharDataType$RuleMemoStart = -1;
   private int varCharDataType$RuleMemoEnd;
   private Node varCharDataType$RuleMemoFirstNode;
   private int charDataType$RuleMemoStart = -1;
   private int charDataType$RuleMemoEnd;
   private Node charDataType$RuleMemoFirstNode;
   private int numberDataType$RuleMemoStart = -1;
   private int numberDataType$RuleMemoEnd;
   private Node numberDataType$RuleMemoFirstNode;
   private int floatDataType$RuleMemoStart = -1;
   private int floatDataType$RuleMemoEnd;
   private Node floatDataType$RuleMemoFirstNode;
   private int timestampDataType$RuleMemoStart = -1;
   private int timestampDataType$RuleMemoEnd;
   private Node timestampDataType$RuleMemoFirstNode;
   private int intervalDayToSecondLiteral$RuleMemoStart = -1;
   private int intervalDayToSecondLiteral$RuleMemoEnd;
   private Node intervalDayToSecondLiteral$RuleMemoFirstNode;
   private int intervalDayToSecondDataType$RuleMemoStart = -1;
   private int intervalDayToSecondDataType$RuleMemoEnd;
   private Node intervalDayToSecondDataType$RuleMemoFirstNode;
   private int intervalYearToMonthLeadingTrailing$RuleMemoStart = -1;
   private int intervalYearToMonthLeadingTrailing$RuleMemoEnd;
   private Node intervalYearToMonthLeadingTrailing$RuleMemoFirstNode;
   private int intervalYearToMonthLiteral$RuleMemoStart = -1;
   private int intervalYearToMonthLiteral$RuleMemoEnd;
   private Node intervalYearToMonthLiteral$RuleMemoFirstNode;
   private int intervalYearToMonthDataType$RuleMemoStart = -1;
   private int intervalYearToMonthDataType$RuleMemoEnd;
   private Node intervalYearToMonthDataType$RuleMemoFirstNode;
   private int timeDataType$RuleMemoStart = -1;
   private int timeDataType$RuleMemoEnd;
   private Node timeDataType$RuleMemoFirstNode;
   private int refXmlDataType$RuleMemoStart = -1;
   private int refXmlDataType$RuleMemoEnd;
   private Node refXmlDataType$RuleMemoFirstNode;
   private int nCharDataType$RuleMemoStart = -1;
   private int nCharDataType$RuleMemoEnd;
   private Node nCharDataType$RuleMemoFirstNode;
   private int nVarChar2DataType$RuleMemoStart = -1;
   private int nVarChar2DataType$RuleMemoEnd;
   private Node nVarChar2DataType$RuleMemoFirstNode;
   private int longRawDataType$RuleMemoStart = -1;
   private int longRawDataType$RuleMemoEnd;
   private Node longRawDataType$RuleMemoFirstNode;
   private int rawDataType$RuleMemoStart = -1;
   private int rawDataType$RuleMemoEnd;
   private Node rawDataType$RuleMemoFirstNode;
   private int cLobDataType$RuleMemoStart = -1;
   private int cLobDataType$RuleMemoEnd;
   private Node cLobDataType$RuleMemoFirstNode;
   private int uRowIdDataType$RuleMemoStart = -1;
   private int uRowIdDataType$RuleMemoEnd;
   private Node uRowIdDataType$RuleMemoFirstNode;
   private int sqlDataType$RuleMemoStart = -1;
   private int sqlDataType$RuleMemoEnd;
   private Node sqlDataType$RuleMemoFirstNode;
   private int sqlParameters$RuleMemoStart = -1;
   private int sqlParameters$RuleMemoEnd;
   private Node sqlParameters$RuleMemoFirstNode;
   private int sqlParametersList$RuleMemoStart = -1;
   private int sqlParametersList$RuleMemoEnd;
   private Node sqlParametersList$RuleMemoFirstNode;
   private int sqlQualifiedIdentifierRemote$RuleMemoStart = -1;
   private int sqlQualifiedIdentifierRemote$RuleMemoEnd;
   private Node sqlQualifiedIdentifierRemote$RuleMemoFirstNode;
   private int sqlSimpleIdentifierRemote$RuleMemoStart = -1;
   private int sqlSimpleIdentifierRemote$RuleMemoEnd;
   private Node sqlSimpleIdentifierRemote$RuleMemoFirstNode;
   private int sqlAttributes$RuleMemoStart = -1;
   private int sqlAttributes$RuleMemoEnd;
   private Node sqlAttributes$RuleMemoFirstNode;
   private int sqlQualifiedIdentifier$RuleMemoStart = -1;
   private int sqlQualifiedIdentifier$RuleMemoEnd;
   private Node sqlQualifiedIdentifier$RuleMemoFirstNode;
   private int sqlSimpleIdentifier$RuleMemoStart = -1;
   private int sqlSimpleIdentifier$RuleMemoEnd;
   private Node sqlSimpleIdentifier$RuleMemoFirstNode;
   private int sqlObjectIdentifier$RuleMemoStart = -1;
   private int sqlObjectIdentifier$RuleMemoEnd;
   private Node sqlObjectIdentifier$RuleMemoFirstNode;
   private int sqlIdentifier$RuleMemoStart = -1;
   private int sqlIdentifier$RuleMemoEnd;
   private Node sqlIdentifier$RuleMemoFirstNode;
   private int sqlAnyIdentifier$RuleMemoStart = -1;
   private int sqlAnyIdentifier$RuleMemoEnd;
   private Node sqlAnyIdentifier$RuleMemoFirstNode;
   private int testNoAlpha$RuleMemoStart = -1;
   private int testNoAlpha$RuleMemoEnd;
   private Node testNoAlpha$RuleMemoFirstNode;
   private int optionalSpacing$RuleMemoStart = -1;
   private int optionalSpacing$RuleMemoEnd;
   private Node optionalSpacing$RuleMemoFirstNode;
   private int sqlObjectIdentifierList$RuleMemoStart = -1;
   private int sqlObjectIdentifierList$RuleMemoEnd;
   private Node sqlObjectIdentifierList$RuleMemoFirstNode;
   private int sqlIdentifierList$RuleMemoStart = -1;
   private int sqlIdentifierList$RuleMemoEnd;
   private Node sqlIdentifierList$RuleMemoFirstNode;
   private int space$RuleMemoStart = -1;
   private int space$RuleMemoEnd;
   private Node space$RuleMemoFirstNode;
   private int spaces$RuleMemoStart = -1;
   private int spaces$RuleMemoEnd;
   private Node spaces$RuleMemoFirstNode;
   private int blockComment$RuleMemoStart = -1;
   private int blockComment$RuleMemoEnd;
   private Node blockComment$RuleMemoFirstNode;
   private int newLine$RuleMemoStart = -1;
   private int newLine$RuleMemoEnd;
   private Node newLine$RuleMemoFirstNode;
   private int lineComment$RuleMemoStart = -1;
   private int lineComment$RuleMemoEnd;
   private Node lineComment$RuleMemoFirstNode;

   private int[] newArrayInt(final int size) {
      final int[] array = new int[size];
      Arrays.fill(array, -1);
      return array;
   }

   protected boolean charMatcher(char c) {
      if (buffer.matchChar(index, c)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean ignoreCaseCharMatcher(char c) {
      if (buffer.matchIgnoreCaseChar(index, c)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean stringMatcher(String str, int strLen) {
      if (buffer.matchString(index, str, strLen)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + strLen, false, false));
            currentNode = currentNode.getSibling();
         }
         index += strLen;
         return true;
      }
      return false;
   }

   protected boolean partialStringMatcher(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + i, false, false));
         currentNode = currentNode.getSibling();
      }
      index += i;
      return true;
   }

   protected boolean ignoreCaseStringMatcher(String str, int strLen) {
      if (buffer.matchIgnoreCaseString(index, str, strLen)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + strLen, false, false));
            currentNode = currentNode.getSibling();
         }
         index += strLen;
         return true;
      }
      return false;
   }

   protected boolean partialIgnoreCaseStringMatcher(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchIgnoreCaseChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + i, false, false));
         currentNode = currentNode.getSibling();
      }
      index += i;
      return true;
   }

   protected boolean charRangeMatcher(char charIni, char charEnd) {
      if (buffer.matchCharRange(index, charIni, charEnd)) {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean anyCharMatcher() {
      if (buffer.getChar(index) != '\0') {
         if (! currentRuleIsAtomic) {
            currentNode.setSibling(new NodeImpl(Rule.TERMINAL, index, index + 1, false, false));
            currentNode = currentNode.getSibling();
         }
         ++index;
         return true;
      }
      return false;
   }

   protected boolean eoi() {
      if (buffer.getChar(index) == '\0') {
         return true;
      }
      return false;
   }

   protected boolean charTest(char c) {
      return buffer.getChar(index) == c;
   }

   protected boolean ignoreCaseCharTest(char c) {
      return buffer.matchIgnoreCaseChar(index, c);
   }

   protected boolean stringTest(String str, int strLen) {
      return buffer.matchString(index, str, strLen);
   }

   protected boolean partialStringTest(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      return true;
   }

   protected boolean ignoreCaseStringTest(String str, int strLen) {
      return buffer.matchIgnoreCaseString(index, str, strLen);
   }

   protected boolean partialIgnoreCaseStringTest(String str, int strLen, int minLen) {
      int i;
      for (i = 0; i < strLen; i++) {
         if (! buffer.matchIgnoreCaseChar(index + i, str.charAt(i))) {
            if (i < minLen) {
               return false;
            } else {
               break;
            }
         }
      }
      return true;
   }

   protected boolean charRangeTest(char charIni, char charEnd) {
      return buffer.matchCharRange(index, charIni, charEnd);
   }

   protected boolean anyCharTest() {
      return buffer.getChar(index) != '\0';
   }

   protected boolean eoiTest() {
      return buffer.getChar(index) == '\0';
   }
   @Override
   public Map<Rule, RuleProfile> getProfilesMap() {
      return Collections.emptyMap();
   }

   @Override
   public void setProfilesMap(Map<Rule, RuleProfile> profilesMap) {
   }

   @Override
   public Collection<ParserError> getMismatches() {
      return Collections.emptyList();
   }

   @Override
   public void setTraceParser(TraceParser tracePath) {
   }

   @Override
   public void setTrace(boolean trace) {
   }

   private Node lastChild(Node node) {
      Node child = node.getFirstChild();
      if (child != null) {
         while (child.getSibling() != null) {
            child = child.getSibling();
         }
      }
      return child;
   }

   private Node removeNode(Node parent, Node left, Node node) {
      if (node.getFirstChild() != null) {
         if (node.getSibling() != null) {
            lastChild(node).setSibling(node.getSibling());
         }
         if (left == null) {
            parent.setFirstChild(node.getFirstChild());
         } else {
            left.setSibling(node.getFirstChild());
         }
         return node.getFirstChild();
      } else if (left == null) {
         parent.setFirstChild(node.getSibling());
      } else {
         left.setSibling(node.getSibling());
      }
      return node.getSibling();
   }

   private void removeSkipedNodes(Node node) {
      if (node != null) {
         Node leftNode = null;
         Node child = node.getFirstChild();
         while (child != null) {
            if (child.isSkiped()) {
               child = removeNode(node, leftNode, child);
            } else {
               removeSkipedNodes(child);
               leftNode = child;
               child = child.getSibling();
            }
         }
      }
   }

   @Override
   public Node parse(InputBuffer inputBuffer) {
      buffer = inputBuffer;
      if (sqlSentence$Rule()) {
         removeSkipedNodes(currentNode);
         return currentNode;
      } else {
         return null;
      }
   }


   //SqlSentence : (OptionalSpacing DmlSentence OptionalSpacing <EOI>)
   protected boolean sqlSentence$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (OptionalSpacing DmlSentence OptionalSpacing <EOI>)
      // OptionalSpacing
      match = optionalSpacing$Rule();
      if (match) {
         // DmlSentence
         match = dmlSentence$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // <EOI>
               match = eoi();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SENTENCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DmlSentence : (SelectStatement | UpdateStatement | InsertStatement | DeleteStatement | CommitStatement | MergeStatement | LockTableStatement | RollbacklStatement | SavepointStatement | SetTransactionStatement)
   protected boolean dmlSentence$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SelectStatement | UpdateStatement | InsertStatement | DeleteStatement | CommitStatement | MergeStatement | LockTableStatement | RollbacklStatement | SavepointStatement | SetTransactionStatement)
      switch(buffer.getChar(index)) {
         case 'l':
         case 'L': {
            // LockTableStatement
            match = lockTableStatement$Rule();
            break;
         }
         case 'm':
         case 'M': {
            // MergeStatement
            match = mergeStatement$Rule();
            break;
         }
         case 'r':
         case 'R': {
            // RollbacklStatement
            match = rollbacklStatement$Rule();
            break;
         }
         case 's':
         case 'S': {
            // SelectStatement
            match = selectStatement$Rule();
            if (! match) {
               // SavepointStatement
               match = savepointStatement$Rule();
               if (! match) {
                  // SetTransactionStatement
                  match = setTransactionStatement$Rule();
               }
            }
            break;
         }
         case 'c':
         case 'C': {
            // CommitStatement
            match = commitStatement$Rule();
            break;
         }
         case 'd':
         case 'D': {
            // DeleteStatement
            match = deleteStatement$Rule();
            break;
         }
         case 'u':
         case 'U': {
            // UpdateStatement
            match = updateStatement$Rule();
            break;
         }
         case 'w':
         case 'W':
         case '(': {
            // SelectStatement
            match = selectStatement$Rule();
            break;
         }
         case 'i':
         case 'I': {
            // InsertStatement
            match = insertStatement$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DML_SENTENCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WaitMode : (("wait" | "nowait") TestNoAlpha OptionalSpacing)
   protected boolean waitMode$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (waitMode$RuleMemoStart == index) {
         if (waitMode$RuleMemoStart <= waitMode$RuleMemoEnd) {
            index = waitMode$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.WAIT_MODE, waitMode$RuleMemoStart, waitMode$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (waitMode$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(waitMode$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("wait" | "nowait") TestNoAlpha OptionalSpacing)
      // ("wait" | "nowait")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'n':
         case 'N': {
            ++index;
            // "owait"
            if (match = ignoreCaseStringTest("owait", 5)) {
               index += 5;
            }
            break;
         }
         case 'w':
         case 'W': {
            ++index;
            // "ait"
            if (match = ignoreCaseStringTest("ait", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         waitMode$RuleMemoStart = startIndex;
         waitMode$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            waitMode$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.WAIT_MODE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            waitMode$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         waitMode$RuleMemoStart = startIndex;
         waitMode$RuleMemoEnd = -1;
         waitMode$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CommitComment : ("comment" TestNoAlpha OptionalSpacing StringLiteral)
   protected boolean commitComment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("comment" TestNoAlpha OptionalSpacing StringLiteral)
      // "comment"
      match = ignoreCaseStringMatcher("comment", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // StringLiteral
               match = stringLiteral$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COMMIT_COMMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WriteMode : ("write" TestNoAlpha OptionalSpacing WaitMode? ((("immediate" | "batch") TestNoAlpha OptionalSpacing) "Moment" TestNoAlpha OptionalSpacing)?)
   protected boolean writeMode$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("write" TestNoAlpha OptionalSpacing WaitMode? ((("immediate" | "batch") TestNoAlpha OptionalSpacing) "Moment" TestNoAlpha OptionalSpacing)?)
      // "write"
      match = ignoreCaseStringMatcher("write", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // WaitMode?
               // WaitMode
               waitMode$Rule();
               match = true;
               // ((("immediate" | "batch") TestNoAlpha OptionalSpacing) "Moment" TestNoAlpha OptionalSpacing)?
               // ((("immediate" | "batch") TestNoAlpha OptionalSpacing) "Moment" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // (("immediate" | "batch") TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // ("immediate" | "batch")
               int startIndex_3 = index;
               switch(buffer.getChar(index)) {
                  case 'i':
                  case 'I': {
                     ++index;
                     // "mmediate"
                     if (match = ignoreCaseStringTest("mmediate", 8)) {
                        index += 8;
                     }
                     break;
                  }
                  case 'b':
                  case 'B': {
                     ++index;
                     // "atch"
                     if (match = ignoreCaseStringTest("atch", 4)) {
                        index += 4;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               if (match) {
                  // "Moment"
                  match = ignoreCaseStringMatcher("Moment", 6);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.WRITE_MODE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForceCommit : ("force" TestNoAlpha OptionalSpacing ((StringLiteral (',' OptionalSpacing IntegerLiteral)?) | ("corrupt_xid" TestNoAlpha OptionalSpacing StringLiteral) | ("corrupt_xid_all" TestNoAlpha OptionalSpacing)))
   protected boolean forceCommit$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forceCommit$RuleMemoStart == index) {
         if (forceCommit$RuleMemoStart <= forceCommit$RuleMemoEnd) {
            index = forceCommit$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FORCE_COMMIT, forceCommit$RuleMemoStart, forceCommit$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (forceCommit$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(forceCommit$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("force" TestNoAlpha OptionalSpacing ((StringLiteral (',' OptionalSpacing IntegerLiteral)?) | ("corrupt_xid" TestNoAlpha OptionalSpacing StringLiteral) | ("corrupt_xid_all" TestNoAlpha OptionalSpacing)))
      // "force"
      match = ignoreCaseStringMatcher("force", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ((StringLiteral (',' OptionalSpacing IntegerLiteral)?) | ("corrupt_xid" TestNoAlpha OptionalSpacing StringLiteral) | ("corrupt_xid_all" TestNoAlpha OptionalSpacing))
               // (StringLiteral (',' OptionalSpacing IntegerLiteral)?)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // StringLiteral
               match = stringLiteral$Rule();
               if (match) {
                  // (',' OptionalSpacing IntegerLiteral)?
                  // (',' OptionalSpacing IntegerLiteral)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // IntegerLiteral
                        match = integerLiteral$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
                  match = true;
               }
               if (! match) {
                  // ("corrupt_xid" TestNoAlpha OptionalSpacing StringLiteral)
                  Node lastNode_3 = currentNode;
                  int lastIndex_3 = index;
                  // "corrupt_xid"
                  match = ignoreCaseStringMatcher("corrupt_xid", 11);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // StringLiteral
                           match = stringLiteral$Rule();
                           if (! match) {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                              currentNode = lastNode_3;
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("corrupt_xid_all" TestNoAlpha OptionalSpacing)
                     Node lastNode_4 = currentNode;
                     int lastIndex_4 = index;
                     // "corrupt_xid_all"
                     match = ignoreCaseStringMatcher("corrupt_xid_all", 15);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                              currentNode = lastNode_4;
                           }
                        } else {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         forceCommit$RuleMemoStart = startIndex;
         forceCommit$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forceCommit$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FORCE_COMMIT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forceCommit$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         forceCommit$RuleMemoStart = startIndex;
         forceCommit$RuleMemoEnd = -1;
         forceCommit$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NormalCommit : (CommitComment? WriteMode?)
   protected boolean normalCommit$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (normalCommit$RuleMemoStart == index) {
         if (normalCommit$RuleMemoStart <= normalCommit$RuleMemoEnd) {
            index = normalCommit$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NORMAL_COMMIT, normalCommit$RuleMemoStart, normalCommit$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (normalCommit$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(normalCommit$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (CommitComment? WriteMode?)
      // CommitComment?
      // CommitComment
      commitComment$Rule();
      // WriteMode?
      // WriteMode
      writeMode$Rule();
      normalCommit$RuleMemoStart = startIndex;
      normalCommit$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         normalCommit$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(OraclePlSqlRuleType.NORMAL_COMMIT, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         normalCommit$RuleMemoFirstNode = currentNode;
      }
      return true;
   }

   //CommitOptions : (NormalCommit | ForceCommit)
   protected boolean commitOptions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NormalCommit | ForceCommit)
      switch(buffer.getChar(index)) {
         case 'c':
         case 'C':
         case 'w':
         case 'W': {
            // NormalCommit
            match = normalCommit$Rule();
            break;
         }
         case 'f':
         case 'F': {
            // ForceCommit
            match = forceCommit$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COMMIT_OPTIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CommitStatement : ("commit" TestNoAlpha OptionalSpacing ("work" TestNoAlpha OptionalSpacing)? CommitOptions?)
   protected boolean commitStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (commitStatement$RuleMemoStart == index) {
         if (commitStatement$RuleMemoStart <= commitStatement$RuleMemoEnd) {
            index = commitStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COMMIT_STATEMENT, commitStatement$RuleMemoStart, commitStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (commitStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(commitStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("commit" TestNoAlpha OptionalSpacing ("work" TestNoAlpha OptionalSpacing)? CommitOptions?)
      // "commit"
      match = ignoreCaseStringMatcher("commit", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("work" TestNoAlpha OptionalSpacing)?
               // ("work" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "work"
               match = ignoreCaseStringMatcher("work", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // CommitOptions?
               // CommitOptions
               commitOptions$Rule();
               match = true;
            }
         }
      }
      if (match) {
         commitStatement$RuleMemoStart = startIndex;
         commitStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            commitStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COMMIT_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            commitStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         commitStatement$RuleMemoStart = startIndex;
         commitStatement$RuleMemoEnd = -1;
         commitStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LockTableStatement : ("lock" TestNoAlpha OptionalSpacing "table" TestNoAlpha OptionalSpacing (TablePartitionName | TableSubPartitionName | TableName) "in" TestNoAlpha OptionalSpacing LockMode "mode" TestNoAlpha OptionalSpacing WaitMode?)
   protected boolean lockTableStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (lockTableStatement$RuleMemoStart == index) {
         if (lockTableStatement$RuleMemoStart <= lockTableStatement$RuleMemoEnd) {
            index = lockTableStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LOCK_TABLE_STATEMENT, lockTableStatement$RuleMemoStart, lockTableStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (lockTableStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(lockTableStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("lock" TestNoAlpha OptionalSpacing "table" TestNoAlpha OptionalSpacing (TablePartitionName | TableSubPartitionName | TableName) "in" TestNoAlpha OptionalSpacing LockMode "mode" TestNoAlpha OptionalSpacing WaitMode?)
      // "lock"
      match = ignoreCaseStringMatcher("lock", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "table"
               match = ignoreCaseStringMatcher("table", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (TablePartitionName | TableSubPartitionName | TableName)
                        switch(buffer.getChar(index)) {
                           case '\"':
                           case '#':
                           case '$':
                           case '0':
                           case '1':
                           case '2':
                           case '3':
                           case '4':
                           case '5':
                           case '6':
                           case '7':
                           case '8':
                           case '9':
                           case 'A':
                           case 'B':
                           case 'C':
                           case 'D':
                           case 'E':
                           case 'F':
                           case 'G':
                           case 'H':
                           case 'I':
                           case 'J':
                           case 'K':
                           case 'L':
                           case 'M':
                           case 'N':
                           case 'O':
                           case 'P':
                           case 'Q':
                           case 'R':
                           case 'S':
                           case 'T':
                           case 'U':
                           case 'V':
                           case 'W':
                           case 'X':
                           case 'Y':
                           case 'Z':
                           case '_':
                           case 'a':
                           case 'b':
                           case 'c':
                           case 'd':
                           case 'e':
                           case 'f':
                           case 'g':
                           case 'h':
                           case 'i':
                           case 'j':
                           case 'k':
                           case 'l':
                           case 'm':
                           case 'n':
                           case 'o':
                           case 'p':
                           case 'q':
                           case 'r':
                           case 's':
                           case 't':
                           case 'u':
                           case 'v':
                           case 'w':
                           case 'x':
                           case 'y':
                           case 'z': {
                              // TablePartitionName
                              match = tablePartitionName$Rule();
                              if (! match) {
                                 // TableSubPartitionName
                                 match = tableSubPartitionName$Rule();
                                 if (! match) {
                                    // TableName
                                    match = tableName$Rule();
                                 }
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        if (match) {
                           // "in"
                           match = ignoreCaseStringMatcher("in", 2);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // LockMode
                                    match = lockMode$Rule();
                                    if (match) {
                                       // "mode"
                                       match = ignoreCaseStringMatcher("mode", 4);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // WaitMode?
                                                // WaitMode
                                                waitMode$Rule();
                                                match = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         lockTableStatement$RuleMemoStart = startIndex;
         lockTableStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lockTableStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LOCK_TABLE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            lockTableStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         lockTableStatement$RuleMemoStart = startIndex;
         lockTableStatement$RuleMemoEnd = -1;
         lockTableStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LockMode : (("row" TestNoAlpha OptionalSpacing "share" TestNoAlpha OptionalSpacing) | ("row" TestNoAlpha OptionalSpacing "exclusive" TestNoAlpha OptionalSpacing) | ("share" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing "exclusive" TestNoAlpha OptionalSpacing) | ("share" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing) | ("share" TestNoAlpha OptionalSpacing) | ("exclusive" TestNoAlpha OptionalSpacing))
   protected boolean lockMode$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("row" TestNoAlpha OptionalSpacing "share" TestNoAlpha OptionalSpacing) | ("row" TestNoAlpha OptionalSpacing "exclusive" TestNoAlpha OptionalSpacing) | ("share" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing "exclusive" TestNoAlpha OptionalSpacing) | ("share" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing) | ("share" TestNoAlpha OptionalSpacing) | ("exclusive" TestNoAlpha OptionalSpacing))
      // ("row" TestNoAlpha OptionalSpacing "share" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "row"
      match = ignoreCaseStringMatcher("row", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "share"
               match = ignoreCaseStringMatcher("share", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("row" TestNoAlpha OptionalSpacing "exclusive" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "row"
         match = ignoreCaseStringMatcher("row", 3);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // "exclusive"
                  match = ignoreCaseStringMatcher("exclusive", 9);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("share" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing "exclusive" TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "share"
            match = ignoreCaseStringMatcher("share", 5);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // "row"
                     match = ignoreCaseStringMatcher("row", 3);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "exclusive"
                              match = ignoreCaseStringMatcher("exclusive", 9);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                       currentNode = lastNode_3;
                                    }
                                 } else {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ("share" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "share"
               match = ignoreCaseStringMatcher("share", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "update"
                        match = ignoreCaseStringMatcher("update", 6);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        } else {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
               if (! match) {
                  // ("share" TestNoAlpha OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // "share"
                  match = ignoreCaseStringMatcher("share", 5);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                           currentNode = lastNode_5;
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("exclusive" TestNoAlpha OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // "exclusive"
                     match = ignoreCaseStringMatcher("exclusive", 9);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                              currentNode = lastNode_6;
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LOCK_MODE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ToSavePoint : ("to" TestNoAlpha OptionalSpacing ("savepoint" TestNoAlpha OptionalSpacing)? SqlAnyIdentifier)
   protected boolean toSavePoint$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (toSavePoint$RuleMemoStart == index) {
         if (toSavePoint$RuleMemoStart <= toSavePoint$RuleMemoEnd) {
            index = toSavePoint$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TO_SAVE_POINT, toSavePoint$RuleMemoStart, toSavePoint$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (toSavePoint$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(toSavePoint$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("to" TestNoAlpha OptionalSpacing ("savepoint" TestNoAlpha OptionalSpacing)? SqlAnyIdentifier)
      // "to"
      match = ignoreCaseStringMatcher("to", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("savepoint" TestNoAlpha OptionalSpacing)?
               // ("savepoint" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "savepoint"
               match = ignoreCaseStringMatcher("savepoint", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // SqlAnyIdentifier
               match = sqlAnyIdentifier$Rule();
            }
         }
      }
      if (match) {
         toSavePoint$RuleMemoStart = startIndex;
         toSavePoint$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            toSavePoint$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TO_SAVE_POINT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            toSavePoint$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         toSavePoint$RuleMemoStart = startIndex;
         toSavePoint$RuleMemoEnd = -1;
         toSavePoint$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForceRollback : ("force" TestNoAlpha OptionalSpacing StringLiteral)
   protected boolean forceRollback$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forceRollback$RuleMemoStart == index) {
         if (forceRollback$RuleMemoStart <= forceRollback$RuleMemoEnd) {
            index = forceRollback$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FORCE_ROLLBACK, forceRollback$RuleMemoStart, forceRollback$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (forceRollback$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(forceRollback$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("force" TestNoAlpha OptionalSpacing StringLiteral)
      // "force"
      match = ignoreCaseStringMatcher("force", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // StringLiteral
               match = stringLiteral$Rule();
            }
         }
      }
      if (match) {
         forceRollback$RuleMemoStart = startIndex;
         forceRollback$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forceRollback$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FORCE_ROLLBACK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forceRollback$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         forceRollback$RuleMemoStart = startIndex;
         forceRollback$RuleMemoEnd = -1;
         forceRollback$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RollbackOptions : (ToSavePoint | ForceRollback)
   protected boolean rollbackOptions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ToSavePoint | ForceRollback)
      switch(buffer.getChar(index)) {
         case 't':
         case 'T': {
            // ToSavePoint
            match = toSavePoint$Rule();
            break;
         }
         case 'f':
         case 'F': {
            // ForceRollback
            match = forceRollback$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROLLBACK_OPTIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RollbacklStatement : ("rollback" TestNoAlpha OptionalSpacing ("work" TestNoAlpha OptionalSpacing)? RollbackOptions?)
   protected boolean rollbacklStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rollbacklStatement$RuleMemoStart == index) {
         if (rollbacklStatement$RuleMemoStart <= rollbacklStatement$RuleMemoEnd) {
            index = rollbacklStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ROLLBACKL_STATEMENT, rollbacklStatement$RuleMemoStart, rollbacklStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rollbacklStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rollbacklStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("rollback" TestNoAlpha OptionalSpacing ("work" TestNoAlpha OptionalSpacing)? RollbackOptions?)
      // "rollback"
      match = ignoreCaseStringMatcher("rollback", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("work" TestNoAlpha OptionalSpacing)?
               // ("work" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "work"
               match = ignoreCaseStringMatcher("work", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // RollbackOptions?
               // RollbackOptions
               rollbackOptions$Rule();
               match = true;
            }
         }
      }
      if (match) {
         rollbacklStatement$RuleMemoStart = startIndex;
         rollbacklStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rollbacklStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROLLBACKL_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rollbacklStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rollbacklStatement$RuleMemoStart = startIndex;
         rollbacklStatement$RuleMemoEnd = -1;
         rollbacklStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TransactionName : ("name" TestNoAlpha OptionalSpacing StringLiteral)
   protected boolean transactionName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (transactionName$RuleMemoStart == index) {
         if (transactionName$RuleMemoStart <= transactionName$RuleMemoEnd) {
            index = transactionName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TRANSACTION_NAME, transactionName$RuleMemoStart, transactionName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (transactionName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(transactionName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("name" TestNoAlpha OptionalSpacing StringLiteral)
      // "name"
      match = ignoreCaseStringMatcher("name", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // StringLiteral
               match = stringLiteral$Rule();
            }
         }
      }
      if (match) {
         transactionName$RuleMemoStart = startIndex;
         transactionName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            transactionName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TRANSACTION_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            transactionName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         transactionName$RuleMemoStart = startIndex;
         transactionName$RuleMemoEnd = -1;
         transactionName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UseRollbackSegment : ("use" TestNoAlpha OptionalSpacing "rollback" TestNoAlpha OptionalSpacing "segment" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
   protected boolean useRollbackSegment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (useRollbackSegment$RuleMemoStart == index) {
         if (useRollbackSegment$RuleMemoStart <= useRollbackSegment$RuleMemoEnd) {
            index = useRollbackSegment$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.USE_ROLLBACK_SEGMENT, useRollbackSegment$RuleMemoStart, useRollbackSegment$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (useRollbackSegment$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(useRollbackSegment$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("use" TestNoAlpha OptionalSpacing "rollback" TestNoAlpha OptionalSpacing "segment" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
      // "use"
      match = ignoreCaseStringMatcher("use", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "rollback"
               match = ignoreCaseStringMatcher("rollback", 8);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "segment"
                        match = ignoreCaseStringMatcher("segment", 7);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlAnyIdentifier
                                 match = sqlAnyIdentifier$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         useRollbackSegment$RuleMemoStart = startIndex;
         useRollbackSegment$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            useRollbackSegment$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.USE_ROLLBACK_SEGMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            useRollbackSegment$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         useRollbackSegment$RuleMemoStart = startIndex;
         useRollbackSegment$RuleMemoEnd = -1;
         useRollbackSegment$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsolationLevel : ("isolation" TestNoAlpha OptionalSpacing "level" TestNoAlpha OptionalSpacing (("serializable" TestNoAlpha OptionalSpacing) | ("read" TestNoAlpha OptionalSpacing "commited" TestNoAlpha OptionalSpacing) | ("ReadCommited" TestNoAlpha OptionalSpacing)))
   protected boolean isolationLevel$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isolationLevel$RuleMemoStart == index) {
         if (isolationLevel$RuleMemoStart <= isolationLevel$RuleMemoEnd) {
            index = isolationLevel$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ISOLATION_LEVEL, isolationLevel$RuleMemoStart, isolationLevel$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isolationLevel$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isolationLevel$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("isolation" TestNoAlpha OptionalSpacing "level" TestNoAlpha OptionalSpacing (("serializable" TestNoAlpha OptionalSpacing) | ("read" TestNoAlpha OptionalSpacing "commited" TestNoAlpha OptionalSpacing) | ("ReadCommited" TestNoAlpha OptionalSpacing)))
      // "isolation"
      match = ignoreCaseStringMatcher("isolation", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "level"
               match = ignoreCaseStringMatcher("level", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (("serializable" TestNoAlpha OptionalSpacing) | ("read" TestNoAlpha OptionalSpacing "commited" TestNoAlpha OptionalSpacing) | ("ReadCommited" TestNoAlpha OptionalSpacing))
                        // ("serializable" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // "serializable"
                        match = ignoreCaseStringMatcher("serializable", 12);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ("read" TestNoAlpha OptionalSpacing "commited" TestNoAlpha OptionalSpacing)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "read"
                           match = ignoreCaseStringMatcher("read", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // "commited"
                                    match = ignoreCaseStringMatcher("commited", 8);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_2;
                                             lastNode_2.setSibling(null);
                                             currentNode = lastNode_2;
                                          }
                                       } else {
                                          index = lastIndex_2;
                                          lastNode_2.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_2;
                                       lastNode_2.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ("ReadCommited" TestNoAlpha OptionalSpacing)
                              Node lastNode_3 = currentNode;
                              int lastIndex_3 = index;
                              // "ReadCommited"
                              match = ignoreCaseStringMatcher("ReadCommited", 12);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                       currentNode = lastNode_3;
                                    }
                                 } else {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         isolationLevel$RuleMemoStart = startIndex;
         isolationLevel$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isolationLevel$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ISOLATION_LEVEL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isolationLevel$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isolationLevel$RuleMemoStart = startIndex;
         isolationLevel$RuleMemoEnd = -1;
         isolationLevel$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReadMode : (("read" TestNoAlpha OptionalSpacing "only" TestNoAlpha OptionalSpacing) | ("ReadOnly" TestNoAlpha OptionalSpacing) | ("read" TestNoAlpha OptionalSpacing "write" TestNoAlpha OptionalSpacing) | ("ReadWrite" TestNoAlpha OptionalSpacing))
   protected boolean readMode$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (readMode$RuleMemoStart == index) {
         if (readMode$RuleMemoStart <= readMode$RuleMemoEnd) {
            index = readMode$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.READ_MODE, readMode$RuleMemoStart, readMode$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (readMode$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(readMode$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("read" TestNoAlpha OptionalSpacing "only" TestNoAlpha OptionalSpacing) | ("ReadOnly" TestNoAlpha OptionalSpacing) | ("read" TestNoAlpha OptionalSpacing "write" TestNoAlpha OptionalSpacing) | ("ReadWrite" TestNoAlpha OptionalSpacing))
      // ("read" TestNoAlpha OptionalSpacing "only" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "read"
      match = ignoreCaseStringMatcher("read", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "only"
               match = ignoreCaseStringMatcher("only", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("ReadOnly" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "ReadOnly"
         match = ignoreCaseStringMatcher("ReadOnly", 8);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("read" TestNoAlpha OptionalSpacing "write" TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "read"
            match = ignoreCaseStringMatcher("read", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // "write"
                     match = ignoreCaseStringMatcher("write", 5);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                              currentNode = lastNode_3;
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ("ReadWrite" TestNoAlpha OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "ReadWrite"
               match = ignoreCaseStringMatcher("ReadWrite", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
            }
         }
      }
      if (match) {
         readMode$RuleMemoStart = startIndex;
         readMode$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            readMode$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.READ_MODE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            readMode$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         readMode$RuleMemoStart = startIndex;
         readMode$RuleMemoEnd = -1;
         readMode$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SetTransactionOptions : (((ReadMode | IsolationLevel | UseRollbackSegment) TransactionName?) | TransactionName)
   protected boolean setTransactionOptions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (((ReadMode | IsolationLevel | UseRollbackSegment) TransactionName?) | TransactionName)
      // ((ReadMode | IsolationLevel | UseRollbackSegment) TransactionName?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // (ReadMode | IsolationLevel | UseRollbackSegment)
      switch(buffer.getChar(index)) {
         case 'r':
         case 'R': {
            // ReadMode
            match = readMode$Rule();
            break;
         }
         case 'u':
         case 'U': {
            // UseRollbackSegment
            match = useRollbackSegment$Rule();
            break;
         }
         case 'i':
         case 'I': {
            // IsolationLevel
            match = isolationLevel$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // TransactionName?
         // TransactionName
         transactionName$Rule();
         match = true;
      }
      if (! match) {
         // TransactionName
         match = transactionName$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SET_TRANSACTION_OPTIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SetTransactionStatement : ("set" TestNoAlpha OptionalSpacing "transaction" TestNoAlpha OptionalSpacing SetTransactionOptions)
   protected boolean setTransactionStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (setTransactionStatement$RuleMemoStart == index) {
         if (setTransactionStatement$RuleMemoStart <= setTransactionStatement$RuleMemoEnd) {
            index = setTransactionStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SET_TRANSACTION_STATEMENT, setTransactionStatement$RuleMemoStart, setTransactionStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (setTransactionStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(setTransactionStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("set" TestNoAlpha OptionalSpacing "transaction" TestNoAlpha OptionalSpacing SetTransactionOptions)
      // "set"
      match = ignoreCaseStringMatcher("set", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "transaction"
               match = ignoreCaseStringMatcher("transaction", 11);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SetTransactionOptions
                        match = setTransactionOptions$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         setTransactionStatement$RuleMemoStart = startIndex;
         setTransactionStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            setTransactionStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SET_TRANSACTION_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            setTransactionStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         setTransactionStatement$RuleMemoStart = startIndex;
         setTransactionStatement$RuleMemoEnd = -1;
         setTransactionStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SavepointStatement : ("savepoint" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
   protected boolean savepointStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (savepointStatement$RuleMemoStart == index) {
         if (savepointStatement$RuleMemoStart <= savepointStatement$RuleMemoEnd) {
            index = savepointStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SAVEPOINT_STATEMENT, savepointStatement$RuleMemoStart, savepointStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (savepointStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(savepointStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("savepoint" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
      // "savepoint"
      match = ignoreCaseStringMatcher("savepoint", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlAnyIdentifier
               match = sqlAnyIdentifier$Rule();
            }
         }
      }
      if (match) {
         savepointStatement$RuleMemoStart = startIndex;
         savepointStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            savepointStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SAVEPOINT_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            savepointStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         savepointStatement$RuleMemoStart = startIndex;
         savepointStatement$RuleMemoEnd = -1;
         savepointStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SelectStatement : (SubqueryFactoringClause? Subquery ForUpdateClause?)
   protected boolean selectStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (selectStatement$RuleMemoStart == index) {
         if (selectStatement$RuleMemoStart <= selectStatement$RuleMemoEnd) {
            index = selectStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_STATEMENT, selectStatement$RuleMemoStart, selectStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (selectStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(selectStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SubqueryFactoringClause? Subquery ForUpdateClause?)
      // SubqueryFactoringClause?
      // SubqueryFactoringClause
      subqueryFactoringClause$Rule();
      // Subquery
      match = subquery$Rule();
      if (match) {
         // ForUpdateClause?
         // ForUpdateClause
         forUpdateClause$Rule();
         match = true;
      }
      if (match) {
         selectStatement$RuleMemoStart = startIndex;
         selectStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            selectStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            selectStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         selectStatement$RuleMemoStart = startIndex;
         selectStatement$RuleMemoEnd = -1;
         selectStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MergeUpdateClause : ("when" TestNoAlpha OptionalSpacing "matched" TestNoAlpha OptionalSpacing "then" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing UpdateSetClause WhereClause? ("delete" TestNoAlpha OptionalSpacing WhereClause)?)
   protected boolean mergeUpdateClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (mergeUpdateClause$RuleMemoStart == index) {
         if (mergeUpdateClause$RuleMemoStart <= mergeUpdateClause$RuleMemoEnd) {
            index = mergeUpdateClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MERGE_UPDATE_CLAUSE, mergeUpdateClause$RuleMemoStart, mergeUpdateClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (mergeUpdateClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(mergeUpdateClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing "matched" TestNoAlpha OptionalSpacing "then" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing UpdateSetClause WhereClause? ("delete" TestNoAlpha OptionalSpacing WhereClause)?)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "matched"
               match = ignoreCaseStringMatcher("matched", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "then"
                        match = ignoreCaseStringMatcher("then", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "update"
                                 match = ignoreCaseStringMatcher("update", 6);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // UpdateSetClause
                                          match = updateSetClause$Rule();
                                          if (match) {
                                             // WhereClause?
                                             // WhereClause
                                             whereClause$Rule();
                                             match = true;
                                             // ("delete" TestNoAlpha OptionalSpacing WhereClause)?
                                             // ("delete" TestNoAlpha OptionalSpacing WhereClause)
                                             Node lastNode_1 = currentNode;
                                             int lastIndex_1 = index;
                                             // "delete"
                                             match = ignoreCaseStringMatcher("delete", 6);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // WhereClause
                                                      match = whereClause$Rule();
                                                      if (! match) {
                                                         index = lastIndex_1;
                                                         lastNode_1.setSibling(null);
                                                         currentNode = lastNode_1;
                                                      }
                                                   } else {
                                                      index = lastIndex_1;
                                                      lastNode_1.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_1;
                                                   lastNode_1.setSibling(null);
                                                }
                                             }
                                             match = true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         mergeUpdateClause$RuleMemoStart = startIndex;
         mergeUpdateClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            mergeUpdateClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MERGE_UPDATE_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            mergeUpdateClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         mergeUpdateClause$RuleMemoStart = startIndex;
         mergeUpdateClause$RuleMemoEnd = -1;
         mergeUpdateClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MergeInsertClause : ("when" TestNoAlpha OptionalSpacing "not" TestNoAlpha OptionalSpacing "matched" TestNoAlpha OptionalSpacing "then" TestNoAlpha OptionalSpacing "insert" TestNoAlpha OptionalSpacing ColumnsList ValuesClause WhereClause?)
   protected boolean mergeInsertClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (mergeInsertClause$RuleMemoStart == index) {
         if (mergeInsertClause$RuleMemoStart <= mergeInsertClause$RuleMemoEnd) {
            index = mergeInsertClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MERGE_INSERT_CLAUSE, mergeInsertClause$RuleMemoStart, mergeInsertClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (mergeInsertClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(mergeInsertClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing "not" TestNoAlpha OptionalSpacing "matched" TestNoAlpha OptionalSpacing "then" TestNoAlpha OptionalSpacing "insert" TestNoAlpha OptionalSpacing ColumnsList ValuesClause WhereClause?)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "not"
               match = ignoreCaseStringMatcher("not", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "matched"
                        match = ignoreCaseStringMatcher("matched", 7);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "then"
                                 match = ignoreCaseStringMatcher("then", 4);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // "insert"
                                          match = ignoreCaseStringMatcher("insert", 6);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // ColumnsList
                                                   match = columnsList$Rule();
                                                   if (match) {
                                                      // ValuesClause
                                                      match = valuesClause$Rule();
                                                      if (match) {
                                                         // WhereClause?
                                                         // WhereClause
                                                         whereClause$Rule();
                                                         match = true;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         mergeInsertClause$RuleMemoStart = startIndex;
         mergeInsertClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            mergeInsertClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MERGE_INSERT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            mergeInsertClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         mergeInsertClause$RuleMemoStart = startIndex;
         mergeInsertClause$RuleMemoEnd = -1;
         mergeInsertClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MergeStatement : ("merge" TestNoAlpha OptionalSpacing Hint? "into" TestNoAlpha OptionalSpacing TableName Alias? "using" TestNoAlpha OptionalSpacing (Subquery | TableName)? Alias? "on" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlCondition ')' OptionalSpacing ((MergeUpdateClause MergeInsertClause) | (MergeInsertClause MergeUpdateClause) | MergeInsertClause | MergeUpdateClause)? ErrorLogingClause?)
   protected boolean mergeStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (mergeStatement$RuleMemoStart == index) {
         if (mergeStatement$RuleMemoStart <= mergeStatement$RuleMemoEnd) {
            index = mergeStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MERGE_STATEMENT, mergeStatement$RuleMemoStart, mergeStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (mergeStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(mergeStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("merge" TestNoAlpha OptionalSpacing Hint? "into" TestNoAlpha OptionalSpacing TableName Alias? "using" TestNoAlpha OptionalSpacing (Subquery | TableName)? Alias? "on" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlCondition ')' OptionalSpacing ((MergeUpdateClause MergeInsertClause) | (MergeInsertClause MergeUpdateClause) | MergeInsertClause | MergeUpdateClause)? ErrorLogingClause?)
      // "merge"
      match = ignoreCaseStringMatcher("merge", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Hint?
               // Hint
               hint$Rule();
               // "into"
               match = ignoreCaseStringMatcher("into", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // TableName
                        match = tableName$Rule();
                        if (match) {
                           // Alias?
                           // Alias
                           alias$Rule();
                           // "using"
                           match = ignoreCaseStringMatcher("using", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // (Subquery | TableName)?
                                    // (Subquery | TableName)
                                    switch(buffer.getChar(index)) {
                                       case '\"':
                                       case '#':
                                       case '$':
                                       case '0':
                                       case '1':
                                       case '2':
                                       case '3':
                                       case '4':
                                       case '5':
                                       case '6':
                                       case '7':
                                       case '8':
                                       case '9':
                                       case 'A':
                                       case 'B':
                                       case 'C':
                                       case 'D':
                                       case 'E':
                                       case 'F':
                                       case 'G':
                                       case 'H':
                                       case 'I':
                                       case 'J':
                                       case 'K':
                                       case 'L':
                                       case 'M':
                                       case 'N':
                                       case 'O':
                                       case 'P':
                                       case 'Q':
                                       case 'R':
                                       case 'T':
                                       case 'U':
                                       case 'V':
                                       case 'W':
                                       case 'X':
                                       case 'Y':
                                       case 'Z':
                                       case '_':
                                       case 'a':
                                       case 'b':
                                       case 'c':
                                       case 'd':
                                       case 'e':
                                       case 'f':
                                       case 'g':
                                       case 'h':
                                       case 'i':
                                       case 'j':
                                       case 'k':
                                       case 'l':
                                       case 'm':
                                       case 'n':
                                       case 'o':
                                       case 'p':
                                       case 'q':
                                       case 'r':
                                       case 't':
                                       case 'u':
                                       case 'v':
                                       case 'w':
                                       case 'x':
                                       case 'y':
                                       case 'z': {
                                          // TableName
                                          match = tableName$Rule();
                                          break;
                                       }
                                       case 'S':
                                       case 's': {
                                          // Subquery
                                          match = subquery$Rule();
                                          if (! match) {
                                             // TableName
                                             match = tableName$Rule();
                                          }
                                          break;
                                       }
                                       case '(': {
                                          // Subquery
                                          match = subquery$Rule();
                                          break;
                                       }
                                       default: {
                                          match = false;
                                       }
                                    }
                                    // Alias?
                                    // Alias
                                    alias$Rule();
                                    // "on"
                                    match = ignoreCaseStringMatcher("on", 2);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // '('
                                             match = charMatcher('(');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // SqlCondition
                                                   match = sqlCondition$Rule();
                                                   if (match) {
                                                      // ')'
                                                      match = charMatcher(')');
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (match) {
                                                            // ((MergeUpdateClause MergeInsertClause) | (MergeInsertClause MergeUpdateClause) | MergeInsertClause | MergeUpdateClause)?
                                                            // ((MergeUpdateClause MergeInsertClause) | (MergeInsertClause MergeUpdateClause) | MergeInsertClause | MergeUpdateClause)
                                                            // (MergeUpdateClause MergeInsertClause)
                                                            Node lastNode_1 = currentNode;
                                                            int lastIndex_1 = index;
                                                            // MergeUpdateClause
                                                            match = mergeUpdateClause$Rule();
                                                            if (match) {
                                                               // MergeInsertClause
                                                               match = mergeInsertClause$Rule();
                                                               if (! match) {
                                                                  index = lastIndex_1;
                                                                  lastNode_1.setSibling(null);
                                                                  currentNode = lastNode_1;
                                                               }
                                                            }
                                                            if (! match) {
                                                               // (MergeInsertClause MergeUpdateClause)
                                                               Node lastNode_2 = currentNode;
                                                               int lastIndex_2 = index;
                                                               // MergeInsertClause
                                                               match = mergeInsertClause$Rule();
                                                               if (match) {
                                                                  // MergeUpdateClause
                                                                  match = mergeUpdateClause$Rule();
                                                                  if (! match) {
                                                                     index = lastIndex_2;
                                                                     lastNode_2.setSibling(null);
                                                                     currentNode = lastNode_2;
                                                                  }
                                                               }
                                                               if (! match) {
                                                                  // MergeInsertClause
                                                                  match = mergeInsertClause$Rule();
                                                                  if (! match) {
                                                                     // MergeUpdateClause
                                                                     match = mergeUpdateClause$Rule();
                                                                  }
                                                               }
                                                            }
                                                            // ErrorLogingClause?
                                                            // ErrorLogingClause
                                                            errorLogingClause$Rule();
                                                            match = true;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         mergeStatement$RuleMemoStart = startIndex;
         mergeStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            mergeStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MERGE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            mergeStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         mergeStatement$RuleMemoStart = startIndex;
         mergeStatement$RuleMemoEnd = -1;
         mergeStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BlockHint : ('/*+' OptionalSpacing ('*/'! . OptionalSpacing)* '*/' OptionalSpacing)
   protected boolean blockHint$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (blockHint$RuleMemoStart == index) {
         if (blockHint$RuleMemoStart <= blockHint$RuleMemoEnd) {
            index = blockHint$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BLOCK_HINT, blockHint$RuleMemoStart, blockHint$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (blockHint$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(blockHint$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('/*+' OptionalSpacing ('*/'! . OptionalSpacing)* '*/' OptionalSpacing)
      // '/*+'
      match = stringMatcher("/*+", 3);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ('*/'! . OptionalSpacing)*
            do {
               // ('*/'! . OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // '*/'!
               // '*/'
               match = stringTest("*/", 2);
               match = ! match;
               if (match) {
                  // .
                  match = anyCharMatcher();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
            } while(match);
            // '*/'
            match = stringMatcher("*/", 2);
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         blockHint$RuleMemoStart = startIndex;
         blockHint$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            blockHint$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BLOCK_HINT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            blockHint$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         blockHint$RuleMemoStart = startIndex;
         blockHint$RuleMemoEnd = -1;
         blockHint$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LineHint : ('--+' OptionalSpacing ((('\r' | '\n') OptionalSpacing)! . OptionalSpacing)* (('\r\n' | '\r' | '\n') OptionalSpacing))
   protected boolean lineHint$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (lineHint$RuleMemoStart == index) {
         if (lineHint$RuleMemoStart <= lineHint$RuleMemoEnd) {
            index = lineHint$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LINE_HINT, lineHint$RuleMemoStart, lineHint$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (lineHint$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(lineHint$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('--+' OptionalSpacing ((('\r' | '\n') OptionalSpacing)! . OptionalSpacing)* (('\r\n' | '\r' | '\n') OptionalSpacing))
      // '--+'
      match = stringMatcher("--+", 3);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ((('\r' | '\n') OptionalSpacing)! . OptionalSpacing)*
            do {
               // ((('\r' | '\n') OptionalSpacing)! . OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // (('\r' | '\n') OptionalSpacing)!
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               boolean lastAtomic_2 = currentRuleIsAtomic;
               // (('\r' | '\n') OptionalSpacing)
               Node lastNode_3 = currentNode;
               int lastIndex_3 = index;
               // ('\r' | '\n')
               int startIndex_4 = index;
               switch(buffer.getChar(index)) {
                  case '\r': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  case '\n': {
                     ++index;
                     // <EMPTY>
                     match = true;
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! match) {
                  index = startIndex_4;
               } else if(! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_4, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                     currentNode = lastNode_3;
                  }
               }
               currentRuleIsAtomic = lastAtomic_2;
               index = lastIndex_2;
               lastNode_2.setSibling(null);
               currentNode = lastNode_2;
               match = ! match;
               if (match) {
                  // .
                  match = anyCharMatcher();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
            } while(match);
            match = true;
            // (('\r\n' | '\r' | '\n') OptionalSpacing)
            // ('\r\n' | '\r' | '\n')
            int startIndex_5 = index;
            switch(buffer.getChar(index)) {
               case '\r': {
                  ++index;
                  // ('\n' | <EMPTY>)
                  if (buffer.matchChar(index, '\n')) {
                     ++index;
                     // <EMPTY>
                     match = true;
                  } else {
                     match = true;
                  }
                  break;
               }
               case '\n': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            if (! currentRuleIsAtomic) {
               currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_5, index, false, false));
               currentNode = currentNode.getSibling();
            }
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         lineHint$RuleMemoStart = startIndex;
         lineHint$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lineHint$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LINE_HINT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            lineHint$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         lineHint$RuleMemoStart = startIndex;
         lineHint$RuleMemoEnd = -1;
         lineHint$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Hint : (BlockHint | LineHint)
   protected boolean hint$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (hint$RuleMemoStart == index) {
         if (hint$RuleMemoStart <= hint$RuleMemoEnd) {
            index = hint$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.HINT, hint$RuleMemoStart, hint$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (hint$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(hint$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BlockHint | LineHint)
      switch(buffer.getChar(index)) {
         case '-': {
            // LineHint
            match = lineHint$Rule();
            break;
         }
         case '/': {
            // BlockHint
            match = blockHint$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         hint$RuleMemoStart = startIndex;
         hint$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            hint$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HINT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            hint$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         hint$RuleMemoStart = startIndex;
         hint$RuleMemoEnd = -1;
         hint$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ListAllFields : (TableName '.' OptionalSpacing '*' OptionalSpacing)
   protected boolean listAllFields$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (listAllFields$RuleMemoStart == index) {
         if (listAllFields$RuleMemoStart <= listAllFields$RuleMemoEnd) {
            index = listAllFields$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LIST_ALL_FIELDS, listAllFields$RuleMemoStart, listAllFields$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (listAllFields$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(listAllFields$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TableName '.' OptionalSpacing '*' OptionalSpacing)
      // TableName
      match = tableName$Rule();
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '*'
               match = charMatcher('*');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         listAllFields$RuleMemoStart = startIndex;
         listAllFields$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            listAllFields$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIST_ALL_FIELDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            listAllFields$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         listAllFields$RuleMemoStart = startIndex;
         listAllFields$RuleMemoEnd = -1;
         listAllFields$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SelectListExpressionElement : (SqlExpression ColumnAlias?)
   protected boolean selectListExpressionElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (selectListExpressionElement$RuleMemoStart == index) {
         if (selectListExpressionElement$RuleMemoStart <= selectListExpressionElement$RuleMemoEnd) {
            index = selectListExpressionElement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_LIST_EXPRESSION_ELEMENT, selectListExpressionElement$RuleMemoStart, selectListExpressionElement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (selectListExpressionElement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(selectListExpressionElement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression ColumnAlias?)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // ColumnAlias?
         // ColumnAlias
         columnAlias$Rule();
         match = true;
      }
      if (match) {
         selectListExpressionElement$RuleMemoStart = startIndex;
         selectListExpressionElement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            selectListExpressionElement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_LIST_EXPRESSION_ELEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            selectListExpressionElement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         selectListExpressionElement$RuleMemoStart = startIndex;
         selectListExpressionElement$RuleMemoEnd = -1;
         selectListExpressionElement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SelectListElement : (ListAllFields | SelectListExpressionElement)
   protected boolean selectListElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (selectListElement$RuleMemoStart == index) {
         if (selectListElement$RuleMemoStart <= selectListElement$RuleMemoEnd) {
            index = selectListElement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_LIST_ELEMENT, selectListElement$RuleMemoStart, selectListElement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (selectListElement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(selectListElement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ListAllFields | SelectListExpressionElement)
      switch(buffer.getChar(index)) {
         case '\'':
         case '(':
         case ':':
         case '+':
         case '-':
         case '?': {
            // SelectListExpressionElement
            match = selectListExpressionElement$Rule();
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ListAllFields
            match = listAllFields$Rule();
            if (! match) {
               // SelectListExpressionElement
               match = selectListExpressionElement$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         selectListElement$RuleMemoStart = startIndex;
         selectListElement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            selectListElement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_LIST_ELEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            selectListElement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         selectListElement$RuleMemoStart = startIndex;
         selectListElement$RuleMemoEnd = -1;
         selectListElement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ColumnAlias : (("as" TestNoAlpha OptionalSpacing)? SqlIdentifier)
   protected boolean columnAlias$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("as" TestNoAlpha OptionalSpacing)? SqlIdentifier)
      // ("as" TestNoAlpha OptionalSpacing)?
      // ("as" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "as"
      match = ignoreCaseStringMatcher("as", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_ALIAS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CommaSelectListElement : (',' OptionalSpacing SelectListElement)
   protected boolean commaSelectListElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (',' OptionalSpacing SelectListElement)
      // ','
      match = charMatcher(',');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SelectListElement
            match = selectListElement$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COMMA_SELECT_LIST_ELEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ZeroOrMoreCommaSelectListElement : CommaSelectListElement*
   protected boolean zeroOrMoreCommaSelectListElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // CommaSelectListElement*
      do {
         // CommaSelectListElement
         match = commaSelectListElement$Rule();
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.ZERO_OR_MORE_COMMA_SELECT_LIST_ELEMENT, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ListOfSelectListElement : (SelectListElement ZeroOrMoreCommaSelectListElement)
   protected boolean listOfSelectListElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (listOfSelectListElement$RuleMemoStart == index) {
         if (listOfSelectListElement$RuleMemoStart <= listOfSelectListElement$RuleMemoEnd) {
            index = listOfSelectListElement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LIST_OF_SELECT_LIST_ELEMENT, listOfSelectListElement$RuleMemoStart, listOfSelectListElement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (listOfSelectListElement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(listOfSelectListElement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SelectListElement ZeroOrMoreCommaSelectListElement)
      // SelectListElement
      match = selectListElement$Rule();
      if (match) {
         // ZeroOrMoreCommaSelectListElement
         match = zeroOrMoreCommaSelectListElement$Rule();
      }
      if (match) {
         listOfSelectListElement$RuleMemoStart = startIndex;
         listOfSelectListElement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            listOfSelectListElement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIST_OF_SELECT_LIST_ELEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            listOfSelectListElement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         listOfSelectListElement$RuleMemoStart = startIndex;
         listOfSelectListElement$RuleMemoEnd = -1;
         listOfSelectListElement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SelectList : (('*' OptionalSpacing) | ListOfSelectListElement)
   protected boolean selectList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (selectList$RuleMemoStart == index) {
         if (selectList$RuleMemoStart <= selectList$RuleMemoEnd) {
            index = selectList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_LIST, selectList$RuleMemoStart, selectList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (selectList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(selectList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (('*' OptionalSpacing) | ListOfSelectListElement)
      // ('*' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '*'
      match = charMatcher('*');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (! match) {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
            currentNode = lastNode_1;
         }
      }
      if (! match) {
         // ListOfSelectListElement
         match = listOfSelectListElement$Rule();
      }
      if (match) {
         selectList$RuleMemoStart = startIndex;
         selectList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            selectList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            selectList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         selectList$RuleMemoStart = startIndex;
         selectList$RuleMemoEnd = -1;
         selectList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryReadOnlyRestriction : ("read" TestNoAlpha OptionalSpacing "only" TestNoAlpha OptionalSpacing)
   protected boolean subqueryReadOnlyRestriction$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (subqueryReadOnlyRestriction$RuleMemoStart == index) {
         if (subqueryReadOnlyRestriction$RuleMemoStart <= subqueryReadOnlyRestriction$RuleMemoEnd) {
            index = subqueryReadOnlyRestriction$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_READ_ONLY_RESTRICTION, subqueryReadOnlyRestriction$RuleMemoStart, subqueryReadOnlyRestriction$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (subqueryReadOnlyRestriction$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(subqueryReadOnlyRestriction$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("read" TestNoAlpha OptionalSpacing "only" TestNoAlpha OptionalSpacing)
      // "read"
      match = ignoreCaseStringMatcher("read", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "only"
               match = ignoreCaseStringMatcher("only", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         subqueryReadOnlyRestriction$RuleMemoStart = startIndex;
         subqueryReadOnlyRestriction$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            subqueryReadOnlyRestriction$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_READ_ONLY_RESTRICTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            subqueryReadOnlyRestriction$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         subqueryReadOnlyRestriction$RuleMemoStart = startIndex;
         subqueryReadOnlyRestriction$RuleMemoEnd = -1;
         subqueryReadOnlyRestriction$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryCheckConstraintName : ("constraint" TestNoAlpha OptionalSpacing SqlAnyIdentifier)?
   protected boolean subqueryCheckConstraintName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("constraint" TestNoAlpha OptionalSpacing SqlAnyIdentifier)?
      // ("constraint" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "constraint"
      match = ignoreCaseStringMatcher("constraint", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlAnyIdentifier
               match = sqlAnyIdentifier$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_CHECK_CONSTRAINT_NAME, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //SubqueryCheckOptionRestriction : ("check" TestNoAlpha OptionalSpacing "option" TestNoAlpha OptionalSpacing SubqueryCheckConstraintName)
   protected boolean subqueryCheckOptionRestriction$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (subqueryCheckOptionRestriction$RuleMemoStart == index) {
         if (subqueryCheckOptionRestriction$RuleMemoStart <= subqueryCheckOptionRestriction$RuleMemoEnd) {
            index = subqueryCheckOptionRestriction$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_CHECK_OPTION_RESTRICTION, subqueryCheckOptionRestriction$RuleMemoStart, subqueryCheckOptionRestriction$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (subqueryCheckOptionRestriction$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(subqueryCheckOptionRestriction$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("check" TestNoAlpha OptionalSpacing "option" TestNoAlpha OptionalSpacing SubqueryCheckConstraintName)
      // "check"
      match = ignoreCaseStringMatcher("check", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "option"
               match = ignoreCaseStringMatcher("option", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SubqueryCheckConstraintName
                        match = subqueryCheckConstraintName$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         subqueryCheckOptionRestriction$RuleMemoStart = startIndex;
         subqueryCheckOptionRestriction$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            subqueryCheckOptionRestriction$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_CHECK_OPTION_RESTRICTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            subqueryCheckOptionRestriction$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         subqueryCheckOptionRestriction$RuleMemoStart = startIndex;
         subqueryCheckOptionRestriction$RuleMemoEnd = -1;
         subqueryCheckOptionRestriction$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryRestrictionType : (SubqueryReadOnlyRestriction | SubqueryCheckOptionRestriction)
   protected boolean subqueryRestrictionType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SubqueryReadOnlyRestriction | SubqueryCheckOptionRestriction)
      switch(buffer.getChar(index)) {
         case 'r':
         case 'R': {
            // SubqueryReadOnlyRestriction
            match = subqueryReadOnlyRestriction$Rule();
            break;
         }
         case 'c':
         case 'C': {
            // SubqueryCheckOptionRestriction
            match = subqueryCheckOptionRestriction$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_RESTRICTION_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryRestriction : ("with" TestNoAlpha OptionalSpacing SubqueryRestrictionType)?
   protected boolean subqueryRestriction$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("with" TestNoAlpha OptionalSpacing SubqueryRestrictionType)?
      // ("with" TestNoAlpha OptionalSpacing SubqueryRestrictionType)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "with"
      match = ignoreCaseStringMatcher("with", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SubqueryRestrictionType
               match = subqueryRestrictionType$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_RESTRICTION, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //SampleNumber : ('(' OptionalSpacing UnsignedNumber ')' OptionalSpacing)
   protected boolean sampleNumber$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing UnsignedNumber ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // UnsignedNumber
            match = unsignedNumber$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SAMPLE_NUMBER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Seed : ("seed" TestNoAlpha OptionalSpacing '(' OptionalSpacing IntegerLiteral ')' OptionalSpacing)
   protected boolean seed$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("seed" TestNoAlpha OptionalSpacing '(' OptionalSpacing IntegerLiteral ')' OptionalSpacing)
      // "seed"
      match = ignoreCaseStringMatcher("seed", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // IntegerLiteral
                     match = integerLiteral$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SEED, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SampleClause : ("sample" TestNoAlpha OptionalSpacing ("block" TestNoAlpha OptionalSpacing)? SampleNumber Seed?)
   protected boolean sampleClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("sample" TestNoAlpha OptionalSpacing ("block" TestNoAlpha OptionalSpacing)? SampleNumber Seed?)
      // "sample"
      match = ignoreCaseStringMatcher("sample", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("block" TestNoAlpha OptionalSpacing)?
               // ("block" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "block"
               match = ignoreCaseStringMatcher("block", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // SampleNumber
               match = sampleNumber$Rule();
               if (match) {
                  // Seed?
                  // Seed
                  seed$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SAMPLE_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TableOrView : ((TablePartitionName | TableSubPartitionName | TableName) SampleClause?)
   protected boolean tableOrView$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tableOrView$RuleMemoStart == index) {
         if (tableOrView$RuleMemoStart <= tableOrView$RuleMemoEnd) {
            index = tableOrView$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_OR_VIEW, tableOrView$RuleMemoStart, tableOrView$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (tableOrView$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(tableOrView$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((TablePartitionName | TableSubPartitionName | TableName) SampleClause?)
      // (TablePartitionName | TableSubPartitionName | TableName)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // TablePartitionName
            match = tablePartitionName$Rule();
            if (! match) {
               // TableSubPartitionName
               match = tableSubPartitionName$Rule();
               if (! match) {
                  // TableName
                  match = tableName$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // SampleClause?
         // SampleClause
         sampleClause$Rule();
         match = true;
      }
      if (match) {
         tableOrView$RuleMemoStart = startIndex;
         tableOrView$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tableOrView$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_OR_VIEW, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tableOrView$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         tableOrView$RuleMemoStart = startIndex;
         tableOrView$RuleMemoEnd = -1;
         tableOrView$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryTableExpression : (TableOrView | Subquery | TableCollectionExpression)
   protected boolean queryTableExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (queryTableExpression$RuleMemoStart == index) {
         if (queryTableExpression$RuleMemoStart <= queryTableExpression$RuleMemoEnd) {
            index = queryTableExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION, queryTableExpression$RuleMemoStart, queryTableExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (queryTableExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(queryTableExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TableOrView | Subquery | TableCollectionExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // TableOrView
            match = tableOrView$Rule();
            break;
         }
         case 'S':
         case 's': {
            // TableOrView
            match = tableOrView$Rule();
            if (! match) {
               // Subquery
               match = subquery$Rule();
            }
            break;
         }
         case 'T':
         case 't': {
            // TableOrView
            match = tableOrView$Rule();
            if (! match) {
               // TableCollectionExpression
               match = tableCollectionExpression$Rule();
            }
            break;
         }
         case '(': {
            // Subquery
            match = subquery$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         queryTableExpression$RuleMemoStart = startIndex;
         queryTableExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            queryTableExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            queryTableExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         queryTableExpression$RuleMemoStart = startIndex;
         queryTableExpression$RuleMemoEnd = -1;
         queryTableExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DBLink : ('@' OptionalSpacing SqlAnyIdentifier)
   protected boolean dBLink$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dBLink$RuleMemoStart == index) {
         if (dBLink$RuleMemoStart <= dBLink$RuleMemoEnd) {
            index = dBLink$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DBLINK, dBLink$RuleMemoStart, dBLink$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (dBLink$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(dBLink$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('@' OptionalSpacing SqlAnyIdentifier)
      // '@'
      match = charMatcher('@');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlAnyIdentifier
            match = sqlAnyIdentifier$Rule();
         }
      }
      if (match) {
         dBLink$RuleMemoStart = startIndex;
         dBLink$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            dBLink$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DBLINK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            dBLink$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         dBLink$RuleMemoStart = startIndex;
         dBLink$RuleMemoEnd = -1;
         dBLink$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TableName : (SchemaObjectName DBLink?)
   protected boolean tableName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tableName$RuleMemoStart == index) {
         if (tableName$RuleMemoStart <= tableName$RuleMemoEnd) {
            index = tableName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_NAME, tableName$RuleMemoStart, tableName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (tableName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(tableName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SchemaObjectName DBLink?)
      // SchemaObjectName
      match = schemaObjectName$Rule();
      if (match) {
         // DBLink?
         // DBLink
         dBLink$Rule();
         match = true;
      }
      if (match) {
         tableName$RuleMemoStart = startIndex;
         tableName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tableName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tableName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         tableName$RuleMemoStart = startIndex;
         tableName$RuleMemoEnd = -1;
         tableName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlFunctionCallAsIdentifier : (SqlObjectIdentifier "as" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
   protected boolean sqlFunctionCallAsIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SqlObjectIdentifier "as" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // "as"
         match = ignoreCaseStringMatcher("as", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlAnyIdentifier
                  match = sqlAnyIdentifier$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_FUNCTION_CALL_AS_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CollectionExpression : (Subquery | SqlObjectIdentifier)
   protected boolean collectionExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Subquery | SqlObjectIdentifier)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlObjectIdentifier
            match = sqlObjectIdentifier$Rule();
            break;
         }
         case 'S':
         case 's': {
            // Subquery
            match = subquery$Rule();
            if (! match) {
               // SqlObjectIdentifier
               match = sqlObjectIdentifier$Rule();
            }
            break;
         }
         case '(': {
            // Subquery
            match = subquery$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLLECTION_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TableCollectionExpression : ("table" TestNoAlpha OptionalSpacing '(' OptionalSpacing CollectionExpression ')' OptionalSpacing OuterJoinSign?)
   protected boolean tableCollectionExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tableCollectionExpression$RuleMemoStart == index) {
         if (tableCollectionExpression$RuleMemoStart <= tableCollectionExpression$RuleMemoEnd) {
            index = tableCollectionExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_COLLECTION_EXPRESSION, tableCollectionExpression$RuleMemoStart, tableCollectionExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (tableCollectionExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(tableCollectionExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("table" TestNoAlpha OptionalSpacing '(' OptionalSpacing CollectionExpression ')' OptionalSpacing OuterJoinSign?)
      // "table"
      match = ignoreCaseStringMatcher("table", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // CollectionExpression
                     match = collectionExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // OuterJoinSign?
                              // OuterJoinSign
                              outerJoinSign$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         tableCollectionExpression$RuleMemoStart = startIndex;
         tableCollectionExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tableCollectionExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_COLLECTION_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tableCollectionExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         tableCollectionExpression$RuleMemoStart = startIndex;
         tableCollectionExpression$RuleMemoEnd = -1;
         tableCollectionExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlMathOperator : (('**' OptionalSpacing) | ('*' OptionalSpacing) | ('/' OptionalSpacing) | ('+' OptionalSpacing) | ('-' OptionalSpacing) | ('|' OptionalSpacing '|' OptionalSpacing) | ('mod' TestNoAlpha OptionalSpacing))
   protected boolean sqlMathOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (('**' OptionalSpacing) | ('*' OptionalSpacing) | ('/' OptionalSpacing) | ('+' OptionalSpacing) | ('-' OptionalSpacing) | ('|' OptionalSpacing '|' OptionalSpacing) | ('mod' TestNoAlpha OptionalSpacing))
      // ('**' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '**'
      match = stringMatcher("**", 2);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (! match) {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
            currentNode = lastNode_1;
         }
      }
      if (! match) {
         // ('*' OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // '*'
         match = charMatcher('*');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
               currentNode = lastNode_2;
            }
         }
         if (! match) {
            // ('/' OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // '/'
            match = charMatcher('/');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
                  currentNode = lastNode_3;
               }
            }
            if (! match) {
               // ('+' OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // '+'
               match = charMatcher('+');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                     currentNode = lastNode_4;
                  }
               }
               if (! match) {
                  // ('-' OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // '-'
                  match = charMatcher('-');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                        currentNode = lastNode_5;
                     }
                  }
                  if (! match) {
                     // ('|' OptionalSpacing '|' OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // '|'
                     match = charMatcher('|');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // '|'
                           match = charMatcher('|');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                                 currentNode = lastNode_6;
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ('mod' TestNoAlpha OptionalSpacing)
                        Node lastNode_7 = currentNode;
                        int lastIndex_7 = index;
                        // 'mod'
                        match = stringMatcher("mod", 3);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                                 currentNode = lastNode_7;
                              }
                           } else {
                              index = lastIndex_7;
                              lastNode_7.setSibling(null);
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_MATH_OPERATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlExpression : (SqlMathExpression | SqlAtomicExpression)
   protected boolean sqlExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlExpression$RuleMemoStart == index) {
         if (sqlExpression$RuleMemoStart <= sqlExpression$RuleMemoEnd) {
            index = sqlExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_EXPRESSION, sqlExpression$RuleMemoStart, sqlExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlMathExpression | SqlAtomicExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlMathExpression
            match = sqlMathExpression$Rule();
            if (! match) {
               // SqlAtomicExpression
               match = sqlAtomicExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlExpression$RuleMemoStart = startIndex;
         sqlExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlExpression$RuleMemoStart = startIndex;
         sqlExpression$RuleMemoEnd = -1;
         sqlExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlMathExpression : (SqlAtomicExpression SqlMathOperator SqlExpression)
   protected boolean sqlMathExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlMathExpression$RuleMemoStart == index) {
         if (sqlMathExpression$RuleMemoStart <= sqlMathExpression$RuleMemoEnd) {
            index = sqlMathExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_MATH_EXPRESSION, sqlMathExpression$RuleMemoStart, sqlMathExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlMathExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlMathExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlAtomicExpression SqlMathOperator SqlExpression)
      // SqlAtomicExpression
      match = sqlAtomicExpression$Rule();
      if (match) {
         // SqlMathOperator
         match = sqlMathOperator$Rule();
         if (match) {
            // SqlExpression
            match = sqlExpression$Rule();
         }
      }
      if (match) {
         sqlMathExpression$RuleMemoStart = startIndex;
         sqlMathExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlMathExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_MATH_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlMathExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlMathExpression$RuleMemoStart = startIndex;
         sqlMathExpression$RuleMemoEnd = -1;
         sqlMathExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParenthesesSqlExpression : ('(' OptionalSpacing SqlExpression ')' OptionalSpacing)
   protected boolean parenthesesSqlExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parenthesesSqlExpression$RuleMemoStart == index) {
         if (parenthesesSqlExpression$RuleMemoStart <= parenthesesSqlExpression$RuleMemoEnd) {
            index = parenthesesSqlExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_SQL_EXPRESSION, parenthesesSqlExpression$RuleMemoStart, parenthesesSqlExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (parenthesesSqlExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(parenthesesSqlExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing SqlExpression ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlExpression
            match = sqlExpression$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         parenthesesSqlExpression$RuleMemoStart = startIndex;
         parenthesesSqlExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parenthesesSqlExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_SQL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parenthesesSqlExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         parenthesesSqlExpression$RuleMemoStart = startIndex;
         parenthesesSqlExpression$RuleMemoEnd = -1;
         parenthesesSqlExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlUnaryOperator : (('+' OptionalSpacing) | ('-' OptionalSpacing) | ('prior' TestNoAlpha OptionalSpacing) | ('connect_by_root' TestNoAlpha OptionalSpacing))
   protected boolean sqlUnaryOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (('+' OptionalSpacing) | ('-' OptionalSpacing) | ('prior' TestNoAlpha OptionalSpacing) | ('connect_by_root' TestNoAlpha OptionalSpacing))
      // ('+' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '+'
      match = charMatcher('+');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (! match) {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
            currentNode = lastNode_1;
         }
      }
      if (! match) {
         // ('-' OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // '-'
         match = charMatcher('-');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
               currentNode = lastNode_2;
            }
         }
         if (! match) {
            // ('prior' TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // 'prior'
            match = stringMatcher("prior", 5);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                     currentNode = lastNode_3;
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ('connect_by_root' TestNoAlpha OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // 'connect_by_root'
               match = stringMatcher("connect_by_root", 15);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_UNARY_OPERATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlUnaryExpression : (SqlUnaryOperator SqlLeftAtomicExpression)
   protected boolean sqlUnaryExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlUnaryExpression$RuleMemoStart == index) {
         if (sqlUnaryExpression$RuleMemoStart <= sqlUnaryExpression$RuleMemoEnd) {
            index = sqlUnaryExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_UNARY_EXPRESSION, sqlUnaryExpression$RuleMemoStart, sqlUnaryExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlUnaryExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlUnaryExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlUnaryOperator SqlLeftAtomicExpression)
      // SqlUnaryOperator
      match = sqlUnaryOperator$Rule();
      if (match) {
         // SqlLeftAtomicExpression
         match = sqlLeftAtomicExpression$Rule();
      }
      if (match) {
         sqlUnaryExpression$RuleMemoStart = startIndex;
         sqlUnaryExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlUnaryExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_UNARY_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlUnaryExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlUnaryExpression$RuleMemoStart = startIndex;
         sqlUnaryExpression$RuleMemoEnd = -1;
         sqlUnaryExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlLeftAtomicExpression : (ParenthesesSqlExpression | SqlCaseExpression | CursorExpression | PlaceHolderExpression | TypeConstructorExpression | Subquery | BuiltInFunctionCall | SqlSimpleExpression | SysDate | SqlUnaryExpression | ModelExpression)
   protected boolean sqlLeftAtomicExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlLeftAtomicExpression$RuleMemoStart == index) {
         if (sqlLeftAtomicExpression$RuleMemoStart <= sqlLeftAtomicExpression$RuleMemoEnd) {
            index = sqlLeftAtomicExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_LEFT_ATOMIC_EXPRESSION, sqlLeftAtomicExpression$RuleMemoStart, sqlLeftAtomicExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlLeftAtomicExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlLeftAtomicExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ParenthesesSqlExpression | SqlCaseExpression | CursorExpression | PlaceHolderExpression | TypeConstructorExpression | Subquery | BuiltInFunctionCall | SqlSimpleExpression | SysDate | SqlUnaryExpression | ModelExpression)
      switch(buffer.getChar(index)) {
         case '+':
         case '-': {
            // SqlSimpleExpression
            match = sqlSimpleExpression$Rule();
            if (! match) {
               // SqlUnaryExpression
               match = sqlUnaryExpression$Rule();
            }
            break;
         }
         case 'N':
         case 'n': {
            // TypeConstructorExpression
            match = typeConstructorExpression$Rule();
            if (! match) {
               // BuiltInFunctionCall
               match = builtInFunctionCall$Rule();
               if (! match) {
                  // SqlSimpleExpression
                  match = sqlSimpleExpression$Rule();
                  if (! match) {
                     // ModelExpression
                     match = modelExpression$Rule();
                  }
               }
            }
            break;
         }
         case 'B':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'O':
         case 'Q':
         case 'U':
         case 'W':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case '\"':
         case '#':
         case '$':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'o':
         case '0':
         case '1':
         case 'q':
         case '2':
         case '3':
         case '4':
         case '5':
         case 'u':
         case '6':
         case '7':
         case 'w':
         case '8':
         case '9':
         case 'y':
         case 'z': {
            // SqlSimpleExpression
            match = sqlSimpleExpression$Rule();
            if (! match) {
               // ModelExpression
               match = modelExpression$Rule();
            }
            break;
         }
         case 'p': {
            // BuiltInFunctionCall
            match = builtInFunctionCall$Rule();
            if (! match) {
               // SqlSimpleExpression
               match = sqlSimpleExpression$Rule();
               if (! match) {
                  // SqlUnaryExpression
                  match = sqlUnaryExpression$Rule();
                  if (! match) {
                     // ModelExpression
                     match = modelExpression$Rule();
                  }
               }
            }
            break;
         }
         case 'A':
         case 'a':
         case 'D':
         case 'd':
         case 'E':
         case 'e':
         case 'F':
         case 'f':
         case 'L':
         case 'l':
         case 'M':
         case 'm':
         case 'P':
         case 'R':
         case 'r':
         case 'T':
         case 't':
         case 'V':
         case 'v':
         case 'X':
         case 'x': {
            // BuiltInFunctionCall
            match = builtInFunctionCall$Rule();
            if (! match) {
               // SqlSimpleExpression
               match = sqlSimpleExpression$Rule();
               if (! match) {
                  // ModelExpression
                  match = modelExpression$Rule();
               }
            }
            break;
         }
         case 'C': {
            // SqlCaseExpression
            match = sqlCaseExpression$Rule();
            if (! match) {
               // CursorExpression
               match = cursorExpression$Rule();
               if (! match) {
                  // BuiltInFunctionCall
                  match = builtInFunctionCall$Rule();
                  if (! match) {
                     // SqlSimpleExpression
                     match = sqlSimpleExpression$Rule();
                     if (! match) {
                        // ModelExpression
                        match = modelExpression$Rule();
                     }
                  }
               }
            }
            break;
         }
         case 'S':
         case 's': {
            // Subquery
            match = subquery$Rule();
            if (! match) {
               // BuiltInFunctionCall
               match = builtInFunctionCall$Rule();
               if (! match) {
                  // SqlSimpleExpression
                  match = sqlSimpleExpression$Rule();
                  if (! match) {
                     // SysDate
                     match = sysDate$Rule();
                     if (! match) {
                        // ModelExpression
                        match = modelExpression$Rule();
                     }
                  }
               }
            }
            break;
         }
         case 'c': {
            // SqlCaseExpression
            match = sqlCaseExpression$Rule();
            if (! match) {
               // CursorExpression
               match = cursorExpression$Rule();
               if (! match) {
                  // BuiltInFunctionCall
                  match = builtInFunctionCall$Rule();
                  if (! match) {
                     // SqlSimpleExpression
                     match = sqlSimpleExpression$Rule();
                     if (! match) {
                        // SqlUnaryExpression
                        match = sqlUnaryExpression$Rule();
                        if (! match) {
                           // ModelExpression
                           match = modelExpression$Rule();
                        }
                     }
                  }
               }
            }
            break;
         }
         case '\'': {
            // SqlSimpleExpression
            match = sqlSimpleExpression$Rule();
            break;
         }
         case '(': {
            // ParenthesesSqlExpression
            match = parenthesesSqlExpression$Rule();
            if (! match) {
               // Subquery
               match = subquery$Rule();
            }
            break;
         }
         case ':':
         case '?': {
            // PlaceHolderExpression
            match = placeHolderExpression$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlLeftAtomicExpression$RuleMemoStart = startIndex;
         sqlLeftAtomicExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlLeftAtomicExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_LEFT_ATOMIC_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlLeftAtomicExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlLeftAtomicExpression$RuleMemoStart = startIndex;
         sqlLeftAtomicExpression$RuleMemoEnd = -1;
         sqlLeftAtomicExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DateTimeExpression : (SqlLeftAtomicExpression TimeExpression)
   protected boolean dateTimeExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dateTimeExpression$RuleMemoStart == index) {
         if (dateTimeExpression$RuleMemoStart <= dateTimeExpression$RuleMemoEnd) {
            index = dateTimeExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DATE_TIME_EXPRESSION, dateTimeExpression$RuleMemoStart, dateTimeExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (dateTimeExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(dateTimeExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlLeftAtomicExpression TimeExpression)
      // SqlLeftAtomicExpression
      match = sqlLeftAtomicExpression$Rule();
      if (match) {
         // TimeExpression
         match = timeExpression$Rule();
      }
      if (match) {
         dateTimeExpression$RuleMemoStart = startIndex;
         dateTimeExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            dateTimeExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DATE_TIME_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            dateTimeExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         dateTimeExpression$RuleMemoStart = startIndex;
         dateTimeExpression$RuleMemoEnd = -1;
         dateTimeExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlAtomicExpression : (DateTimeExpression | SqlLeftAtomicExpression)
   protected boolean sqlAtomicExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlAtomicExpression$RuleMemoStart == index) {
         if (sqlAtomicExpression$RuleMemoStart <= sqlAtomicExpression$RuleMemoEnd) {
            index = sqlAtomicExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ATOMIC_EXPRESSION, sqlAtomicExpression$RuleMemoStart, sqlAtomicExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlAtomicExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlAtomicExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (DateTimeExpression | SqlLeftAtomicExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // DateTimeExpression
            match = dateTimeExpression$Rule();
            if (! match) {
               // SqlLeftAtomicExpression
               match = sqlLeftAtomicExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlAtomicExpression$RuleMemoStart = startIndex;
         sqlAtomicExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlAtomicExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ATOMIC_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlAtomicExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlAtomicExpression$RuleMemoStart = startIndex;
         sqlAtomicExpression$RuleMemoEnd = -1;
         sqlAtomicExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlCaseExpression : ("case" TestNoAlpha OptionalSpacing (SqlSearchedCaseExpression | SqlSimpleCaseExpression) SqlCaseExpressionElse? "end" TestNoAlpha OptionalSpacing ("case" TestNoAlpha OptionalSpacing)?)
   protected boolean sqlCaseExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlCaseExpression$RuleMemoStart == index) {
         if (sqlCaseExpression$RuleMemoStart <= sqlCaseExpression$RuleMemoEnd) {
            index = sqlCaseExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_CASE_EXPRESSION, sqlCaseExpression$RuleMemoStart, sqlCaseExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlCaseExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlCaseExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("case" TestNoAlpha OptionalSpacing (SqlSearchedCaseExpression | SqlSimpleCaseExpression) SqlCaseExpressionElse? "end" TestNoAlpha OptionalSpacing ("case" TestNoAlpha OptionalSpacing)?)
      // "case"
      match = ignoreCaseStringMatcher("case", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (SqlSearchedCaseExpression | SqlSimpleCaseExpression)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '\'':
                  case '(':
                  case '+':
                  case '-':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ':':
                  case '?':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // SqlSimpleCaseExpression
                     match = sqlSimpleCaseExpression$Rule();
                     break;
                  }
                  case 'W':
                  case 'w': {
                     // SqlSearchedCaseExpression
                     match = sqlSearchedCaseExpression$Rule();
                     if (! match) {
                        // SqlSimpleCaseExpression
                        match = sqlSimpleCaseExpression$Rule();
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // SqlCaseExpressionElse?
                  // SqlCaseExpressionElse
                  sqlCaseExpressionElse$Rule();
                  // "end"
                  match = ignoreCaseStringMatcher("end", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // ("case" TestNoAlpha OptionalSpacing)?
                           // ("case" TestNoAlpha OptionalSpacing)
                           Node lastNode_1 = currentNode;
                           int lastIndex_1 = index;
                           // "case"
                           match = ignoreCaseStringMatcher("case", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           }
                           match = true;
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         sqlCaseExpression$RuleMemoStart = startIndex;
         sqlCaseExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlCaseExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_CASE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlCaseExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlCaseExpression$RuleMemoStart = startIndex;
         sqlCaseExpression$RuleMemoEnd = -1;
         sqlCaseExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlWhenExpressionThen : ("when" TestNoAlpha OptionalSpacing SqlExpression "then" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean sqlWhenExpressionThen$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing SqlExpression "then" TestNoAlpha OptionalSpacing SqlExpression)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // SqlExpression
                           match = sqlExpression$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_WHEN_EXPRESSION_THEN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlSimpleCaseExpression : (SqlExpression SqlWhenExpressionThen+ "WhenExpressionThenList" TestNoAlpha OptionalSpacing)
   protected boolean sqlSimpleCaseExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlSimpleCaseExpression$RuleMemoStart == index) {
         if (sqlSimpleCaseExpression$RuleMemoStart <= sqlSimpleCaseExpression$RuleMemoEnd) {
            index = sqlSimpleCaseExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_CASE_EXPRESSION, sqlSimpleCaseExpression$RuleMemoStart, sqlSimpleCaseExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlSimpleCaseExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlSimpleCaseExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression SqlWhenExpressionThen+ "WhenExpressionThenList" TestNoAlpha OptionalSpacing)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // SqlWhenExpressionThen+
         // SqlWhenExpressionThen
         match = sqlWhenExpressionThen$Rule();
         if (match) {
            do {
               // SqlWhenExpressionThen
               match = sqlWhenExpressionThen$Rule();
            } while(match);
            match = true;
         }
         if (match) {
            // "WhenExpressionThenList"
            match = ignoreCaseStringMatcher("WhenExpressionThenList", 22);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         sqlSimpleCaseExpression$RuleMemoStart = startIndex;
         sqlSimpleCaseExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlSimpleCaseExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_CASE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlSimpleCaseExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlSimpleCaseExpression$RuleMemoStart = startIndex;
         sqlSimpleCaseExpression$RuleMemoEnd = -1;
         sqlSimpleCaseExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlWhenConditionThen : ("when" TestNoAlpha OptionalSpacing SqlCondition "then" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean sqlWhenConditionThen$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlWhenConditionThen$RuleMemoStart == index) {
         if (sqlWhenConditionThen$RuleMemoStart <= sqlWhenConditionThen$RuleMemoEnd) {
            index = sqlWhenConditionThen$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_WHEN_CONDITION_THEN, sqlWhenConditionThen$RuleMemoStart, sqlWhenConditionThen$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlWhenConditionThen$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlWhenConditionThen$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing SqlCondition "then" TestNoAlpha OptionalSpacing SqlExpression)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlCondition
               match = sqlCondition$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // SqlExpression
                           match = sqlExpression$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         sqlWhenConditionThen$RuleMemoStart = startIndex;
         sqlWhenConditionThen$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlWhenConditionThen$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_WHEN_CONDITION_THEN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlWhenConditionThen$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlWhenConditionThen$RuleMemoStart = startIndex;
         sqlWhenConditionThen$RuleMemoEnd = -1;
         sqlWhenConditionThen$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlSearchedCaseExpression : SqlWhenConditionThen+
   protected boolean sqlSearchedCaseExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlSearchedCaseExpression$RuleMemoStart == index) {
         if (sqlSearchedCaseExpression$RuleMemoStart <= sqlSearchedCaseExpression$RuleMemoEnd) {
            index = sqlSearchedCaseExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SEARCHED_CASE_EXPRESSION, sqlSearchedCaseExpression$RuleMemoStart, sqlSearchedCaseExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlSearchedCaseExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlSearchedCaseExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlWhenConditionThen+
      // SqlWhenConditionThen
      match = sqlWhenConditionThen$Rule();
      if (match) {
         do {
            // SqlWhenConditionThen
            match = sqlWhenConditionThen$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         sqlSearchedCaseExpression$RuleMemoStart = startIndex;
         sqlSearchedCaseExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlSearchedCaseExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SEARCHED_CASE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlSearchedCaseExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlSearchedCaseExpression$RuleMemoStart = startIndex;
         sqlSearchedCaseExpression$RuleMemoEnd = -1;
         sqlSearchedCaseExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlCaseExpressionElse : ("else" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean sqlCaseExpressionElse$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("else" TestNoAlpha OptionalSpacing SqlExpression)
      // "else"
      match = ignoreCaseStringMatcher("else", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_CASE_EXPRESSION_ELSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RowNum : ("rownum" TestNoAlpha OptionalSpacing)
   protected boolean rowNum$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rowNum$RuleMemoStart == index) {
         if (rowNum$RuleMemoStart <= rowNum$RuleMemoEnd) {
            index = rowNum$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_NUM, rowNum$RuleMemoStart, rowNum$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rowNum$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rowNum$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("rownum" TestNoAlpha OptionalSpacing)
      // "rownum"
      match = ignoreCaseStringMatcher("rownum", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         rowNum$RuleMemoStart = startIndex;
         rowNum$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rowNum$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_NUM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rowNum$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rowNum$RuleMemoStart = startIndex;
         rowNum$RuleMemoEnd = -1;
         rowNum$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IdentifiedRowId : (TableName '.' OptionalSpacing "rowid" TestNoAlpha OptionalSpacing)
   protected boolean identifiedRowId$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (identifiedRowId$RuleMemoStart == index) {
         if (identifiedRowId$RuleMemoStart <= identifiedRowId$RuleMemoEnd) {
            index = identifiedRowId$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IDENTIFIED_ROW_ID, identifiedRowId$RuleMemoStart, identifiedRowId$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (identifiedRowId$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(identifiedRowId$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TableName '.' OptionalSpacing "rowid" TestNoAlpha OptionalSpacing)
      // TableName
      match = tableName$Rule();
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "rowid"
               match = ignoreCaseStringMatcher("rowid", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         identifiedRowId$RuleMemoStart = startIndex;
         identifiedRowId$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            identifiedRowId$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IDENTIFIED_ROW_ID, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            identifiedRowId$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         identifiedRowId$RuleMemoStart = startIndex;
         identifiedRowId$RuleMemoEnd = -1;
         identifiedRowId$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RowId : (IdentifiedRowId | ("rowid" TestNoAlpha OptionalSpacing))
   protected boolean rowId$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rowId$RuleMemoStart == index) {
         if (rowId$RuleMemoStart <= rowId$RuleMemoEnd) {
            index = rowId$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_ID, rowId$RuleMemoStart, rowId$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rowId$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rowId$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (IdentifiedRowId | ("rowid" TestNoAlpha OptionalSpacing))
      // IdentifiedRowId
      match = identifiedRowId$Rule();
      if (! match) {
         // ("rowid" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "rowid"
         match = ignoreCaseStringMatcher("rowid", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      }
      if (match) {
         rowId$RuleMemoStart = startIndex;
         rowId$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rowId$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_ID, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rowId$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rowId$RuleMemoStart = startIndex;
         rowId$RuleMemoEnd = -1;
         rowId$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Level : ("level" TestNoAlpha OptionalSpacing)
   protected boolean level$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (level$RuleMemoStart == index) {
         if (level$RuleMemoStart <= level$RuleMemoEnd) {
            index = level$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LEVEL, level$RuleMemoStart, level$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (level$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(level$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("level" TestNoAlpha OptionalSpacing)
      // "level"
      match = ignoreCaseStringMatcher("level", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         level$RuleMemoStart = startIndex;
         level$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            level$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LEVEL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            level$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         level$RuleMemoStart = startIndex;
         level$RuleMemoEnd = -1;
         level$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlOuterJoinObject : (SqlObjectIdentifier OuterJoinSign)
   protected boolean sqlOuterJoinObject$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlOuterJoinObject$RuleMemoStart == index) {
         if (sqlOuterJoinObject$RuleMemoStart <= sqlOuterJoinObject$RuleMemoEnd) {
            index = sqlOuterJoinObject$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_OUTER_JOIN_OBJECT, sqlOuterJoinObject$RuleMemoStart, sqlOuterJoinObject$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlOuterJoinObject$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlOuterJoinObject$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlObjectIdentifier OuterJoinSign)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // OuterJoinSign
         match = outerJoinSign$Rule();
      }
      if (match) {
         sqlOuterJoinObject$RuleMemoStart = startIndex;
         sqlOuterJoinObject$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlOuterJoinObject$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_OUTER_JOIN_OBJECT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlOuterJoinObject$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlOuterJoinObject$RuleMemoStart = startIndex;
         sqlOuterJoinObject$RuleMemoEnd = -1;
         sqlOuterJoinObject$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlSimpleExpression : (SqlLiteral | RowNum | RowId | Level | SqlOuterJoinObject | SqlObjectIdentifier)
   protected boolean sqlSimpleExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlSimpleExpression$RuleMemoStart == index) {
         if (sqlSimpleExpression$RuleMemoStart <= sqlSimpleExpression$RuleMemoEnd) {
            index = sqlSimpleExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_EXPRESSION, sqlSimpleExpression$RuleMemoStart, sqlSimpleExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlSimpleExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlSimpleExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlLiteral | RowNum | RowId | Level | SqlOuterJoinObject | SqlObjectIdentifier)
      switch(buffer.getChar(index)) {
         case '\'':
         case '+':
         case '-': {
            // SqlLiteral
            match = sqlLiteral$Rule();
            break;
         }
         case 'L':
         case 'l': {
            // RowId
            match = rowId$Rule();
            if (! match) {
               // Level
               match = level$Rule();
               if (! match) {
                  // SqlOuterJoinObject
                  match = sqlOuterJoinObject$Rule();
                  if (! match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case 'D':
         case 'd':
         case 'I':
         case 'i':
         case 'N':
         case 'n':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case 'T':
         case 't':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // SqlLiteral
            match = sqlLiteral$Rule();
            if (! match) {
               // RowId
               match = rowId$Rule();
               if (! match) {
                  // SqlOuterJoinObject
                  match = sqlOuterJoinObject$Rule();
                  if (! match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'C':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'J':
         case 'K':
         case 'M':
         case 'O':
         case 'P':
         case 'Q':
         case 'S':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case '\"':
         case 'c':
         case '#':
         case '$':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'o':
         case 'p':
         case 'q':
         case 's':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // RowId
            match = rowId$Rule();
            if (! match) {
               // SqlOuterJoinObject
               match = sqlOuterJoinObject$Rule();
               if (! match) {
                  // SqlObjectIdentifier
                  match = sqlObjectIdentifier$Rule();
               }
            }
            break;
         }
         case 'R':
         case 'r': {
            // RowNum
            match = rowNum$Rule();
            if (! match) {
               // RowId
               match = rowId$Rule();
               if (! match) {
                  // SqlOuterJoinObject
                  match = sqlOuterJoinObject$Rule();
                  if (! match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlSimpleExpression$RuleMemoStart = startIndex;
         sqlSimpleExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlSimpleExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlSimpleExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlSimpleExpression$RuleMemoStart = startIndex;
         sqlSimpleExpression$RuleMemoEnd = -1;
         sqlSimpleExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SysDate : ("sysdate" TestNoAlpha OptionalSpacing)
   protected boolean sysDate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sysDate$RuleMemoStart == index) {
         if (sysDate$RuleMemoStart <= sysDate$RuleMemoEnd) {
            index = sysDate$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SYS_DATE, sysDate$RuleMemoStart, sysDate$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sysDate$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sysDate$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("sysdate" TestNoAlpha OptionalSpacing)
      // "sysdate"
      match = ignoreCaseStringMatcher("sysdate", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         sysDate$RuleMemoStart = startIndex;
         sysDate$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sysDate$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SYS_DATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sysDate$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sysDate$RuleMemoStart = startIndex;
         sysDate$RuleMemoEnd = -1;
         sysDate$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TimeExpression : (("at" TestNoAlpha OptionalSpacing (("local" TestNoAlpha OptionalSpacing) | ("time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing (("dbtimezone" TestNoAlpha OptionalSpacing) | ("sessiontimezone" TestNoAlpha OptionalSpacing) | StringLiteral | SqlExpression)))) | ("DatetimeExpression" TestNoAlpha OptionalSpacing) | (("day" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "second" TestNoAlpha OptionalSpacing (('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing) "Second" TestNoAlpha OptionalSpacing)?) | ("year" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)) | ("IntervalExpression" TestNoAlpha OptionalSpacing))
   protected boolean timeExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (timeExpression$RuleMemoStart == index) {
         if (timeExpression$RuleMemoStart <= timeExpression$RuleMemoEnd) {
            index = timeExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TIME_EXPRESSION, timeExpression$RuleMemoStart, timeExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (timeExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(timeExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("at" TestNoAlpha OptionalSpacing (("local" TestNoAlpha OptionalSpacing) | ("time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing (("dbtimezone" TestNoAlpha OptionalSpacing) | ("sessiontimezone" TestNoAlpha OptionalSpacing) | StringLiteral | SqlExpression)))) | ("DatetimeExpression" TestNoAlpha OptionalSpacing) | (("day" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "second" TestNoAlpha OptionalSpacing (('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing) "Second" TestNoAlpha OptionalSpacing)?) | ("year" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)) | ("IntervalExpression" TestNoAlpha OptionalSpacing))
      // ("at" TestNoAlpha OptionalSpacing (("local" TestNoAlpha OptionalSpacing) | ("time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing (("dbtimezone" TestNoAlpha OptionalSpacing) | ("sessiontimezone" TestNoAlpha OptionalSpacing) | StringLiteral | SqlExpression))))
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "at"
      match = ignoreCaseStringMatcher("at", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("local" TestNoAlpha OptionalSpacing) | ("time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing (("dbtimezone" TestNoAlpha OptionalSpacing) | ("sessiontimezone" TestNoAlpha OptionalSpacing) | StringLiteral | SqlExpression)))
               // ("local" TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // "local"
               match = ignoreCaseStringMatcher("local", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               if (! match) {
                  // ("time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing (("dbtimezone" TestNoAlpha OptionalSpacing) | ("sessiontimezone" TestNoAlpha OptionalSpacing) | StringLiteral | SqlExpression))
                  Node lastNode_3 = currentNode;
                  int lastIndex_3 = index;
                  // "time"
                  match = ignoreCaseStringMatcher("time", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "zone"
                           match = ignoreCaseStringMatcher("zone", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // (("dbtimezone" TestNoAlpha OptionalSpacing) | ("sessiontimezone" TestNoAlpha OptionalSpacing) | StringLiteral | SqlExpression)
                                    // ("dbtimezone" TestNoAlpha OptionalSpacing)
                                    Node lastNode_4 = currentNode;
                                    int lastIndex_4 = index;
                                    // "dbtimezone"
                                    match = ignoreCaseStringMatcher("dbtimezone", 10);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_4;
                                             lastNode_4.setSibling(null);
                                             currentNode = lastNode_4;
                                          }
                                       } else {
                                          index = lastIndex_4;
                                          lastNode_4.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // ("sessiontimezone" TestNoAlpha OptionalSpacing)
                                       Node lastNode_5 = currentNode;
                                       int lastIndex_5 = index;
                                       // "sessiontimezone"
                                       match = ignoreCaseStringMatcher("sessiontimezone", 15);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_5;
                                                lastNode_5.setSibling(null);
                                                currentNode = lastNode_5;
                                             }
                                          } else {
                                             index = lastIndex_5;
                                             lastNode_5.setSibling(null);
                                          }
                                       }
                                       if (! match) {
                                          // StringLiteral
                                          match = stringLiteral$Rule();
                                          if (! match) {
                                             // SqlExpression
                                             match = sqlExpression$Rule();
                                          }
                                       }
                                    }
                                    if (! match) {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                       currentNode = lastNode_3;
                                    }
                                 } else {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  }
               }
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("DatetimeExpression" TestNoAlpha OptionalSpacing)
         Node lastNode_6 = currentNode;
         int lastIndex_6 = index;
         // "DatetimeExpression"
         match = ignoreCaseStringMatcher("DatetimeExpression", 18);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_6;
                  lastNode_6.setSibling(null);
                  currentNode = lastNode_6;
               }
            } else {
               index = lastIndex_6;
               lastNode_6.setSibling(null);
            }
         }
         if (! match) {
            // (("day" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "second" TestNoAlpha OptionalSpacing (('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing) "Second" TestNoAlpha OptionalSpacing)?) | ("year" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing))
            // ("day" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "second" TestNoAlpha OptionalSpacing (('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing) "Second" TestNoAlpha OptionalSpacing)?)
            Node lastNode_7 = currentNode;
            int lastIndex_7 = index;
            // "day"
            match = ignoreCaseStringMatcher("day", 3);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // '('
                     match = charMatcher('(');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // '0'-'9'
                           match = charRangeMatcher('0', '9');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "to"
                                       match = ignoreCaseStringMatcher("to", 2);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // "second"
                                                match = ignoreCaseStringMatcher("second", 6);
                                                if (match) {
                                                   // TestNoAlpha
                                                   match = testNoAlpha$Rule();
                                                   if (match) {
                                                      // OptionalSpacing
                                                      match = optionalSpacing$Rule();
                                                      if (match) {
                                                         // (('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing) "Second" TestNoAlpha OptionalSpacing)?
                                                         // (('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing) "Second" TestNoAlpha OptionalSpacing)
                                                         Node lastNode_8 = currentNode;
                                                         int lastIndex_8 = index;
                                                         // ('(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing)
                                                         Node lastNode_9 = currentNode;
                                                         int lastIndex_9 = index;
                                                         // '('
                                                         match = charMatcher('(');
                                                         if (match) {
                                                            // OptionalSpacing
                                                            match = optionalSpacing$Rule();
                                                            if (match) {
                                                               // '0'-'9'
                                                               match = charRangeMatcher('0', '9');
                                                               if (match) {
                                                                  // OptionalSpacing
                                                                  match = optionalSpacing$Rule();
                                                                  if (match) {
                                                                     // ')'
                                                                     match = charMatcher(')');
                                                                     if (match) {
                                                                        // OptionalSpacing
                                                                        match = optionalSpacing$Rule();
                                                                        if (! match) {
                                                                           index = lastIndex_9;
                                                                           lastNode_9.setSibling(null);
                                                                           currentNode = lastNode_9;
                                                                        }
                                                                     } else {
                                                                        index = lastIndex_9;
                                                                        lastNode_9.setSibling(null);
                                                                     }
                                                                  } else {
                                                                     index = lastIndex_9;
                                                                     lastNode_9.setSibling(null);
                                                                  }
                                                               } else {
                                                                  index = lastIndex_9;
                                                                  lastNode_9.setSibling(null);
                                                               }
                                                            } else {
                                                               index = lastIndex_9;
                                                               lastNode_9.setSibling(null);
                                                            }
                                                         }
                                                         if (match) {
                                                            // "Second"
                                                            match = ignoreCaseStringMatcher("Second", 6);
                                                            if (match) {
                                                               // TestNoAlpha
                                                               match = testNoAlpha$Rule();
                                                               if (match) {
                                                                  // OptionalSpacing
                                                                  match = optionalSpacing$Rule();
                                                                  if (! match) {
                                                                     index = lastIndex_8;
                                                                     lastNode_8.setSibling(null);
                                                                     currentNode = lastNode_8;
                                                                  }
                                                               } else {
                                                                  index = lastIndex_8;
                                                                  lastNode_8.setSibling(null);
                                                               }
                                                            } else {
                                                               index = lastIndex_8;
                                                               lastNode_8.setSibling(null);
                                                            }
                                                         }
                                                         match = true;
                                                      } else {
                                                         index = lastIndex_7;
                                                         lastNode_7.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_7;
                                                      lastNode_7.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_7;
                                                   lastNode_7.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_7;
                                                lastNode_7.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_7;
                                             lastNode_7.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_7;
                                          lastNode_7.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_7;
                                       lastNode_7.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                              }
                           } else {
                              index = lastIndex_7;
                              lastNode_7.setSibling(null);
                           }
                        } else {
                           index = lastIndex_7;
                           lastNode_7.setSibling(null);
                        }
                     } else {
                        index = lastIndex_7;
                        lastNode_7.setSibling(null);
                     }
                  } else {
                     index = lastIndex_7;
                     lastNode_7.setSibling(null);
                  }
               } else {
                  index = lastIndex_7;
                  lastNode_7.setSibling(null);
               }
            }
            if (! match) {
               // ("year" TestNoAlpha OptionalSpacing '(' OptionalSpacing '0'-'9' OptionalSpacing ')' OptionalSpacing "to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)
               Node lastNode_10 = currentNode;
               int lastIndex_10 = index;
               // "year"
               match = ignoreCaseStringMatcher("year", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // '0'-'9'
                              match = charRangeMatcher('0', '9');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // "to"
                                          match = ignoreCaseStringMatcher("to", 2);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // "month"
                                                   match = ignoreCaseStringMatcher("month", 5);
                                                   if (match) {
                                                      // TestNoAlpha
                                                      match = testNoAlpha$Rule();
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (! match) {
                                                            index = lastIndex_10;
                                                            lastNode_10.setSibling(null);
                                                            currentNode = lastNode_10;
                                                         }
                                                      } else {
                                                         index = lastIndex_10;
                                                         lastNode_10.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_10;
                                                      lastNode_10.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_10;
                                                   lastNode_10.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_10;
                                                lastNode_10.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_10;
                                             lastNode_10.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_10;
                                          lastNode_10.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_10;
                                       lastNode_10.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_10;
                                    lastNode_10.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_10;
                                 lastNode_10.setSibling(null);
                              }
                           } else {
                              index = lastIndex_10;
                              lastNode_10.setSibling(null);
                           }
                        } else {
                           index = lastIndex_10;
                           lastNode_10.setSibling(null);
                        }
                     } else {
                        index = lastIndex_10;
                        lastNode_10.setSibling(null);
                     }
                  } else {
                     index = lastIndex_10;
                     lastNode_10.setSibling(null);
                  }
               }
            }
            if (! match) {
               // ("IntervalExpression" TestNoAlpha OptionalSpacing)
               Node lastNode_11 = currentNode;
               int lastIndex_11 = index;
               // "IntervalExpression"
               match = ignoreCaseStringMatcher("IntervalExpression", 18);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_11;
                        lastNode_11.setSibling(null);
                        currentNode = lastNode_11;
                     }
                  } else {
                     index = lastIndex_11;
                     lastNode_11.setSibling(null);
                  }
               }
            }
         }
      }
      if (match) {
         timeExpression$RuleMemoStart = startIndex;
         timeExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            timeExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TIME_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            timeExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         timeExpression$RuleMemoStart = startIndex;
         timeExpression$RuleMemoEnd = -1;
         timeExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OuterJoinSign : ('(' OptionalSpacing '+' OptionalSpacing ')' OptionalSpacing)
   protected boolean outerJoinSign$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (outerJoinSign$RuleMemoStart == index) {
         if (outerJoinSign$RuleMemoStart <= outerJoinSign$RuleMemoEnd) {
            index = outerJoinSign$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OUTER_JOIN_SIGN, outerJoinSign$RuleMemoStart, outerJoinSign$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (outerJoinSign$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(outerJoinSign$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing '+' OptionalSpacing ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '+'
            match = charMatcher('+');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ')'
                  match = charMatcher(')');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         outerJoinSign$RuleMemoStart = startIndex;
         outerJoinSign$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            outerJoinSign$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OUTER_JOIN_SIGN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            outerJoinSign$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         outerJoinSign$RuleMemoStart = startIndex;
         outerJoinSign$RuleMemoEnd = -1;
         outerJoinSign$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrderByFunctionClause : ("order" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing OrderByArguments)
   protected boolean orderByFunctionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (orderByFunctionClause$RuleMemoStart == index) {
         if (orderByFunctionClause$RuleMemoStart <= orderByFunctionClause$RuleMemoEnd) {
            index = orderByFunctionClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_FUNCTION_CLAUSE, orderByFunctionClause$RuleMemoStart, orderByFunctionClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (orderByFunctionClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(orderByFunctionClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("order" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing OrderByArguments)
      // "order"
      match = ignoreCaseStringMatcher("order", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // OrderByArguments
                        match = orderByArguments$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         orderByFunctionClause$RuleMemoStart = startIndex;
         orderByFunctionClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            orderByFunctionClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_FUNCTION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            orderByFunctionClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         orderByFunctionClause$RuleMemoStart = startIndex;
         orderByFunctionClause$RuleMemoEnd = -1;
         orderByFunctionClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Avg : ("avg" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean avg$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (avg$RuleMemoStart == index) {
         if (avg$RuleMemoStart <= avg$RuleMemoEnd) {
            index = avg$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.AVG, avg$RuleMemoStart, avg$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (avg$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(avg$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("avg" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "avg"
      match = ignoreCaseStringMatcher("avg", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (DistinctExpression | AllExpression | SqlExpression)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '(':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlExpression
                           match = sqlExpression$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        case 'D':
                        case 'd': {
                           // DistinctExpression
                           match = distinctExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         avg$RuleMemoStart = startIndex;
         avg$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            avg$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AVG, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            avg$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         avg$RuleMemoStart = startIndex;
         avg$RuleMemoEnd = -1;
         avg$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Cast : ("cast" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("multiset" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing) | ("MultiSet" TestNoAlpha OptionalSpacing) | SqlExpression) AsDataType ')' OptionalSpacing)
   protected boolean cast$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cast$RuleMemoStart == index) {
         if (cast$RuleMemoStart <= cast$RuleMemoEnd) {
            index = cast$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CAST, cast$RuleMemoStart, cast$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cast$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cast$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cast" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("multiset" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing) | ("MultiSet" TestNoAlpha OptionalSpacing) | SqlExpression) AsDataType ')' OptionalSpacing)
      // "cast"
      match = ignoreCaseStringMatcher("cast", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (("multiset" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing) | ("MultiSet" TestNoAlpha OptionalSpacing) | SqlExpression)
                     // ("multiset" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // "multiset"
                     match = ignoreCaseStringMatcher("multiset", 8);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // '('
                              match = charMatcher('(');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // Subquery
                                    match = subquery$Rule();
                                    if (match) {
                                       // ')'
                                       match = charMatcher(')');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                             currentNode = lastNode_1;
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("MultiSet" TestNoAlpha OptionalSpacing)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "MultiSet"
                        match = ignoreCaseStringMatcher("MultiSet", 8);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (! match) {
                           // SqlExpression
                           match = sqlExpression$Rule();
                        }
                     }
                     if (match) {
                        // AsDataType
                        match = asDataType$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         cast$RuleMemoStart = startIndex;
         cast$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cast$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CAST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cast$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cast$RuleMemoStart = startIndex;
         cast$RuleMemoEnd = -1;
         cast$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Chr : ("chr" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression (("using" TestNoAlpha OptionalSpacing "nchar_cs" TestNoAlpha OptionalSpacing) "UsingNCharCS" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
   protected boolean chr$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (chr$RuleMemoStart == index) {
         if (chr$RuleMemoStart <= chr$RuleMemoEnd) {
            index = chr$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CHR, chr$RuleMemoStart, chr$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (chr$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(chr$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("chr" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression (("using" TestNoAlpha OptionalSpacing "nchar_cs" TestNoAlpha OptionalSpacing) "UsingNCharCS" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
      // "chr"
      match = ignoreCaseStringMatcher("chr", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // (("using" TestNoAlpha OptionalSpacing "nchar_cs" TestNoAlpha OptionalSpacing) "UsingNCharCS" TestNoAlpha OptionalSpacing)?
                        // (("using" TestNoAlpha OptionalSpacing "nchar_cs" TestNoAlpha OptionalSpacing) "UsingNCharCS" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // ("using" TestNoAlpha OptionalSpacing "nchar_cs" TestNoAlpha OptionalSpacing)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "using"
                        match = ignoreCaseStringMatcher("using", 5);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "nchar_cs"
                                 match = ignoreCaseStringMatcher("nchar_cs", 8);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_2;
                                          lastNode_2.setSibling(null);
                                          currentNode = lastNode_2;
                                       }
                                    } else {
                                       index = lastIndex_2;
                                       lastNode_2.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "UsingNCharCS"
                           match = ignoreCaseStringMatcher("UsingNCharCS", 12);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         chr$RuleMemoStart = startIndex;
         chr$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            chr$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CHR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            chr$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         chr$RuleMemoStart = startIndex;
         chr$RuleMemoEnd = -1;
         chr$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MiningAttributeClause : ("using" TestNoAlpha OptionalSpacing SelectList)
   protected boolean miningAttributeClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (miningAttributeClause$RuleMemoStart == index) {
         if (miningAttributeClause$RuleMemoStart <= miningAttributeClause$RuleMemoEnd) {
            index = miningAttributeClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MINING_ATTRIBUTE_CLAUSE, miningAttributeClause$RuleMemoStart, miningAttributeClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (miningAttributeClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(miningAttributeClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("using" TestNoAlpha OptionalSpacing SelectList)
      // "using"
      match = ignoreCaseStringMatcher("using", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SelectList
               match = selectList$Rule();
            }
         }
      }
      if (match) {
         miningAttributeClause$RuleMemoStart = startIndex;
         miningAttributeClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            miningAttributeClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MINING_ATTRIBUTE_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            miningAttributeClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         miningAttributeClause$RuleMemoStart = startIndex;
         miningAttributeClause$RuleMemoEnd = -1;
         miningAttributeClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClusterId : ("cluster_id" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName MiningAttributeClause ')' OptionalSpacing)
   protected boolean clusterId$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (clusterId$RuleMemoStart == index) {
         if (clusterId$RuleMemoStart <= clusterId$RuleMemoEnd) {
            index = clusterId$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CLUSTER_ID, clusterId$RuleMemoStart, clusterId$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (clusterId$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(clusterId$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cluster_id" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName MiningAttributeClause ')' OptionalSpacing)
      // "cluster_id"
      match = ignoreCaseStringMatcher("cluster_id", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         clusterId$RuleMemoStart = startIndex;
         clusterId$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            clusterId$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CLUSTER_ID, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            clusterId$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         clusterId$RuleMemoStart = startIndex;
         clusterId$RuleMemoEnd = -1;
         clusterId$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClusterProbability : ("cluster_probability" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "ClusterId" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
   protected boolean clusterProbability$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (clusterProbability$RuleMemoStart == index) {
         if (clusterProbability$RuleMemoStart <= clusterProbability$RuleMemoEnd) {
            index = clusterProbability$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CLUSTER_PROBABILITY, clusterProbability$RuleMemoStart, clusterProbability$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (clusterProbability$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(clusterProbability$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cluster_probability" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "ClusterId" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
      // "cluster_probability"
      match = ignoreCaseStringMatcher("cluster_probability", 19);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "ClusterId" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "ClusterId" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "ClusterId"
                           match = ignoreCaseStringMatcher("ClusterId", 9);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         clusterProbability$RuleMemoStart = startIndex;
         clusterProbability$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            clusterProbability$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CLUSTER_PROBABILITY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            clusterProbability$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         clusterProbability$RuleMemoStart = startIndex;
         clusterProbability$RuleMemoEnd = -1;
         clusterProbability$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ClusterSet : ("cluster_set" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
   protected boolean clusterSet$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (clusterSet$RuleMemoStart == index) {
         if (clusterSet$RuleMemoStart <= clusterSet$RuleMemoEnd) {
            index = clusterSet$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CLUSTER_SET, clusterSet$RuleMemoStart, clusterSet$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (clusterSet$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(clusterSet$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cluster_set" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
      // "cluster_set"
      match = ignoreCaseStringMatcher("cluster_set", 11);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "TopN"
                           match = ignoreCaseStringMatcher("TopN", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                        // ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (match) {
                           // "CutOff"
                           match = ignoreCaseStringMatcher("CutOff", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                    currentNode = lastNode_3;
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         clusterSet$RuleMemoStart = startIndex;
         clusterSet$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            clusterSet$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CLUSTER_SET, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            clusterSet$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         clusterSet$RuleMemoStart = startIndex;
         clusterSet$RuleMemoEnd = -1;
         clusterSet$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Corr : ("corr" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean corr$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (corr$RuleMemoStart == index) {
         if (corr$RuleMemoStart <= corr$RuleMemoEnd) {
            index = corr$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CORR, corr$RuleMemoStart, corr$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (corr$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(corr$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("corr" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "corr"
      match = ignoreCaseStringMatcher("corr", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // AnalyticOverClause?
                                 // AnalyticOverClause
                                 analyticOverClause$Rule();
                                 match = true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         corr$RuleMemoStart = startIndex;
         corr$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            corr$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CORR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            corr$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         corr$RuleMemoStart = startIndex;
         corr$RuleMemoEnd = -1;
         corr$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DistinctExpression : ("distinct" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean distinctExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (distinctExpression$RuleMemoStart == index) {
         if (distinctExpression$RuleMemoStart <= distinctExpression$RuleMemoEnd) {
            index = distinctExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DISTINCT_EXPRESSION, distinctExpression$RuleMemoStart, distinctExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (distinctExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(distinctExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("distinct" TestNoAlpha OptionalSpacing SqlExpression)
      // "distinct"
      match = ignoreCaseStringMatcher("distinct", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
         }
      }
      if (match) {
         distinctExpression$RuleMemoStart = startIndex;
         distinctExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            distinctExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DISTINCT_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            distinctExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         distinctExpression$RuleMemoStart = startIndex;
         distinctExpression$RuleMemoEnd = -1;
         distinctExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AllExpression : ("all" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean allExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (allExpression$RuleMemoStart == index) {
         if (allExpression$RuleMemoStart <= allExpression$RuleMemoEnd) {
            index = allExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ALL_EXPRESSION, allExpression$RuleMemoStart, allExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (allExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(allExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("all" TestNoAlpha OptionalSpacing SqlExpression)
      // "all"
      match = ignoreCaseStringMatcher("all", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
         }
      }
      if (match) {
         allExpression$RuleMemoStart = startIndex;
         allExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            allExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ALL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            allExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         allExpression$RuleMemoStart = startIndex;
         allExpression$RuleMemoEnd = -1;
         allExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Count : ("count" TestNoAlpha OptionalSpacing '(' OptionalSpacing (('*' OptionalSpacing) | DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean count$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (count$RuleMemoStart == index) {
         if (count$RuleMemoStart <= count$RuleMemoEnd) {
            index = count$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COUNT, count$RuleMemoStart, count$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (count$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(count$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("count" TestNoAlpha OptionalSpacing '(' OptionalSpacing (('*' OptionalSpacing) | DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "count"
      match = ignoreCaseStringMatcher("count", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (('*' OptionalSpacing) | DistinctExpression | AllExpression | SqlExpression)
                     // ('*' OptionalSpacing)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // '*'
                     match = charMatcher('*');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     }
                     if (! match) {
                        // DistinctExpression
                        match = distinctExpression$Rule();
                        if (! match) {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         count$RuleMemoStart = startIndex;
         count$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            count$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COUNT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            count$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         count$RuleMemoStart = startIndex;
         count$RuleMemoEnd = -1;
         count$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CovarPop : ("covar_pop" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean covarPop$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (covarPop$RuleMemoStart == index) {
         if (covarPop$RuleMemoStart <= covarPop$RuleMemoEnd) {
            index = covarPop$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COVAR_POP, covarPop$RuleMemoStart, covarPop$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (covarPop$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(covarPop$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("covar_pop" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "covar_pop"
      match = ignoreCaseStringMatcher("covar_pop", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // AnalyticOverClause?
                                 // AnalyticOverClause
                                 analyticOverClause$Rule();
                                 match = true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         covarPop$RuleMemoStart = startIndex;
         covarPop$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            covarPop$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COVAR_POP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            covarPop$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         covarPop$RuleMemoStart = startIndex;
         covarPop$RuleMemoEnd = -1;
         covarPop$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CovarSamp : ("covar_samp" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean covarSamp$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (covarSamp$RuleMemoStart == index) {
         if (covarSamp$RuleMemoStart <= covarSamp$RuleMemoEnd) {
            index = covarSamp$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COVAR_SAMP, covarSamp$RuleMemoStart, covarSamp$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (covarSamp$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(covarSamp$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("covar_samp" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "covar_samp"
      match = ignoreCaseStringMatcher("covar_samp", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // AnalyticOverClause?
                                 // AnalyticOverClause
                                 analyticOverClause$Rule();
                                 match = true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         covarSamp$RuleMemoStart = startIndex;
         covarSamp$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            covarSamp$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COVAR_SAMP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            covarSamp$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         covarSamp$RuleMemoStart = startIndex;
         covarSamp$RuleMemoEnd = -1;
         covarSamp$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CumeDistAnalytic : ("cume_dist" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean cumeDistAnalytic$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cumeDistAnalytic$RuleMemoStart == index) {
         if (cumeDistAnalytic$RuleMemoStart <= cumeDistAnalytic$RuleMemoEnd) {
            index = cumeDistAnalytic$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CUME_DIST_ANALYTIC, cumeDistAnalytic$RuleMemoStart, cumeDistAnalytic$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cumeDistAnalytic$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cumeDistAnalytic$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cume_dist" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "cume_dist"
      match = ignoreCaseStringMatcher("cume_dist", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "over"
                           match = ignoreCaseStringMatcher("over", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // QueryPartitionClause?
                                          // QueryPartitionClause
                                          queryPartitionClause$Rule();
                                          // OrderByClause
                                          match = orderByClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         cumeDistAnalytic$RuleMemoStart = startIndex;
         cumeDistAnalytic$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cumeDistAnalytic$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CUME_DIST_ANALYTIC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cumeDistAnalytic$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cumeDistAnalytic$RuleMemoStart = startIndex;
         cumeDistAnalytic$RuleMemoEnd = -1;
         cumeDistAnalytic$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CumeDistAggregate : ("cume_dist" TestNoAlpha OptionalSpacing SqlParameters "with" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
   protected boolean cumeDistAggregate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cumeDistAggregate$RuleMemoStart == index) {
         if (cumeDistAggregate$RuleMemoStart <= cumeDistAggregate$RuleMemoEnd) {
            index = cumeDistAggregate$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CUME_DIST_AGGREGATE, cumeDistAggregate$RuleMemoStart, cumeDistAggregate$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cumeDistAggregate$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cumeDistAggregate$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cume_dist" TestNoAlpha OptionalSpacing SqlParameters "with" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
      // "cume_dist"
      match = ignoreCaseStringMatcher("cume_dist", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlParameters
               match = sqlParameters$Rule();
               if (match) {
                  // "with"
                  match = ignoreCaseStringMatcher("with", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "group"
                           match = ignoreCaseStringMatcher("group", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // OrderByFunctionClause
                                          match = orderByFunctionClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         cumeDistAggregate$RuleMemoStart = startIndex;
         cumeDistAggregate$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cumeDistAggregate$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CUME_DIST_AGGREGATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cumeDistAggregate$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cumeDistAggregate$RuleMemoStart = startIndex;
         cumeDistAggregate$RuleMemoEnd = -1;
         cumeDistAggregate$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Decompose : ("decompose" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((("canonical" | "compatibility") TestNoAlpha OptionalSpacing) "DecomposeMode" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
   protected boolean decompose$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (decompose$RuleMemoStart == index) {
         if (decompose$RuleMemoStart <= decompose$RuleMemoEnd) {
            index = decompose$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DECOMPOSE, decompose$RuleMemoStart, decompose$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (decompose$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(decompose$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("decompose" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((("canonical" | "compatibility") TestNoAlpha OptionalSpacing) "DecomposeMode" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
      // "decompose"
      match = ignoreCaseStringMatcher("decompose", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ((("canonical" | "compatibility") TestNoAlpha OptionalSpacing) "DecomposeMode" TestNoAlpha OptionalSpacing)?
                        // ((("canonical" | "compatibility") TestNoAlpha OptionalSpacing) "DecomposeMode" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (("canonical" | "compatibility") TestNoAlpha OptionalSpacing)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ("canonical" | "compatibility")
                        int startIndex_3 = index;
                        if (buffer.matchChar(index, 'c') || buffer.matchChar(index, 'C')) {
                           ++index;
                           // ("ompatibility" | "anonical")
                           switch(buffer.getChar(index)) {
                              case 'o':
                              case 'O': {
                                 ++index;
                                 // "mpatibility"
                                 if (match = ignoreCaseStringTest("mpatibility", 11)) {
                                    index += 11;
                                 }
                                 break;
                              }
                              case 'a':
                              case 'A': {
                                 ++index;
                                 // "nonical"
                                 if (match = ignoreCaseStringTest("nonical", 7)) {
                                    index += 7;
                                 }
                                 break;
                              }
                              default: {
                                 match = false;
                              }
                           }
                        } else {
                           match = false;
                        }
                        if (! match) {
                           index = startIndex_3;
                        } else if(! currentRuleIsAtomic) {
                           currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
                           currentNode = currentNode.getSibling();
                        }
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "DecomposeMode"
                           match = ignoreCaseStringMatcher("DecomposeMode", 13);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         decompose$RuleMemoStart = startIndex;
         decompose$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            decompose$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DECOMPOSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            decompose$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         decompose$RuleMemoStart = startIndex;
         decompose$RuleMemoEnd = -1;
         decompose$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DenseRankAggregate : ("dense_rank" TestNoAlpha OptionalSpacing SqlParameters "with" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
   protected boolean denseRankAggregate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (denseRankAggregate$RuleMemoStart == index) {
         if (denseRankAggregate$RuleMemoStart <= denseRankAggregate$RuleMemoEnd) {
            index = denseRankAggregate$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DENSE_RANK_AGGREGATE, denseRankAggregate$RuleMemoStart, denseRankAggregate$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (denseRankAggregate$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(denseRankAggregate$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("dense_rank" TestNoAlpha OptionalSpacing SqlParameters "with" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
      // "dense_rank"
      match = ignoreCaseStringMatcher("dense_rank", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlParameters
               match = sqlParameters$Rule();
               if (match) {
                  // "with"
                  match = ignoreCaseStringMatcher("with", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "group"
                           match = ignoreCaseStringMatcher("group", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // OrderByFunctionClause
                                          match = orderByFunctionClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         denseRankAggregate$RuleMemoStart = startIndex;
         denseRankAggregate$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            denseRankAggregate$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DENSE_RANK_AGGREGATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            denseRankAggregate$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         denseRankAggregate$RuleMemoStart = startIndex;
         denseRankAggregate$RuleMemoEnd = -1;
         denseRankAggregate$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DenseRankAnalytic : ("dense_rank" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean denseRankAnalytic$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (denseRankAnalytic$RuleMemoStart == index) {
         if (denseRankAnalytic$RuleMemoStart <= denseRankAnalytic$RuleMemoEnd) {
            index = denseRankAnalytic$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DENSE_RANK_ANALYTIC, denseRankAnalytic$RuleMemoStart, denseRankAnalytic$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (denseRankAnalytic$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(denseRankAnalytic$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("dense_rank" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "dense_rank"
      match = ignoreCaseStringMatcher("dense_rank", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "over"
                           match = ignoreCaseStringMatcher("over", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // QueryPartitionClause?
                                          // QueryPartitionClause
                                          queryPartitionClause$Rule();
                                          // OrderByClause
                                          match = orderByClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         denseRankAnalytic$RuleMemoStart = startIndex;
         denseRankAnalytic$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            denseRankAnalytic$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DENSE_RANK_ANALYTIC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            denseRankAnalytic$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         denseRankAnalytic$RuleMemoStart = startIndex;
         denseRankAnalytic$RuleMemoEnd = -1;
         denseRankAnalytic$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OverQueryPartitionClause : ("over" TestNoAlpha OptionalSpacing QueryPartitionClause)
   protected boolean overQueryPartitionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("over" TestNoAlpha OptionalSpacing QueryPartitionClause)
      // "over"
      match = ignoreCaseStringMatcher("over", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // QueryPartitionClause
               match = queryPartitionClause$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OVER_QUERY_PARTITION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OverParenthesesQueryPartitionClause : ("over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause ')' OptionalSpacing)
   protected boolean overParenthesesQueryPartitionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (overParenthesesQueryPartitionClause$RuleMemoStart == index) {
         if (overParenthesesQueryPartitionClause$RuleMemoStart <= overParenthesesQueryPartitionClause$RuleMemoEnd) {
            index = overParenthesesQueryPartitionClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OVER_PARENTHESES_QUERY_PARTITION_CLAUSE, overParenthesesQueryPartitionClause$RuleMemoStart, overParenthesesQueryPartitionClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (overParenthesesQueryPartitionClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(overParenthesesQueryPartitionClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause ')' OptionalSpacing)
      // "over"
      match = ignoreCaseStringMatcher("over", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // QueryPartitionClause
                     match = queryPartitionClause$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         overParenthesesQueryPartitionClause$RuleMemoStart = startIndex;
         overParenthesesQueryPartitionClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            overParenthesesQueryPartitionClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OVER_PARENTHESES_QUERY_PARTITION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            overParenthesesQueryPartitionClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         overParenthesesQueryPartitionClause$RuleMemoStart = startIndex;
         overParenthesesQueryPartitionClause$RuleMemoEnd = -1;
         overParenthesesQueryPartitionClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DenseRankClause : ("keep" TestNoAlpha OptionalSpacing '(' OptionalSpacing "dense_rank" TestNoAlpha OptionalSpacing (("first" | "last") TestNoAlpha OptionalSpacing) OrderByFunctionClause OverQueryPartitionClause? ')' OptionalSpacing)
   protected boolean denseRankClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("keep" TestNoAlpha OptionalSpacing '(' OptionalSpacing "dense_rank" TestNoAlpha OptionalSpacing (("first" | "last") TestNoAlpha OptionalSpacing) OrderByFunctionClause OverQueryPartitionClause? ')' OptionalSpacing)
      // "keep"
      match = ignoreCaseStringMatcher("keep", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // "dense_rank"
                     match = ignoreCaseStringMatcher("dense_rank", 10);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // (("first" | "last") TestNoAlpha OptionalSpacing)
                              // ("first" | "last")
                              int startIndex_1 = index;
                              switch(buffer.getChar(index)) {
                                 case 'f':
                                 case 'F': {
                                    ++index;
                                    // "irst"
                                    if (match = ignoreCaseStringTest("irst", 4)) {
                                       index += 4;
                                    }
                                    break;
                                 }
                                 case 'l':
                                 case 'L': {
                                    ++index;
                                    // "ast"
                                    if (match = ignoreCaseStringTest("ast", 3)) {
                                       index += 3;
                                    }
                                    break;
                                 }
                                 default: {
                                    match = false;
                                 }
                              }
                              if (! match) {
                                 index = startIndex_1;
                              } else if(! currentRuleIsAtomic) {
                                 currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                                 currentNode = currentNode.getSibling();
                              }
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                              if (match) {
                                 // OrderByFunctionClause
                                 match = orderByFunctionClause$Rule();
                                 if (match) {
                                    // OverQueryPartitionClause?
                                    // OverQueryPartitionClause
                                    overQueryPartitionClause$Rule();
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DENSE_RANK_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DataToExtract : (("year" | "month" | "day" | "hour" | "minute" | "second" | "timezone_hour" | "timezone_minute" | "timezone_region" | "timezone_abbr") TestNoAlpha OptionalSpacing)
   protected boolean dataToExtract$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("year" | "month" | "day" | "hour" | "minute" | "second" | "timezone_hour" | "timezone_minute" | "timezone_region" | "timezone_abbr") TestNoAlpha OptionalSpacing)
      // ("year" | "month" | "day" | "hour" | "minute" | "second" | "timezone_hour" | "timezone_minute" | "timezone_region" | "timezone_abbr")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'h':
         case 'H': {
            ++index;
            // "our"
            if (match = ignoreCaseStringTest("our", 3)) {
               index += 3;
            }
            break;
         }
         case 'y':
         case 'Y': {
            ++index;
            // "ear"
            if (match = ignoreCaseStringTest("ear", 3)) {
               index += 3;
            }
            break;
         }
         case 's':
         case 'S': {
            ++index;
            // "econd"
            if (match = ignoreCaseStringTest("econd", 5)) {
               index += 5;
            }
            break;
         }
         case 'd':
         case 'D': {
            ++index;
            // "ay"
            if (match = ignoreCaseStringTest("ay", 2)) {
               index += 2;
            }
            break;
         }
         case 't':
         case 'T': {
            ++index;
            // ("imezone_minute" | "imezone_region" | "imezone_hour" | "imezone_abbr")
            if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
               ++index;
               // ("mezone_minute" | "mezone_region" | "mezone_hour" | "mezone_abbr")
               if (buffer.matchChar(index, 'm') || buffer.matchChar(index, 'M')) {
                  ++index;
                  // ("ezone_minute" | "ezone_region" | "ezone_hour" | "ezone_abbr")
                  if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                     ++index;
                     // ("zone_minute" | "zone_region" | "zone_hour" | "zone_abbr")
                     if (buffer.matchChar(index, 'z') || buffer.matchChar(index, 'Z')) {
                        ++index;
                        // ("one_minute" | "one_region" | "one_hour" | "one_abbr")
                        if (buffer.matchChar(index, 'o') || buffer.matchChar(index, 'O')) {
                           ++index;
                           // ("ne_minute" | "ne_region" | "ne_hour" | "ne_abbr")
                           if (buffer.matchChar(index, 'n') || buffer.matchChar(index, 'N')) {
                              ++index;
                              // ("e_minute" | "e_region" | "e_hour" | "e_abbr")
                              if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                                 ++index;
                                 // ("_minute" | "_region" | "_hour" | "_abbr")
                                 if (buffer.matchChar(index, '_')) {
                                    ++index;
                                    // ("minute" | "region" | "hour" | "abbr")
                                    switch(buffer.getChar(index)) {
                                       case 'h':
                                       case 'H': {
                                          ++index;
                                          // "our"
                                          if (match = ignoreCaseStringTest("our", 3)) {
                                             index += 3;
                                          }
                                          break;
                                       }
                                       case 'a':
                                       case 'A': {
                                          ++index;
                                          // "bbr"
                                          if (match = ignoreCaseStringTest("bbr", 3)) {
                                             index += 3;
                                          }
                                          break;
                                       }
                                       case 'r':
                                       case 'R': {
                                          ++index;
                                          // "egion"
                                          if (match = ignoreCaseStringTest("egion", 5)) {
                                             index += 5;
                                          }
                                          break;
                                       }
                                       case 'm':
                                       case 'M': {
                                          ++index;
                                          // "inute"
                                          if (match = ignoreCaseStringTest("inute", 5)) {
                                             index += 5;
                                          }
                                          break;
                                       }
                                       default: {
                                          match = false;
                                       }
                                    }
                                 } else {
                                    match = false;
                                 }
                              } else {
                                 match = false;
                              }
                           } else {
                              match = false;
                           }
                        } else {
                           match = false;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
               } else {
                  match = false;
               }
            } else {
               match = false;
            }
            break;
         }
         case 'm':
         case 'M': {
            ++index;
            // ("inute" | "onth")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // "nth"
                  if (match = ignoreCaseStringTest("nth", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "nute"
                  if (match = ignoreCaseStringTest("nute", 4)) {
                     index += 4;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DATA_TO_EXTRACT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Extract : ("extract" TestNoAlpha OptionalSpacing '(' OptionalSpacing DataToExtract "from" TestNoAlpha OptionalSpacing SqlExpression ')' OptionalSpacing)
   protected boolean extract$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (extract$RuleMemoStart == index) {
         if (extract$RuleMemoStart <= extract$RuleMemoEnd) {
            index = extract$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.EXTRACT, extract$RuleMemoStart, extract$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (extract$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(extract$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("extract" TestNoAlpha OptionalSpacing '(' OptionalSpacing DataToExtract "from" TestNoAlpha OptionalSpacing SqlExpression ')' OptionalSpacing)
      // "extract"
      match = ignoreCaseStringMatcher("extract", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // DataToExtract
                     match = dataToExtract$Rule();
                     if (match) {
                        // "from"
                        match = ignoreCaseStringMatcher("from", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlExpression
                                 match = sqlExpression$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         extract$RuleMemoStart = startIndex;
         extract$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            extract$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXTRACT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            extract$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         extract$RuleMemoStart = startIndex;
         extract$RuleMemoEnd = -1;
         extract$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FeatureId : ("feature_id" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier MiningAttributeClause ')' OptionalSpacing)
   protected boolean featureId$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (featureId$RuleMemoStart == index) {
         if (featureId$RuleMemoStart <= featureId$RuleMemoEnd) {
            index = featureId$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FEATURE_ID, featureId$RuleMemoStart, featureId$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (featureId$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(featureId$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("feature_id" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier MiningAttributeClause ')' OptionalSpacing)
      // "feature_id"
      match = ignoreCaseStringMatcher("feature_id", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                     if (match) {
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         featureId$RuleMemoStart = startIndex;
         featureId$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            featureId$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FEATURE_ID, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            featureId$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         featureId$RuleMemoStart = startIndex;
         featureId$RuleMemoEnd = -1;
         featureId$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FeatureSet : ("feature_set" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
   protected boolean featureSet$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (featureSet$RuleMemoStart == index) {
         if (featureSet$RuleMemoStart <= featureSet$RuleMemoEnd) {
            index = featureSet$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FEATURE_SET, featureSet$RuleMemoStart, featureSet$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (featureSet$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(featureSet$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("feature_set" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
      // "feature_set"
      match = ignoreCaseStringMatcher("feature_set", 11);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "TopN" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "TopN"
                           match = ignoreCaseStringMatcher("TopN", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                        // ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (match) {
                           // "CutOff"
                           match = ignoreCaseStringMatcher("CutOff", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                    currentNode = lastNode_3;
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         featureSet$RuleMemoStart = startIndex;
         featureSet$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            featureSet$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FEATURE_SET, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            featureSet$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         featureSet$RuleMemoStart = startIndex;
         featureSet$RuleMemoEnd = -1;
         featureSet$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FeatureValue : ("feature_value" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "FeatureId" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
   protected boolean featureValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (featureValue$RuleMemoStart == index) {
         if (featureValue$RuleMemoStart <= featureValue$RuleMemoEnd) {
            index = featureValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FEATURE_VALUE, featureValue$RuleMemoStart, featureValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (featureValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(featureValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("feature_value" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "FeatureId" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
      // "feature_value"
      match = ignoreCaseStringMatcher("feature_value", 13);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "FeatureId" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "FeatureId" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "FeatureId"
                           match = ignoreCaseStringMatcher("FeatureId", 9);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         featureValue$RuleMemoStart = startIndex;
         featureValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            featureValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FEATURE_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            featureValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         featureValue$RuleMemoStart = startIndex;
         featureValue$RuleMemoEnd = -1;
         featureValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IgnoreNulls : ("ignore" TestNoAlpha OptionalSpacing "nulls" TestNoAlpha OptionalSpacing)
   protected boolean ignoreNulls$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (ignoreNulls$RuleMemoStart == index) {
         if (ignoreNulls$RuleMemoStart <= ignoreNulls$RuleMemoEnd) {
            index = ignoreNulls$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IGNORE_NULLS, ignoreNulls$RuleMemoStart, ignoreNulls$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (ignoreNulls$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(ignoreNulls$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("ignore" TestNoAlpha OptionalSpacing "nulls" TestNoAlpha OptionalSpacing)
      // "ignore"
      match = ignoreCaseStringMatcher("ignore", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "nulls"
               match = ignoreCaseStringMatcher("nulls", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         ignoreNulls$RuleMemoStart = startIndex;
         ignoreNulls$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            ignoreNulls$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IGNORE_NULLS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            ignoreNulls$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         ignoreNulls$RuleMemoStart = startIndex;
         ignoreNulls$RuleMemoEnd = -1;
         ignoreNulls$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FirstValue : ("first_value" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression IgnoreNulls? ')' OptionalSpacing AnalyticOverClause)
   protected boolean firstValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (firstValue$RuleMemoStart == index) {
         if (firstValue$RuleMemoStart <= firstValue$RuleMemoEnd) {
            index = firstValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FIRST_VALUE, firstValue$RuleMemoStart, firstValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (firstValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(firstValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("first_value" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression IgnoreNulls? ')' OptionalSpacing AnalyticOverClause)
      // "first_value"
      match = ignoreCaseStringMatcher("first_value", 11);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // IgnoreNulls?
                        // IgnoreNulls
                        ignoreNulls$Rule();
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause
                              match = analyticOverClause$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         firstValue$RuleMemoStart = startIndex;
         firstValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            firstValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FIRST_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            firstValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         firstValue$RuleMemoStart = startIndex;
         firstValue$RuleMemoEnd = -1;
         firstValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Lag : ("lag" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((',' OptionalSpacing SqlExpression) "OffSet" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "Default" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean lag$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (lag$RuleMemoStart == index) {
         if (lag$RuleMemoStart <= lag$RuleMemoEnd) {
            index = lag$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LAG, lag$RuleMemoStart, lag$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (lag$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(lag$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("lag" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((',' OptionalSpacing SqlExpression) "OffSet" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "Default" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "lag"
      match = ignoreCaseStringMatcher("lag", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "OffSet" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "OffSet" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "OffSet"
                           match = ignoreCaseStringMatcher("OffSet", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                        // ((',' OptionalSpacing SqlExpression) "Default" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "Default" TestNoAlpha OptionalSpacing)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (match) {
                           // "Default"
                           match = ignoreCaseStringMatcher("Default", 7);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                    currentNode = lastNode_3;
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "over"
                              match = ignoreCaseStringMatcher("over", 4);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // '('
                                       match = charMatcher('(');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // QueryPartitionClause?
                                             // QueryPartitionClause
                                             queryPartitionClause$Rule();
                                             // OrderByClause
                                             match = orderByClause$Rule();
                                             if (match) {
                                                // ')'
                                                match = charMatcher(')');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         lag$RuleMemoStart = startIndex;
         lag$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lag$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LAG, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            lag$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         lag$RuleMemoStart = startIndex;
         lag$RuleMemoEnd = -1;
         lag$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LastValue : ("last_value" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression IgnoreNulls? ')' OptionalSpacing AnalyticOverClause)
   protected boolean lastValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (lastValue$RuleMemoStart == index) {
         if (lastValue$RuleMemoStart <= lastValue$RuleMemoEnd) {
            index = lastValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LAST_VALUE, lastValue$RuleMemoStart, lastValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (lastValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(lastValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("last_value" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression IgnoreNulls? ')' OptionalSpacing AnalyticOverClause)
      // "last_value"
      match = ignoreCaseStringMatcher("last_value", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // IgnoreNulls?
                        // IgnoreNulls
                        ignoreNulls$Rule();
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause
                              match = analyticOverClause$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         lastValue$RuleMemoStart = startIndex;
         lastValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lastValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LAST_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            lastValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         lastValue$RuleMemoStart = startIndex;
         lastValue$RuleMemoEnd = -1;
         lastValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Lead : ("lead" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((',' OptionalSpacing IntegerLiteral) "OffSet" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing IntegerLiteral) "Default" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean lead$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (lead$RuleMemoStart == index) {
         if (lead$RuleMemoStart <= lead$RuleMemoEnd) {
            index = lead$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LEAD, lead$RuleMemoStart, lead$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (lead$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(lead$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("lead" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((',' OptionalSpacing IntegerLiteral) "OffSet" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing IntegerLiteral) "Default" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "lead"
      match = ignoreCaseStringMatcher("lead", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ((',' OptionalSpacing IntegerLiteral) "OffSet" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing IntegerLiteral) "OffSet" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing IntegerLiteral)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // IntegerLiteral
                              match = integerLiteral$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "OffSet"
                           match = ignoreCaseStringMatcher("OffSet", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                        // ((',' OptionalSpacing IntegerLiteral) "Default" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing IntegerLiteral) "Default" TestNoAlpha OptionalSpacing)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // (',' OptionalSpacing IntegerLiteral)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // IntegerLiteral
                              match = integerLiteral$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (match) {
                           // "Default"
                           match = ignoreCaseStringMatcher("Default", 7);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                    currentNode = lastNode_3;
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "over"
                              match = ignoreCaseStringMatcher("over", 4);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // '('
                                       match = charMatcher('(');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // QueryPartitionClause?
                                             // QueryPartitionClause
                                             queryPartitionClause$Rule();
                                             // OrderByClause
                                             match = orderByClause$Rule();
                                             if (match) {
                                                // ')'
                                                match = charMatcher(')');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         lead$RuleMemoStart = startIndex;
         lead$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lead$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LEAD, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            lead$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         lead$RuleMemoStart = startIndex;
         lead$RuleMemoEnd = -1;
         lead$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ListAgg : ("listagg" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((',' OptionalSpacing StringLiteral) "Delimiter" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByClause ')' OptionalSpacing OverQueryPartitionClause?)
   protected boolean listAgg$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (listAgg$RuleMemoStart == index) {
         if (listAgg$RuleMemoStart <= listAgg$RuleMemoEnd) {
            index = listAgg$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LIST_AGG, listAgg$RuleMemoStart, listAgg$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (listAgg$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(listAgg$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("listagg" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ((',' OptionalSpacing StringLiteral) "Delimiter" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByClause ')' OptionalSpacing OverQueryPartitionClause?)
      // "listagg"
      match = ignoreCaseStringMatcher("listagg", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ((',' OptionalSpacing StringLiteral) "Delimiter" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing StringLiteral) "Delimiter" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing StringLiteral)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // StringLiteral
                              match = stringLiteral$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "Delimiter"
                           match = ignoreCaseStringMatcher("Delimiter", 9);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "within"
                              match = ignoreCaseStringMatcher("within", 6);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "group"
                                       match = ignoreCaseStringMatcher("group", 5);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // '('
                                                match = charMatcher('(');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // OrderByClause
                                                      match = orderByClause$Rule();
                                                      if (match) {
                                                         // ')'
                                                         match = charMatcher(')');
                                                         if (match) {
                                                            // OptionalSpacing
                                                            match = optionalSpacing$Rule();
                                                            if (match) {
                                                               // OverQueryPartitionClause?
                                                               // OverQueryPartitionClause
                                                               overQueryPartitionClause$Rule();
                                                               match = true;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         listAgg$RuleMemoStart = startIndex;
         listAgg$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            listAgg$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIST_AGG, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            listAgg$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         listAgg$RuleMemoStart = startIndex;
         listAgg$RuleMemoEnd = -1;
         listAgg$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Max : ("max" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean max$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (max$RuleMemoStart == index) {
         if (max$RuleMemoStart <= max$RuleMemoEnd) {
            index = max$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MAX, max$RuleMemoStart, max$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (max$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(max$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("max" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "max"
      match = ignoreCaseStringMatcher("max", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (DistinctExpression | AllExpression | SqlExpression)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '(':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlExpression
                           match = sqlExpression$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        case 'D':
                        case 'd': {
                           // DistinctExpression
                           match = distinctExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         max$RuleMemoStart = startIndex;
         max$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            max$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MAX, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            max$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         max$RuleMemoStart = startIndex;
         max$RuleMemoEnd = -1;
         max$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Median : ("median" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing OverParenthesesQueryPartitionClause?)
   protected boolean median$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (median$RuleMemoStart == index) {
         if (median$RuleMemoStart <= median$RuleMemoEnd) {
            index = median$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MEDIAN, median$RuleMemoStart, median$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (median$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(median$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("median" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing OverParenthesesQueryPartitionClause?)
      // "median"
      match = ignoreCaseStringMatcher("median", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // OverParenthesesQueryPartitionClause?
                              // OverParenthesesQueryPartitionClause
                              overParenthesesQueryPartitionClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         median$RuleMemoStart = startIndex;
         median$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            median$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MEDIAN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            median$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         median$RuleMemoStart = startIndex;
         median$RuleMemoEnd = -1;
         median$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Min : ("min" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean min$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (min$RuleMemoStart == index) {
         if (min$RuleMemoStart <= min$RuleMemoEnd) {
            index = min$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MIN, min$RuleMemoStart, min$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (min$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(min$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("min" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "min"
      match = ignoreCaseStringMatcher("min", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (DistinctExpression | AllExpression | SqlExpression)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '(':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlExpression
                           match = sqlExpression$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        case 'D':
                        case 'd': {
                           // DistinctExpression
                           match = distinctExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         min$RuleMemoStart = startIndex;
         min$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            min$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MIN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            min$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         min$RuleMemoStart = startIndex;
         min$RuleMemoEnd = -1;
         min$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NTile : ("ntile" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean nTile$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (nTile$RuleMemoStart == index) {
         if (nTile$RuleMemoStart <= nTile$RuleMemoEnd) {
            index = nTile$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NTILE, nTile$RuleMemoStart, nTile$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (nTile$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(nTile$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("ntile" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "ntile"
      match = ignoreCaseStringMatcher("ntile", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "over"
                              match = ignoreCaseStringMatcher("over", 4);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // '('
                                       match = charMatcher('(');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // QueryPartitionClause?
                                             // QueryPartitionClause
                                             queryPartitionClause$Rule();
                                             // OrderByClause
                                             match = orderByClause$Rule();
                                             if (match) {
                                                // ')'
                                                match = charMatcher(')');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         nTile$RuleMemoStart = startIndex;
         nTile$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            nTile$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NTILE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            nTile$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         nTile$RuleMemoStart = startIndex;
         nTile$RuleMemoEnd = -1;
         nTile$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PercentRankAggregate : ("percent_rank" TestNoAlpha OptionalSpacing SqlParameters "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
   protected boolean percentRankAggregate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (percentRankAggregate$RuleMemoStart == index) {
         if (percentRankAggregate$RuleMemoStart <= percentRankAggregate$RuleMemoEnd) {
            index = percentRankAggregate$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENT_RANK_AGGREGATE, percentRankAggregate$RuleMemoStart, percentRankAggregate$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (percentRankAggregate$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(percentRankAggregate$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("percent_rank" TestNoAlpha OptionalSpacing SqlParameters "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
      // "percent_rank"
      match = ignoreCaseStringMatcher("percent_rank", 12);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlParameters
               match = sqlParameters$Rule();
               if (match) {
                  // "within"
                  match = ignoreCaseStringMatcher("within", 6);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "group"
                           match = ignoreCaseStringMatcher("group", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // OrderByFunctionClause
                                          match = orderByFunctionClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         percentRankAggregate$RuleMemoStart = startIndex;
         percentRankAggregate$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            percentRankAggregate$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENT_RANK_AGGREGATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            percentRankAggregate$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         percentRankAggregate$RuleMemoStart = startIndex;
         percentRankAggregate$RuleMemoEnd = -1;
         percentRankAggregate$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PercentRankAnalytic : ("percent_rank" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean percentRankAnalytic$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (percentRankAnalytic$RuleMemoStart == index) {
         if (percentRankAnalytic$RuleMemoStart <= percentRankAnalytic$RuleMemoEnd) {
            index = percentRankAnalytic$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENT_RANK_ANALYTIC, percentRankAnalytic$RuleMemoStart, percentRankAnalytic$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (percentRankAnalytic$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(percentRankAnalytic$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("percent_rank" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "percent_rank"
      match = ignoreCaseStringMatcher("percent_rank", 12);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "over"
                           match = ignoreCaseStringMatcher("over", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // QueryPartitionClause?
                                          // QueryPartitionClause
                                          queryPartitionClause$Rule();
                                          // OrderByClause
                                          match = orderByClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         percentRankAnalytic$RuleMemoStart = startIndex;
         percentRankAnalytic$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            percentRankAnalytic$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENT_RANK_ANALYTIC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            percentRankAnalytic$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         percentRankAnalytic$RuleMemoStart = startIndex;
         percentRankAnalytic$RuleMemoEnd = -1;
         percentRankAnalytic$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PercentileCont : ("percentile_cont" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing "order" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing SqlExpression ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing OverParenthesesQueryPartitionClause?)
   protected boolean percentileCont$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (percentileCont$RuleMemoStart == index) {
         if (percentileCont$RuleMemoStart <= percentileCont$RuleMemoEnd) {
            index = percentileCont$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENTILE_CONT, percentileCont$RuleMemoStart, percentileCont$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (percentileCont$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(percentileCont$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("percentile_cont" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing "order" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing SqlExpression ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing OverParenthesesQueryPartitionClause?)
      // "percentile_cont"
      match = ignoreCaseStringMatcher("percentile_cont", 15);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "within"
                              match = ignoreCaseStringMatcher("within", 6);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "group"
                                       match = ignoreCaseStringMatcher("group", 5);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // '('
                                                match = charMatcher('(');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // "order"
                                                      match = ignoreCaseStringMatcher("order", 5);
                                                      if (match) {
                                                         // TestNoAlpha
                                                         match = testNoAlpha$Rule();
                                                         if (match) {
                                                            // OptionalSpacing
                                                            match = optionalSpacing$Rule();
                                                            if (match) {
                                                               // "by"
                                                               match = ignoreCaseStringMatcher("by", 2);
                                                               if (match) {
                                                                  // TestNoAlpha
                                                                  match = testNoAlpha$Rule();
                                                                  if (match) {
                                                                     // OptionalSpacing
                                                                     match = optionalSpacing$Rule();
                                                                     if (match) {
                                                                        // SqlExpression
                                                                        match = sqlExpression$Rule();
                                                                        if (match) {
                                                                           // ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)?
                                                                           // ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)
                                                                           Node lastNode_1 = currentNode;
                                                                           int lastIndex_1 = index;
                                                                           // (("asc" | "desc") TestNoAlpha OptionalSpacing)
                                                                           Node lastNode_2 = currentNode;
                                                                           int lastIndex_2 = index;
                                                                           // ("asc" | "desc")
                                                                           int startIndex_3 = index;
                                                                           switch(buffer.getChar(index)) {
                                                                              case 'a':
                                                                              case 'A': {
                                                                                 ++index;
                                                                                 // "sc"
                                                                                 if (match = ignoreCaseStringTest("sc", 2)) {
                                                                                    index += 2;
                                                                                 }
                                                                                 break;
                                                                              }
                                                                              case 'd':
                                                                              case 'D': {
                                                                                 ++index;
                                                                                 // "esc"
                                                                                 if (match = ignoreCaseStringTest("esc", 3)) {
                                                                                    index += 3;
                                                                                 }
                                                                                 break;
                                                                              }
                                                                              default: {
                                                                                 match = false;
                                                                              }
                                                                           }
                                                                           if (! match) {
                                                                              index = startIndex_3;
                                                                           } else if(! currentRuleIsAtomic) {
                                                                              currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
                                                                              currentNode = currentNode.getSibling();
                                                                           }
                                                                           if (match) {
                                                                              // TestNoAlpha
                                                                              match = testNoAlpha$Rule();
                                                                              if (match) {
                                                                                 // OptionalSpacing
                                                                                 match = optionalSpacing$Rule();
                                                                                 if (! match) {
                                                                                    index = lastIndex_2;
                                                                                    lastNode_2.setSibling(null);
                                                                                    currentNode = lastNode_2;
                                                                                 }
                                                                              } else {
                                                                                 index = lastIndex_2;
                                                                                 lastNode_2.setSibling(null);
                                                                              }
                                                                           }
                                                                           if (match) {
                                                                              // "AscDesc"
                                                                              match = ignoreCaseStringMatcher("AscDesc", 7);
                                                                              if (match) {
                                                                                 // TestNoAlpha
                                                                                 match = testNoAlpha$Rule();
                                                                                 if (match) {
                                                                                    // OptionalSpacing
                                                                                    match = optionalSpacing$Rule();
                                                                                    if (! match) {
                                                                                       index = lastIndex_1;
                                                                                       lastNode_1.setSibling(null);
                                                                                       currentNode = lastNode_1;
                                                                                    }
                                                                                 } else {
                                                                                    index = lastIndex_1;
                                                                                    lastNode_1.setSibling(null);
                                                                                 }
                                                                              } else {
                                                                                 index = lastIndex_1;
                                                                                 lastNode_1.setSibling(null);
                                                                              }
                                                                           }
                                                                           // ')'
                                                                           match = charMatcher(')');
                                                                           if (match) {
                                                                              // OptionalSpacing
                                                                              match = optionalSpacing$Rule();
                                                                              if (match) {
                                                                                 // OverParenthesesQueryPartitionClause?
                                                                                 // OverParenthesesQueryPartitionClause
                                                                                 overParenthesesQueryPartitionClause$Rule();
                                                                                 match = true;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         percentileCont$RuleMemoStart = startIndex;
         percentileCont$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            percentileCont$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENTILE_CONT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            percentileCont$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         percentileCont$RuleMemoStart = startIndex;
         percentileCont$RuleMemoEnd = -1;
         percentileCont$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PercentileDisc : ("percentile_disc" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing "order" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing SqlExpression ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing OverParenthesesQueryPartitionClause?)
   protected boolean percentileDisc$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (percentileDisc$RuleMemoStart == index) {
         if (percentileDisc$RuleMemoStart <= percentileDisc$RuleMemoEnd) {
            index = percentileDisc$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENTILE_DISC, percentileDisc$RuleMemoStart, percentileDisc$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (percentileDisc$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(percentileDisc$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("percentile_disc" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing "order" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing SqlExpression ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing OverParenthesesQueryPartitionClause?)
      // "percentile_disc"
      match = ignoreCaseStringMatcher("percentile_disc", 15);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "within"
                              match = ignoreCaseStringMatcher("within", 6);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "group"
                                       match = ignoreCaseStringMatcher("group", 5);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // '('
                                                match = charMatcher('(');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // "order"
                                                      match = ignoreCaseStringMatcher("order", 5);
                                                      if (match) {
                                                         // TestNoAlpha
                                                         match = testNoAlpha$Rule();
                                                         if (match) {
                                                            // OptionalSpacing
                                                            match = optionalSpacing$Rule();
                                                            if (match) {
                                                               // "by"
                                                               match = ignoreCaseStringMatcher("by", 2);
                                                               if (match) {
                                                                  // TestNoAlpha
                                                                  match = testNoAlpha$Rule();
                                                                  if (match) {
                                                                     // OptionalSpacing
                                                                     match = optionalSpacing$Rule();
                                                                     if (match) {
                                                                        // SqlExpression
                                                                        match = sqlExpression$Rule();
                                                                        if (match) {
                                                                           // ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)?
                                                                           // ((("asc" | "desc") TestNoAlpha OptionalSpacing) "AscDesc" TestNoAlpha OptionalSpacing)
                                                                           Node lastNode_1 = currentNode;
                                                                           int lastIndex_1 = index;
                                                                           // (("asc" | "desc") TestNoAlpha OptionalSpacing)
                                                                           Node lastNode_2 = currentNode;
                                                                           int lastIndex_2 = index;
                                                                           // ("asc" | "desc")
                                                                           int startIndex_3 = index;
                                                                           switch(buffer.getChar(index)) {
                                                                              case 'a':
                                                                              case 'A': {
                                                                                 ++index;
                                                                                 // "sc"
                                                                                 if (match = ignoreCaseStringTest("sc", 2)) {
                                                                                    index += 2;
                                                                                 }
                                                                                 break;
                                                                              }
                                                                              case 'd':
                                                                              case 'D': {
                                                                                 ++index;
                                                                                 // "esc"
                                                                                 if (match = ignoreCaseStringTest("esc", 3)) {
                                                                                    index += 3;
                                                                                 }
                                                                                 break;
                                                                              }
                                                                              default: {
                                                                                 match = false;
                                                                              }
                                                                           }
                                                                           if (! match) {
                                                                              index = startIndex_3;
                                                                           } else if(! currentRuleIsAtomic) {
                                                                              currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
                                                                              currentNode = currentNode.getSibling();
                                                                           }
                                                                           if (match) {
                                                                              // TestNoAlpha
                                                                              match = testNoAlpha$Rule();
                                                                              if (match) {
                                                                                 // OptionalSpacing
                                                                                 match = optionalSpacing$Rule();
                                                                                 if (! match) {
                                                                                    index = lastIndex_2;
                                                                                    lastNode_2.setSibling(null);
                                                                                    currentNode = lastNode_2;
                                                                                 }
                                                                              } else {
                                                                                 index = lastIndex_2;
                                                                                 lastNode_2.setSibling(null);
                                                                              }
                                                                           }
                                                                           if (match) {
                                                                              // "AscDesc"
                                                                              match = ignoreCaseStringMatcher("AscDesc", 7);
                                                                              if (match) {
                                                                                 // TestNoAlpha
                                                                                 match = testNoAlpha$Rule();
                                                                                 if (match) {
                                                                                    // OptionalSpacing
                                                                                    match = optionalSpacing$Rule();
                                                                                    if (! match) {
                                                                                       index = lastIndex_1;
                                                                                       lastNode_1.setSibling(null);
                                                                                       currentNode = lastNode_1;
                                                                                    }
                                                                                 } else {
                                                                                    index = lastIndex_1;
                                                                                    lastNode_1.setSibling(null);
                                                                                 }
                                                                              } else {
                                                                                 index = lastIndex_1;
                                                                                 lastNode_1.setSibling(null);
                                                                              }
                                                                           }
                                                                           // ')'
                                                                           match = charMatcher(')');
                                                                           if (match) {
                                                                              // OptionalSpacing
                                                                              match = optionalSpacing$Rule();
                                                                              if (match) {
                                                                                 // OverParenthesesQueryPartitionClause?
                                                                                 // OverParenthesesQueryPartitionClause
                                                                                 overParenthesesQueryPartitionClause$Rule();
                                                                                 match = true;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         percentileDisc$RuleMemoStart = startIndex;
         percentileDisc$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            percentileDisc$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PERCENTILE_DISC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            percentileDisc$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         percentileDisc$RuleMemoStart = startIndex;
         percentileDisc$RuleMemoEnd = -1;
         percentileDisc$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CostMatrixClauseValues : ('(' OptionalSpacing SqlExpressionList ')' OptionalSpacing "values" TestNoAlpha OptionalSpacing '(' OptionalSpacing ParenthesesSqlExpressionList ')' OptionalSpacing)
   protected boolean costMatrixClauseValues$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (costMatrixClauseValues$RuleMemoStart == index) {
         if (costMatrixClauseValues$RuleMemoStart <= costMatrixClauseValues$RuleMemoEnd) {
            index = costMatrixClauseValues$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COST_MATRIX_CLAUSE_VALUES, costMatrixClauseValues$RuleMemoStart, costMatrixClauseValues$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (costMatrixClauseValues$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(costMatrixClauseValues$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing SqlExpressionList ')' OptionalSpacing "values" TestNoAlpha OptionalSpacing '(' OptionalSpacing ParenthesesSqlExpressionList ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlExpressionList
            match = sqlExpressionList$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // "values"
                     match = ignoreCaseStringMatcher("values", 6);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // '('
                              match = charMatcher('(');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // ParenthesesSqlExpressionList
                                    match = parenthesesSqlExpressionList$Rule();
                                    if (match) {
                                       // ')'
                                       match = charMatcher(')');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         costMatrixClauseValues$RuleMemoStart = startIndex;
         costMatrixClauseValues$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            costMatrixClauseValues$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COST_MATRIX_CLAUSE_VALUES, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            costMatrixClauseValues$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         costMatrixClauseValues$RuleMemoStart = startIndex;
         costMatrixClauseValues$RuleMemoEnd = -1;
         costMatrixClauseValues$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CostMatrixClauseModel : ("model" TestNoAlpha OptionalSpacing ("auto" TestNoAlpha OptionalSpacing)? "Auto" TestNoAlpha OptionalSpacing)
   protected boolean costMatrixClauseModel$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (costMatrixClauseModel$RuleMemoStart == index) {
         if (costMatrixClauseModel$RuleMemoStart <= costMatrixClauseModel$RuleMemoEnd) {
            index = costMatrixClauseModel$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COST_MATRIX_CLAUSE_MODEL, costMatrixClauseModel$RuleMemoStart, costMatrixClauseModel$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (costMatrixClauseModel$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(costMatrixClauseModel$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("model" TestNoAlpha OptionalSpacing ("auto" TestNoAlpha OptionalSpacing)? "Auto" TestNoAlpha OptionalSpacing)
      // "model"
      match = ignoreCaseStringMatcher("model", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("auto" TestNoAlpha OptionalSpacing)?
               // ("auto" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "auto"
               match = ignoreCaseStringMatcher("auto", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // "Auto"
               match = ignoreCaseStringMatcher("Auto", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         costMatrixClauseModel$RuleMemoStart = startIndex;
         costMatrixClauseModel$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            costMatrixClauseModel$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COST_MATRIX_CLAUSE_MODEL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            costMatrixClauseModel$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         costMatrixClauseModel$RuleMemoStart = startIndex;
         costMatrixClauseModel$RuleMemoEnd = -1;
         costMatrixClauseModel$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CostMatrixClause : ("cost" TestNoAlpha OptionalSpacing (CostMatrixClauseModel | CostMatrixClauseValues))
   protected boolean costMatrixClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (costMatrixClause$RuleMemoStart == index) {
         if (costMatrixClause$RuleMemoStart <= costMatrixClause$RuleMemoEnd) {
            index = costMatrixClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COST_MATRIX_CLAUSE, costMatrixClause$RuleMemoStart, costMatrixClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (costMatrixClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(costMatrixClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cost" TestNoAlpha OptionalSpacing (CostMatrixClauseModel | CostMatrixClauseValues))
      // "cost"
      match = ignoreCaseStringMatcher("cost", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (CostMatrixClauseModel | CostMatrixClauseValues)
               switch(buffer.getChar(index)) {
                  case 'm':
                  case 'M': {
                     // CostMatrixClauseModel
                     match = costMatrixClauseModel$Rule();
                     break;
                  }
                  case '(': {
                     // CostMatrixClauseValues
                     match = costMatrixClauseValues$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            }
         }
      }
      if (match) {
         costMatrixClause$RuleMemoStart = startIndex;
         costMatrixClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            costMatrixClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COST_MATRIX_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            costMatrixClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         costMatrixClause$RuleMemoStart = startIndex;
         costMatrixClause$RuleMemoEnd = -1;
         costMatrixClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Prediction : ("prediction" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName CostMatrixClause? MiningAttributeClause ')' OptionalSpacing)
   protected boolean prediction$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (prediction$RuleMemoStart == index) {
         if (prediction$RuleMemoStart <= prediction$RuleMemoEnd) {
            index = prediction$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION, prediction$RuleMemoStart, prediction$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (prediction$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(prediction$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prediction" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName CostMatrixClause? MiningAttributeClause ')' OptionalSpacing)
      // "prediction"
      match = ignoreCaseStringMatcher("prediction", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // CostMatrixClause?
                        // CostMatrixClause
                        costMatrixClause$Rule();
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         prediction$RuleMemoStart = startIndex;
         prediction$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            prediction$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            prediction$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         prediction$RuleMemoStart = startIndex;
         prediction$RuleMemoEnd = -1;
         prediction$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PredictionBounds : ("prediction_bounds" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "ConfidenceLevel" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "ClassValue" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
   protected boolean predictionBounds$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (predictionBounds$RuleMemoStart == index) {
         if (predictionBounds$RuleMemoStart <= predictionBounds$RuleMemoEnd) {
            index = predictionBounds$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_BOUNDS, predictionBounds$RuleMemoStart, predictionBounds$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (predictionBounds$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(predictionBounds$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prediction_bounds" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "ConfidenceLevel" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "ClassValue" TestNoAlpha OptionalSpacing)? MiningAttributeClause ')' OptionalSpacing)
      // "prediction_bounds"
      match = ignoreCaseStringMatcher("prediction_bounds", 17);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "ConfidenceLevel" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "ConfidenceLevel" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "ConfidenceLevel"
                           match = ignoreCaseStringMatcher("ConfidenceLevel", 15);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                        // ((',' OptionalSpacing SqlExpression) "ClassValue" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "ClassValue" TestNoAlpha OptionalSpacing)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (match) {
                           // "ClassValue"
                           match = ignoreCaseStringMatcher("ClassValue", 10);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                    currentNode = lastNode_3;
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         predictionBounds$RuleMemoStart = startIndex;
         predictionBounds$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            predictionBounds$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_BOUNDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            predictionBounds$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         predictionBounds$RuleMemoStart = startIndex;
         predictionBounds$RuleMemoEnd = -1;
         predictionBounds$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PredictionCost : ("prediction_cost" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "Class" TestNoAlpha OptionalSpacing)? CostMatrixClause MiningAttributeClause ')' OptionalSpacing)
   protected boolean predictionCost$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (predictionCost$RuleMemoStart == index) {
         if (predictionCost$RuleMemoStart <= predictionCost$RuleMemoEnd) {
            index = predictionCost$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_COST, predictionCost$RuleMemoStart, predictionCost$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (predictionCost$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(predictionCost$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prediction_cost" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "Class" TestNoAlpha OptionalSpacing)? CostMatrixClause MiningAttributeClause ')' OptionalSpacing)
      // "prediction_cost"
      match = ignoreCaseStringMatcher("prediction_cost", 15);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "Class" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "Class" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "Class"
                           match = ignoreCaseStringMatcher("Class", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // CostMatrixClause
                        match = costMatrixClause$Rule();
                        if (match) {
                           // MiningAttributeClause
                           match = miningAttributeClause$Rule();
                           if (match) {
                              // ')'
                              match = charMatcher(')');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         predictionCost$RuleMemoStart = startIndex;
         predictionCost$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            predictionCost$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_COST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            predictionCost$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         predictionCost$RuleMemoStart = startIndex;
         predictionCost$RuleMemoEnd = -1;
         predictionCost$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PredictionDetails : ("prediction_details" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName MiningAttributeClause ')' OptionalSpacing)
   protected boolean predictionDetails$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (predictionDetails$RuleMemoStart == index) {
         if (predictionDetails$RuleMemoStart <= predictionDetails$RuleMemoEnd) {
            index = predictionDetails$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_DETAILS, predictionDetails$RuleMemoStart, predictionDetails$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (predictionDetails$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(predictionDetails$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prediction_details" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName MiningAttributeClause ')' OptionalSpacing)
      // "prediction_details"
      match = ignoreCaseStringMatcher("prediction_details", 18);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         predictionDetails$RuleMemoStart = startIndex;
         predictionDetails$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            predictionDetails$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_DETAILS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            predictionDetails$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         predictionDetails$RuleMemoStart = startIndex;
         predictionDetails$RuleMemoEnd = -1;
         predictionDetails$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PredictionProbability : ("prediction_probability" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName MiningAttributeClause ')' OptionalSpacing)
   protected boolean predictionProbability$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (predictionProbability$RuleMemoStart == index) {
         if (predictionProbability$RuleMemoStart <= predictionProbability$RuleMemoEnd) {
            index = predictionProbability$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_PROBABILITY, predictionProbability$RuleMemoStart, predictionProbability$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (predictionProbability$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(predictionProbability$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prediction_probability" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName MiningAttributeClause ')' OptionalSpacing)
      // "prediction_probability"
      match = ignoreCaseStringMatcher("prediction_probability", 22);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         predictionProbability$RuleMemoStart = startIndex;
         predictionProbability$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            predictionProbability$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_PROBABILITY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            predictionProbability$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         predictionProbability$RuleMemoStart = startIndex;
         predictionProbability$RuleMemoEnd = -1;
         predictionProbability$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PredictionSet : ("prediction_set" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "BestN" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)? CostMatrixClause? MiningAttributeClause ')' OptionalSpacing)
   protected boolean predictionSet$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (predictionSet$RuleMemoStart == index) {
         if (predictionSet$RuleMemoStart <= predictionSet$RuleMemoEnd) {
            index = predictionSet$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_SET, predictionSet$RuleMemoStart, predictionSet$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (predictionSet$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(predictionSet$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prediction_set" TestNoAlpha OptionalSpacing '(' OptionalSpacing SchemaObjectName ((',' OptionalSpacing SqlExpression) "BestN" TestNoAlpha OptionalSpacing)? ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)? CostMatrixClause? MiningAttributeClause ')' OptionalSpacing)
      // "prediction_set"
      match = ignoreCaseStringMatcher("prediction_set", 14);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SchemaObjectName
                     match = schemaObjectName$Rule();
                     if (match) {
                        // ((',' OptionalSpacing SqlExpression) "BestN" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "BestN" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "BestN"
                           match = ignoreCaseStringMatcher("BestN", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                        // ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing SqlExpression) "CutOff" TestNoAlpha OptionalSpacing)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                                 currentNode = lastNode_4;
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (match) {
                           // "CutOff"
                           match = ignoreCaseStringMatcher("CutOff", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                    currentNode = lastNode_3;
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // CostMatrixClause?
                        // CostMatrixClause
                        costMatrixClause$Rule();
                        // MiningAttributeClause
                        match = miningAttributeClause$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         predictionSet$RuleMemoStart = startIndex;
         predictionSet$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            predictionSet$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PREDICTION_SET, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            predictionSet$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         predictionSet$RuleMemoStart = startIndex;
         predictionSet$RuleMemoEnd = -1;
         predictionSet$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RankAggregate : ("rank" TestNoAlpha OptionalSpacing SqlParameters "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
   protected boolean rankAggregate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rankAggregate$RuleMemoStart == index) {
         if (rankAggregate$RuleMemoStart <= rankAggregate$RuleMemoEnd) {
            index = rankAggregate$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RANK_AGGREGATE, rankAggregate$RuleMemoStart, rankAggregate$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rankAggregate$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rankAggregate$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("rank" TestNoAlpha OptionalSpacing SqlParameters "within" TestNoAlpha OptionalSpacing "group" TestNoAlpha OptionalSpacing '(' OptionalSpacing OrderByFunctionClause ')' OptionalSpacing)
      // "rank"
      match = ignoreCaseStringMatcher("rank", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlParameters
               match = sqlParameters$Rule();
               if (match) {
                  // "within"
                  match = ignoreCaseStringMatcher("within", 6);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "group"
                           match = ignoreCaseStringMatcher("group", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // OrderByFunctionClause
                                          match = orderByFunctionClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         rankAggregate$RuleMemoStart = startIndex;
         rankAggregate$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rankAggregate$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RANK_AGGREGATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rankAggregate$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rankAggregate$RuleMemoStart = startIndex;
         rankAggregate$RuleMemoEnd = -1;
         rankAggregate$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RankAnalytic : ("rank" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean rankAnalytic$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rankAnalytic$RuleMemoStart == index) {
         if (rankAnalytic$RuleMemoStart <= rankAnalytic$RuleMemoEnd) {
            index = rankAnalytic$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RANK_ANALYTIC, rankAnalytic$RuleMemoStart, rankAnalytic$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rankAnalytic$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rankAnalytic$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("rank" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "rank"
      match = ignoreCaseStringMatcher("rank", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "over"
                           match = ignoreCaseStringMatcher("over", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // QueryPartitionClause?
                                          // QueryPartitionClause
                                          queryPartitionClause$Rule();
                                          // OrderByClause
                                          match = orderByClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         rankAnalytic$RuleMemoStart = startIndex;
         rankAnalytic$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rankAnalytic$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RANK_ANALYTIC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rankAnalytic$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rankAnalytic$RuleMemoStart = startIndex;
         rankAnalytic$RuleMemoEnd = -1;
         rankAnalytic$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RatioToReport : ("ratio_to_report" TestNoAlpha OptionalSpacing ParenthesesSqlExpression "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? ')' OptionalSpacing)
   protected boolean ratioToReport$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (ratioToReport$RuleMemoStart == index) {
         if (ratioToReport$RuleMemoStart <= ratioToReport$RuleMemoEnd) {
            index = ratioToReport$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RATIO_TO_REPORT, ratioToReport$RuleMemoStart, ratioToReport$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (ratioToReport$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(ratioToReport$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("ratio_to_report" TestNoAlpha OptionalSpacing ParenthesesSqlExpression "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? ')' OptionalSpacing)
      // "ratio_to_report"
      match = ignoreCaseStringMatcher("ratio_to_report", 15);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ParenthesesSqlExpression
               match = parenthesesSqlExpression$Rule();
               if (match) {
                  // "over"
                  match = ignoreCaseStringMatcher("over", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // '('
                           match = charMatcher('(');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // QueryPartitionClause?
                                 // QueryPartitionClause
                                 queryPartitionClause$Rule();
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         ratioToReport$RuleMemoStart = startIndex;
         ratioToReport$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            ratioToReport$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RATIO_TO_REPORT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            ratioToReport$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         ratioToReport$RuleMemoStart = startIndex;
         ratioToReport$RuleMemoEnd = -1;
         ratioToReport$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RegrLinearFunctions : ((("regr_avg" TestNoAlpha OptionalSpacing) | ("regr_intercept" TestNoAlpha OptionalSpacing) | ("regr_count" TestNoAlpha OptionalSpacing) | ("regr_r2" OptionalSpacing) | ("regr_avgx" TestNoAlpha OptionalSpacing) | ("regr_avgy" TestNoAlpha OptionalSpacing) | ("regr_sxx" TestNoAlpha OptionalSpacing) | ("regr_syy" TestNoAlpha OptionalSpacing) | ("regr_sxy" TestNoAlpha OptionalSpacing)) "FunctionName" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ',' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean regrLinearFunctions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (regrLinearFunctions$RuleMemoStart == index) {
         if (regrLinearFunctions$RuleMemoStart <= regrLinearFunctions$RuleMemoEnd) {
            index = regrLinearFunctions$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.REGR_LINEAR_FUNCTIONS, regrLinearFunctions$RuleMemoStart, regrLinearFunctions$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (regrLinearFunctions$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(regrLinearFunctions$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("regr_avg" TestNoAlpha OptionalSpacing) | ("regr_intercept" TestNoAlpha OptionalSpacing) | ("regr_count" TestNoAlpha OptionalSpacing) | ("regr_r2" OptionalSpacing) | ("regr_avgx" TestNoAlpha OptionalSpacing) | ("regr_avgy" TestNoAlpha OptionalSpacing) | ("regr_sxx" TestNoAlpha OptionalSpacing) | ("regr_syy" TestNoAlpha OptionalSpacing) | ("regr_sxy" TestNoAlpha OptionalSpacing)) "FunctionName" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ',' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // (("regr_avg" TestNoAlpha OptionalSpacing) | ("regr_intercept" TestNoAlpha OptionalSpacing) | ("regr_count" TestNoAlpha OptionalSpacing) | ("regr_r2" OptionalSpacing) | ("regr_avgx" TestNoAlpha OptionalSpacing) | ("regr_avgy" TestNoAlpha OptionalSpacing) | ("regr_sxx" TestNoAlpha OptionalSpacing) | ("regr_syy" TestNoAlpha OptionalSpacing) | ("regr_sxy" TestNoAlpha OptionalSpacing))
      // ("regr_avg" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "regr_avg"
      match = ignoreCaseStringMatcher("regr_avg", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("regr_intercept" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "regr_intercept"
         match = ignoreCaseStringMatcher("regr_intercept", 14);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("regr_count" TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "regr_count"
            match = ignoreCaseStringMatcher("regr_count", 10);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                     currentNode = lastNode_3;
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ("regr_r2" OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "regr_r2"
               match = ignoreCaseStringMatcher("regr_r2", 7);
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                     currentNode = lastNode_4;
                  }
               }
               if (! match) {
                  // ("regr_avgx" TestNoAlpha OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // "regr_avgx"
                  match = ignoreCaseStringMatcher("regr_avgx", 9);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                           currentNode = lastNode_5;
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("regr_avgy" TestNoAlpha OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // "regr_avgy"
                     match = ignoreCaseStringMatcher("regr_avgy", 9);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                              currentNode = lastNode_6;
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("regr_sxx" TestNoAlpha OptionalSpacing)
                        Node lastNode_7 = currentNode;
                        int lastIndex_7 = index;
                        // "regr_sxx"
                        match = ignoreCaseStringMatcher("regr_sxx", 8);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                                 currentNode = lastNode_7;
                              }
                           } else {
                              index = lastIndex_7;
                              lastNode_7.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ("regr_syy" TestNoAlpha OptionalSpacing)
                           Node lastNode_8 = currentNode;
                           int lastIndex_8 = index;
                           // "regr_syy"
                           match = ignoreCaseStringMatcher("regr_syy", 8);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_8;
                                    lastNode_8.setSibling(null);
                                    currentNode = lastNode_8;
                                 }
                              } else {
                                 index = lastIndex_8;
                                 lastNode_8.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ("regr_sxy" TestNoAlpha OptionalSpacing)
                              Node lastNode_9 = currentNode;
                              int lastIndex_9 = index;
                              // "regr_sxy"
                              match = ignoreCaseStringMatcher("regr_sxy", 8);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_9;
                                       lastNode_9.setSibling(null);
                                       currentNode = lastNode_9;
                                    }
                                 } else {
                                    index = lastIndex_9;
                                    lastNode_9.setSibling(null);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         // "FunctionName"
         match = ignoreCaseStringMatcher("FunctionName", 12);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // '('
                  match = charMatcher('(');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (match) {
                           // ','
                           match = charMatcher(',');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlExpression
                                 match = sqlExpression$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // AnalyticOverClause?
                                          // AnalyticOverClause
                                          analyticOverClause$Rule();
                                          match = true;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         regrLinearFunctions$RuleMemoStart = startIndex;
         regrLinearFunctions$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            regrLinearFunctions$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.REGR_LINEAR_FUNCTIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            regrLinearFunctions$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         regrLinearFunctions$RuleMemoStart = startIndex;
         regrLinearFunctions$RuleMemoEnd = -1;
         regrLinearFunctions$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RowNumber : ("row_number" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
   protected boolean rowNumber$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rowNumber$RuleMemoStart == index) {
         if (rowNumber$RuleMemoStart <= rowNumber$RuleMemoEnd) {
            index = rowNumber$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_NUMBER, rowNumber$RuleMemoStart, rowNumber$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rowNumber$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rowNumber$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("row_number" TestNoAlpha OptionalSpacing '(' OptionalSpacing ')' OptionalSpacing "over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? OrderByClause ')' OptionalSpacing)
      // "row_number"
      match = ignoreCaseStringMatcher("row_number", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "over"
                           match = ignoreCaseStringMatcher("over", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // QueryPartitionClause?
                                          // QueryPartitionClause
                                          queryPartitionClause$Rule();
                                          // OrderByClause
                                          match = orderByClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         rowNumber$RuleMemoStart = startIndex;
         rowNumber$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rowNumber$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_NUMBER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rowNumber$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rowNumber$RuleMemoStart = startIndex;
         rowNumber$RuleMemoEnd = -1;
         rowNumber$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StdDev : ("stddev" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean stdDev$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (stdDev$RuleMemoStart == index) {
         if (stdDev$RuleMemoStart <= stdDev$RuleMemoEnd) {
            index = stdDev$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.STD_DEV, stdDev$RuleMemoStart, stdDev$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (stdDev$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(stdDev$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("stddev" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "stddev"
      match = ignoreCaseStringMatcher("stddev", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (DistinctExpression | AllExpression | SqlExpression)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '(':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlExpression
                           match = sqlExpression$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        case 'D':
                        case 'd': {
                           // DistinctExpression
                           match = distinctExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         stdDev$RuleMemoStart = startIndex;
         stdDev$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            stdDev$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.STD_DEV, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            stdDev$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         stdDev$RuleMemoStart = startIndex;
         stdDev$RuleMemoEnd = -1;
         stdDev$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StdDevPop : ("stddev_pop" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean stdDevPop$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (stdDevPop$RuleMemoStart == index) {
         if (stdDevPop$RuleMemoStart <= stdDevPop$RuleMemoEnd) {
            index = stdDevPop$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.STD_DEV_POP, stdDevPop$RuleMemoStart, stdDevPop$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (stdDevPop$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(stdDevPop$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("stddev_pop" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "stddev_pop"
      match = ignoreCaseStringMatcher("stddev_pop", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         stdDevPop$RuleMemoStart = startIndex;
         stdDevPop$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            stdDevPop$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.STD_DEV_POP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            stdDevPop$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         stdDevPop$RuleMemoStart = startIndex;
         stdDevPop$RuleMemoEnd = -1;
         stdDevPop$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StdDevSamp : ("stddev_samp" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean stdDevSamp$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (stdDevSamp$RuleMemoStart == index) {
         if (stdDevSamp$RuleMemoStart <= stdDevSamp$RuleMemoEnd) {
            index = stdDevSamp$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.STD_DEV_SAMP, stdDevSamp$RuleMemoStart, stdDevSamp$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (stdDevSamp$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(stdDevSamp$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("stddev_samp" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "stddev_samp"
      match = ignoreCaseStringMatcher("stddev_samp", 11);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         stdDevSamp$RuleMemoStart = startIndex;
         stdDevSamp$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            stdDevSamp$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.STD_DEV_SAMP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            stdDevSamp$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         stdDevSamp$RuleMemoStart = startIndex;
         stdDevSamp$RuleMemoEnd = -1;
         stdDevSamp$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Sum : ("sum" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean sum$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sum$RuleMemoStart == index) {
         if (sum$RuleMemoStart <= sum$RuleMemoEnd) {
            index = sum$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUM, sum$RuleMemoStart, sum$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sum$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sum$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("sum" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "sum"
      match = ignoreCaseStringMatcher("sum", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (DistinctExpression | AllExpression | SqlExpression)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '(':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlExpression
                           match = sqlExpression$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        case 'D':
                        case 'd': {
                           // DistinctExpression
                           match = distinctExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         sum$RuleMemoStart = startIndex;
         sum$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sum$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sum$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sum$RuleMemoStart = startIndex;
         sum$RuleMemoEnd = -1;
         sum$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Translate : ("translate" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression "using" TestNoAlpha OptionalSpacing (("char_cs" | "nchar_cs") TestNoAlpha OptionalSpacing) "CharType" TestNoAlpha OptionalSpacing ')' OptionalSpacing)
   protected boolean translate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (translate$RuleMemoStart == index) {
         if (translate$RuleMemoStart <= translate$RuleMemoEnd) {
            index = translate$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TRANSLATE, translate$RuleMemoStart, translate$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (translate$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(translate$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("translate" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression "using" TestNoAlpha OptionalSpacing (("char_cs" | "nchar_cs") TestNoAlpha OptionalSpacing) "CharType" TestNoAlpha OptionalSpacing ')' OptionalSpacing)
      // "translate"
      match = ignoreCaseStringMatcher("translate", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // "using"
                        match = ignoreCaseStringMatcher("using", 5);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // (("char_cs" | "nchar_cs") TestNoAlpha OptionalSpacing)
                                 // ("char_cs" | "nchar_cs")
                                 int startIndex_1 = index;
                                 switch(buffer.getChar(index)) {
                                    case 'n':
                                    case 'N': {
                                       ++index;
                                       // "char_cs"
                                       if (match = ignoreCaseStringTest("char_cs", 7)) {
                                          index += 7;
                                       }
                                       break;
                                    }
                                    case 'c':
                                    case 'C': {
                                       ++index;
                                       // "har_cs"
                                       if (match = ignoreCaseStringTest("har_cs", 6)) {
                                          index += 6;
                                       }
                                       break;
                                    }
                                    default: {
                                       match = false;
                                    }
                                 }
                                 if (! match) {
                                    index = startIndex_1;
                                 } else if(! currentRuleIsAtomic) {
                                    currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                                    currentNode = currentNode.getSibling();
                                 }
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                                 if (match) {
                                    // "CharType"
                                    match = ignoreCaseStringMatcher("CharType", 8);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         translate$RuleMemoStart = startIndex;
         translate$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            translate$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TRANSLATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            translate$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         translate$RuleMemoStart = startIndex;
         translate$RuleMemoEnd = -1;
         translate$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Treat : ("treat" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression "as" TestNoAlpha OptionalSpacing ("ref" TestNoAlpha OptionalSpacing)? SchemaObjectName ')' OptionalSpacing)
   protected boolean treat$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (treat$RuleMemoStart == index) {
         if (treat$RuleMemoStart <= treat$RuleMemoEnd) {
            index = treat$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TREAT, treat$RuleMemoStart, treat$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (treat$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(treat$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("treat" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression "as" TestNoAlpha OptionalSpacing ("ref" TestNoAlpha OptionalSpacing)? SchemaObjectName ')' OptionalSpacing)
      // "treat"
      match = ignoreCaseStringMatcher("treat", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // "as"
                        match = ignoreCaseStringMatcher("as", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // ("ref" TestNoAlpha OptionalSpacing)?
                                 // ("ref" TestNoAlpha OptionalSpacing)
                                 Node lastNode_1 = currentNode;
                                 int lastIndex_1 = index;
                                 // "ref"
                                 match = ignoreCaseStringMatcher("ref", 3);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                          currentNode = lastNode_1;
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 }
                                 // SchemaObjectName
                                 match = schemaObjectName$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         treat$RuleMemoStart = startIndex;
         treat$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            treat$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TREAT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            treat$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         treat$RuleMemoStart = startIndex;
         treat$RuleMemoEnd = -1;
         treat$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TrimMode : ((("leading" TestNoAlpha OptionalSpacing SqlExpression) | ("trailing" TestNoAlpha OptionalSpacing SqlExpression) | ("both" TestNoAlpha OptionalSpacing SqlExpression) | ("leading" TestNoAlpha OptionalSpacing) | ("trailing" TestNoAlpha OptionalSpacing) | ("both" TestNoAlpha OptionalSpacing) | SqlExpression) "from" TestNoAlpha OptionalSpacing)
   protected boolean trimMode$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((("leading" TestNoAlpha OptionalSpacing SqlExpression) | ("trailing" TestNoAlpha OptionalSpacing SqlExpression) | ("both" TestNoAlpha OptionalSpacing SqlExpression) | ("leading" TestNoAlpha OptionalSpacing) | ("trailing" TestNoAlpha OptionalSpacing) | ("both" TestNoAlpha OptionalSpacing) | SqlExpression) "from" TestNoAlpha OptionalSpacing)
      // (("leading" TestNoAlpha OptionalSpacing SqlExpression) | ("trailing" TestNoAlpha OptionalSpacing SqlExpression) | ("both" TestNoAlpha OptionalSpacing SqlExpression) | ("leading" TestNoAlpha OptionalSpacing) | ("trailing" TestNoAlpha OptionalSpacing) | ("both" TestNoAlpha OptionalSpacing) | SqlExpression)
      // ("leading" TestNoAlpha OptionalSpacing SqlExpression)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "leading"
      match = ignoreCaseStringMatcher("leading", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("trailing" TestNoAlpha OptionalSpacing SqlExpression)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "trailing"
         match = ignoreCaseStringMatcher("trailing", 8);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlExpression
                  match = sqlExpression$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("both" TestNoAlpha OptionalSpacing SqlExpression)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "both"
            match = ignoreCaseStringMatcher("both", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ("leading" TestNoAlpha OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "leading"
               match = ignoreCaseStringMatcher("leading", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
               if (! match) {
                  // ("trailing" TestNoAlpha OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // "trailing"
                  match = ignoreCaseStringMatcher("trailing", 8);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                           currentNode = lastNode_5;
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("both" TestNoAlpha OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // "both"
                     match = ignoreCaseStringMatcher("both", 4);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                              currentNode = lastNode_6;
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     if (! match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         // "from"
         match = ignoreCaseStringMatcher("from", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TRIM_MODE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Trim : ("trim" TestNoAlpha OptionalSpacing '(' OptionalSpacing TrimMode? SqlExpression ')' OptionalSpacing)
   protected boolean trim$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (trim$RuleMemoStart == index) {
         if (trim$RuleMemoStart <= trim$RuleMemoEnd) {
            index = trim$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TRIM, trim$RuleMemoStart, trim$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (trim$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(trim$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("trim" TestNoAlpha OptionalSpacing '(' OptionalSpacing TrimMode? SqlExpression ')' OptionalSpacing)
      // "trim"
      match = ignoreCaseStringMatcher("trim", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // TrimMode?
                     // TrimMode
                     trimMode$Rule();
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         trim$RuleMemoStart = startIndex;
         trim$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            trim$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TRIM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            trim$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         trim$RuleMemoStart = startIndex;
         trim$RuleMemoEnd = -1;
         trim$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VarPop : ("var_pop" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean varPop$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (varPop$RuleMemoStart == index) {
         if (varPop$RuleMemoStart <= varPop$RuleMemoEnd) {
            index = varPop$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_POP, varPop$RuleMemoStart, varPop$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (varPop$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(varPop$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("var_pop" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "var_pop"
      match = ignoreCaseStringMatcher("var_pop", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         varPop$RuleMemoStart = startIndex;
         varPop$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            varPop$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_POP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            varPop$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         varPop$RuleMemoStart = startIndex;
         varPop$RuleMemoEnd = -1;
         varPop$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VarSamp : ("var_samp" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
   protected boolean varSamp$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (varSamp$RuleMemoStart == index) {
         if (varSamp$RuleMemoStart <= varSamp$RuleMemoEnd) {
            index = varSamp$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_SAMP, varSamp$RuleMemoStart, varSamp$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (varSamp$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(varSamp$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("var_samp" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing AnalyticOverClause?)
      // "var_samp"
      match = ignoreCaseStringMatcher("var_samp", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         varSamp$RuleMemoStart = startIndex;
         varSamp$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            varSamp$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_SAMP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            varSamp$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         varSamp$RuleMemoStart = startIndex;
         varSamp$RuleMemoEnd = -1;
         varSamp$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Variance : ("variance" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
   protected boolean variance$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (variance$RuleMemoStart == index) {
         if (variance$RuleMemoStart <= variance$RuleMemoEnd) {
            index = variance$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VARIANCE, variance$RuleMemoStart, variance$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (variance$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(variance$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("variance" TestNoAlpha OptionalSpacing '(' OptionalSpacing (DistinctExpression | AllExpression | SqlExpression) ')' OptionalSpacing AnalyticOverClause?)
      // "variance"
      match = ignoreCaseStringMatcher("variance", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (DistinctExpression | AllExpression | SqlExpression)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '(':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlExpression
                           match = sqlExpression$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AllExpression
                           match = allExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        case 'D':
                        case 'd': {
                           // DistinctExpression
                           match = distinctExpression$Rule();
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // AnalyticOverClause?
                              // AnalyticOverClause
                              analyticOverClause$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         variance$RuleMemoStart = startIndex;
         variance$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            variance$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VARIANCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            variance$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         variance$RuleMemoStart = startIndex;
         variance$RuleMemoEnd = -1;
         variance$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlAgg : ("xmlagg" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression OrderByClause? ')' OptionalSpacing)
   protected boolean xmlAgg$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlAgg$RuleMemoStart == index) {
         if (xmlAgg$RuleMemoStart <= xmlAgg$RuleMemoEnd) {
            index = xmlAgg$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_AGG, xmlAgg$RuleMemoStart, xmlAgg$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlAgg$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlAgg$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlagg" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression OrderByClause? ')' OptionalSpacing)
      // "xmlagg"
      match = ignoreCaseStringMatcher("xmlagg", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // OrderByClause?
                        // OrderByClause
                        orderByClause$Rule();
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlAgg$RuleMemoStart = startIndex;
         xmlAgg$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlAgg$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_AGG, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlAgg$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlAgg$RuleMemoStart = startIndex;
         xmlAgg$RuleMemoEnd = -1;
         xmlAgg$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlAlias : ("as" TestNoAlpha OptionalSpacing (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | SqlAnyIdentifier))
   protected boolean xmlAlias$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("as" TestNoAlpha OptionalSpacing (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | SqlAnyIdentifier))
      // "as"
      match = ignoreCaseStringMatcher("as", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | SqlAnyIdentifier)
               // ("evalname" TestNoAlpha OptionalSpacing SqlExpression)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "evalname"
               match = ignoreCaseStringMatcher("evalname", 8);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               if (! match) {
                  // SqlAnyIdentifier
                  match = sqlAnyIdentifier$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_ALIAS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlCast : ("xmlcast" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression "as" TestNoAlpha OptionalSpacing SqlDataType ')' OptionalSpacing)
   protected boolean xmlCast$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlCast$RuleMemoStart == index) {
         if (xmlCast$RuleMemoStart <= xmlCast$RuleMemoEnd) {
            index = xmlCast$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_CAST, xmlCast$RuleMemoStart, xmlCast$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlCast$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlCast$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlcast" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression "as" TestNoAlpha OptionalSpacing SqlDataType ')' OptionalSpacing)
      // "xmlcast"
      match = ignoreCaseStringMatcher("xmlcast", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // "as"
                        match = ignoreCaseStringMatcher("as", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlDataType
                                 match = sqlDataType$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlCast$RuleMemoStart = startIndex;
         xmlCast$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlCast$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_CAST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlCast$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlCast$RuleMemoStart = startIndex;
         xmlCast$RuleMemoEnd = -1;
         xmlCast$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlPar : (SqlExpression XmlAlias?)
   protected boolean xmlPar$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlPar$RuleMemoStart == index) {
         if (xmlPar$RuleMemoStart <= xmlPar$RuleMemoEnd) {
            index = xmlPar$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PAR, xmlPar$RuleMemoStart, xmlPar$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlPar$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlPar$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression XmlAlias?)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // XmlAlias?
         // XmlAlias
         xmlAlias$Rule();
         match = true;
      }
      if (match) {
         xmlPar$RuleMemoStart = startIndex;
         xmlPar$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlPar$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PAR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlPar$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlPar$RuleMemoStart = startIndex;
         xmlPar$RuleMemoEnd = -1;
         xmlPar$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlColAttVal : ("xmlcolattval" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlPar (',' OptionalSpacing XmlPar)* ')' OptionalSpacing)
   protected boolean xmlColAttVal$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlColAttVal$RuleMemoStart == index) {
         if (xmlColAttVal$RuleMemoStart <= xmlColAttVal$RuleMemoEnd) {
            index = xmlColAttVal$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_COL_ATT_VAL, xmlColAttVal$RuleMemoStart, xmlColAttVal$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlColAttVal$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlColAttVal$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlcolattval" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlPar (',' OptionalSpacing XmlPar)* ')' OptionalSpacing)
      // "xmlcolattval"
      match = ignoreCaseStringMatcher("xmlcolattval", 12);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // XmlPar
                     match = xmlPar$Rule();
                     if (match) {
                        // (',' OptionalSpacing XmlPar)*
                        do {
                           // (',' OptionalSpacing XmlPar)
                           Node lastNode_1 = currentNode;
                           int lastIndex_1 = index;
                           // ','
                           match = charMatcher(',');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // XmlPar
                                 match = xmlPar$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           }
                        } while(match);
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlColAttVal$RuleMemoStart = startIndex;
         xmlColAttVal$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlColAttVal$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_COL_ATT_VAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlColAttVal$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlColAttVal$RuleMemoStart = startIndex;
         xmlColAttVal$RuleMemoEnd = -1;
         xmlColAttVal$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlAttributesClause : ("xmlattributes" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)? (("schemacheck" | "noschemacheck") TestNoAlpha OptionalSpacing)? XmlPar (',' OptionalSpacing XmlPar)* ')' OptionalSpacing)
   protected boolean xmlAttributesClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("xmlattributes" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)? (("schemacheck" | "noschemacheck") TestNoAlpha OptionalSpacing)? XmlPar (',' OptionalSpacing XmlPar)* ')' OptionalSpacing)
      // "xmlattributes"
      match = ignoreCaseStringMatcher("xmlattributes", 13);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)?
                     // (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // ("entityescaping" | "noentityescaping")
                     int startIndex_2 = index;
                     switch(buffer.getChar(index)) {
                        case 'n':
                        case 'N': {
                           ++index;
                           // "oentityescaping"
                           if (match = ignoreCaseStringTest("oentityescaping", 15)) {
                              index += 15;
                           }
                           break;
                        }
                        case 'e':
                        case 'E': {
                           ++index;
                           // "ntityescaping"
                           if (match = ignoreCaseStringTest("ntityescaping", 13)) {
                              index += 13;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (! match) {
                        index = startIndex_2;
                     } else if(! currentRuleIsAtomic) {
                        currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_2, index, false, false));
                        currentNode = currentNode.getSibling();
                     }
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                     match = true;
                     // (("schemacheck" | "noschemacheck") TestNoAlpha OptionalSpacing)?
                     // (("schemacheck" | "noschemacheck") TestNoAlpha OptionalSpacing)
                     Node lastNode_3 = currentNode;
                     int lastIndex_3 = index;
                     // ("schemacheck" | "noschemacheck")
                     int startIndex_4 = index;
                     switch(buffer.getChar(index)) {
                        case 'n':
                        case 'N': {
                           ++index;
                           // "oschemacheck"
                           if (match = ignoreCaseStringTest("oschemacheck", 12)) {
                              index += 12;
                           }
                           break;
                        }
                        case 's':
                        case 'S': {
                           ++index;
                           // "chemacheck"
                           if (match = ignoreCaseStringTest("chemacheck", 10)) {
                              index += 10;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (! currentRuleIsAtomic) {
                        currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_4, index, false, false));
                        currentNode = currentNode.getSibling();
                     }
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                              currentNode = lastNode_3;
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     }
                     // XmlPar
                     match = xmlPar$Rule();
                     if (match) {
                        // (',' OptionalSpacing XmlPar)*
                        do {
                           // (',' OptionalSpacing XmlPar)
                           Node lastNode_5 = currentNode;
                           int lastIndex_5 = index;
                           // ','
                           match = charMatcher(',');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // XmlPar
                                 match = xmlPar$Rule();
                                 if (! match) {
                                    index = lastIndex_5;
                                    lastNode_5.setSibling(null);
                                    currentNode = lastNode_5;
                                 }
                              } else {
                                 index = lastIndex_5;
                                 lastNode_5.setSibling(null);
                              }
                           }
                        } while(match);
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_ATTRIBUTES_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlElement : ("xmlelement" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)? (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier) | SqlAnyIdentifier) ((',' OptionalSpacing XmlAttributesClause) "XmlAttributesClause" TestNoAlpha OptionalSpacing)? (',' OptionalSpacing SqlExpression AsAlias?)* ')' OptionalSpacing)
   protected boolean xmlElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlElement$RuleMemoStart == index) {
         if (xmlElement$RuleMemoStart <= xmlElement$RuleMemoEnd) {
            index = xmlElement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_ELEMENT, xmlElement$RuleMemoStart, xmlElement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlElement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlElement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlelement" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)? (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier) | SqlAnyIdentifier) ((',' OptionalSpacing XmlAttributesClause) "XmlAttributesClause" TestNoAlpha OptionalSpacing)? (',' OptionalSpacing SqlExpression AsAlias?)* ')' OptionalSpacing)
      // "xmlelement"
      match = ignoreCaseStringMatcher("xmlelement", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)?
                     // (("entityescaping" | "noentityescaping") TestNoAlpha OptionalSpacing)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // ("entityescaping" | "noentityescaping")
                     int startIndex_2 = index;
                     switch(buffer.getChar(index)) {
                        case 'n':
                        case 'N': {
                           ++index;
                           // "oentityescaping"
                           if (match = ignoreCaseStringTest("oentityescaping", 15)) {
                              index += 15;
                           }
                           break;
                        }
                        case 'e':
                        case 'E': {
                           ++index;
                           // "ntityescaping"
                           if (match = ignoreCaseStringTest("ntityescaping", 13)) {
                              index += 13;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (! match) {
                        index = startIndex_2;
                     } else if(! currentRuleIsAtomic) {
                        currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_2, index, false, false));
                        currentNode = currentNode.getSibling();
                     }
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                     match = true;
                     // (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier) | SqlAnyIdentifier)
                     // ("evalname" TestNoAlpha OptionalSpacing SqlExpression)
                     Node lastNode_3 = currentNode;
                     int lastIndex_3 = index;
                     // "evalname"
                     match = ignoreCaseStringMatcher("evalname", 8);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                                 currentNode = lastNode_3;
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
                        Node lastNode_4 = currentNode;
                        int lastIndex_4 = index;
                        // "name"
                        match = ignoreCaseStringMatcher("name", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlAnyIdentifier
                                 match = sqlAnyIdentifier$Rule();
                                 if (! match) {
                                    index = lastIndex_4;
                                    lastNode_4.setSibling(null);
                                    currentNode = lastNode_4;
                                 }
                              } else {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                              }
                           } else {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                           }
                        }
                        if (! match) {
                           // SqlAnyIdentifier
                           match = sqlAnyIdentifier$Rule();
                        }
                     }
                     if (match) {
                        // ((',' OptionalSpacing XmlAttributesClause) "XmlAttributesClause" TestNoAlpha OptionalSpacing)?
                        // ((',' OptionalSpacing XmlAttributesClause) "XmlAttributesClause" TestNoAlpha OptionalSpacing)
                        Node lastNode_5 = currentNode;
                        int lastIndex_5 = index;
                        // (',' OptionalSpacing XmlAttributesClause)
                        Node lastNode_6 = currentNode;
                        int lastIndex_6 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // XmlAttributesClause
                              match = xmlAttributesClause$Rule();
                              if (! match) {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                                 currentNode = lastNode_6;
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        }
                        if (match) {
                           // "XmlAttributesClause"
                           match = ignoreCaseStringMatcher("XmlAttributesClause", 19);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_5;
                                    lastNode_5.setSibling(null);
                                    currentNode = lastNode_5;
                                 }
                              } else {
                                 index = lastIndex_5;
                                 lastNode_5.setSibling(null);
                              }
                           } else {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                           }
                        }
                        match = true;
                        // (',' OptionalSpacing SqlExpression AsAlias?)*
                        do {
                           // (',' OptionalSpacing SqlExpression AsAlias?)
                           Node lastNode_7 = currentNode;
                           int lastIndex_7 = index;
                           // ','
                           match = charMatcher(',');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlExpression
                                 match = sqlExpression$Rule();
                                 if (match) {
                                    // AsAlias?
                                    // AsAlias
                                    asAlias$Rule();
                                    match = true;
                                 } else {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                              }
                           }
                        } while(match);
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlElement$RuleMemoStart = startIndex;
         xmlElement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlElement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_ELEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlElement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlElement$RuleMemoStart = startIndex;
         xmlElement$RuleMemoEnd = -1;
         xmlElement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AsAlias : ("as" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
   protected boolean asAlias$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (asAlias$RuleMemoStart == index) {
         if (asAlias$RuleMemoStart <= asAlias$RuleMemoEnd) {
            index = asAlias$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.AS_ALIAS, asAlias$RuleMemoStart, asAlias$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (asAlias$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(asAlias$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("as" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
      // "as"
      match = ignoreCaseStringMatcher("as", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlAnyIdentifier
               match = sqlAnyIdentifier$Rule();
            }
         }
      }
      if (match) {
         asAlias$RuleMemoStart = startIndex;
         asAlias$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            asAlias$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AS_ALIAS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            asAlias$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         asAlias$RuleMemoStart = startIndex;
         asAlias$RuleMemoEnd = -1;
         asAlias$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AliasedExpression : (SqlExpression AsAlias?)
   protected boolean aliasedExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (aliasedExpression$RuleMemoStart == index) {
         if (aliasedExpression$RuleMemoStart <= aliasedExpression$RuleMemoEnd) {
            index = aliasedExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ALIASED_EXPRESSION, aliasedExpression$RuleMemoStart, aliasedExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (aliasedExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(aliasedExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression AsAlias?)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // AsAlias?
         // AsAlias
         asAlias$Rule();
         match = true;
      }
      if (match) {
         aliasedExpression$RuleMemoStart = startIndex;
         aliasedExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            aliasedExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ALIASED_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            aliasedExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         aliasedExpression$RuleMemoStart = startIndex;
         aliasedExpression$RuleMemoEnd = -1;
         aliasedExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlPassingClause : ("passing" TestNoAlpha OptionalSpacing ("by" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)? AliasedExpression (',' OptionalSpacing AliasedExpression)*)
   protected boolean xmlPassingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlPassingClause$RuleMemoStart == index) {
         if (xmlPassingClause$RuleMemoStart <= xmlPassingClause$RuleMemoEnd) {
            index = xmlPassingClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PASSING_CLAUSE, xmlPassingClause$RuleMemoStart, xmlPassingClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlPassingClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlPassingClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("passing" TestNoAlpha OptionalSpacing ("by" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)? AliasedExpression (',' OptionalSpacing AliasedExpression)*)
      // "passing"
      match = ignoreCaseStringMatcher("passing", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("by" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)?
               // ("by" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "value"
                        match = ignoreCaseStringMatcher("value", 5);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // AliasedExpression
               match = aliasedExpression$Rule();
               if (match) {
                  // (',' OptionalSpacing AliasedExpression)*
                  do {
                     // (',' OptionalSpacing AliasedExpression)
                     Node lastNode_2 = currentNode;
                     int lastIndex_2 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // AliasedExpression
                           match = aliasedExpression$Rule();
                           if (! match) {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                              currentNode = lastNode_2;
                           }
                        } else {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         xmlPassingClause$RuleMemoStart = startIndex;
         xmlPassingClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlPassingClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PASSING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlPassingClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlPassingClause$RuleMemoStart = startIndex;
         xmlPassingClause$RuleMemoEnd = -1;
         xmlPassingClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlExists : ("xmlexists" TestNoAlpha OptionalSpacing '(' OptionalSpacing StringLiteral XmlPassingClause? ')' OptionalSpacing)
   protected boolean xmlExists$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlExists$RuleMemoStart == index) {
         if (xmlExists$RuleMemoStart <= xmlExists$RuleMemoEnd) {
            index = xmlExists$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_EXISTS, xmlExists$RuleMemoStart, xmlExists$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlExists$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlExists$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlexists" TestNoAlpha OptionalSpacing '(' OptionalSpacing StringLiteral XmlPassingClause? ')' OptionalSpacing)
      // "xmlexists"
      match = ignoreCaseStringMatcher("xmlexists", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // StringLiteral
                     match = stringLiteral$Rule();
                     if (match) {
                        // XmlPassingClause?
                        // XmlPassingClause
                        xmlPassingClause$Rule();
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlExists$RuleMemoStart = startIndex;
         xmlExists$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlExists$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_EXISTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlExists$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlExists$RuleMemoStart = startIndex;
         xmlExists$RuleMemoEnd = -1;
         xmlExists$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlForest : ("xmlforest" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlPar (',' OptionalSpacing XmlPar)* ')' OptionalSpacing)
   protected boolean xmlForest$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlForest$RuleMemoStart == index) {
         if (xmlForest$RuleMemoStart <= xmlForest$RuleMemoEnd) {
            index = xmlForest$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_FOREST, xmlForest$RuleMemoStart, xmlForest$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlForest$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlForest$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlforest" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlPar (',' OptionalSpacing XmlPar)* ')' OptionalSpacing)
      // "xmlforest"
      match = ignoreCaseStringMatcher("xmlforest", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // XmlPar
                     match = xmlPar$Rule();
                     if (match) {
                        // (',' OptionalSpacing XmlPar)*
                        do {
                           // (',' OptionalSpacing XmlPar)
                           Node lastNode_1 = currentNode;
                           int lastIndex_1 = index;
                           // ','
                           match = charMatcher(',');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // XmlPar
                                 match = xmlPar$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           }
                        } while(match);
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlForest$RuleMemoStart = startIndex;
         xmlForest$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlForest$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_FOREST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlForest$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlForest$RuleMemoStart = startIndex;
         xmlForest$RuleMemoEnd = -1;
         xmlForest$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlParse : ("xmlparse" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("document" | "content") TestNoAlpha OptionalSpacing) SqlExpression ("wellformed" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
   protected boolean xmlParse$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlParse$RuleMemoStart == index) {
         if (xmlParse$RuleMemoStart <= xmlParse$RuleMemoEnd) {
            index = xmlParse$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PARSE, xmlParse$RuleMemoStart, xmlParse$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlParse$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlParse$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlparse" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("document" | "content") TestNoAlpha OptionalSpacing) SqlExpression ("wellformed" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
      // "xmlparse"
      match = ignoreCaseStringMatcher("xmlparse", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (("document" | "content") TestNoAlpha OptionalSpacing)
                     // ("document" | "content")
                     int startIndex_1 = index;
                     switch(buffer.getChar(index)) {
                        case 'c':
                        case 'C': {
                           ++index;
                           // "ontent"
                           if (match = ignoreCaseStringTest("ontent", 6)) {
                              index += 6;
                           }
                           break;
                        }
                        case 'd':
                        case 'D': {
                           ++index;
                           // "ocument"
                           if (match = ignoreCaseStringTest("ocument", 7)) {
                              index += 7;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (! match) {
                        index = startIndex_1;
                     } else if(! currentRuleIsAtomic) {
                        currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                        currentNode = currentNode.getSibling();
                     }
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (match) {
                           // ("wellformed" TestNoAlpha OptionalSpacing)?
                           // ("wellformed" TestNoAlpha OptionalSpacing)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "wellformed"
                           match = ignoreCaseStringMatcher("wellformed", 10);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlParse$RuleMemoStart = startIndex;
         xmlParse$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlParse$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PARSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlParse$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlParse$RuleMemoStart = startIndex;
         xmlParse$RuleMemoEnd = -1;
         xmlParse$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlPI : ("xmlpi" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier) | SqlAnyIdentifier) (',' OptionalSpacing SqlExpression)? ')' OptionalSpacing)
   protected boolean xmlPI$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlPI$RuleMemoStart == index) {
         if (xmlPI$RuleMemoStart <= xmlPI$RuleMemoEnd) {
            index = xmlPI$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PI, xmlPI$RuleMemoStart, xmlPI$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlPI$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlPI$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlpi" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier) | SqlAnyIdentifier) (',' OptionalSpacing SqlExpression)? ')' OptionalSpacing)
      // "xmlpi"
      match = ignoreCaseStringMatcher("xmlpi", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (("evalname" TestNoAlpha OptionalSpacing SqlExpression) | ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier) | SqlAnyIdentifier)
                     // ("evalname" TestNoAlpha OptionalSpacing SqlExpression)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // "evalname"
                     match = ignoreCaseStringMatcher("evalname", 8);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("name" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "name"
                        match = ignoreCaseStringMatcher("name", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // SqlAnyIdentifier
                                 match = sqlAnyIdentifier$Rule();
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (! match) {
                           // SqlAnyIdentifier
                           match = sqlAnyIdentifier$Rule();
                        }
                     }
                     if (match) {
                        // (',' OptionalSpacing SqlExpression)?
                        // (',' OptionalSpacing SqlExpression)
                        Node lastNode_3 = currentNode;
                        int lastIndex_3 = index;
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (! match) {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                                 currentNode = lastNode_3;
                              }
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        }
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlPI$RuleMemoStart = startIndex;
         xmlPI$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlPI$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_PI, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlPI$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlPI$RuleMemoStart = startIndex;
         xmlPI$RuleMemoEnd = -1;
         xmlPI$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlQuery : ("xmlquery" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression XmlPassingClause? "returning" TestNoAlpha OptionalSpacing "content" TestNoAlpha OptionalSpacing ("null" TestNoAlpha OptionalSpacing "on" TestNoAlpha OptionalSpacing "empty" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
   protected boolean xmlQuery$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlQuery$RuleMemoStart == index) {
         if (xmlQuery$RuleMemoStart <= xmlQuery$RuleMemoEnd) {
            index = xmlQuery$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_QUERY, xmlQuery$RuleMemoStart, xmlQuery$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlQuery$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlQuery$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlquery" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression XmlPassingClause? "returning" TestNoAlpha OptionalSpacing "content" TestNoAlpha OptionalSpacing ("null" TestNoAlpha OptionalSpacing "on" TestNoAlpha OptionalSpacing "empty" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
      // "xmlquery"
      match = ignoreCaseStringMatcher("xmlquery", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // XmlPassingClause?
                        // XmlPassingClause
                        xmlPassingClause$Rule();
                        // "returning"
                        match = ignoreCaseStringMatcher("returning", 9);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "content"
                                 match = ignoreCaseStringMatcher("content", 7);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // ("null" TestNoAlpha OptionalSpacing "on" TestNoAlpha OptionalSpacing "empty" TestNoAlpha OptionalSpacing)?
                                          // ("null" TestNoAlpha OptionalSpacing "on" TestNoAlpha OptionalSpacing "empty" TestNoAlpha OptionalSpacing)
                                          Node lastNode_1 = currentNode;
                                          int lastIndex_1 = index;
                                          // "null"
                                          match = ignoreCaseStringMatcher("null", 4);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // "on"
                                                   match = ignoreCaseStringMatcher("on", 2);
                                                   if (match) {
                                                      // TestNoAlpha
                                                      match = testNoAlpha$Rule();
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (match) {
                                                            // "empty"
                                                            match = ignoreCaseStringMatcher("empty", 5);
                                                            if (match) {
                                                               // TestNoAlpha
                                                               match = testNoAlpha$Rule();
                                                               if (match) {
                                                                  // OptionalSpacing
                                                                  match = optionalSpacing$Rule();
                                                                  if (! match) {
                                                                     index = lastIndex_1;
                                                                     lastNode_1.setSibling(null);
                                                                     currentNode = lastNode_1;
                                                                  }
                                                               } else {
                                                                  index = lastIndex_1;
                                                                  lastNode_1.setSibling(null);
                                                               }
                                                            } else {
                                                               index = lastIndex_1;
                                                               lastNode_1.setSibling(null);
                                                            }
                                                         } else {
                                                            index = lastIndex_1;
                                                            lastNode_1.setSibling(null);
                                                         }
                                                      } else {
                                                         index = lastIndex_1;
                                                         lastNode_1.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_1;
                                                      lastNode_1.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_1;
                                                   lastNode_1.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                             }
                                          }
                                          // ')'
                                          match = charMatcher(')');
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlQuery$RuleMemoStart = startIndex;
         xmlQuery$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlQuery$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_QUERY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlQuery$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlQuery$RuleMemoStart = startIndex;
         xmlQuery$RuleMemoEnd = -1;
         xmlQuery$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlRoot : ("xmlroot" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ',' OptionalSpacing "version" TestNoAlpha OptionalSpacing (("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing) | SqlExpression) (',' OptionalSpacing "standalone" TestNoAlpha OptionalSpacing (("yes" TestNoAlpha OptionalSpacing) | ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)))? ')' OptionalSpacing)
   protected boolean xmlRoot$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlRoot$RuleMemoStart == index) {
         if (xmlRoot$RuleMemoStart <= xmlRoot$RuleMemoEnd) {
            index = xmlRoot$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_ROOT, xmlRoot$RuleMemoStart, xmlRoot$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlRoot$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlRoot$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmlroot" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ',' OptionalSpacing "version" TestNoAlpha OptionalSpacing (("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing) | SqlExpression) (',' OptionalSpacing "standalone" TestNoAlpha OptionalSpacing (("yes" TestNoAlpha OptionalSpacing) | ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)))? ')' OptionalSpacing)
      // "xmlroot"
      match = ignoreCaseStringMatcher("xmlroot", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "version"
                              match = ignoreCaseStringMatcher("version", 7);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // (("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing) | SqlExpression)
                                       // ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)
                                       Node lastNode_1 = currentNode;
                                       int lastIndex_1 = index;
                                       // "no"
                                       match = ignoreCaseStringMatcher("no", 2);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // "value"
                                                match = ignoreCaseStringMatcher("value", 5);
                                                if (match) {
                                                   // TestNoAlpha
                                                   match = testNoAlpha$Rule();
                                                   if (match) {
                                                      // OptionalSpacing
                                                      match = optionalSpacing$Rule();
                                                      if (! match) {
                                                         index = lastIndex_1;
                                                         lastNode_1.setSibling(null);
                                                         currentNode = lastNode_1;
                                                      }
                                                   } else {
                                                      index = lastIndex_1;
                                                      lastNode_1.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_1;
                                                   lastNode_1.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       }
                                       if (! match) {
                                          // SqlExpression
                                          match = sqlExpression$Rule();
                                       }
                                       if (match) {
                                          // (',' OptionalSpacing "standalone" TestNoAlpha OptionalSpacing (("yes" TestNoAlpha OptionalSpacing) | ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)))?
                                          // (',' OptionalSpacing "standalone" TestNoAlpha OptionalSpacing (("yes" TestNoAlpha OptionalSpacing) | ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)))
                                          Node lastNode_2 = currentNode;
                                          int lastIndex_2 = index;
                                          // ','
                                          match = charMatcher(',');
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // "standalone"
                                                match = ignoreCaseStringMatcher("standalone", 10);
                                                if (match) {
                                                   // TestNoAlpha
                                                   match = testNoAlpha$Rule();
                                                   if (match) {
                                                      // OptionalSpacing
                                                      match = optionalSpacing$Rule();
                                                      if (match) {
                                                         // (("yes" TestNoAlpha OptionalSpacing) | ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing))
                                                         // ("yes" TestNoAlpha OptionalSpacing)
                                                         Node lastNode_3 = currentNode;
                                                         int lastIndex_3 = index;
                                                         // "yes"
                                                         match = ignoreCaseStringMatcher("yes", 3);
                                                         if (match) {
                                                            // TestNoAlpha
                                                            match = testNoAlpha$Rule();
                                                            if (match) {
                                                               // OptionalSpacing
                                                               match = optionalSpacing$Rule();
                                                               if (! match) {
                                                                  index = lastIndex_3;
                                                                  lastNode_3.setSibling(null);
                                                                  currentNode = lastNode_3;
                                                               }
                                                            } else {
                                                               index = lastIndex_3;
                                                               lastNode_3.setSibling(null);
                                                            }
                                                         }
                                                         if (! match) {
                                                            // ("no" TestNoAlpha OptionalSpacing "value" TestNoAlpha OptionalSpacing)
                                                            Node lastNode_4 = currentNode;
                                                            int lastIndex_4 = index;
                                                            // "no"
                                                            match = ignoreCaseStringMatcher("no", 2);
                                                            if (match) {
                                                               // TestNoAlpha
                                                               match = testNoAlpha$Rule();
                                                               if (match) {
                                                                  // OptionalSpacing
                                                                  match = optionalSpacing$Rule();
                                                                  if (match) {
                                                                     // "value"
                                                                     match = ignoreCaseStringMatcher("value", 5);
                                                                     if (match) {
                                                                        // TestNoAlpha
                                                                        match = testNoAlpha$Rule();
                                                                        if (match) {
                                                                           // OptionalSpacing
                                                                           match = optionalSpacing$Rule();
                                                                           if (! match) {
                                                                              index = lastIndex_4;
                                                                              lastNode_4.setSibling(null);
                                                                              currentNode = lastNode_4;
                                                                           }
                                                                        } else {
                                                                           index = lastIndex_4;
                                                                           lastNode_4.setSibling(null);
                                                                        }
                                                                     } else {
                                                                        index = lastIndex_4;
                                                                        lastNode_4.setSibling(null);
                                                                     }
                                                                  } else {
                                                                     index = lastIndex_4;
                                                                     lastNode_4.setSibling(null);
                                                                  }
                                                               } else {
                                                                  index = lastIndex_4;
                                                                  lastNode_4.setSibling(null);
                                                               }
                                                            }
                                                         }
                                                         if (! match) {
                                                            index = lastIndex_2;
                                                            lastNode_2.setSibling(null);
                                                            currentNode = lastNode_2;
                                                         }
                                                      } else {
                                                         index = lastIndex_2;
                                                         lastNode_2.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_2;
                                                      lastNode_2.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_2;
                                                   lastNode_2.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_2;
                                                lastNode_2.setSibling(null);
                                             }
                                          }
                                          // ')'
                                          match = charMatcher(')');
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlRoot$RuleMemoStart = startIndex;
         xmlRoot$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlRoot$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_ROOT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlRoot$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlRoot$RuleMemoStart = startIndex;
         xmlRoot$RuleMemoEnd = -1;
         xmlRoot$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AsDataType : ("as" TestNoAlpha OptionalSpacing SqlDataType)
   protected boolean asDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("as" TestNoAlpha OptionalSpacing SqlDataType)
      // "as"
      match = ignoreCaseStringMatcher("as", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlDataType
               match = sqlDataType$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AS_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlSerialize : ("xmlparse" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("document" | "content") TestNoAlpha OptionalSpacing) SqlExpression AsDataType? ("encoding" TestNoAlpha OptionalSpacing SqlExpression)? ("version" TestNoAlpha OptionalSpacing StringLiteral)? (("no" TestNoAlpha OptionalSpacing "indent" TestNoAlpha OptionalSpacing) | ("indent" TestNoAlpha OptionalSpacing ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)?))? ((("hide" | "show") TestNoAlpha OptionalSpacing) "defaults" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
   protected boolean xmlSerialize$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("xmlparse" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("document" | "content") TestNoAlpha OptionalSpacing) SqlExpression AsDataType? ("encoding" TestNoAlpha OptionalSpacing SqlExpression)? ("version" TestNoAlpha OptionalSpacing StringLiteral)? (("no" TestNoAlpha OptionalSpacing "indent" TestNoAlpha OptionalSpacing) | ("indent" TestNoAlpha OptionalSpacing ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)?))? ((("hide" | "show") TestNoAlpha OptionalSpacing) "defaults" TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
      // "xmlparse"
      match = ignoreCaseStringMatcher("xmlparse", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (("document" | "content") TestNoAlpha OptionalSpacing)
                     // ("document" | "content")
                     int startIndex_1 = index;
                     switch(buffer.getChar(index)) {
                        case 'c':
                        case 'C': {
                           ++index;
                           // "ontent"
                           if (match = ignoreCaseStringTest("ontent", 6)) {
                              index += 6;
                           }
                           break;
                        }
                        case 'd':
                        case 'D': {
                           ++index;
                           // "ocument"
                           if (match = ignoreCaseStringTest("ocument", 7)) {
                              index += 7;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (! match) {
                        index = startIndex_1;
                     } else if(! currentRuleIsAtomic) {
                        currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                        currentNode = currentNode.getSibling();
                     }
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (match) {
                           // AsDataType?
                           // AsDataType
                           asDataType$Rule();
                           match = true;
                           // ("encoding" TestNoAlpha OptionalSpacing SqlExpression)?
                           // ("encoding" TestNoAlpha OptionalSpacing SqlExpression)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "encoding"
                           match = ignoreCaseStringMatcher("encoding", 8);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // SqlExpression
                                    match = sqlExpression$Rule();
                                    if (! match) {
                                       index = lastIndex_2;
                                       lastNode_2.setSibling(null);
                                       currentNode = lastNode_2;
                                    }
                                 } else {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           match = true;
                           // ("version" TestNoAlpha OptionalSpacing StringLiteral)?
                           // ("version" TestNoAlpha OptionalSpacing StringLiteral)
                           Node lastNode_3 = currentNode;
                           int lastIndex_3 = index;
                           // "version"
                           match = ignoreCaseStringMatcher("version", 7);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // StringLiteral
                                    match = stringLiteral$Rule();
                                    if (! match) {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                       currentNode = lastNode_3;
                                    }
                                 } else {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_3;
                                 lastNode_3.setSibling(null);
                              }
                           }
                           match = true;
                           // (("no" TestNoAlpha OptionalSpacing "indent" TestNoAlpha OptionalSpacing) | ("indent" TestNoAlpha OptionalSpacing ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)?))?
                           // (("no" TestNoAlpha OptionalSpacing "indent" TestNoAlpha OptionalSpacing) | ("indent" TestNoAlpha OptionalSpacing ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)?))
                           // ("no" TestNoAlpha OptionalSpacing "indent" TestNoAlpha OptionalSpacing)
                           Node lastNode_4 = currentNode;
                           int lastIndex_4 = index;
                           // "no"
                           match = ignoreCaseStringMatcher("no", 2);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // "indent"
                                    match = ignoreCaseStringMatcher("indent", 6);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_4;
                                             lastNode_4.setSibling(null);
                                             currentNode = lastNode_4;
                                          }
                                       } else {
                                          index = lastIndex_4;
                                          lastNode_4.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_4;
                                       lastNode_4.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_4;
                                    lastNode_4.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ("indent" TestNoAlpha OptionalSpacing ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)?)
                              Node lastNode_5 = currentNode;
                              int lastIndex_5 = index;
                              // "indent"
                              match = ignoreCaseStringMatcher("indent", 6);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)?
                                       // ("size" TestNoAlpha OptionalSpacing '=' OptionalSpacing SqlExpression)
                                       Node lastNode_6 = currentNode;
                                       int lastIndex_6 = index;
                                       // "size"
                                       match = ignoreCaseStringMatcher("size", 4);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // '='
                                                match = charMatcher('=');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // SqlExpression
                                                      match = sqlExpression$Rule();
                                                      if (! match) {
                                                         index = lastIndex_6;
                                                         lastNode_6.setSibling(null);
                                                         currentNode = lastNode_6;
                                                      }
                                                   } else {
                                                      index = lastIndex_6;
                                                      lastNode_6.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_6;
                                                   lastNode_6.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_6;
                                                lastNode_6.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_6;
                                             lastNode_6.setSibling(null);
                                          }
                                       }
                                       match = true;
                                    } else {
                                       index = lastIndex_5;
                                       lastNode_5.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_5;
                                    lastNode_5.setSibling(null);
                                 }
                              }
                           }
                           match = true;
                           // ((("hide" | "show") TestNoAlpha OptionalSpacing) "defaults" TestNoAlpha OptionalSpacing)?
                           // ((("hide" | "show") TestNoAlpha OptionalSpacing) "defaults" TestNoAlpha OptionalSpacing)
                           Node lastNode_7 = currentNode;
                           int lastIndex_7 = index;
                           // (("hide" | "show") TestNoAlpha OptionalSpacing)
                           Node lastNode_8 = currentNode;
                           int lastIndex_8 = index;
                           // ("hide" | "show")
                           int startIndex_9 = index;
                           switch(buffer.getChar(index)) {
                              case 'h':
                              case 'H': {
                                 ++index;
                                 // "ide"
                                 if (match = ignoreCaseStringTest("ide", 3)) {
                                    index += 3;
                                 }
                                 break;
                              }
                              case 's':
                              case 'S': {
                                 ++index;
                                 // "how"
                                 if (match = ignoreCaseStringTest("how", 3)) {
                                    index += 3;
                                 }
                                 break;
                              }
                              default: {
                                 match = false;
                              }
                           }
                           if (! currentRuleIsAtomic) {
                              currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_9, index, false, false));
                              currentNode = currentNode.getSibling();
                           }
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_8;
                                    lastNode_8.setSibling(null);
                                    currentNode = lastNode_8;
                                 }
                              } else {
                                 index = lastIndex_8;
                                 lastNode_8.setSibling(null);
                              }
                           }
                           if (match) {
                              // "defaults"
                              match = ignoreCaseStringMatcher("defaults", 8);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_7;
                                       lastNode_7.setSibling(null);
                                       currentNode = lastNode_7;
                                    }
                                 } else {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                              }
                           }
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_SERIALIZE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlNamespacesArg : (StringLiteral AsAlias)
   protected boolean xmlNamespacesArg$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlNamespacesArg$RuleMemoStart == index) {
         if (xmlNamespacesArg$RuleMemoStart <= xmlNamespacesArg$RuleMemoEnd) {
            index = xmlNamespacesArg$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_NAMESPACES_ARG, xmlNamespacesArg$RuleMemoStart, xmlNamespacesArg$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlNamespacesArg$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlNamespacesArg$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (StringLiteral AsAlias)
      // StringLiteral
      match = stringLiteral$Rule();
      if (match) {
         // AsAlias
         match = asAlias$Rule();
      }
      if (match) {
         xmlNamespacesArg$RuleMemoStart = startIndex;
         xmlNamespacesArg$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlNamespacesArg$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_NAMESPACES_ARG, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlNamespacesArg$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlNamespacesArg$RuleMemoStart = startIndex;
         xmlNamespacesArg$RuleMemoEnd = -1;
         xmlNamespacesArg$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlNamespacesArgs : (XmlNamespacesArg (',' OptionalSpacing XmlNamespacesArg)*)
   protected boolean xmlNamespacesArgs$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (XmlNamespacesArg (',' OptionalSpacing XmlNamespacesArg)*)
      // XmlNamespacesArg
      match = xmlNamespacesArg$Rule();
      if (match) {
         // (',' OptionalSpacing XmlNamespacesArg)*
         do {
            // (',' OptionalSpacing XmlNamespacesArg)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // XmlNamespacesArg
                  match = xmlNamespacesArg$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_NAMESPACES_ARGS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlNamespacesClause : ("xmlnamespaces" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlNamespacesArgs? ("default" TestNoAlpha OptionalSpacing StringLiteral)? ')' OptionalSpacing)
   protected boolean xmlNamespacesClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("xmlnamespaces" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlNamespacesArgs? ("default" TestNoAlpha OptionalSpacing StringLiteral)? ')' OptionalSpacing)
      // "xmlnamespaces"
      match = ignoreCaseStringMatcher("xmlnamespaces", 13);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // XmlNamespacesArgs?
                     // XmlNamespacesArgs
                     xmlNamespacesArgs$Rule();
                     match = true;
                     // ("default" TestNoAlpha OptionalSpacing StringLiteral)?
                     // ("default" TestNoAlpha OptionalSpacing StringLiteral)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // "default"
                     match = ignoreCaseStringMatcher("default", 7);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // StringLiteral
                              match = stringLiteral$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_NAMESPACES_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlTableColumn : (SqlIdentifier (("for" TestNoAlpha OptionalSpacing "ordinality" TestNoAlpha OptionalSpacing) | (SqlDataType ("path" TestNoAlpha OptionalSpacing StringLiteral)? ("default" TestNoAlpha OptionalSpacing SqlExpression)?)))
   protected boolean xmlTableColumn$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlTableColumn$RuleMemoStart == index) {
         if (xmlTableColumn$RuleMemoStart <= xmlTableColumn$RuleMemoEnd) {
            index = xmlTableColumn$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_TABLE_COLUMN, xmlTableColumn$RuleMemoStart, xmlTableColumn$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlTableColumn$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlTableColumn$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlIdentifier (("for" TestNoAlpha OptionalSpacing "ordinality" TestNoAlpha OptionalSpacing) | (SqlDataType ("path" TestNoAlpha OptionalSpacing StringLiteral)? ("default" TestNoAlpha OptionalSpacing SqlExpression)?)))
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         // (("for" TestNoAlpha OptionalSpacing "ordinality" TestNoAlpha OptionalSpacing) | (SqlDataType ("path" TestNoAlpha OptionalSpacing StringLiteral)? ("default" TestNoAlpha OptionalSpacing SqlExpression)?))
         // ("for" TestNoAlpha OptionalSpacing "ordinality" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "for"
         match = ignoreCaseStringMatcher("for", 3);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // "ordinality"
                  match = ignoreCaseStringMatcher("ordinality", 10);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         if (! match) {
            // (SqlDataType ("path" TestNoAlpha OptionalSpacing StringLiteral)? ("default" TestNoAlpha OptionalSpacing SqlExpression)?)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // SqlDataType
            match = sqlDataType$Rule();
            if (match) {
               // ("path" TestNoAlpha OptionalSpacing StringLiteral)?
               // ("path" TestNoAlpha OptionalSpacing StringLiteral)
               Node lastNode_3 = currentNode;
               int lastIndex_3 = index;
               // "path"
               match = ignoreCaseStringMatcher("path", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // StringLiteral
                        match = stringLiteral$Rule();
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               }
               match = true;
               // ("default" TestNoAlpha OptionalSpacing SqlExpression)?
               // ("default" TestNoAlpha OptionalSpacing SqlExpression)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "default"
               match = ignoreCaseStringMatcher("default", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlExpression
                        match = sqlExpression$Rule();
                        if (! match) {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                           currentNode = lastNode_4;
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         xmlTableColumn$RuleMemoStart = startIndex;
         xmlTableColumn$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlTableColumn$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_TABLE_COLUMN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlTableColumn$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlTableColumn$RuleMemoStart = startIndex;
         xmlTableColumn$RuleMemoEnd = -1;
         xmlTableColumn$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //XmlTableOptions : (XmlPassingClause? ("columns" TestNoAlpha OptionalSpacing XmlTableColumn (',' OptionalSpacing XmlTableColumn)*)?)
   protected boolean xmlTableOptions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (XmlPassingClause? ("columns" TestNoAlpha OptionalSpacing XmlTableColumn (',' OptionalSpacing XmlTableColumn)*)?)
      // XmlPassingClause?
      // XmlPassingClause
      xmlPassingClause$Rule();
      match = true;
      // ("columns" TestNoAlpha OptionalSpacing XmlTableColumn (',' OptionalSpacing XmlTableColumn)*)?
      // ("columns" TestNoAlpha OptionalSpacing XmlTableColumn (',' OptionalSpacing XmlTableColumn)*)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "columns"
      match = ignoreCaseStringMatcher("columns", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // XmlTableColumn
               match = xmlTableColumn$Rule();
               if (match) {
                  // (',' OptionalSpacing XmlTableColumn)*
                  do {
                     // (',' OptionalSpacing XmlTableColumn)
                     Node lastNode_2 = currentNode;
                     int lastIndex_2 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // XmlTableColumn
                           match = xmlTableColumn$Rule();
                           if (! match) {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                              currentNode = lastNode_2;
                           }
                        } else {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.XML_TABLE_OPTIONS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //XmlTable : ("xmltable" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlNamespacesClause? SqlExpression XmlTableOptions ')' OptionalSpacing)
   protected boolean xmlTable$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (xmlTable$RuleMemoStart == index) {
         if (xmlTable$RuleMemoStart <= xmlTable$RuleMemoEnd) {
            index = xmlTable$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.XML_TABLE, xmlTable$RuleMemoStart, xmlTable$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (xmlTable$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(xmlTable$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("xmltable" TestNoAlpha OptionalSpacing '(' OptionalSpacing XmlNamespacesClause? SqlExpression XmlTableOptions ')' OptionalSpacing)
      // "xmltable"
      match = ignoreCaseStringMatcher("xmltable", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // XmlNamespacesClause?
                     // XmlNamespacesClause
                     xmlNamespacesClause$Rule();
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // XmlTableOptions
                        match = xmlTableOptions$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         xmlTable$RuleMemoStart = startIndex;
         xmlTable$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            xmlTable$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.XML_TABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            xmlTable$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         xmlTable$RuleMemoStart = startIndex;
         xmlTable$RuleMemoEnd = -1;
         xmlTable$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BuiltInFunctionCall : (AnalyticFunctionCall | Cast | Chr | ClusterId | ClusterProbability | ClusterSet | CumeDistAggregate | Decompose | DenseRankAggregate | Extract | FeatureId | FeatureSet | FeatureValue | FirstValue | LastValue | Lead | ListAgg | Max | Median | Min | NTile | PercentRankAggregate | PercentRankAnalytic | Prediction | PredictionBounds | PredictionCost | PredictionDetails | PredictionProbability | PredictionSet | RankAggregate | RankAnalytic | Translate | Treat | Trim | XmlAgg | XmlCast | XmlColAttVal | XmlElement | XmlExists | XmlForest | XmlParse | XmlPI | XmlQuery | XmlRoot | XmlTable)
   protected boolean builtInFunctionCall$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (builtInFunctionCall$RuleMemoStart == index) {
         if (builtInFunctionCall$RuleMemoStart <= builtInFunctionCall$RuleMemoEnd) {
            index = builtInFunctionCall$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BUILT_IN_FUNCTION_CALL, builtInFunctionCall$RuleMemoStart, builtInFunctionCall$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (builtInFunctionCall$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(builtInFunctionCall$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (AnalyticFunctionCall | Cast | Chr | ClusterId | ClusterProbability | ClusterSet | CumeDistAggregate | Decompose | DenseRankAggregate | Extract | FeatureId | FeatureSet | FeatureValue | FirstValue | LastValue | Lead | ListAgg | Max | Median | Min | NTile | PercentRankAggregate | PercentRankAnalytic | Prediction | PredictionBounds | PredictionCost | PredictionDetails | PredictionProbability | PredictionSet | RankAggregate | RankAnalytic | Translate | Treat | Trim | XmlAgg | XmlCast | XmlColAttVal | XmlElement | XmlExists | XmlForest | XmlParse | XmlPI | XmlQuery | XmlRoot | XmlTable)
      switch(buffer.getChar(index)) {
         case 'l':
         case 'L': {
            // AnalyticFunctionCall
            match = analyticFunctionCall$Rule();
            if (! match) {
               // LastValue
               match = lastValue$Rule();
               if (! match) {
                  // Lead
                  match = lead$Rule();
                  if (! match) {
                     // ListAgg
                     match = listAgg$Rule();
                  }
               }
            }
            break;
         }
         case 'm':
         case 'M': {
            // Max
            match = max$Rule();
            if (! match) {
               // Median
               match = median$Rule();
               if (! match) {
                  // Min
                  match = min$Rule();
               }
            }
            break;
         }
         case 'n':
         case 'N': {
            // NTile
            match = nTile$Rule();
            break;
         }
         case 'p':
         case 'P': {
            // AnalyticFunctionCall
            match = analyticFunctionCall$Rule();
            if (! match) {
               // PercentRankAggregate
               match = percentRankAggregate$Rule();
               if (! match) {
                  // PercentRankAnalytic
                  match = percentRankAnalytic$Rule();
                  if (! match) {
                     // Prediction
                     match = prediction$Rule();
                     if (! match) {
                        // PredictionBounds
                        match = predictionBounds$Rule();
                        if (! match) {
                           // PredictionCost
                           match = predictionCost$Rule();
                           if (! match) {
                              // PredictionDetails
                              match = predictionDetails$Rule();
                              if (! match) {
                                 // PredictionProbability
                                 match = predictionProbability$Rule();
                                 if (! match) {
                                    // PredictionSet
                                    match = predictionSet$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'r':
         case 'R': {
            // AnalyticFunctionCall
            match = analyticFunctionCall$Rule();
            if (! match) {
               // RankAggregate
               match = rankAggregate$Rule();
               if (! match) {
                  // RankAnalytic
                  match = rankAnalytic$Rule();
               }
            }
            break;
         }
         case 'A':
         case 'a':
         case 's':
         case 'S':
         case 'v':
         case 'V': {
            // AnalyticFunctionCall
            match = analyticFunctionCall$Rule();
            break;
         }
         case 'C':
         case 'c': {
            // AnalyticFunctionCall
            match = analyticFunctionCall$Rule();
            if (! match) {
               // Cast
               match = cast$Rule();
               if (! match) {
                  // Chr
                  match = chr$Rule();
                  if (! match) {
                     // ClusterId
                     match = clusterId$Rule();
                     if (! match) {
                        // ClusterProbability
                        match = clusterProbability$Rule();
                        if (! match) {
                           // ClusterSet
                           match = clusterSet$Rule();
                           if (! match) {
                              // CumeDistAggregate
                              match = cumeDistAggregate$Rule();
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 't':
         case 'T': {
            // Translate
            match = translate$Rule();
            if (! match) {
               // Treat
               match = treat$Rule();
               if (! match) {
                  // Trim
                  match = trim$Rule();
               }
            }
            break;
         }
         case 'D':
         case 'd': {
            // AnalyticFunctionCall
            match = analyticFunctionCall$Rule();
            if (! match) {
               // Decompose
               match = decompose$Rule();
               if (! match) {
                  // DenseRankAggregate
                  match = denseRankAggregate$Rule();
               }
            }
            break;
         }
         case 'E':
         case 'e': {
            // Extract
            match = extract$Rule();
            break;
         }
         case 'F':
         case 'f': {
            // FeatureId
            match = featureId$Rule();
            if (! match) {
               // FeatureSet
               match = featureSet$Rule();
               if (! match) {
                  // FeatureValue
                  match = featureValue$Rule();
                  if (! match) {
                     // FirstValue
                     match = firstValue$Rule();
                  }
               }
            }
            break;
         }
         case 'x':
         case 'X': {
            // XmlAgg
            match = xmlAgg$Rule();
            if (! match) {
               // XmlCast
               match = xmlCast$Rule();
               if (! match) {
                  // XmlColAttVal
                  match = xmlColAttVal$Rule();
                  if (! match) {
                     // XmlElement
                     match = xmlElement$Rule();
                     if (! match) {
                        // XmlExists
                        match = xmlExists$Rule();
                        if (! match) {
                           // XmlForest
                           match = xmlForest$Rule();
                           if (! match) {
                              // XmlParse
                              match = xmlParse$Rule();
                              if (! match) {
                                 // XmlPI
                                 match = xmlPI$Rule();
                                 if (! match) {
                                    // XmlQuery
                                    match = xmlQuery$Rule();
                                    if (! match) {
                                       // XmlRoot
                                       match = xmlRoot$Rule();
                                       if (! match) {
                                          // XmlTable
                                          match = xmlTable$Rule();
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         builtInFunctionCall$RuleMemoStart = startIndex;
         builtInFunctionCall$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            builtInFunctionCall$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BUILT_IN_FUNCTION_CALL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            builtInFunctionCall$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         builtInFunctionCall$RuleMemoStart = startIndex;
         builtInFunctionCall$RuleMemoEnd = -1;
         builtInFunctionCall$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnalyticFunctionCall : (Avg | Corr | Count | CovarPop | CovarSamp | CumeDistAnalytic | DenseRankAnalytic | Lag | PercentileCont | PercentileDisc | RatioToReport | RegrLinearFunctions | RowNumber | StdDev | StdDevPop | StdDevSamp | Sum | VarPop | VarSamp | Variance)
   protected boolean analyticFunctionCall$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (analyticFunctionCall$RuleMemoStart == index) {
         if (analyticFunctionCall$RuleMemoStart <= analyticFunctionCall$RuleMemoEnd) {
            index = analyticFunctionCall$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ANALYTIC_FUNCTION_CALL, analyticFunctionCall$RuleMemoStart, analyticFunctionCall$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (analyticFunctionCall$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(analyticFunctionCall$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Avg | Corr | Count | CovarPop | CovarSamp | CumeDistAnalytic | DenseRankAnalytic | Lag | PercentileCont | PercentileDisc | RatioToReport | RegrLinearFunctions | RowNumber | StdDev | StdDevPop | StdDevSamp | Sum | VarPop | VarSamp | Variance)
      switch(buffer.getChar(index)) {
         case 'l':
         case 'L': {
            // Lag
            match = lag$Rule();
            break;
         }
         case 'p':
         case 'P': {
            // PercentileCont
            match = percentileCont$Rule();
            if (! match) {
               // PercentileDisc
               match = percentileDisc$Rule();
            }
            break;
         }
         case 'a':
         case 'A': {
            // Avg
            match = avg$Rule();
            break;
         }
         case 'r':
         case 'R': {
            // RatioToReport
            match = ratioToReport$Rule();
            if (! match) {
               // RegrLinearFunctions
               match = regrLinearFunctions$Rule();
               if (! match) {
                  // RowNumber
                  match = rowNumber$Rule();
               }
            }
            break;
         }
         case 's':
         case 'S': {
            // StdDev
            match = stdDev$Rule();
            if (! match) {
               // StdDevPop
               match = stdDevPop$Rule();
               if (! match) {
                  // StdDevSamp
                  match = stdDevSamp$Rule();
                  if (! match) {
                     // Sum
                     match = sum$Rule();
                  }
               }
            }
            break;
         }
         case 'c':
         case 'C': {
            // Corr
            match = corr$Rule();
            if (! match) {
               // Count
               match = count$Rule();
               if (! match) {
                  // CovarPop
                  match = covarPop$Rule();
                  if (! match) {
                     // CovarSamp
                     match = covarSamp$Rule();
                     if (! match) {
                        // CumeDistAnalytic
                        match = cumeDistAnalytic$Rule();
                     }
                  }
               }
            }
            break;
         }
         case 'd':
         case 'D': {
            // DenseRankAnalytic
            match = denseRankAnalytic$Rule();
            break;
         }
         case 'v':
         case 'V': {
            // VarPop
            match = varPop$Rule();
            if (! match) {
               // VarSamp
               match = varSamp$Rule();
               if (! match) {
                  // Variance
                  match = variance$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         analyticFunctionCall$RuleMemoStart = startIndex;
         analyticFunctionCall$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            analyticFunctionCall$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ANALYTIC_FUNCTION_CALL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            analyticFunctionCall$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         analyticFunctionCall$RuleMemoStart = startIndex;
         analyticFunctionCall$RuleMemoEnd = -1;
         analyticFunctionCall$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlIdentifiedFunctionParameter : (SqlAnyIdentifier ('=' OptionalSpacing '>' OptionalSpacing) SqlExpression)
   protected boolean sqlIdentifiedFunctionParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlIdentifiedFunctionParameter$RuleMemoStart == index) {
         if (sqlIdentifiedFunctionParameter$RuleMemoStart <= sqlIdentifiedFunctionParameter$RuleMemoEnd) {
            index = sqlIdentifiedFunctionParameter$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIED_FUNCTION_PARAMETER, sqlIdentifiedFunctionParameter$RuleMemoStart, sqlIdentifiedFunctionParameter$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlIdentifiedFunctionParameter$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlIdentifiedFunctionParameter$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlAnyIdentifier ('=' OptionalSpacing '>' OptionalSpacing) SqlExpression)
      // SqlAnyIdentifier
      match = sqlAnyIdentifier$Rule();
      if (match) {
         // ('=' OptionalSpacing '>' OptionalSpacing)
         // '='
         match = charMatcher('=');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '>'
               match = charMatcher('>');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
         if (match) {
            // SqlExpression
            match = sqlExpression$Rule();
         }
      }
      if (match) {
         sqlIdentifiedFunctionParameter$RuleMemoStart = startIndex;
         sqlIdentifiedFunctionParameter$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlIdentifiedFunctionParameter$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIED_FUNCTION_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlIdentifiedFunctionParameter$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlIdentifiedFunctionParameter$RuleMemoStart = startIndex;
         sqlIdentifiedFunctionParameter$RuleMemoEnd = -1;
         sqlIdentifiedFunctionParameter$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlFunctionParameter : (SqlIdentifiedFunctionParameter | SqlExpression)
   protected boolean sqlFunctionParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlFunctionParameter$RuleMemoStart == index) {
         if (sqlFunctionParameter$RuleMemoStart <= sqlFunctionParameter$RuleMemoEnd) {
            index = sqlFunctionParameter$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_FUNCTION_PARAMETER, sqlFunctionParameter$RuleMemoStart, sqlFunctionParameter$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlFunctionParameter$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlFunctionParameter$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlIdentifiedFunctionParameter | SqlExpression)
      switch(buffer.getChar(index)) {
         case '\'':
         case '(':
         case ':':
         case '+':
         case '-':
         case '?': {
            // SqlExpression
            match = sqlExpression$Rule();
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlIdentifiedFunctionParameter
            match = sqlIdentifiedFunctionParameter$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlFunctionParameter$RuleMemoStart = startIndex;
         sqlFunctionParameter$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlFunctionParameter$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_FUNCTION_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlFunctionParameter$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlFunctionParameter$RuleMemoStart = startIndex;
         sqlFunctionParameter$RuleMemoEnd = -1;
         sqlFunctionParameter$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnboundedPreceding : ("unbounded" TestNoAlpha OptionalSpacing "preceding" TestNoAlpha OptionalSpacing)
   protected boolean unboundedPreceding$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (unboundedPreceding$RuleMemoStart == index) {
         if (unboundedPreceding$RuleMemoStart <= unboundedPreceding$RuleMemoEnd) {
            index = unboundedPreceding$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UNBOUNDED_PRECEDING, unboundedPreceding$RuleMemoStart, unboundedPreceding$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (unboundedPreceding$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(unboundedPreceding$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("unbounded" TestNoAlpha OptionalSpacing "preceding" TestNoAlpha OptionalSpacing)
      // "unbounded"
      match = ignoreCaseStringMatcher("unbounded", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "preceding"
               match = ignoreCaseStringMatcher("preceding", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         unboundedPreceding$RuleMemoStart = startIndex;
         unboundedPreceding$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            unboundedPreceding$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNBOUNDED_PRECEDING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            unboundedPreceding$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         unboundedPreceding$RuleMemoStart = startIndex;
         unboundedPreceding$RuleMemoEnd = -1;
         unboundedPreceding$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnboundedFollowing : ("unbounded" TestNoAlpha OptionalSpacing "following" TestNoAlpha OptionalSpacing)
   protected boolean unboundedFollowing$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (unboundedFollowing$RuleMemoStart == index) {
         if (unboundedFollowing$RuleMemoStart <= unboundedFollowing$RuleMemoEnd) {
            index = unboundedFollowing$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UNBOUNDED_FOLLOWING, unboundedFollowing$RuleMemoStart, unboundedFollowing$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (unboundedFollowing$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(unboundedFollowing$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("unbounded" TestNoAlpha OptionalSpacing "following" TestNoAlpha OptionalSpacing)
      // "unbounded"
      match = ignoreCaseStringMatcher("unbounded", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "following"
               match = ignoreCaseStringMatcher("following", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         unboundedFollowing$RuleMemoStart = startIndex;
         unboundedFollowing$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            unboundedFollowing$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNBOUNDED_FOLLOWING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            unboundedFollowing$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         unboundedFollowing$RuleMemoStart = startIndex;
         unboundedFollowing$RuleMemoEnd = -1;
         unboundedFollowing$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CurrentRow : ("current" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing)
   protected boolean currentRow$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (currentRow$RuleMemoStart == index) {
         if (currentRow$RuleMemoStart <= currentRow$RuleMemoEnd) {
            index = currentRow$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CURRENT_ROW, currentRow$RuleMemoStart, currentRow$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (currentRow$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(currentRow$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("current" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing)
      // "current"
      match = ignoreCaseStringMatcher("current", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "row"
               match = ignoreCaseStringMatcher("row", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         currentRow$RuleMemoStart = startIndex;
         currentRow$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            currentRow$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURRENT_ROW, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            currentRow$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         currentRow$RuleMemoStart = startIndex;
         currentRow$RuleMemoEnd = -1;
         currentRow$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Preceding : (SqlExpression "preceding" TestNoAlpha OptionalSpacing)
   protected boolean preceding$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (preceding$RuleMemoStart == index) {
         if (preceding$RuleMemoStart <= preceding$RuleMemoEnd) {
            index = preceding$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PRECEDING, preceding$RuleMemoStart, preceding$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (preceding$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(preceding$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression "preceding" TestNoAlpha OptionalSpacing)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // "preceding"
         match = ignoreCaseStringMatcher("preceding", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         preceding$RuleMemoStart = startIndex;
         preceding$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            preceding$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRECEDING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            preceding$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         preceding$RuleMemoStart = startIndex;
         preceding$RuleMemoEnd = -1;
         preceding$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Following : (SqlExpression "following" TestNoAlpha OptionalSpacing)
   protected boolean following$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (following$RuleMemoStart == index) {
         if (following$RuleMemoStart <= following$RuleMemoEnd) {
            index = following$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FOLLOWING, following$RuleMemoStart, following$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (following$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(following$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression "following" TestNoAlpha OptionalSpacing)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // "following"
         match = ignoreCaseStringMatcher("following", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         following$RuleMemoStart = startIndex;
         following$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            following$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOLLOWING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            following$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         following$RuleMemoStart = startIndex;
         following$RuleMemoEnd = -1;
         following$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BetweenWindowingClause : ("between" TestNoAlpha OptionalSpacing (UnboundedPreceding | CurrentRow | Preceding | Following) "and" TestNoAlpha OptionalSpacing (UnboundedFollowing | CurrentRow | Preceding | Following))
   protected boolean betweenWindowingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (betweenWindowingClause$RuleMemoStart == index) {
         if (betweenWindowingClause$RuleMemoStart <= betweenWindowingClause$RuleMemoEnd) {
            index = betweenWindowingClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BETWEEN_WINDOWING_CLAUSE, betweenWindowingClause$RuleMemoStart, betweenWindowingClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (betweenWindowingClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(betweenWindowingClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("between" TestNoAlpha OptionalSpacing (UnboundedPreceding | CurrentRow | Preceding | Following) "and" TestNoAlpha OptionalSpacing (UnboundedFollowing | CurrentRow | Preceding | Following))
      // "between"
      match = ignoreCaseStringMatcher("between", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (UnboundedPreceding | CurrentRow | Preceding | Following)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '\'':
                  case '(':
                  case '+':
                  case '-':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ':':
                  case '?':
                  case 'A':
                  case 'B':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // Preceding
                     match = preceding$Rule();
                     if (! match) {
                        // Following
                        match = following$Rule();
                     }
                     break;
                  }
                  case 'C':
                  case 'c': {
                     // CurrentRow
                     match = currentRow$Rule();
                     if (! match) {
                        // Preceding
                        match = preceding$Rule();
                        if (! match) {
                           // Following
                           match = following$Rule();
                        }
                     }
                     break;
                  }
                  case 'U':
                  case 'u': {
                     // UnboundedPreceding
                     match = unboundedPreceding$Rule();
                     if (! match) {
                        // Preceding
                        match = preceding$Rule();
                        if (! match) {
                           // Following
                           match = following$Rule();
                        }
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // "and"
                  match = ignoreCaseStringMatcher("and", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // (UnboundedFollowing | CurrentRow | Preceding | Following)
                           switch(buffer.getChar(index)) {
                              case '\"':
                              case '#':
                              case '$':
                              case '\'':
                              case '(':
                              case '+':
                              case '-':
                              case '0':
                              case '1':
                              case '2':
                              case '3':
                              case '4':
                              case '5':
                              case '6':
                              case '7':
                              case '8':
                              case '9':
                              case ':':
                              case '?':
                              case 'A':
                              case 'B':
                              case 'D':
                              case 'E':
                              case 'F':
                              case 'G':
                              case 'H':
                              case 'I':
                              case 'J':
                              case 'K':
                              case 'L':
                              case 'M':
                              case 'N':
                              case 'O':
                              case 'P':
                              case 'Q':
                              case 'R':
                              case 'S':
                              case 'T':
                              case 'V':
                              case 'W':
                              case 'X':
                              case 'Y':
                              case 'Z':
                              case '_':
                              case 'a':
                              case 'b':
                              case 'd':
                              case 'e':
                              case 'f':
                              case 'g':
                              case 'h':
                              case 'i':
                              case 'j':
                              case 'k':
                              case 'l':
                              case 'm':
                              case 'n':
                              case 'o':
                              case 'p':
                              case 'q':
                              case 'r':
                              case 's':
                              case 't':
                              case 'v':
                              case 'w':
                              case 'x':
                              case 'y':
                              case 'z': {
                                 // Preceding
                                 match = preceding$Rule();
                                 if (! match) {
                                    // Following
                                    match = following$Rule();
                                 }
                                 break;
                              }
                              case 'C':
                              case 'c': {
                                 // CurrentRow
                                 match = currentRow$Rule();
                                 if (! match) {
                                    // Preceding
                                    match = preceding$Rule();
                                    if (! match) {
                                       // Following
                                       match = following$Rule();
                                    }
                                 }
                                 break;
                              }
                              case 'U':
                              case 'u': {
                                 // UnboundedFollowing
                                 match = unboundedFollowing$Rule();
                                 if (! match) {
                                    // Preceding
                                    match = preceding$Rule();
                                    if (! match) {
                                       // Following
                                       match = following$Rule();
                                    }
                                 }
                                 break;
                              }
                              default: {
                                 match = false;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         betweenWindowingClause$RuleMemoStart = startIndex;
         betweenWindowingClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            betweenWindowingClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BETWEEN_WINDOWING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            betweenWindowingClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         betweenWindowingClause$RuleMemoStart = startIndex;
         betweenWindowingClause$RuleMemoEnd = -1;
         betweenWindowingClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WindowingClause : ((("rows" | "range") TestNoAlpha OptionalSpacing) (BetweenWindowingClause | UnboundedPreceding | CurrentRow | Preceding))
   protected boolean windowingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((("rows" | "range") TestNoAlpha OptionalSpacing) (BetweenWindowingClause | UnboundedPreceding | CurrentRow | Preceding))
      // (("rows" | "range") TestNoAlpha OptionalSpacing)
      // ("rows" | "range")
      int startIndex_1 = index;
      if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
         ++index;
         // ("ange" | "ows")
         switch(buffer.getChar(index)) {
            case 'o':
            case 'O': {
               ++index;
               // "ws"
               if (match = ignoreCaseStringTest("ws", 2)) {
                  index += 2;
               }
               break;
            }
            case 'a':
            case 'A': {
               ++index;
               // "nge"
               if (match = ignoreCaseStringTest("nge", 3)) {
                  index += 3;
               }
               break;
            }
            default: {
               match = false;
            }
         }
      } else {
         match = false;
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // (BetweenWindowingClause | UnboundedPreceding | CurrentRow | Preceding)
         switch(buffer.getChar(index)) {
            case '\"':
            case '#':
            case '$':
            case '\'':
            case '(':
            case '+':
            case '-':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case '?':
            case 'A':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z': {
               // Preceding
               match = preceding$Rule();
               break;
            }
            case 'B':
            case 'b': {
               // BetweenWindowingClause
               match = betweenWindowingClause$Rule();
               if (! match) {
                  // Preceding
                  match = preceding$Rule();
               }
               break;
            }
            case 'C':
            case 'c': {
               // CurrentRow
               match = currentRow$Rule();
               if (! match) {
                  // Preceding
                  match = preceding$Rule();
               }
               break;
            }
            case 'U':
            case 'u': {
               // UnboundedPreceding
               match = unboundedPreceding$Rule();
               if (! match) {
                  // Preceding
                  match = preceding$Rule();
               }
               break;
            }
            default: {
               match = false;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.WINDOWING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnalyticOverClause : ("over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? (OrderByClause WindowingClause?)? ')' OptionalSpacing)
   protected boolean analyticOverClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (analyticOverClause$RuleMemoStart == index) {
         if (analyticOverClause$RuleMemoStart <= analyticOverClause$RuleMemoEnd) {
            index = analyticOverClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ANALYTIC_OVER_CLAUSE, analyticOverClause$RuleMemoStart, analyticOverClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (analyticOverClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(analyticOverClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("over" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryPartitionClause? (OrderByClause WindowingClause?)? ')' OptionalSpacing)
      // "over"
      match = ignoreCaseStringMatcher("over", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // QueryPartitionClause?
                     // QueryPartitionClause
                     queryPartitionClause$Rule();
                     match = true;
                     // (OrderByClause WindowingClause?)?
                     // (OrderByClause WindowingClause?)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // OrderByClause
                     match = orderByClause$Rule();
                     if (match) {
                        // WindowingClause?
                        // WindowingClause
                        windowingClause$Rule();
                        match = true;
                     }
                     // ')'
                     match = charMatcher(')');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         analyticOverClause$RuleMemoStart = startIndex;
         analyticOverClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            analyticOverClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ANALYTIC_OVER_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            analyticOverClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         analyticOverClause$RuleMemoStart = startIndex;
         analyticOverClause$RuleMemoEnd = -1;
         analyticOverClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelExpression : ((AnalyticFunctionCall ('[' OptionalSpacing (CellReferenceArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)?) | (SqlObjectIdentifier '[' OptionalSpacing ConditionOrExpressionList ']' OptionalSpacing))
   protected boolean modelExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (modelExpression$RuleMemoStart == index) {
         if (modelExpression$RuleMemoStart <= modelExpression$RuleMemoEnd) {
            index = modelExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_EXPRESSION, modelExpression$RuleMemoStart, modelExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (modelExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(modelExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((AnalyticFunctionCall ('[' OptionalSpacing (CellReferenceArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)?) | (SqlObjectIdentifier '[' OptionalSpacing ConditionOrExpressionList ']' OptionalSpacing))
      // (AnalyticFunctionCall ('[' OptionalSpacing (CellReferenceArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // AnalyticFunctionCall
      match = analyticFunctionCall$Rule();
      if (match) {
         // ('[' OptionalSpacing (CellReferenceArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)?
         // ('[' OptionalSpacing (CellReferenceArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // '['
         match = charMatcher('[');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (CellReferenceArgumentsList | MultiColumnForLoop)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '\'':
                  case '(':
                  case '+':
                  case '-':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ':':
                  case '?':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // CellReferenceArgumentsList
                     match = cellReferenceArgumentsList$Rule();
                     break;
                  }
                  case 'F':
                  case 'f': {
                     // CellReferenceArgumentsList
                     match = cellReferenceArgumentsList$Rule();
                     if (! match) {
                        // MultiColumnForLoop
                        match = multiColumnForLoop$Rule();
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // ']'
                  match = charMatcher(']');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         match = true;
      }
      if (! match) {
         // (SqlObjectIdentifier '[' OptionalSpacing ConditionOrExpressionList ']' OptionalSpacing)
         Node lastNode_3 = currentNode;
         int lastIndex_3 = index;
         // SqlObjectIdentifier
         match = sqlObjectIdentifier$Rule();
         if (match) {
            // '['
            match = charMatcher('[');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ConditionOrExpressionList
                  match = conditionOrExpressionList$Rule();
                  if (match) {
                     // ']'
                     match = charMatcher(']');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            } else {
               index = lastIndex_3;
               lastNode_3.setSibling(null);
            }
         }
      }
      if (match) {
         modelExpression$RuleMemoStart = startIndex;
         modelExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            modelExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            modelExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         modelExpression$RuleMemoStart = startIndex;
         modelExpression$RuleMemoEnd = -1;
         modelExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorExpression : ("cursor" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
   protected boolean cursorExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cursorExpression$RuleMemoStart == index) {
         if (cursorExpression$RuleMemoStart <= cursorExpression$RuleMemoEnd) {
            index = cursorExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_EXPRESSION, cursorExpression$RuleMemoStart, cursorExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cursorExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cursorExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("cursor" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
      // "cursor"
      match = ignoreCaseStringMatcher("cursor", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // Subquery
                     match = subquery$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         cursorExpression$RuleMemoStart = startIndex;
         cursorExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cursorExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cursorExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cursorExpression$RuleMemoStart = startIndex;
         cursorExpression$RuleMemoEnd = -1;
         cursorExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionOrExpression : (SqlCondition | SqlExpression)
   protected boolean conditionOrExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (conditionOrExpression$RuleMemoStart == index) {
         if (conditionOrExpression$RuleMemoStart <= conditionOrExpression$RuleMemoEnd) {
            index = conditionOrExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITION_OR_EXPRESSION, conditionOrExpression$RuleMemoStart, conditionOrExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (conditionOrExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(conditionOrExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlCondition | SqlExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlCondition
            match = sqlCondition$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         conditionOrExpression$RuleMemoStart = startIndex;
         conditionOrExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            conditionOrExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITION_OR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            conditionOrExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         conditionOrExpression$RuleMemoStart = startIndex;
         conditionOrExpression$RuleMemoEnd = -1;
         conditionOrExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionOrExpressionList : (ConditionOrExpression (',' OptionalSpacing ConditionOrExpression)*)
   protected boolean conditionOrExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ConditionOrExpression (',' OptionalSpacing ConditionOrExpression)*)
      // ConditionOrExpression
      match = conditionOrExpression$Rule();
      if (match) {
         // (',' OptionalSpacing ConditionOrExpression)*
         do {
            // (',' OptionalSpacing ConditionOrExpression)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ConditionOrExpression
                  match = conditionOrExpression$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITION_OR_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CellReferenceArgumentsList : (CellReferenceArgument (',' OptionalSpacing CellReferenceArgument)*)
   protected boolean cellReferenceArgumentsList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cellReferenceArgumentsList$RuleMemoStart == index) {
         if (cellReferenceArgumentsList$RuleMemoStart <= cellReferenceArgumentsList$RuleMemoEnd) {
            index = cellReferenceArgumentsList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_REFERENCE_ARGUMENTS_LIST, cellReferenceArgumentsList$RuleMemoStart, cellReferenceArgumentsList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cellReferenceArgumentsList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cellReferenceArgumentsList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (CellReferenceArgument (',' OptionalSpacing CellReferenceArgument)*)
      // CellReferenceArgument
      match = cellReferenceArgument$Rule();
      if (match) {
         // (',' OptionalSpacing CellReferenceArgument)*
         do {
            // (',' OptionalSpacing CellReferenceArgument)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // CellReferenceArgument
                  match = cellReferenceArgument$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         cellReferenceArgumentsList$RuleMemoStart = startIndex;
         cellReferenceArgumentsList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cellReferenceArgumentsList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_REFERENCE_ARGUMENTS_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cellReferenceArgumentsList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cellReferenceArgumentsList$RuleMemoStart = startIndex;
         cellReferenceArgumentsList$RuleMemoEnd = -1;
         cellReferenceArgumentsList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CellReferenceArgument : (SqlCondition | SqlExpression | SingleColumnForLoop)
   protected boolean cellReferenceArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cellReferenceArgument$RuleMemoStart == index) {
         if (cellReferenceArgument$RuleMemoStart <= cellReferenceArgument$RuleMemoEnd) {
            index = cellReferenceArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_REFERENCE_ARGUMENT, cellReferenceArgument$RuleMemoStart, cellReferenceArgument$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cellReferenceArgument$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cellReferenceArgument$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlCondition | SqlExpression | SingleColumnForLoop)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlCondition
            match = sqlCondition$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         case 'F':
         case 'f': {
            // SqlCondition
            match = sqlCondition$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
               if (! match) {
                  // SingleColumnForLoop
                  match = singleColumnForLoop$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         cellReferenceArgument$RuleMemoStart = startIndex;
         cellReferenceArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cellReferenceArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_REFERENCE_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cellReferenceArgument$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cellReferenceArgument$RuleMemoStart = startIndex;
         cellReferenceArgument$RuleMemoEnd = -1;
         cellReferenceArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlaceHolderExpression : (BindVariable (("indicator" TestNoAlpha OptionalSpacing)? BindVariable)?)
   protected boolean placeHolderExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (placeHolderExpression$RuleMemoStart == index) {
         if (placeHolderExpression$RuleMemoStart <= placeHolderExpression$RuleMemoEnd) {
            index = placeHolderExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PLACE_HOLDER_EXPRESSION, placeHolderExpression$RuleMemoStart, placeHolderExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (placeHolderExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(placeHolderExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BindVariable (("indicator" TestNoAlpha OptionalSpacing)? BindVariable)?)
      // BindVariable
      match = bindVariable$Rule();
      if (match) {
         // (("indicator" TestNoAlpha OptionalSpacing)? BindVariable)?
         // (("indicator" TestNoAlpha OptionalSpacing)? BindVariable)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // ("indicator" TestNoAlpha OptionalSpacing)?
         // ("indicator" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "indicator"
         match = ignoreCaseStringMatcher("indicator", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         // BindVariable
         match = bindVariable$Rule();
         if (! match) {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
            currentNode = lastNode_1;
         }
         match = true;
      }
      if (match) {
         placeHolderExpression$RuleMemoStart = startIndex;
         placeHolderExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            placeHolderExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PLACE_HOLDER_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            placeHolderExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         placeHolderExpression$RuleMemoStart = startIndex;
         placeHolderExpression$RuleMemoEnd = -1;
         placeHolderExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeConstructorExpression : ("new" TestNoAlpha OptionalSpacing SchemaObjectName '(' OptionalSpacing SqlExpressionList ')' OptionalSpacing)
   protected boolean typeConstructorExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (typeConstructorExpression$RuleMemoStart == index) {
         if (typeConstructorExpression$RuleMemoStart <= typeConstructorExpression$RuleMemoEnd) {
            index = typeConstructorExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TYPE_CONSTRUCTOR_EXPRESSION, typeConstructorExpression$RuleMemoStart, typeConstructorExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (typeConstructorExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(typeConstructorExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("new" TestNoAlpha OptionalSpacing SchemaObjectName '(' OptionalSpacing SqlExpressionList ')' OptionalSpacing)
      // "new"
      match = ignoreCaseStringMatcher("new", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SchemaObjectName
               match = schemaObjectName$Rule();
               if (match) {
                  // '('
                  match = charMatcher('(');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlExpressionList
                        match = sqlExpressionList$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         typeConstructorExpression$RuleMemoStart = startIndex;
         typeConstructorExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            typeConstructorExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TYPE_CONSTRUCTOR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            typeConstructorExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         typeConstructorExpression$RuleMemoStart = startIndex;
         typeConstructorExpression$RuleMemoEnd = -1;
         typeConstructorExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PivotForClause : ("for" TestNoAlpha OptionalSpacing (SqlAnyIdentifier | ('(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing)))
   protected boolean pivotForClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (pivotForClause$RuleMemoStart == index) {
         if (pivotForClause$RuleMemoStart <= pivotForClause$RuleMemoEnd) {
            index = pivotForClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PIVOT_FOR_CLAUSE, pivotForClause$RuleMemoStart, pivotForClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (pivotForClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(pivotForClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing (SqlAnyIdentifier | ('(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing)))
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (SqlAnyIdentifier | ('(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing))
               // SqlAnyIdentifier
               match = sqlAnyIdentifier$Rule();
               if (! match) {
                  // ('(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // '('
                  match = charMatcher('(');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlIdentifierList
                        match = sqlIdentifierList$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               }
            }
         }
      }
      if (match) {
         pivotForClause$RuleMemoStart = startIndex;
         pivotForClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            pivotForClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PIVOT_FOR_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            pivotForClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         pivotForClause$RuleMemoStart = startIndex;
         pivotForClause$RuleMemoEnd = -1;
         pivotForClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnyList : ("any" TestNoAlpha OptionalSpacing (',' OptionalSpacing "any" TestNoAlpha OptionalSpacing)*)
   protected boolean anyList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (anyList$RuleMemoStart == index) {
         if (anyList$RuleMemoStart <= anyList$RuleMemoEnd) {
            index = anyList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ANY_LIST, anyList$RuleMemoStart, anyList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (anyList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(anyList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("any" TestNoAlpha OptionalSpacing (',' OptionalSpacing "any" TestNoAlpha OptionalSpacing)*)
      // "any"
      match = ignoreCaseStringMatcher("any", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (',' OptionalSpacing "any" TestNoAlpha OptionalSpacing)*
               do {
                  // (',' OptionalSpacing "any" TestNoAlpha OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "any"
                        match = ignoreCaseStringMatcher("any", 3);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
         }
      }
      if (match) {
         anyList$RuleMemoStart = startIndex;
         anyList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            anyList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ANY_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            anyList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         anyList$RuleMemoStart = startIndex;
         anyList$RuleMemoEnd = -1;
         anyList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlExpressionList : (SqlExpression (',' OptionalSpacing SqlExpression)*)
   protected boolean sqlExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlExpressionList$RuleMemoStart == index) {
         if (sqlExpressionList$RuleMemoStart <= sqlExpressionList$RuleMemoEnd) {
            index = sqlExpressionList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_EXPRESSION_LIST, sqlExpressionList$RuleMemoStart, sqlExpressionList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlExpressionList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlExpressionList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression (',' OptionalSpacing SqlExpression)*)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // (',' OptionalSpacing SqlExpression)*
         do {
            // (',' OptionalSpacing SqlExpression)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlExpression
                  match = sqlExpression$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         sqlExpressionList$RuleMemoStart = startIndex;
         sqlExpressionList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlExpressionList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlExpressionList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlExpressionList$RuleMemoStart = startIndex;
         sqlExpressionList$RuleMemoEnd = -1;
         sqlExpressionList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParenthesesSqlExpressionList : ('(' OptionalSpacing SqlExpressionList ')' OptionalSpacing)
   protected boolean parenthesesSqlExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parenthesesSqlExpressionList$RuleMemoStart == index) {
         if (parenthesesSqlExpressionList$RuleMemoStart <= parenthesesSqlExpressionList$RuleMemoEnd) {
            index = parenthesesSqlExpressionList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_SQL_EXPRESSION_LIST, parenthesesSqlExpressionList$RuleMemoStart, parenthesesSqlExpressionList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (parenthesesSqlExpressionList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(parenthesesSqlExpressionList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing SqlExpressionList ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlExpressionList
            match = sqlExpressionList$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         parenthesesSqlExpressionList$RuleMemoStart = startIndex;
         parenthesesSqlExpressionList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parenthesesSqlExpressionList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_SQL_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parenthesesSqlExpressionList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         parenthesesSqlExpressionList$RuleMemoStart = startIndex;
         parenthesesSqlExpressionList$RuleMemoEnd = -1;
         parenthesesSqlExpressionList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PivoInExpressionList : (PivotInExpression (',' OptionalSpacing PivotInExpression)*)
   protected boolean pivoInExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (pivoInExpressionList$RuleMemoStart == index) {
         if (pivoInExpressionList$RuleMemoStart <= pivoInExpressionList$RuleMemoEnd) {
            index = pivoInExpressionList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PIVO_IN_EXPRESSION_LIST, pivoInExpressionList$RuleMemoStart, pivoInExpressionList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (pivoInExpressionList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(pivoInExpressionList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (PivotInExpression (',' OptionalSpacing PivotInExpression)*)
      // PivotInExpression
      match = pivotInExpression$Rule();
      if (match) {
         // (',' OptionalSpacing PivotInExpression)*
         do {
            // (',' OptionalSpacing PivotInExpression)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // PivotInExpression
                  match = pivotInExpression$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         pivoInExpressionList$RuleMemoStart = startIndex;
         pivoInExpressionList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            pivoInExpressionList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PIVO_IN_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            pivoInExpressionList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         pivoInExpressionList$RuleMemoStart = startIndex;
         pivoInExpressionList$RuleMemoEnd = -1;
         pivoInExpressionList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AsOptionalAlias : (("as" TestNoAlpha OptionalSpacing)? SqlIdentifier)
   protected boolean asOptionalAlias$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (asOptionalAlias$RuleMemoStart == index) {
         if (asOptionalAlias$RuleMemoStart <= asOptionalAlias$RuleMemoEnd) {
            index = asOptionalAlias$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.AS_OPTIONAL_ALIAS, asOptionalAlias$RuleMemoStart, asOptionalAlias$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (asOptionalAlias$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(asOptionalAlias$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("as" TestNoAlpha OptionalSpacing)? SqlIdentifier)
      // ("as" TestNoAlpha OptionalSpacing)?
      // ("as" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "as"
      match = ignoreCaseStringMatcher("as", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         asOptionalAlias$RuleMemoStart = startIndex;
         asOptionalAlias$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            asOptionalAlias$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AS_OPTIONAL_ALIAS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            asOptionalAlias$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         asOptionalAlias$RuleMemoStart = startIndex;
         asOptionalAlias$RuleMemoEnd = -1;
         asOptionalAlias$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PivotInExpression : (SqlExpressionList AsOptionalAlias?)
   protected boolean pivotInExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (pivotInExpression$RuleMemoStart == index) {
         if (pivotInExpression$RuleMemoStart <= pivotInExpression$RuleMemoEnd) {
            index = pivotInExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PIVOT_IN_EXPRESSION, pivotInExpression$RuleMemoStart, pivotInExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (pivotInExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(pivotInExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpressionList AsOptionalAlias?)
      // SqlExpressionList
      match = sqlExpressionList$Rule();
      if (match) {
         // AsOptionalAlias?
         // AsOptionalAlias
         asOptionalAlias$Rule();
         match = true;
      }
      if (match) {
         pivotInExpression$RuleMemoStart = startIndex;
         pivotInExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            pivotInExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PIVOT_IN_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            pivotInExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         pivotInExpression$RuleMemoStart = startIndex;
         pivotInExpression$RuleMemoEnd = -1;
         pivotInExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PivotInClause : ("in" TestNoAlpha OptionalSpacing '(' OptionalSpacing (AnyList | Subquery | PivoInExpressionList) ')' OptionalSpacing)
   protected boolean pivotInClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("in" TestNoAlpha OptionalSpacing '(' OptionalSpacing (AnyList | Subquery | PivoInExpressionList) ')' OptionalSpacing)
      // "in"
      match = ignoreCaseStringMatcher("in", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (AnyList | Subquery | PivoInExpressionList)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '\'':
                        case '+':
                        case '-':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case ':':
                        case '?':
                        case 'B':
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'b':
                        case 'c':
                        case 'd':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // PivoInExpressionList
                           match = pivoInExpressionList$Rule();
                           break;
                        }
                        case 'A':
                        case 'a': {
                           // AnyList
                           match = anyList$Rule();
                           if (! match) {
                              // PivoInExpressionList
                              match = pivoInExpressionList$Rule();
                           }
                           break;
                        }
                        case 'S':
                        case 's':
                        case '(': {
                           // Subquery
                           match = subquery$Rule();
                           if (! match) {
                              // PivoInExpressionList
                              match = pivoInExpressionList$Rule();
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PIVOT_IN_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PivotClause : ("pivot" TestNoAlpha OptionalSpacing ("xml" TestNoAlpha OptionalSpacing)? '(' OptionalSpacing SqlAnyIdentifier '(' OptionalSpacing SqlExpression ')' OptionalSpacing AsOptionalAlias? PivotForClause PivotInClause ')' OptionalSpacing)
   protected boolean pivotClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("pivot" TestNoAlpha OptionalSpacing ("xml" TestNoAlpha OptionalSpacing)? '(' OptionalSpacing SqlAnyIdentifier '(' OptionalSpacing SqlExpression ')' OptionalSpacing AsOptionalAlias? PivotForClause PivotInClause ')' OptionalSpacing)
      // "pivot"
      match = ignoreCaseStringMatcher("pivot", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("xml" TestNoAlpha OptionalSpacing)?
               // ("xml" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "xml"
               match = ignoreCaseStringMatcher("xml", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlAnyIdentifier
                     match = sqlAnyIdentifier$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // AsOptionalAlias?
                                       // AsOptionalAlias
                                       asOptionalAlias$Rule();
                                       // PivotForClause
                                       match = pivotForClause$Rule();
                                       if (match) {
                                          // PivotInClause
                                          match = pivotInClause$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PIVOT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IncludeNulls : ("include" TestNoAlpha OptionalSpacing "nulls" TestNoAlpha OptionalSpacing)
   protected boolean includeNulls$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (includeNulls$RuleMemoStart == index) {
         if (includeNulls$RuleMemoStart <= includeNulls$RuleMemoEnd) {
            index = includeNulls$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INCLUDE_NULLS, includeNulls$RuleMemoStart, includeNulls$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (includeNulls$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(includeNulls$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("include" TestNoAlpha OptionalSpacing "nulls" TestNoAlpha OptionalSpacing)
      // "include"
      match = ignoreCaseStringMatcher("include", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "nulls"
               match = ignoreCaseStringMatcher("nulls", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         includeNulls$RuleMemoStart = startIndex;
         includeNulls$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            includeNulls$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INCLUDE_NULLS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            includeNulls$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         includeNulls$RuleMemoStart = startIndex;
         includeNulls$RuleMemoEnd = -1;
         includeNulls$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExcludeNulls : ("exclude" TestNoAlpha OptionalSpacing "nulls" TestNoAlpha OptionalSpacing)
   protected boolean excludeNulls$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (excludeNulls$RuleMemoStart == index) {
         if (excludeNulls$RuleMemoStart <= excludeNulls$RuleMemoEnd) {
            index = excludeNulls$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.EXCLUDE_NULLS, excludeNulls$RuleMemoStart, excludeNulls$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (excludeNulls$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(excludeNulls$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("exclude" TestNoAlpha OptionalSpacing "nulls" TestNoAlpha OptionalSpacing)
      // "exclude"
      match = ignoreCaseStringMatcher("exclude", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "nulls"
               match = ignoreCaseStringMatcher("nulls", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         excludeNulls$RuleMemoStart = startIndex;
         excludeNulls$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            excludeNulls$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXCLUDE_NULLS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            excludeNulls$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         excludeNulls$RuleMemoStart = startIndex;
         excludeNulls$RuleMemoEnd = -1;
         excludeNulls$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnpivotClause : ("unpivot" TestNoAlpha OptionalSpacing (IncludeNulls | ExcludeNulls)? '(' OptionalSpacing (SqlObjectIdentifier | ColumnsList) PivotForClause UnpivotInClause ')' OptionalSpacing)
   protected boolean unpivotClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("unpivot" TestNoAlpha OptionalSpacing (IncludeNulls | ExcludeNulls)? '(' OptionalSpacing (SqlObjectIdentifier | ColumnsList) PivotForClause UnpivotInClause ')' OptionalSpacing)
      // "unpivot"
      match = ignoreCaseStringMatcher("unpivot", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (IncludeNulls | ExcludeNulls)?
               // (IncludeNulls | ExcludeNulls)
               switch(buffer.getChar(index)) {
                  case 'e':
                  case 'E': {
                     // ExcludeNulls
                     match = excludeNulls$Rule();
                     break;
                  }
                  case 'i':
                  case 'I': {
                     // IncludeNulls
                     match = includeNulls$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (SqlObjectIdentifier | ColumnsList)
                     switch(buffer.getChar(index)) {
                        case '\"':
                        case '#':
                        case '$':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case 'A':
                        case 'B':
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                        case 'G':
                        case 'H':
                        case 'I':
                        case 'J':
                        case 'K':
                        case 'L':
                        case 'M':
                        case 'N':
                        case 'O':
                        case 'P':
                        case 'Q':
                        case 'R':
                        case 'S':
                        case 'T':
                        case 'U':
                        case 'V':
                        case 'W':
                        case 'X':
                        case 'Y':
                        case 'Z':
                        case '_':
                        case 'a':
                        case 'b':
                        case 'c':
                        case 'd':
                        case 'e':
                        case 'f':
                        case 'g':
                        case 'h':
                        case 'i':
                        case 'j':
                        case 'k':
                        case 'l':
                        case 'm':
                        case 'n':
                        case 'o':
                        case 'p':
                        case 'q':
                        case 'r':
                        case 's':
                        case 't':
                        case 'u':
                        case 'v':
                        case 'w':
                        case 'x':
                        case 'y':
                        case 'z': {
                           // SqlObjectIdentifier
                           match = sqlObjectIdentifier$Rule();
                           break;
                        }
                        case '(': {
                           // ColumnsList
                           match = columnsList$Rule();
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // PivotForClause
                        match = pivotForClause$Rule();
                        if (match) {
                           // UnpivotInClause
                           match = unpivotInClause$Rule();
                           if (match) {
                              // ')'
                              match = charMatcher(')');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNPIVOT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnpivotInClause : ("in" TestNoAlpha OptionalSpacing '(' OptionalSpacing UnpivotInClauseList ')' OptionalSpacing)
   protected boolean unpivotInClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("in" TestNoAlpha OptionalSpacing '(' OptionalSpacing UnpivotInClauseList ')' OptionalSpacing)
      // "in"
      match = ignoreCaseStringMatcher("in", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // UnpivotInClauseList
                     match = unpivotInClauseList$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNPIVOT_IN_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnpivotInElement : ((SqlObjectIdentifier | ColumnsList) ("as" TestNoAlpha OptionalSpacing (SqlLiteral | ParenthesesLiteralList))?)
   protected boolean unpivotInElement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (unpivotInElement$RuleMemoStart == index) {
         if (unpivotInElement$RuleMemoStart <= unpivotInElement$RuleMemoEnd) {
            index = unpivotInElement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UNPIVOT_IN_ELEMENT, unpivotInElement$RuleMemoStart, unpivotInElement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (unpivotInElement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(unpivotInElement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((SqlObjectIdentifier | ColumnsList) ("as" TestNoAlpha OptionalSpacing (SqlLiteral | ParenthesesLiteralList))?)
      // (SqlObjectIdentifier | ColumnsList)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlObjectIdentifier
            match = sqlObjectIdentifier$Rule();
            break;
         }
         case '(': {
            // ColumnsList
            match = columnsList$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // ("as" TestNoAlpha OptionalSpacing (SqlLiteral | ParenthesesLiteralList))?
         // ("as" TestNoAlpha OptionalSpacing (SqlLiteral | ParenthesesLiteralList))
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "as"
         match = ignoreCaseStringMatcher("as", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // (SqlLiteral | ParenthesesLiteralList)
                  switch(buffer.getChar(index)) {
                     case 'd':
                     case 'D':
                     case '\'':
                     case 'i':
                     case 'I':
                     case '+':
                     case '-':
                     case 'n':
                     case 'N':
                     case '0':
                     case '1':
                     case '2':
                     case '3':
                     case '4':
                     case 't':
                     case 'T':
                     case '5':
                     case '6':
                     case '7':
                     case '8':
                     case '9': {
                        // SqlLiteral
                        match = sqlLiteral$Rule();
                        break;
                     }
                     case '(': {
                        // ParenthesesLiteralList
                        match = parenthesesLiteralList$Rule();
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         match = true;
      }
      if (match) {
         unpivotInElement$RuleMemoStart = startIndex;
         unpivotInElement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            unpivotInElement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNPIVOT_IN_ELEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            unpivotInElement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         unpivotInElement$RuleMemoStart = startIndex;
         unpivotInElement$RuleMemoEnd = -1;
         unpivotInElement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnpivotInClauseList : (UnpivotInElement (',' OptionalSpacing UnpivotInElement)*)
   protected boolean unpivotInClauseList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (UnpivotInElement (',' OptionalSpacing UnpivotInElement)*)
      // UnpivotInElement
      match = unpivotInElement$Rule();
      if (match) {
         // (',' OptionalSpacing UnpivotInElement)*
         do {
            // (',' OptionalSpacing UnpivotInElement)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // UnpivotInElement
                  match = unpivotInElement$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNPIVOT_IN_CLAUSE_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlLiteralList : (SqlLiteral (',' OptionalSpacing SqlLiteral)*)
   protected boolean sqlLiteralList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlLiteralList$RuleMemoStart == index) {
         if (sqlLiteralList$RuleMemoStart <= sqlLiteralList$RuleMemoEnd) {
            index = sqlLiteralList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_LITERAL_LIST, sqlLiteralList$RuleMemoStart, sqlLiteralList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlLiteralList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlLiteralList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlLiteral (',' OptionalSpacing SqlLiteral)*)
      // SqlLiteral
      match = sqlLiteral$Rule();
      if (match) {
         // (',' OptionalSpacing SqlLiteral)*
         do {
            // (',' OptionalSpacing SqlLiteral)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlLiteral
                  match = sqlLiteral$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         sqlLiteralList$RuleMemoStart = startIndex;
         sqlLiteralList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlLiteralList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_LITERAL_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlLiteralList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlLiteralList$RuleMemoStart = startIndex;
         sqlLiteralList$RuleMemoEnd = -1;
         sqlLiteralList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParenthesesLiteralList : ('(' OptionalSpacing SqlLiteralList ')' OptionalSpacing)
   protected boolean parenthesesLiteralList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parenthesesLiteralList$RuleMemoStart == index) {
         if (parenthesesLiteralList$RuleMemoStart <= parenthesesLiteralList$RuleMemoEnd) {
            index = parenthesesLiteralList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_LITERAL_LIST, parenthesesLiteralList$RuleMemoStart, parenthesesLiteralList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (parenthesesLiteralList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(parenthesesLiteralList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing SqlLiteralList ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlLiteralList
            match = sqlLiteralList$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         parenthesesLiteralList$RuleMemoStart = startIndex;
         parenthesesLiteralList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parenthesesLiteralList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_LITERAL_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parenthesesLiteralList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         parenthesesLiteralList$RuleMemoStart = startIndex;
         parenthesesLiteralList$RuleMemoEnd = -1;
         parenthesesLiteralList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParenthesesLiteralListList : (ParenthesesLiteralList (',' OptionalSpacing ParenthesesLiteralList)*)
   protected boolean parenthesesLiteralListList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parenthesesLiteralListList$RuleMemoStart == index) {
         if (parenthesesLiteralListList$RuleMemoStart <= parenthesesLiteralListList$RuleMemoEnd) {
            index = parenthesesLiteralListList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_LITERAL_LIST_LIST, parenthesesLiteralListList$RuleMemoStart, parenthesesLiteralListList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (parenthesesLiteralListList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(parenthesesLiteralListList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ParenthesesLiteralList (',' OptionalSpacing ParenthesesLiteralList)*)
      // ParenthesesLiteralList
      match = parenthesesLiteralList$Rule();
      if (match) {
         // (',' OptionalSpacing ParenthesesLiteralList)*
         do {
            // (',' OptionalSpacing ParenthesesLiteralList)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ParenthesesLiteralList
                  match = parenthesesLiteralList$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         parenthesesLiteralListList$RuleMemoStart = startIndex;
         parenthesesLiteralListList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parenthesesLiteralListList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_LITERAL_LIST_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parenthesesLiteralListList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         parenthesesLiteralListList$RuleMemoStart = startIndex;
         parenthesesLiteralListList$RuleMemoEnd = -1;
         parenthesesLiteralListList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Schema : SqlIdentifier
   protected boolean schema$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (schema$RuleMemoStart == index) {
         if (schema$RuleMemoStart <= schema$RuleMemoEnd) {
            index = schema$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SCHEMA, schema$RuleMemoStart, schema$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (schema$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(schema$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         schema$RuleMemoStart = startIndex;
         schema$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            schema$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SCHEMA, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            schema$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         schema$RuleMemoStart = startIndex;
         schema$RuleMemoEnd = -1;
         schema$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Table : SqlIdentifier
   protected boolean table$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (table$RuleMemoStart == index) {
         if (table$RuleMemoStart <= table$RuleMemoEnd) {
            index = table$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE, table$RuleMemoStart, table$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (table$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(table$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         table$RuleMemoStart = startIndex;
         table$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            table$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            table$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         table$RuleMemoStart = startIndex;
         table$RuleMemoEnd = -1;
         table$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Object : SqlIdentifier
   protected boolean object$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (object$RuleMemoStart == index) {
         if (object$RuleMemoStart <= object$RuleMemoEnd) {
            index = object$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OBJECT, object$RuleMemoStart, object$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (object$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(object$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         object$RuleMemoStart = startIndex;
         object$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            object$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OBJECT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            object$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         object$RuleMemoStart = startIndex;
         object$RuleMemoEnd = -1;
         object$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Column : SqlIdentifier
   protected boolean column$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (column$RuleMemoStart == index) {
         if (column$RuleMemoStart <= column$RuleMemoEnd) {
            index = column$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN, column$RuleMemoStart, column$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (column$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(column$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         column$RuleMemoStart = startIndex;
         column$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            column$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            column$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         column$RuleMemoStart = startIndex;
         column$RuleMemoEnd = -1;
         column$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SchemaObjectName : ((Schema '.' OptionalSpacing Object) | Object)
   protected boolean schemaObjectName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (schemaObjectName$RuleMemoStart == index) {
         if (schemaObjectName$RuleMemoStart <= schemaObjectName$RuleMemoEnd) {
            index = schemaObjectName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SCHEMA_OBJECT_NAME, schemaObjectName$RuleMemoStart, schemaObjectName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (schemaObjectName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(schemaObjectName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((Schema '.' OptionalSpacing Object) | Object)
      // (Schema '.' OptionalSpacing Object)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // Schema
      match = schema$Rule();
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Object
               match = object$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // Object
         match = object$Rule();
      }
      if (match) {
         schemaObjectName$RuleMemoStart = startIndex;
         schemaObjectName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            schemaObjectName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SCHEMA_OBJECT_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            schemaObjectName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         schemaObjectName$RuleMemoStart = startIndex;
         schemaObjectName$RuleMemoEnd = -1;
         schemaObjectName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ColumnName : ((Schema '.' OptionalSpacing Table '.' OptionalSpacing Column) | (Table '.' OptionalSpacing Column) | Column)
   protected boolean columnName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (columnName$RuleMemoStart == index) {
         if (columnName$RuleMemoStart <= columnName$RuleMemoEnd) {
            index = columnName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_NAME, columnName$RuleMemoStart, columnName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (columnName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(columnName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((Schema '.' OptionalSpacing Table '.' OptionalSpacing Column) | (Table '.' OptionalSpacing Column) | Column)
      // (Schema '.' OptionalSpacing Table '.' OptionalSpacing Column)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // Schema
      match = schema$Rule();
      if (match) {
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Table
               match = table$Rule();
               if (match) {
                  // '.'
                  match = charMatcher('.');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Column
                        match = column$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // (Table '.' OptionalSpacing Column)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // Table
         match = table$Rule();
         if (match) {
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Column
                  match = column$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // Column
            match = column$Rule();
         }
      }
      if (match) {
         columnName$RuleMemoStart = startIndex;
         columnName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            columnName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            columnName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         columnName$RuleMemoStart = startIndex;
         columnName$RuleMemoEnd = -1;
         columnName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ColumnsList : ('(' OptionalSpacing ColumnName (',' OptionalSpacing ColumnName)* ')' OptionalSpacing)
   protected boolean columnsList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (columnsList$RuleMemoStart == index) {
         if (columnsList$RuleMemoStart <= columnsList$RuleMemoEnd) {
            index = columnsList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMNS_LIST, columnsList$RuleMemoStart, columnsList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (columnsList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(columnsList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing ColumnName (',' OptionalSpacing ColumnName)* ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ColumnName
            match = columnName$Rule();
            if (match) {
               // (',' OptionalSpacing ColumnName)*
               do {
                  // (',' OptionalSpacing ColumnName)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ColumnName
                        match = columnName$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         columnsList$RuleMemoStart = startIndex;
         columnsList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            columnsList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMNS_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            columnsList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         columnsList$RuleMemoStart = startIndex;
         columnsList$RuleMemoEnd = -1;
         columnsList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OnlyQueryTableExpression : ("only" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryTableExpression ')' OptionalSpacing)
   protected boolean onlyQueryTableExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (onlyQueryTableExpression$RuleMemoStart == index) {
         if (onlyQueryTableExpression$RuleMemoStart <= onlyQueryTableExpression$RuleMemoEnd) {
            index = onlyQueryTableExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ONLY_QUERY_TABLE_EXPRESSION, onlyQueryTableExpression$RuleMemoStart, onlyQueryTableExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (onlyQueryTableExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(onlyQueryTableExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("only" TestNoAlpha OptionalSpacing '(' OptionalSpacing QueryTableExpression ')' OptionalSpacing)
      // "only"
      match = ignoreCaseStringMatcher("only", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // QueryTableExpression
                     match = queryTableExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         onlyQueryTableExpression$RuleMemoStart = startIndex;
         onlyQueryTableExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            onlyQueryTableExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ONLY_QUERY_TABLE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            onlyQueryTableExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         onlyQueryTableExpression$RuleMemoStart = startIndex;
         onlyQueryTableExpression$RuleMemoEnd = -1;
         onlyQueryTableExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryTableExpressionPivotClause : (QueryTableExpression PivotClause)
   protected boolean queryTableExpressionPivotClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (queryTableExpressionPivotClause$RuleMemoStart == index) {
         if (queryTableExpressionPivotClause$RuleMemoStart <= queryTableExpressionPivotClause$RuleMemoEnd) {
            index = queryTableExpressionPivotClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION_PIVOT_CLAUSE, queryTableExpressionPivotClause$RuleMemoStart, queryTableExpressionPivotClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (queryTableExpressionPivotClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(queryTableExpressionPivotClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QueryTableExpression PivotClause)
      // QueryTableExpression
      match = queryTableExpression$Rule();
      if (match) {
         // PivotClause
         match = pivotClause$Rule();
      }
      if (match) {
         queryTableExpressionPivotClause$RuleMemoStart = startIndex;
         queryTableExpressionPivotClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            queryTableExpressionPivotClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION_PIVOT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            queryTableExpressionPivotClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         queryTableExpressionPivotClause$RuleMemoStart = startIndex;
         queryTableExpressionPivotClause$RuleMemoEnd = -1;
         queryTableExpressionPivotClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryTableExpressionUnpivotClause : (QueryTableExpression UnpivotClause)
   protected boolean queryTableExpressionUnpivotClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (queryTableExpressionUnpivotClause$RuleMemoStart == index) {
         if (queryTableExpressionUnpivotClause$RuleMemoStart <= queryTableExpressionUnpivotClause$RuleMemoEnd) {
            index = queryTableExpressionUnpivotClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION_UNPIVOT_CLAUSE, queryTableExpressionUnpivotClause$RuleMemoStart, queryTableExpressionUnpivotClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (queryTableExpressionUnpivotClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(queryTableExpressionUnpivotClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QueryTableExpression UnpivotClause)
      // QueryTableExpression
      match = queryTableExpression$Rule();
      if (match) {
         // UnpivotClause
         match = unpivotClause$Rule();
      }
      if (match) {
         queryTableExpressionUnpivotClause$RuleMemoStart = startIndex;
         queryTableExpressionUnpivotClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            queryTableExpressionUnpivotClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION_UNPIVOT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            queryTableExpressionUnpivotClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         queryTableExpressionUnpivotClause$RuleMemoStart = startIndex;
         queryTableExpressionUnpivotClause$RuleMemoEnd = -1;
         queryTableExpressionUnpivotClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryTableExpressionType : (OnlyQueryTableExpression | QueryTableExpressionPivotClause | QueryTableExpressionUnpivotClause | QueryTableExpression)
   protected boolean queryTableExpressionType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (OnlyQueryTableExpression | QueryTableExpressionPivotClause | QueryTableExpressionUnpivotClause | QueryTableExpression)
      switch(buffer.getChar(index)) {
         case 'O':
         case 'o': {
            // OnlyQueryTableExpression
            match = onlyQueryTableExpression$Rule();
            if (! match) {
               // QueryTableExpressionPivotClause
               match = queryTableExpressionPivotClause$Rule();
               if (! match) {
                  // QueryTableExpressionUnpivotClause
                  match = queryTableExpressionUnpivotClause$Rule();
                  if (! match) {
                     // QueryTableExpression
                     match = queryTableExpression$Rule();
                  }
               }
            }
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '(':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // QueryTableExpressionPivotClause
            match = queryTableExpressionPivotClause$Rule();
            if (! match) {
               // QueryTableExpressionUnpivotClause
               match = queryTableExpressionUnpivotClause$Rule();
               if (! match) {
                  // QueryTableExpression
                  match = queryTableExpression$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_TABLE_EXPRESSION_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TableReference : (QueryTableExpressionType FlashbackQueryClause? SqlIdentifier?)
   protected boolean tableReference$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tableReference$RuleMemoStart == index) {
         if (tableReference$RuleMemoStart <= tableReference$RuleMemoEnd) {
            index = tableReference$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_REFERENCE, tableReference$RuleMemoStart, tableReference$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (tableReference$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(tableReference$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QueryTableExpressionType FlashbackQueryClause? SqlIdentifier?)
      // QueryTableExpressionType
      match = queryTableExpressionType$Rule();
      if (match) {
         // FlashbackQueryClause?
         // FlashbackQueryClause
         flashbackQueryClause$Rule();
         // SqlIdentifier?
         // SqlIdentifier
         sqlIdentifier$Rule();
         match = true;
      }
      if (match) {
         tableReference$RuleMemoStart = startIndex;
         tableReference$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tableReference$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_REFERENCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tableReference$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         tableReference$RuleMemoStart = startIndex;
         tableReference$RuleMemoEnd = -1;
         tableReference$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VersionsBetween : ("versions" TestNoAlpha OptionalSpacing "between" TestNoAlpha OptionalSpacing (("scn" | "timestamp") TestNoAlpha OptionalSpacing) (("minvalue" TestNoAlpha OptionalSpacing) | SqlExpression) "and" TestNoAlpha OptionalSpacing (("maxvalue" TestNoAlpha OptionalSpacing) | SqlExpression))
   protected boolean versionsBetween$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("versions" TestNoAlpha OptionalSpacing "between" TestNoAlpha OptionalSpacing (("scn" | "timestamp") TestNoAlpha OptionalSpacing) (("minvalue" TestNoAlpha OptionalSpacing) | SqlExpression) "and" TestNoAlpha OptionalSpacing (("maxvalue" TestNoAlpha OptionalSpacing) | SqlExpression))
      // "versions"
      match = ignoreCaseStringMatcher("versions", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "between"
               match = ignoreCaseStringMatcher("between", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (("scn" | "timestamp") TestNoAlpha OptionalSpacing)
                        // ("scn" | "timestamp")
                        int startIndex_1 = index;
                        switch(buffer.getChar(index)) {
                           case 's':
                           case 'S': {
                              ++index;
                              // "cn"
                              if (match = ignoreCaseStringTest("cn", 2)) {
                                 index += 2;
                              }
                              break;
                           }
                           case 't':
                           case 'T': {
                              ++index;
                              // "imestamp"
                              if (match = ignoreCaseStringTest("imestamp", 8)) {
                                 index += 8;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        if (! match) {
                           index = startIndex_1;
                        } else if(! currentRuleIsAtomic) {
                           currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                           currentNode = currentNode.getSibling();
                        }
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                        if (match) {
                           // (("minvalue" TestNoAlpha OptionalSpacing) | SqlExpression)
                           // ("minvalue" TestNoAlpha OptionalSpacing)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "minvalue"
                           match = ignoreCaseStringMatcher("minvalue", 8);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           if (! match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                           if (match) {
                              // "and"
                              match = ignoreCaseStringMatcher("and", 3);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // (("maxvalue" TestNoAlpha OptionalSpacing) | SqlExpression)
                                       // ("maxvalue" TestNoAlpha OptionalSpacing)
                                       Node lastNode_3 = currentNode;
                                       int lastIndex_3 = index;
                                       // "maxvalue"
                                       match = ignoreCaseStringMatcher("maxvalue", 8);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_3;
                                                lastNode_3.setSibling(null);
                                                currentNode = lastNode_3;
                                             }
                                          } else {
                                             index = lastIndex_3;
                                             lastNode_3.setSibling(null);
                                          }
                                       }
                                       if (! match) {
                                          // SqlExpression
                                          match = sqlExpression$Rule();
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VERSIONS_BETWEEN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FlashbackQueryClause : (VersionsBetween? "as" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing (("scn" | "timestamp") TestNoAlpha OptionalSpacing) SqlExpression)
   protected boolean flashbackQueryClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (VersionsBetween? "as" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing (("scn" | "timestamp") TestNoAlpha OptionalSpacing) SqlExpression)
      // VersionsBetween?
      // VersionsBetween
      versionsBetween$Rule();
      // "as"
      match = ignoreCaseStringMatcher("as", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "of"
               match = ignoreCaseStringMatcher("of", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (("scn" | "timestamp") TestNoAlpha OptionalSpacing)
                        // ("scn" | "timestamp")
                        int startIndex_1 = index;
                        switch(buffer.getChar(index)) {
                           case 's':
                           case 'S': {
                              ++index;
                              // "cn"
                              if (match = ignoreCaseStringTest("cn", 2)) {
                                 index += 2;
                              }
                              break;
                           }
                           case 't':
                           case 'T': {
                              ++index;
                              // "imestamp"
                              if (match = ignoreCaseStringTest("imestamp", 8)) {
                                 index += 8;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        if (! match) {
                           index = startIndex_1;
                        } else if(! currentRuleIsAtomic) {
                           currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                           currentNode = currentNode.getSibling();
                        }
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                        if (match) {
                           // SqlExpression
                           match = sqlExpression$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FLASHBACK_QUERY_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EqualityOperator : (('=' OptionalSpacing '>'!) | ('<' OptionalSpacing '>' OptionalSpacing) | ('!' OptionalSpacing '=' OptionalSpacing) | ('^' OptionalSpacing '=' OptionalSpacing) | ('~' OptionalSpacing '=' OptionalSpacing))
   protected boolean equalityOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (('=' OptionalSpacing '>'!) | ('<' OptionalSpacing '>' OptionalSpacing) | ('!' OptionalSpacing '=' OptionalSpacing) | ('^' OptionalSpacing '=' OptionalSpacing) | ('~' OptionalSpacing '=' OptionalSpacing))
      // ('=' OptionalSpacing '>'!)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '='
      match = charMatcher('=');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '>'!
            // '>'
            match = buffer.matchChar(index, '>');
            match = ! match;
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ('<' OptionalSpacing '>' OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // '<'
         match = charMatcher('<');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '>'
               match = charMatcher('>');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ('!' OptionalSpacing '=' OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // '!'
            match = charMatcher('!');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // '='
                  match = charMatcher('=');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ('^' OptionalSpacing '=' OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // '^'
               match = charMatcher('^');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // '='
                     match = charMatcher('=');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                           currentNode = lastNode_4;
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
               if (! match) {
                  // ('~' OptionalSpacing '=' OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // '~'
                  match = charMatcher('~');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '='
                        match = charMatcher('=');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                              currentNode = lastNode_5;
                           }
                        } else {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EQUALITY_OPERATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RelationalOperator : (('=' OptionalSpacing '>'!) | ('<' OptionalSpacing '>' OptionalSpacing) | ('!' OptionalSpacing '=' OptionalSpacing) | ('^' OptionalSpacing '=' OptionalSpacing) | ('~' OptionalSpacing '=' OptionalSpacing) | ('>' OptionalSpacing '=' OptionalSpacing) | ('<' OptionalSpacing '=' OptionalSpacing) | ('>' OptionalSpacing '='!) | ('<' OptionalSpacing (('=' | '>') OptionalSpacing)!))
   protected boolean relationalOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (relationalOperator$RuleMemoStart == index) {
         if (relationalOperator$RuleMemoStart <= relationalOperator$RuleMemoEnd) {
            index = relationalOperator$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_OPERATOR, relationalOperator$RuleMemoStart, relationalOperator$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (relationalOperator$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(relationalOperator$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (('=' OptionalSpacing '>'!) | ('<' OptionalSpacing '>' OptionalSpacing) | ('!' OptionalSpacing '=' OptionalSpacing) | ('^' OptionalSpacing '=' OptionalSpacing) | ('~' OptionalSpacing '=' OptionalSpacing) | ('>' OptionalSpacing '=' OptionalSpacing) | ('<' OptionalSpacing '=' OptionalSpacing) | ('>' OptionalSpacing '='!) | ('<' OptionalSpacing (('=' | '>') OptionalSpacing)!))
      // ('=' OptionalSpacing '>'!)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '='
      match = charMatcher('=');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '>'!
            // '>'
            match = buffer.matchChar(index, '>');
            match = ! match;
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ('<' OptionalSpacing '>' OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // '<'
         match = charMatcher('<');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '>'
               match = charMatcher('>');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ('!' OptionalSpacing '=' OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // '!'
            match = charMatcher('!');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // '='
                  match = charMatcher('=');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ('^' OptionalSpacing '=' OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // '^'
               match = charMatcher('^');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // '='
                     match = charMatcher('=');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                           currentNode = lastNode_4;
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
               if (! match) {
                  // ('~' OptionalSpacing '=' OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // '~'
                  match = charMatcher('~');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '='
                        match = charMatcher('=');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                              currentNode = lastNode_5;
                           }
                        } else {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ('>' OptionalSpacing '=' OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // '>'
                     match = charMatcher('>');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // '='
                           match = charMatcher('=');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                                 currentNode = lastNode_6;
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ('<' OptionalSpacing '=' OptionalSpacing)
                        Node lastNode_7 = currentNode;
                        int lastIndex_7 = index;
                        // '<'
                        match = charMatcher('<');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // '='
                              match = charMatcher('=');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                    currentNode = lastNode_7;
                                 }
                              } else {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                              }
                           } else {
                              index = lastIndex_7;
                              lastNode_7.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ('>' OptionalSpacing '='!)
                           Node lastNode_8 = currentNode;
                           int lastIndex_8 = index;
                           // '>'
                           match = charMatcher('>');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // '='!
                                 // '='
                                 match = buffer.matchChar(index, '=');
                                 match = ! match;
                                 if (! match) {
                                    index = lastIndex_8;
                                    lastNode_8.setSibling(null);
                                    currentNode = lastNode_8;
                                 }
                              } else {
                                 index = lastIndex_8;
                                 lastNode_8.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ('<' OptionalSpacing (('=' | '>') OptionalSpacing)!)
                              Node lastNode_9 = currentNode;
                              int lastIndex_9 = index;
                              // '<'
                              match = charMatcher('<');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // (('=' | '>') OptionalSpacing)!
                                    Node lastNode_10 = currentNode;
                                    int lastIndex_10 = index;
                                    boolean lastAtomic_10 = currentRuleIsAtomic;
                                    // (('=' | '>') OptionalSpacing)
                                    Node lastNode_11 = currentNode;
                                    int lastIndex_11 = index;
                                    // ('=' | '>')
                                    int startIndex_12 = index;
                                    switch(buffer.getChar(index)) {
                                       case '=': {
                                          ++index;
                                          // <EMPTY>
                                          match = true;
                                          break;
                                       }
                                       case '>': {
                                          ++index;
                                          // <EMPTY>
                                          match = true;
                                          break;
                                       }
                                       default: {
                                          match = false;
                                       }
                                    }
                                    if (! match) {
                                       index = startIndex_12;
                                    } else if(! currentRuleIsAtomic) {
                                       currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_12, index, false, false));
                                       currentNode = currentNode.getSibling();
                                    }
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_11;
                                          lastNode_11.setSibling(null);
                                          currentNode = lastNode_11;
                                       }
                                    }
                                    currentRuleIsAtomic = lastAtomic_10;
                                    index = lastIndex_10;
                                    lastNode_10.setSibling(null);
                                    currentNode = lastNode_10;
                                    match = ! match;
                                    if (! match) {
                                       index = lastIndex_9;
                                       lastNode_9.setSibling(null);
                                       currentNode = lastNode_9;
                                    }
                                 } else {
                                    index = lastIndex_9;
                                    lastNode_9.setSibling(null);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         relationalOperator$RuleMemoStart = startIndex;
         relationalOperator$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            relationalOperator$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_OPERATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            relationalOperator$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         relationalOperator$RuleMemoStart = startIndex;
         relationalOperator$RuleMemoEnd = -1;
         relationalOperator$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlCondition : (NotCondition | AndCondition | OrCondition | ConditionExpression)
   protected boolean sqlCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlCondition$RuleMemoStart == index) {
         if (sqlCondition$RuleMemoStart <= sqlCondition$RuleMemoEnd) {
            index = sqlCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_CONDITION, sqlCondition$RuleMemoStart, sqlCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (NotCondition | AndCondition | OrCondition | ConditionExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // AndCondition
            match = andCondition$Rule();
            if (! match) {
               // OrCondition
               match = orCondition$Rule();
               if (! match) {
                  // ConditionExpression
                  match = conditionExpression$Rule();
               }
            }
            break;
         }
         case 'N':
         case 'n': {
            // NotCondition
            match = notCondition$Rule();
            if (! match) {
               // AndCondition
               match = andCondition$Rule();
               if (! match) {
                  // OrCondition
                  match = orCondition$Rule();
                  if (! match) {
                     // ConditionExpression
                     match = conditionExpression$Rule();
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlCondition$RuleMemoStart = startIndex;
         sqlCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlCondition$RuleMemoStart = startIndex;
         sqlCondition$RuleMemoEnd = -1;
         sqlCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrCondition : (ConditionExpression "or" TestNoAlpha OptionalSpacing SqlCondition)
   protected boolean orCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (orCondition$RuleMemoStart == index) {
         if (orCondition$RuleMemoStart <= orCondition$RuleMemoEnd) {
            index = orCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OR_CONDITION, orCondition$RuleMemoStart, orCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (orCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(orCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConditionExpression "or" TestNoAlpha OptionalSpacing SqlCondition)
      // ConditionExpression
      match = conditionExpression$Rule();
      if (match) {
         // "or"
         match = ignoreCaseStringMatcher("or", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlCondition
                  match = sqlCondition$Rule();
               }
            }
         }
      }
      if (match) {
         orCondition$RuleMemoStart = startIndex;
         orCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            orCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OR_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            orCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         orCondition$RuleMemoStart = startIndex;
         orCondition$RuleMemoEnd = -1;
         orCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AndCondition : (ConditionExpression "and" TestNoAlpha OptionalSpacing SqlCondition)
   protected boolean andCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (andCondition$RuleMemoStart == index) {
         if (andCondition$RuleMemoStart <= andCondition$RuleMemoEnd) {
            index = andCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.AND_CONDITION, andCondition$RuleMemoStart, andCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (andCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(andCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConditionExpression "and" TestNoAlpha OptionalSpacing SqlCondition)
      // ConditionExpression
      match = conditionExpression$Rule();
      if (match) {
         // "and"
         match = ignoreCaseStringMatcher("and", 3);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlCondition
                  match = sqlCondition$Rule();
               }
            }
         }
      }
      if (match) {
         andCondition$RuleMemoStart = startIndex;
         andCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            andCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AND_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            andCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         andCondition$RuleMemoStart = startIndex;
         andCondition$RuleMemoEnd = -1;
         andCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NotCondition : ("not" TestNoAlpha OptionalSpacing SqlCondition)
   protected boolean notCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (notCondition$RuleMemoStart == index) {
         if (notCondition$RuleMemoStart <= notCondition$RuleMemoEnd) {
            index = notCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NOT_CONDITION, notCondition$RuleMemoStart, notCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (notCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(notCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("not" TestNoAlpha OptionalSpacing SqlCondition)
      // "not"
      match = ignoreCaseStringMatcher("not", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlCondition
               match = sqlCondition$Rule();
            }
         }
      }
      if (match) {
         notCondition$RuleMemoStart = startIndex;
         notCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            notCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NOT_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            notCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         notCondition$RuleMemoStart = startIndex;
         notCondition$RuleMemoEnd = -1;
         notCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParenthesesCondition : ('(' OptionalSpacing SqlCondition ')' OptionalSpacing)
   protected boolean parenthesesCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (parenthesesCondition$RuleMemoStart == index) {
         if (parenthesesCondition$RuleMemoStart <= parenthesesCondition$RuleMemoEnd) {
            index = parenthesesCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_CONDITION, parenthesesCondition$RuleMemoStart, parenthesesCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (parenthesesCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(parenthesesCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing SqlCondition ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlCondition
            match = sqlCondition$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         parenthesesCondition$RuleMemoStart = startIndex;
         parenthesesCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            parenthesesCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            parenthesesCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         parenthesesCondition$RuleMemoStart = startIndex;
         parenthesesCondition$RuleMemoEnd = -1;
         parenthesesCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionExpression : (ExistsCondition | IsCondition | RelationalCondition | RelationalGroupCondition | InCondition | IsASetCondition | IsAnyCondition | IsEmptyCondition | IsOfTypeCondition | IsPresentCondition | LikeCondition | RegexCondition | MemberCondition | BetweenCondition | SubMultiSetCondition | EqualsPathCondition | UnderPathCondition | ParenthesesCondition)
   protected boolean conditionExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (conditionExpression$RuleMemoStart == index) {
         if (conditionExpression$RuleMemoStart <= conditionExpression$RuleMemoEnd) {
            index = conditionExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITION_EXPRESSION, conditionExpression$RuleMemoStart, conditionExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (conditionExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(conditionExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ExistsCondition | IsCondition | RelationalCondition | RelationalGroupCondition | InCondition | IsASetCondition | IsAnyCondition | IsEmptyCondition | IsOfTypeCondition | IsPresentCondition | LikeCondition | RegexCondition | MemberCondition | BetweenCondition | SubMultiSetCondition | EqualsPathCondition | UnderPathCondition | ParenthesesCondition)
      switch(buffer.getChar(index)) {
         case '\'':
         case ':':
         case '+':
         case '-':
         case '?': {
            // IsCondition
            match = isCondition$Rule();
            if (! match) {
               // RelationalCondition
               match = relationalCondition$Rule();
               if (! match) {
                  // RelationalGroupCondition
                  match = relationalGroupCondition$Rule();
                  if (! match) {
                     // InCondition
                     match = inCondition$Rule();
                     if (! match) {
                        // IsOfTypeCondition
                        match = isOfTypeCondition$Rule();
                        if (! match) {
                           // LikeCondition
                           match = likeCondition$Rule();
                           if (! match) {
                              // MemberCondition
                              match = memberCondition$Rule();
                              if (! match) {
                                 // BetweenCondition
                                 match = betweenCondition$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'S':
         case 'T':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 's':
         case 't':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // IsCondition
            match = isCondition$Rule();
            if (! match) {
               // RelationalCondition
               match = relationalCondition$Rule();
               if (! match) {
                  // RelationalGroupCondition
                  match = relationalGroupCondition$Rule();
                  if (! match) {
                     // InCondition
                     match = inCondition$Rule();
                     if (! match) {
                        // IsASetCondition
                        match = isASetCondition$Rule();
                        if (! match) {
                           // IsAnyCondition
                           match = isAnyCondition$Rule();
                           if (! match) {
                              // IsEmptyCondition
                              match = isEmptyCondition$Rule();
                              if (! match) {
                                 // IsOfTypeCondition
                                 match = isOfTypeCondition$Rule();
                                 if (! match) {
                                    // IsPresentCondition
                                    match = isPresentCondition$Rule();
                                    if (! match) {
                                       // LikeCondition
                                       match = likeCondition$Rule();
                                       if (! match) {
                                          // MemberCondition
                                          match = memberCondition$Rule();
                                          if (! match) {
                                             // BetweenCondition
                                             match = betweenCondition$Rule();
                                             if (! match) {
                                                // SubMultiSetCondition
                                                match = subMultiSetCondition$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'R':
         case 'r': {
            // IsCondition
            match = isCondition$Rule();
            if (! match) {
               // RelationalCondition
               match = relationalCondition$Rule();
               if (! match) {
                  // RelationalGroupCondition
                  match = relationalGroupCondition$Rule();
                  if (! match) {
                     // InCondition
                     match = inCondition$Rule();
                     if (! match) {
                        // IsASetCondition
                        match = isASetCondition$Rule();
                        if (! match) {
                           // IsAnyCondition
                           match = isAnyCondition$Rule();
                           if (! match) {
                              // IsEmptyCondition
                              match = isEmptyCondition$Rule();
                              if (! match) {
                                 // IsOfTypeCondition
                                 match = isOfTypeCondition$Rule();
                                 if (! match) {
                                    // IsPresentCondition
                                    match = isPresentCondition$Rule();
                                    if (! match) {
                                       // LikeCondition
                                       match = likeCondition$Rule();
                                       if (! match) {
                                          // RegexCondition
                                          match = regexCondition$Rule();
                                          if (! match) {
                                             // MemberCondition
                                             match = memberCondition$Rule();
                                             if (! match) {
                                                // BetweenCondition
                                                match = betweenCondition$Rule();
                                                if (! match) {
                                                   // SubMultiSetCondition
                                                   match = subMultiSetCondition$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'E':
         case 'e': {
            // ExistsCondition
            match = existsCondition$Rule();
            if (! match) {
               // IsCondition
               match = isCondition$Rule();
               if (! match) {
                  // RelationalCondition
                  match = relationalCondition$Rule();
                  if (! match) {
                     // RelationalGroupCondition
                     match = relationalGroupCondition$Rule();
                     if (! match) {
                        // InCondition
                        match = inCondition$Rule();
                        if (! match) {
                           // IsASetCondition
                           match = isASetCondition$Rule();
                           if (! match) {
                              // IsAnyCondition
                              match = isAnyCondition$Rule();
                              if (! match) {
                                 // IsEmptyCondition
                                 match = isEmptyCondition$Rule();
                                 if (! match) {
                                    // IsOfTypeCondition
                                    match = isOfTypeCondition$Rule();
                                    if (! match) {
                                       // IsPresentCondition
                                       match = isPresentCondition$Rule();
                                       if (! match) {
                                          // LikeCondition
                                          match = likeCondition$Rule();
                                          if (! match) {
                                             // MemberCondition
                                             match = memberCondition$Rule();
                                             if (! match) {
                                                // BetweenCondition
                                                match = betweenCondition$Rule();
                                                if (! match) {
                                                   // SubMultiSetCondition
                                                   match = subMultiSetCondition$Rule();
                                                   if (! match) {
                                                      // EqualsPathCondition
                                                      match = equalsPathCondition$Rule();
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case 'U':
         case 'u': {
            // IsCondition
            match = isCondition$Rule();
            if (! match) {
               // RelationalCondition
               match = relationalCondition$Rule();
               if (! match) {
                  // RelationalGroupCondition
                  match = relationalGroupCondition$Rule();
                  if (! match) {
                     // InCondition
                     match = inCondition$Rule();
                     if (! match) {
                        // IsASetCondition
                        match = isASetCondition$Rule();
                        if (! match) {
                           // IsAnyCondition
                           match = isAnyCondition$Rule();
                           if (! match) {
                              // IsEmptyCondition
                              match = isEmptyCondition$Rule();
                              if (! match) {
                                 // IsOfTypeCondition
                                 match = isOfTypeCondition$Rule();
                                 if (! match) {
                                    // IsPresentCondition
                                    match = isPresentCondition$Rule();
                                    if (! match) {
                                       // LikeCondition
                                       match = likeCondition$Rule();
                                       if (! match) {
                                          // MemberCondition
                                          match = memberCondition$Rule();
                                          if (! match) {
                                             // BetweenCondition
                                             match = betweenCondition$Rule();
                                             if (! match) {
                                                // SubMultiSetCondition
                                                match = subMultiSetCondition$Rule();
                                                if (! match) {
                                                   // UnderPathCondition
                                                   match = underPathCondition$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         case '(': {
            // IsCondition
            match = isCondition$Rule();
            if (! match) {
               // RelationalCondition
               match = relationalCondition$Rule();
               if (! match) {
                  // RelationalGroupCondition
                  match = relationalGroupCondition$Rule();
                  if (! match) {
                     // InCondition
                     match = inCondition$Rule();
                     if (! match) {
                        // IsOfTypeCondition
                        match = isOfTypeCondition$Rule();
                        if (! match) {
                           // LikeCondition
                           match = likeCondition$Rule();
                           if (! match) {
                              // MemberCondition
                              match = memberCondition$Rule();
                              if (! match) {
                                 // BetweenCondition
                                 match = betweenCondition$Rule();
                                 if (! match) {
                                    // ParenthesesCondition
                                    match = parenthesesCondition$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         conditionExpression$RuleMemoStart = startIndex;
         conditionExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            conditionExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITION_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            conditionExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         conditionExpression$RuleMemoStart = startIndex;
         conditionExpression$RuleMemoEnd = -1;
         conditionExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExistsCondition : ("exists" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
   protected boolean existsCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (existsCondition$RuleMemoStart == index) {
         if (existsCondition$RuleMemoStart <= existsCondition$RuleMemoEnd) {
            index = existsCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.EXISTS_CONDITION, existsCondition$RuleMemoStart, existsCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (existsCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(existsCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("exists" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
      // "exists"
      match = ignoreCaseStringMatcher("exists", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // Subquery
                     match = subquery$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         existsCondition$RuleMemoStart = startIndex;
         existsCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            existsCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXISTS_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            existsCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         existsCondition$RuleMemoStart = startIndex;
         existsCondition$RuleMemoEnd = -1;
         existsCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Not : ("not" TestNoAlpha OptionalSpacing)
   protected boolean not$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (not$RuleMemoStart == index) {
         if (not$RuleMemoStart <= not$RuleMemoEnd) {
            index = not$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NOT, not$RuleMemoStart, not$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (not$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(not$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("not" TestNoAlpha OptionalSpacing)
      // "not"
      match = ignoreCaseStringMatcher("not", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         not$RuleMemoStart = startIndex;
         not$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            not$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NOT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            not$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         not$RuleMemoStart = startIndex;
         not$RuleMemoEnd = -1;
         not$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsConditionOption : (("null" | "nan" | "infinite") TestNoAlpha OptionalSpacing)
   protected boolean isConditionOption$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("null" | "nan" | "infinite") TestNoAlpha OptionalSpacing)
      // ("null" | "nan" | "infinite")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'n':
         case 'N': {
            ++index;
            // ("ull" | "an")
            switch(buffer.getChar(index)) {
               case 'a':
               case 'A': {
                  ++index;
                  // "n"
                  if (match = buffer.matchIgnoreCaseChar(index, 'n')) {
                     ++index;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "ll"
                  if (match = ignoreCaseStringTest("ll", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'i':
         case 'I': {
            ++index;
            // "nfinite"
            if (match = ignoreCaseStringTest("nfinite", 7)) {
               index += 7;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_CONDITION_OPTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsCondition : (SqlExpression "is" TestNoAlpha OptionalSpacing Not? IsConditionOption)
   protected boolean isCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isCondition$RuleMemoStart == index) {
         if (isCondition$RuleMemoStart <= isCondition$RuleMemoEnd) {
            index = isCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_CONDITION, isCondition$RuleMemoStart, isCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression "is" TestNoAlpha OptionalSpacing Not? IsConditionOption)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // "is"
         match = ignoreCaseStringMatcher("is", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Not?
                  // Not
                  not$Rule();
                  // IsConditionOption
                  match = isConditionOption$Rule();
               }
            }
         }
      }
      if (match) {
         isCondition$RuleMemoStart = startIndex;
         isCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isCondition$RuleMemoStart = startIndex;
         isCondition$RuleMemoEnd = -1;
         isCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Prior : ("prior" TestNoAlpha OptionalSpacing)
   protected boolean prior$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (prior$RuleMemoStart == index) {
         if (prior$RuleMemoStart <= prior$RuleMemoEnd) {
            index = prior$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PRIOR, prior$RuleMemoStart, prior$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (prior$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(prior$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("prior" TestNoAlpha OptionalSpacing)
      // "prior"
      match = ignoreCaseStringMatcher("prior", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         prior$RuleMemoStart = startIndex;
         prior$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            prior$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRIOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            prior$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         prior$RuleMemoStart = startIndex;
         prior$RuleMemoEnd = -1;
         prior$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RelationalCondition : (Prior? SqlExpression RelationalOperator Prior? SqlExpression)
   protected boolean relationalCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (relationalCondition$RuleMemoStart == index) {
         if (relationalCondition$RuleMemoStart <= relationalCondition$RuleMemoEnd) {
            index = relationalCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_CONDITION, relationalCondition$RuleMemoStart, relationalCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (relationalCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(relationalCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Prior? SqlExpression RelationalOperator Prior? SqlExpression)
      // Prior?
      // Prior
      prior$Rule();
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // RelationalOperator
         match = relationalOperator$Rule();
         if (match) {
            // Prior?
            // Prior
            prior$Rule();
            // SqlExpression
            match = sqlExpression$Rule();
         }
      }
      if (match) {
         relationalCondition$RuleMemoStart = startIndex;
         relationalCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            relationalCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            relationalCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         relationalCondition$RuleMemoStart = startIndex;
         relationalCondition$RuleMemoEnd = -1;
         relationalCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupConditionCoverageType : (("any" | "some" | "all") TestNoAlpha OptionalSpacing)
   protected boolean groupConditionCoverageType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (groupConditionCoverageType$RuleMemoStart == index) {
         if (groupConditionCoverageType$RuleMemoStart <= groupConditionCoverageType$RuleMemoEnd) {
            index = groupConditionCoverageType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.GROUP_CONDITION_COVERAGE_TYPE, groupConditionCoverageType$RuleMemoStart, groupConditionCoverageType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (groupConditionCoverageType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(groupConditionCoverageType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("any" | "some" | "all") TestNoAlpha OptionalSpacing)
      // ("any" | "some" | "all")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'a':
         case 'A': {
            ++index;
            // ("ny" | "ll")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // "y"
                  if (match = buffer.matchIgnoreCaseChar(index, 'y')) {
                     ++index;
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // "l"
                  if (match = buffer.matchIgnoreCaseChar(index, 'l')) {
                     ++index;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 's':
         case 'S': {
            ++index;
            // "ome"
            if (match = ignoreCaseStringTest("ome", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         groupConditionCoverageType$RuleMemoStart = startIndex;
         groupConditionCoverageType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            groupConditionCoverageType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUP_CONDITION_COVERAGE_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            groupConditionCoverageType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         groupConditionCoverageType$RuleMemoStart = startIndex;
         groupConditionCoverageType$RuleMemoEnd = -1;
         groupConditionCoverageType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EqualityGroupCondition : (ParenthesesSqlExpressionList EqualityOperator GroupConditionCoverageType? ParenthesesSqlExpressionList)
   protected boolean equalityGroupCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (equalityGroupCondition$RuleMemoStart == index) {
         if (equalityGroupCondition$RuleMemoStart <= equalityGroupCondition$RuleMemoEnd) {
            index = equalityGroupCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.EQUALITY_GROUP_CONDITION, equalityGroupCondition$RuleMemoStart, equalityGroupCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (equalityGroupCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(equalityGroupCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ParenthesesSqlExpressionList EqualityOperator GroupConditionCoverageType? ParenthesesSqlExpressionList)
      // ParenthesesSqlExpressionList
      match = parenthesesSqlExpressionList$Rule();
      if (match) {
         // EqualityOperator
         match = equalityOperator$Rule();
         if (match) {
            // GroupConditionCoverageType?
            // GroupConditionCoverageType
            groupConditionCoverageType$Rule();
            // ParenthesesSqlExpressionList
            match = parenthesesSqlExpressionList$Rule();
         }
      }
      if (match) {
         equalityGroupCondition$RuleMemoStart = startIndex;
         equalityGroupCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            equalityGroupCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EQUALITY_GROUP_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            equalityGroupCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         equalityGroupCondition$RuleMemoStart = startIndex;
         equalityGroupCondition$RuleMemoEnd = -1;
         equalityGroupCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnyRelationalGroupCondition : (SqlExpression RelationalOperator GroupConditionCoverageType ParenthesesSqlExpressionList)
   protected boolean anyRelationalGroupCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (anyRelationalGroupCondition$RuleMemoStart == index) {
         if (anyRelationalGroupCondition$RuleMemoStart <= anyRelationalGroupCondition$RuleMemoEnd) {
            index = anyRelationalGroupCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ANY_RELATIONAL_GROUP_CONDITION, anyRelationalGroupCondition$RuleMemoStart, anyRelationalGroupCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (anyRelationalGroupCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(anyRelationalGroupCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression RelationalOperator GroupConditionCoverageType ParenthesesSqlExpressionList)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // RelationalOperator
         match = relationalOperator$Rule();
         if (match) {
            // GroupConditionCoverageType
            match = groupConditionCoverageType$Rule();
            if (match) {
               // ParenthesesSqlExpressionList
               match = parenthesesSqlExpressionList$Rule();
            }
         }
      }
      if (match) {
         anyRelationalGroupCondition$RuleMemoStart = startIndex;
         anyRelationalGroupCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            anyRelationalGroupCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ANY_RELATIONAL_GROUP_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            anyRelationalGroupCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         anyRelationalGroupCondition$RuleMemoStart = startIndex;
         anyRelationalGroupCondition$RuleMemoEnd = -1;
         anyRelationalGroupCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RelationalGroupCondition : (EqualityGroupCondition | AnyRelationalGroupCondition)
   protected boolean relationalGroupCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (relationalGroupCondition$RuleMemoStart == index) {
         if (relationalGroupCondition$RuleMemoStart <= relationalGroupCondition$RuleMemoEnd) {
            index = relationalGroupCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_GROUP_CONDITION, relationalGroupCondition$RuleMemoStart, relationalGroupCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (relationalGroupCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(relationalGroupCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (EqualityGroupCondition | AnyRelationalGroupCondition)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // AnyRelationalGroupCondition
            match = anyRelationalGroupCondition$Rule();
            break;
         }
         case '(': {
            // EqualityGroupCondition
            match = equalityGroupCondition$Rule();
            if (! match) {
               // AnyRelationalGroupCondition
               match = anyRelationalGroupCondition$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         relationalGroupCondition$RuleMemoStart = startIndex;
         relationalGroupCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            relationalGroupCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_GROUP_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            relationalGroupCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         relationalGroupCondition$RuleMemoStart = startIndex;
         relationalGroupCondition$RuleMemoEnd = -1;
         relationalGroupCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //inExpressionList : (ParenthesesSqlExpressionList | SqlExpression)
   protected boolean inExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ParenthesesSqlExpressionList | SqlExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlExpression
            match = sqlExpression$Rule();
            break;
         }
         case '(': {
            // ParenthesesSqlExpressionList
            match = parenthesesSqlExpressionList$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IN_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InCondition : (inExpressionList Not? "in" TestNoAlpha OptionalSpacing ParenthesesSqlExpressionList)
   protected boolean inCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (inCondition$RuleMemoStart == index) {
         if (inCondition$RuleMemoStart <= inCondition$RuleMemoEnd) {
            index = inCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IN_CONDITION, inCondition$RuleMemoStart, inCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (inCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(inCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (inExpressionList Not? "in" TestNoAlpha OptionalSpacing ParenthesesSqlExpressionList)
      // inExpressionList
      match = inExpressionList$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "in"
         match = ignoreCaseStringMatcher("in", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ParenthesesSqlExpressionList
                  match = parenthesesSqlExpressionList$Rule();
               }
            }
         }
      }
      if (match) {
         inCondition$RuleMemoStart = startIndex;
         inCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            inCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IN_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            inCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         inCondition$RuleMemoStart = startIndex;
         inCondition$RuleMemoEnd = -1;
         inCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsASetCondition : (SqlObjectIdentifier "is" TestNoAlpha OptionalSpacing Not? "a" TestNoAlpha OptionalSpacing "set" TestNoAlpha OptionalSpacing)
   protected boolean isASetCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isASetCondition$RuleMemoStart == index) {
         if (isASetCondition$RuleMemoStart <= isASetCondition$RuleMemoEnd) {
            index = isASetCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_ASET_CONDITION, isASetCondition$RuleMemoStart, isASetCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isASetCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isASetCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlObjectIdentifier "is" TestNoAlpha OptionalSpacing Not? "a" TestNoAlpha OptionalSpacing "set" TestNoAlpha OptionalSpacing)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // "is"
         match = ignoreCaseStringMatcher("is", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Not?
                  // Not
                  not$Rule();
                  // "a"
                  match = ignoreCaseCharMatcher('a');
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "set"
                           match = ignoreCaseStringMatcher("set", 3);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         isASetCondition$RuleMemoStart = startIndex;
         isASetCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isASetCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_ASET_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isASetCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isASetCondition$RuleMemoStart = startIndex;
         isASetCondition$RuleMemoEnd = -1;
         isASetCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ObjectIs : (SqlObjectIdentifier "is" TestNoAlpha OptionalSpacing)
   protected boolean objectIs$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (objectIs$RuleMemoStart == index) {
         if (objectIs$RuleMemoStart <= objectIs$RuleMemoEnd) {
            index = objectIs$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OBJECT_IS, objectIs$RuleMemoStart, objectIs$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (objectIs$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(objectIs$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlObjectIdentifier "is" TestNoAlpha OptionalSpacing)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // "is"
         match = ignoreCaseStringMatcher("is", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         objectIs$RuleMemoStart = startIndex;
         objectIs$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            objectIs$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OBJECT_IS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            objectIs$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         objectIs$RuleMemoStart = startIndex;
         objectIs$RuleMemoEnd = -1;
         objectIs$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsAnyCondition : (ObjectIs? "any" TestNoAlpha OptionalSpacing)
   protected boolean isAnyCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isAnyCondition$RuleMemoStart == index) {
         if (isAnyCondition$RuleMemoStart <= isAnyCondition$RuleMemoEnd) {
            index = isAnyCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_ANY_CONDITION, isAnyCondition$RuleMemoStart, isAnyCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isAnyCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isAnyCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ObjectIs? "any" TestNoAlpha OptionalSpacing)
      // ObjectIs?
      // ObjectIs
      objectIs$Rule();
      // "any"
      match = ignoreCaseStringMatcher("any", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         isAnyCondition$RuleMemoStart = startIndex;
         isAnyCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isAnyCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_ANY_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isAnyCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isAnyCondition$RuleMemoStart = startIndex;
         isAnyCondition$RuleMemoEnd = -1;
         isAnyCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsEmptyCondition : (ObjectIs Not? "empty" TestNoAlpha OptionalSpacing)
   protected boolean isEmptyCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isEmptyCondition$RuleMemoStart == index) {
         if (isEmptyCondition$RuleMemoStart <= isEmptyCondition$RuleMemoEnd) {
            index = isEmptyCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_EMPTY_CONDITION, isEmptyCondition$RuleMemoStart, isEmptyCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isEmptyCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isEmptyCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ObjectIs Not? "empty" TestNoAlpha OptionalSpacing)
      // ObjectIs
      match = objectIs$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "empty"
         match = ignoreCaseStringMatcher("empty", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         isEmptyCondition$RuleMemoStart = startIndex;
         isEmptyCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isEmptyCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_EMPTY_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isEmptyCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isEmptyCondition$RuleMemoStart = startIndex;
         isEmptyCondition$RuleMemoEnd = -1;
         isEmptyCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsOfTypeCondition : (SqlExpression "is" TestNoAlpha OptionalSpacing Not? "of" TestNoAlpha OptionalSpacing ("type" TestNoAlpha OptionalSpacing "Type" TestNoAlpha OptionalSpacing)? '(' OptionalSpacing IsOfTypeList ')' OptionalSpacing)
   protected boolean isOfTypeCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isOfTypeCondition$RuleMemoStart == index) {
         if (isOfTypeCondition$RuleMemoStart <= isOfTypeCondition$RuleMemoEnd) {
            index = isOfTypeCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_OF_TYPE_CONDITION, isOfTypeCondition$RuleMemoStart, isOfTypeCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isOfTypeCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isOfTypeCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression "is" TestNoAlpha OptionalSpacing Not? "of" TestNoAlpha OptionalSpacing ("type" TestNoAlpha OptionalSpacing "Type" TestNoAlpha OptionalSpacing)? '(' OptionalSpacing IsOfTypeList ')' OptionalSpacing)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // "is"
         match = ignoreCaseStringMatcher("is", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Not?
                  // Not
                  not$Rule();
                  // "of"
                  match = ignoreCaseStringMatcher("of", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // ("type" TestNoAlpha OptionalSpacing "Type" TestNoAlpha OptionalSpacing)?
                           // ("type" TestNoAlpha OptionalSpacing "Type" TestNoAlpha OptionalSpacing)
                           Node lastNode_1 = currentNode;
                           int lastIndex_1 = index;
                           // "type"
                           match = ignoreCaseStringMatcher("type", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // "Type"
                                    match = ignoreCaseStringMatcher("Type", 4);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                             currentNode = lastNode_1;
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           }
                           // '('
                           match = charMatcher('(');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // IsOfTypeList
                                 match = isOfTypeList$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         isOfTypeCondition$RuleMemoStart = startIndex;
         isOfTypeCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isOfTypeCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_OF_TYPE_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isOfTypeCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isOfTypeCondition$RuleMemoStart = startIndex;
         isOfTypeCondition$RuleMemoEnd = -1;
         isOfTypeCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Only : ("only" TestNoAlpha OptionalSpacing)
   protected boolean only$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("only" TestNoAlpha OptionalSpacing)
      // "only"
      match = ignoreCaseStringMatcher("only", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ONLY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsTypeOfObject : (Only? SqlObjectIdentifier)
   protected boolean isTypeOfObject$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isTypeOfObject$RuleMemoStart == index) {
         if (isTypeOfObject$RuleMemoStart <= isTypeOfObject$RuleMemoEnd) {
            index = isTypeOfObject$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_TYPE_OF_OBJECT, isTypeOfObject$RuleMemoStart, isTypeOfObject$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isTypeOfObject$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isTypeOfObject$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Only? SqlObjectIdentifier)
      // Only?
      // Only
      only$Rule();
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         isTypeOfObject$RuleMemoStart = startIndex;
         isTypeOfObject$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isTypeOfObject$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_TYPE_OF_OBJECT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isTypeOfObject$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isTypeOfObject$RuleMemoStart = startIndex;
         isTypeOfObject$RuleMemoEnd = -1;
         isTypeOfObject$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsOfTypeList : (IsTypeOfObject (',' OptionalSpacing IsTypeOfObject)*)
   protected boolean isOfTypeList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (IsTypeOfObject (',' OptionalSpacing IsTypeOfObject)*)
      // IsTypeOfObject
      match = isTypeOfObject$Rule();
      if (match) {
         // (',' OptionalSpacing IsTypeOfObject)*
         do {
            // (',' OptionalSpacing IsTypeOfObject)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // IsTypeOfObject
                  match = isTypeOfObject$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_OF_TYPE_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsPresentCondition : (SqlObjectIdentifier "is" TestNoAlpha OptionalSpacing "present" TestNoAlpha OptionalSpacing)
   protected boolean isPresentCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (isPresentCondition$RuleMemoStart == index) {
         if (isPresentCondition$RuleMemoStart <= isPresentCondition$RuleMemoEnd) {
            index = isPresentCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IS_PRESENT_CONDITION, isPresentCondition$RuleMemoStart, isPresentCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (isPresentCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(isPresentCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlObjectIdentifier "is" TestNoAlpha OptionalSpacing "present" TestNoAlpha OptionalSpacing)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // "is"
         match = ignoreCaseStringMatcher("is", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // "present"
                  match = ignoreCaseStringMatcher("present", 7);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         isPresentCondition$RuleMemoStart = startIndex;
         isPresentCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            isPresentCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_PRESENT_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            isPresentCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         isPresentCondition$RuleMemoStart = startIndex;
         isPresentCondition$RuleMemoEnd = -1;
         isPresentCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LikeOperator : (("like" TestNoAlpha OptionalSpacing) | ("likec" TestNoAlpha OptionalSpacing) | ("like2" OptionalSpacing) | ("like4" OptionalSpacing))
   protected boolean likeOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("like" TestNoAlpha OptionalSpacing) | ("likec" TestNoAlpha OptionalSpacing) | ("like2" OptionalSpacing) | ("like4" OptionalSpacing))
      // ("like" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "like"
      match = ignoreCaseStringMatcher("like", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("likec" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "likec"
         match = ignoreCaseStringMatcher("likec", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("like2" OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "like2"
            match = ignoreCaseStringMatcher("like2", 5);
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
                  currentNode = lastNode_3;
               }
            }
            if (! match) {
               // ("like4" OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "like4"
               match = ignoreCaseStringMatcher("like4", 5);
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                     currentNode = lastNode_4;
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIKE_OPERATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Escape : ("escape" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean escape$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("escape" TestNoAlpha OptionalSpacing SqlExpression)
      // "escape"
      match = ignoreCaseStringMatcher("escape", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ESCAPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LikeCondition : (SqlExpression Not? LikeOperator SqlExpression Escape?)
   protected boolean likeCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (likeCondition$RuleMemoStart == index) {
         if (likeCondition$RuleMemoStart <= likeCondition$RuleMemoEnd) {
            index = likeCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LIKE_CONDITION, likeCondition$RuleMemoStart, likeCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (likeCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(likeCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression Not? LikeOperator SqlExpression Escape?)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // LikeOperator
         match = likeOperator$Rule();
         if (match) {
            // SqlExpression
            match = sqlExpression$Rule();
            if (match) {
               // Escape?
               // Escape
               escape$Rule();
               match = true;
            }
         }
      }
      if (match) {
         likeCondition$RuleMemoStart = startIndex;
         likeCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            likeCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIKE_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            likeCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         likeCondition$RuleMemoStart = startIndex;
         likeCondition$RuleMemoEnd = -1;
         likeCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MatchParam : (',' OptionalSpacing StringLiteral)
   protected boolean matchParam$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (',' OptionalSpacing StringLiteral)
      // ','
      match = charMatcher(',');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // StringLiteral
            match = stringLiteral$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MATCH_PARAM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RegexCondition : ("regexp_like" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ',' OptionalSpacing SqlExpression MatchParam? ')' OptionalSpacing)
   protected boolean regexCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (regexCondition$RuleMemoStart == index) {
         if (regexCondition$RuleMemoStart <= regexCondition$RuleMemoEnd) {
            index = regexCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.REGEX_CONDITION, regexCondition$RuleMemoStart, regexCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (regexCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(regexCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("regexp_like" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ',' OptionalSpacing SqlExpression MatchParam? ')' OptionalSpacing)
      // "regexp_like"
      match = ignoreCaseStringMatcher("regexp_like", 11);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                              if (match) {
                                 // MatchParam?
                                 // MatchParam
                                 matchParam$Rule();
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         regexCondition$RuleMemoStart = startIndex;
         regexCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            regexCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.REGEX_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            regexCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         regexCondition$RuleMemoStart = startIndex;
         regexCondition$RuleMemoEnd = -1;
         regexCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MemberCondition : (SqlExpression Not? "member" TestNoAlpha OptionalSpacing ("of" TestNoAlpha OptionalSpacing)? SqlObjectIdentifier)
   protected boolean memberCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (memberCondition$RuleMemoStart == index) {
         if (memberCondition$RuleMemoStart <= memberCondition$RuleMemoEnd) {
            index = memberCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MEMBER_CONDITION, memberCondition$RuleMemoStart, memberCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (memberCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(memberCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression Not? "member" TestNoAlpha OptionalSpacing ("of" TestNoAlpha OptionalSpacing)? SqlObjectIdentifier)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "member"
         match = ignoreCaseStringMatcher("member", 6);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ("of" TestNoAlpha OptionalSpacing)?
                  // ("of" TestNoAlpha OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // "of"
                  match = ignoreCaseStringMatcher("of", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
                  // SqlObjectIdentifier
                  match = sqlObjectIdentifier$Rule();
               }
            }
         }
      }
      if (match) {
         memberCondition$RuleMemoStart = startIndex;
         memberCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            memberCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MEMBER_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            memberCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         memberCondition$RuleMemoStart = startIndex;
         memberCondition$RuleMemoEnd = -1;
         memberCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BetweenCondition : (SqlExpression Not? "between" TestNoAlpha OptionalSpacing SqlExpression "and" TestNoAlpha OptionalSpacing SqlExpression)
   protected boolean betweenCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (betweenCondition$RuleMemoStart == index) {
         if (betweenCondition$RuleMemoStart <= betweenCondition$RuleMemoEnd) {
            index = betweenCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BETWEEN_CONDITION, betweenCondition$RuleMemoStart, betweenCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (betweenCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(betweenCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression Not? "between" TestNoAlpha OptionalSpacing SqlExpression "and" TestNoAlpha OptionalSpacing SqlExpression)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "between"
         match = ignoreCaseStringMatcher("between", 7);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlExpression
                  match = sqlExpression$Rule();
                  if (match) {
                     // "and"
                     match = ignoreCaseStringMatcher("and", 3);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlExpression
                              match = sqlExpression$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         betweenCondition$RuleMemoStart = startIndex;
         betweenCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            betweenCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BETWEEN_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            betweenCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         betweenCondition$RuleMemoStart = startIndex;
         betweenCondition$RuleMemoEnd = -1;
         betweenCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubMultiSetCondition : (SqlObjectIdentifier Not? "ubmultiset" TestNoAlpha OptionalSpacing ("of" TestNoAlpha OptionalSpacing)? SqlObjectIdentifier)
   protected boolean subMultiSetCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (subMultiSetCondition$RuleMemoStart == index) {
         if (subMultiSetCondition$RuleMemoStart <= subMultiSetCondition$RuleMemoEnd) {
            index = subMultiSetCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUB_MULTI_SET_CONDITION, subMultiSetCondition$RuleMemoStart, subMultiSetCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (subMultiSetCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(subMultiSetCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlObjectIdentifier Not? "ubmultiset" TestNoAlpha OptionalSpacing ("of" TestNoAlpha OptionalSpacing)? SqlObjectIdentifier)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "ubmultiset"
         match = ignoreCaseStringMatcher("ubmultiset", 10);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ("of" TestNoAlpha OptionalSpacing)?
                  // ("of" TestNoAlpha OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // "of"
                  match = ignoreCaseStringMatcher("of", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
                  // SqlObjectIdentifier
                  match = sqlObjectIdentifier$Rule();
               }
            }
         }
      }
      if (match) {
         subMultiSetCondition$RuleMemoStart = startIndex;
         subMultiSetCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            subMultiSetCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUB_MULTI_SET_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            subMultiSetCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         subMultiSetCondition$RuleMemoStart = startIndex;
         subMultiSetCondition$RuleMemoEnd = -1;
         subMultiSetCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CorrelationInteger : (',' OptionalSpacing IntegerLiteral)
   protected boolean correlationInteger$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (correlationInteger$RuleMemoStart == index) {
         if (correlationInteger$RuleMemoStart <= correlationInteger$RuleMemoEnd) {
            index = correlationInteger$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CORRELATION_INTEGER, correlationInteger$RuleMemoStart, correlationInteger$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (correlationInteger$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(correlationInteger$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (',' OptionalSpacing IntegerLiteral)
      // ','
      match = charMatcher(',');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // IntegerLiteral
            match = integerLiteral$Rule();
         }
      }
      if (match) {
         correlationInteger$RuleMemoStart = startIndex;
         correlationInteger$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            correlationInteger$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CORRELATION_INTEGER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            correlationInteger$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         correlationInteger$RuleMemoStart = startIndex;
         correlationInteger$RuleMemoEnd = -1;
         correlationInteger$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EqualsPathCondition : ("equals_path" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier ',' OptionalSpacing IdentifierOrStringLiteral CorrelationInteger? ')' OptionalSpacing)
   protected boolean equalsPathCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (equalsPathCondition$RuleMemoStart == index) {
         if (equalsPathCondition$RuleMemoStart <= equalsPathCondition$RuleMemoEnd) {
            index = equalsPathCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.EQUALS_PATH_CONDITION, equalsPathCondition$RuleMemoStart, equalsPathCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (equalsPathCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(equalsPathCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("equals_path" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier ',' OptionalSpacing IdentifierOrStringLiteral CorrelationInteger? ')' OptionalSpacing)
      // "equals_path"
      match = ignoreCaseStringMatcher("equals_path", 11);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                     if (match) {
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // IdentifierOrStringLiteral
                              match = identifierOrStringLiteral$Rule();
                              if (match) {
                                 // CorrelationInteger?
                                 // CorrelationInteger
                                 correlationInteger$Rule();
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         equalsPathCondition$RuleMemoStart = startIndex;
         equalsPathCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            equalsPathCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EQUALS_PATH_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            equalsPathCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         equalsPathCondition$RuleMemoStart = startIndex;
         equalsPathCondition$RuleMemoEnd = -1;
         equalsPathCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnderPathLevels : (',' OptionalSpacing IntegerLiteral)
   protected boolean underPathLevels$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (',' OptionalSpacing IntegerLiteral)
      // ','
      match = charMatcher(',');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // IntegerLiteral
            match = integerLiteral$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNDER_PATH_LEVELS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnderPathCondition : ("under_path" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier UnderPathLevels? ',' OptionalSpacing IdentifierOrStringLiteral CorrelationInteger ')' OptionalSpacing)
   protected boolean underPathCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (underPathCondition$RuleMemoStart == index) {
         if (underPathCondition$RuleMemoStart <= underPathCondition$RuleMemoEnd) {
            index = underPathCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UNDER_PATH_CONDITION, underPathCondition$RuleMemoStart, underPathCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (underPathCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(underPathCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("under_path" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier UnderPathLevels? ',' OptionalSpacing IdentifierOrStringLiteral CorrelationInteger ')' OptionalSpacing)
      // "under_path"
      match = ignoreCaseStringMatcher("under_path", 10);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                     if (match) {
                        // UnderPathLevels?
                        // UnderPathLevels
                        underPathLevels$Rule();
                        // ','
                        match = charMatcher(',');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // IdentifierOrStringLiteral
                              match = identifierOrStringLiteral$Rule();
                              if (match) {
                                 // CorrelationInteger
                                 match = correlationInteger$Rule();
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         underPathCondition$RuleMemoStart = startIndex;
         underPathCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            underPathCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNDER_PATH_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            underPathCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         underPathCondition$RuleMemoStart = startIndex;
         underPathCondition$RuleMemoEnd = -1;
         underPathCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IdentifierOrStringLiteral : (StringLiteral | SqlIdentifier)
   protected boolean identifierOrStringLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (identifierOrStringLiteral$RuleMemoStart == index) {
         if (identifierOrStringLiteral$RuleMemoStart <= identifierOrStringLiteral$RuleMemoEnd) {
            index = identifierOrStringLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.IDENTIFIER_OR_STRING_LITERAL, identifierOrStringLiteral$RuleMemoStart, identifierOrStringLiteral$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (identifierOrStringLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(identifierOrStringLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (StringLiteral | SqlIdentifier)
      switch(buffer.getChar(index)) {
         case 'N':
         case 'n': {
            // StringLiteral
            match = stringLiteral$Rule();
            if (! match) {
               // SqlIdentifier
               match = sqlIdentifier$Rule();
            }
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlIdentifier
            match = sqlIdentifier$Rule();
            break;
         }
         case '\'': {
            // StringLiteral
            match = stringLiteral$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         identifierOrStringLiteral$RuleMemoStart = startIndex;
         identifierOrStringLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            identifierOrStringLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IDENTIFIER_OR_STRING_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            identifierOrStringLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         identifierOrStringLiteral$RuleMemoStart = startIndex;
         identifierOrStringLiteral$RuleMemoEnd = -1;
         identifierOrStringLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OnCondition : ("on" TestNoAlpha OptionalSpacing SqlCondition)
   protected boolean onCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (onCondition$RuleMemoStart == index) {
         if (onCondition$RuleMemoStart <= onCondition$RuleMemoEnd) {
            index = onCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ON_CONDITION, onCondition$RuleMemoStart, onCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (onCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(onCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("on" TestNoAlpha OptionalSpacing SqlCondition)
      // "on"
      match = ignoreCaseStringMatcher("on", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlCondition
               match = sqlCondition$Rule();
            }
         }
      }
      if (match) {
         onCondition$RuleMemoStart = startIndex;
         onCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            onCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ON_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            onCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         onCondition$RuleMemoStart = startIndex;
         onCondition$RuleMemoEnd = -1;
         onCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Using : ("using" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing)
   protected boolean using$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (using$RuleMemoStart == index) {
         if (using$RuleMemoStart <= using$RuleMemoEnd) {
            index = using$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.USING, using$RuleMemoStart, using$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (using$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(using$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("using" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing)
      // "using"
      match = ignoreCaseStringMatcher("using", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlIdentifierList
                     match = sqlIdentifierList$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         using$RuleMemoStart = startIndex;
         using$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            using$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.USING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            using$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         using$RuleMemoStart = startIndex;
         using$RuleMemoEnd = -1;
         using$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InnerCrossJoinClause : ((("inner" TestNoAlpha OptionalSpacing)? "join" TestNoAlpha OptionalSpacing TableReference (OnCondition | Using)) | ((("cross" TestNoAlpha OptionalSpacing) | ("natural" TestNoAlpha OptionalSpacing ("inner" TestNoAlpha OptionalSpacing)?)) "join" TestNoAlpha OptionalSpacing TableReference))
   protected boolean innerCrossJoinClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (innerCrossJoinClause$RuleMemoStart == index) {
         if (innerCrossJoinClause$RuleMemoStart <= innerCrossJoinClause$RuleMemoEnd) {
            index = innerCrossJoinClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INNER_CROSS_JOIN_CLAUSE, innerCrossJoinClause$RuleMemoStart, innerCrossJoinClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (innerCrossJoinClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(innerCrossJoinClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("inner" TestNoAlpha OptionalSpacing)? "join" TestNoAlpha OptionalSpacing TableReference (OnCondition | Using)) | ((("cross" TestNoAlpha OptionalSpacing) | ("natural" TestNoAlpha OptionalSpacing ("inner" TestNoAlpha OptionalSpacing)?)) "join" TestNoAlpha OptionalSpacing TableReference))
      // (("inner" TestNoAlpha OptionalSpacing)? "join" TestNoAlpha OptionalSpacing TableReference (OnCondition | Using))
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // ("inner" TestNoAlpha OptionalSpacing)?
      // ("inner" TestNoAlpha OptionalSpacing)
      Node lastNode_2 = currentNode;
      int lastIndex_2 = index;
      // "inner"
      match = ignoreCaseStringMatcher("inner", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
               currentNode = lastNode_2;
            }
         } else {
            index = lastIndex_2;
            lastNode_2.setSibling(null);
         }
      }
      // "join"
      match = ignoreCaseStringMatcher("join", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // TableReference
               match = tableReference$Rule();
               if (match) {
                  // (OnCondition | Using)
                  switch(buffer.getChar(index)) {
                     case 'o':
                     case 'O': {
                        // OnCondition
                        match = onCondition$Rule();
                        break;
                     }
                     case 'u':
                     case 'U': {
                        // Using
                        match = using$Rule();
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      } else {
         index = lastIndex_1;
         lastNode_1.setSibling(null);
      }
      if (! match) {
         // ((("cross" TestNoAlpha OptionalSpacing) | ("natural" TestNoAlpha OptionalSpacing ("inner" TestNoAlpha OptionalSpacing)?)) "join" TestNoAlpha OptionalSpacing TableReference)
         Node lastNode_3 = currentNode;
         int lastIndex_3 = index;
         // (("cross" TestNoAlpha OptionalSpacing) | ("natural" TestNoAlpha OptionalSpacing ("inner" TestNoAlpha OptionalSpacing)?))
         // ("cross" TestNoAlpha OptionalSpacing)
         Node lastNode_4 = currentNode;
         int lastIndex_4 = index;
         // "cross"
         match = ignoreCaseStringMatcher("cross", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_4;
                  lastNode_4.setSibling(null);
                  currentNode = lastNode_4;
               }
            } else {
               index = lastIndex_4;
               lastNode_4.setSibling(null);
            }
         }
         if (! match) {
            // ("natural" TestNoAlpha OptionalSpacing ("inner" TestNoAlpha OptionalSpacing)?)
            Node lastNode_5 = currentNode;
            int lastIndex_5 = index;
            // "natural"
            match = ignoreCaseStringMatcher("natural", 7);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ("inner" TestNoAlpha OptionalSpacing)?
                     // ("inner" TestNoAlpha OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // "inner"
                     match = ignoreCaseStringMatcher("inner", 5);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                              currentNode = lastNode_6;
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     match = true;
                  } else {
                     index = lastIndex_5;
                     lastNode_5.setSibling(null);
                  }
               } else {
                  index = lastIndex_5;
                  lastNode_5.setSibling(null);
               }
            }
         }
         if (match) {
            // "join"
            match = ignoreCaseStringMatcher("join", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // TableReference
                     match = tableReference$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            } else {
               index = lastIndex_3;
               lastNode_3.setSibling(null);
            }
         }
      }
      if (match) {
         innerCrossJoinClause$RuleMemoStart = startIndex;
         innerCrossJoinClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            innerCrossJoinClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INNER_CROSS_JOIN_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            innerCrossJoinClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         innerCrossJoinClause$RuleMemoStart = startIndex;
         innerCrossJoinClause$RuleMemoEnd = -1;
         innerCrossJoinClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NaturalOuterJoin : ("natural" TestNoAlpha OptionalSpacing OuterJoinType? "join" TestNoAlpha OptionalSpacing)
   protected boolean naturalOuterJoin$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (naturalOuterJoin$RuleMemoStart == index) {
         if (naturalOuterJoin$RuleMemoStart <= naturalOuterJoin$RuleMemoEnd) {
            index = naturalOuterJoin$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NATURAL_OUTER_JOIN, naturalOuterJoin$RuleMemoStart, naturalOuterJoin$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (naturalOuterJoin$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(naturalOuterJoin$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("natural" TestNoAlpha OptionalSpacing OuterJoinType? "join" TestNoAlpha OptionalSpacing)
      // "natural"
      match = ignoreCaseStringMatcher("natural", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // OuterJoinType?
               // OuterJoinType
               outerJoinType$Rule();
               // "join"
               match = ignoreCaseStringMatcher("join", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         naturalOuterJoin$RuleMemoStart = startIndex;
         naturalOuterJoin$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            naturalOuterJoin$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NATURAL_OUTER_JOIN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            naturalOuterJoin$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         naturalOuterJoin$RuleMemoStart = startIndex;
         naturalOuterJoin$RuleMemoEnd = -1;
         naturalOuterJoin$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NormalOuterJoin : (OuterJoinType "join" TestNoAlpha OptionalSpacing)
   protected boolean normalOuterJoin$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (normalOuterJoin$RuleMemoStart == index) {
         if (normalOuterJoin$RuleMemoStart <= normalOuterJoin$RuleMemoEnd) {
            index = normalOuterJoin$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NORMAL_OUTER_JOIN, normalOuterJoin$RuleMemoStart, normalOuterJoin$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (normalOuterJoin$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(normalOuterJoin$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OuterJoinType "join" TestNoAlpha OptionalSpacing)
      // OuterJoinType
      match = outerJoinType$Rule();
      if (match) {
         // "join"
         match = ignoreCaseStringMatcher("join", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         normalOuterJoin$RuleMemoStart = startIndex;
         normalOuterJoin$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            normalOuterJoin$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NORMAL_OUTER_JOIN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            normalOuterJoin$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         normalOuterJoin$RuleMemoStart = startIndex;
         normalOuterJoin$RuleMemoEnd = -1;
         normalOuterJoin$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OuterJoinClause : (QueryPartitionClause? (NaturalOuterJoin | NormalOuterJoin) TableReference QueryPartitionClause? (OnCondition | Using))
   protected boolean outerJoinClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (outerJoinClause$RuleMemoStart == index) {
         if (outerJoinClause$RuleMemoStart <= outerJoinClause$RuleMemoEnd) {
            index = outerJoinClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OUTER_JOIN_CLAUSE, outerJoinClause$RuleMemoStart, outerJoinClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (outerJoinClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(outerJoinClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (QueryPartitionClause? (NaturalOuterJoin | NormalOuterJoin) TableReference QueryPartitionClause? (OnCondition | Using))
      // QueryPartitionClause?
      // QueryPartitionClause
      queryPartitionClause$Rule();
      match = true;
      // (NaturalOuterJoin | NormalOuterJoin)
      switch(buffer.getChar(index)) {
         case 'r':
         case 'R':
         case 'f':
         case 'F':
         case 'l':
         case 'L': {
            // NormalOuterJoin
            match = normalOuterJoin$Rule();
            break;
         }
         case 'n':
         case 'N': {
            // NaturalOuterJoin
            match = naturalOuterJoin$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      // TableReference
      match = tableReference$Rule();
      if (match) {
         // QueryPartitionClause?
         // QueryPartitionClause
         queryPartitionClause$Rule();
         match = true;
         // (OnCondition | Using)
         switch(buffer.getChar(index)) {
            case 'o':
            case 'O': {
               // OnCondition
               match = onCondition$Rule();
               break;
            }
            case 'u':
            case 'U': {
               // Using
               match = using$Rule();
               break;
            }
            default: {
               match = false;
            }
         }
      }
      if (match) {
         outerJoinClause$RuleMemoStart = startIndex;
         outerJoinClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            outerJoinClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OUTER_JOIN_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            outerJoinClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         outerJoinClause$RuleMemoStart = startIndex;
         outerJoinClause$RuleMemoEnd = -1;
         outerJoinClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //JoinClauseType : (InnerCrossJoinClause | OuterJoinClause)
   protected boolean joinClauseType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (InnerCrossJoinClause | OuterJoinClause)
      switch(buffer.getChar(index)) {
         case 'p':
         case 'P':
         case 'r':
         case 'R':
         case 'f':
         case 'F':
         case 'l':
         case 'L': {
            // OuterJoinClause
            match = outerJoinClause$Rule();
            break;
         }
         case 'n':
         case 'N': {
            // InnerCrossJoinClause
            match = innerCrossJoinClause$Rule();
            if (! match) {
               // OuterJoinClause
               match = outerJoinClause$Rule();
            }
            break;
         }
         case 'c':
         case 'C':
         case 'i':
         case 'I':
         case 'j':
         case 'J': {
            // InnerCrossJoinClause
            match = innerCrossJoinClause$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.JOIN_CLAUSE_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //JoinClause : JoinClauseType*
   protected boolean joinClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // JoinClauseType*
      do {
         // JoinClauseType
         match = joinClauseType$Rule();
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.JOIN_CLAUSE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //OuterJoinType : ((("full" | "left" | "right") TestNoAlpha OptionalSpacing) ("outer" TestNoAlpha OptionalSpacing)?)
   protected boolean outerJoinType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (outerJoinType$RuleMemoStart == index) {
         if (outerJoinType$RuleMemoStart <= outerJoinType$RuleMemoEnd) {
            index = outerJoinType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OUTER_JOIN_TYPE, outerJoinType$RuleMemoStart, outerJoinType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (outerJoinType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(outerJoinType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("full" | "left" | "right") TestNoAlpha OptionalSpacing) ("outer" TestNoAlpha OptionalSpacing)?)
      // (("full" | "left" | "right") TestNoAlpha OptionalSpacing)
      // ("full" | "left" | "right")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'f':
         case 'F': {
            ++index;
            // "ull"
            if (match = ignoreCaseStringTest("ull", 3)) {
               index += 3;
            }
            break;
         }
         case 'r':
         case 'R': {
            ++index;
            // "ight"
            if (match = ignoreCaseStringTest("ight", 4)) {
               index += 4;
            }
            break;
         }
         case 'l':
         case 'L': {
            ++index;
            // "eft"
            if (match = ignoreCaseStringTest("eft", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // ("outer" TestNoAlpha OptionalSpacing)?
         // ("outer" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "outer"
         match = ignoreCaseStringMatcher("outer", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         match = true;
      }
      if (match) {
         outerJoinType$RuleMemoStart = startIndex;
         outerJoinType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            outerJoinType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OUTER_JOIN_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            outerJoinType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         outerJoinType$RuleMemoStart = startIndex;
         outerJoinType$RuleMemoEnd = -1;
         outerJoinType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryPartitionClause : ("partition" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing SqlExpressionList)
   protected boolean queryPartitionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (queryPartitionClause$RuleMemoStart == index) {
         if (queryPartitionClause$RuleMemoStart <= queryPartitionClause$RuleMemoEnd) {
            index = queryPartitionClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_PARTITION_CLAUSE, queryPartitionClause$RuleMemoStart, queryPartitionClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (queryPartitionClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(queryPartitionClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("partition" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing SqlExpressionList)
      // "partition"
      match = ignoreCaseStringMatcher("partition", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlExpressionList
                        match = sqlExpressionList$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         queryPartitionClause$RuleMemoStart = startIndex;
         queryPartitionClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            queryPartitionClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_PARTITION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            queryPartitionClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         queryPartitionClause$RuleMemoStart = startIndex;
         queryPartitionClause$RuleMemoEnd = -1;
         queryPartitionClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FromArgument : (TableReference JoinClause)
   protected boolean fromArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (fromArgument$RuleMemoStart == index) {
         if (fromArgument$RuleMemoStart <= fromArgument$RuleMemoEnd) {
            index = fromArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FROM_ARGUMENT, fromArgument$RuleMemoStart, fromArgument$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (fromArgument$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(fromArgument$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TableReference JoinClause)
      // TableReference
      match = tableReference$Rule();
      if (match) {
         // JoinClause
         match = joinClause$Rule();
      }
      if (match) {
         fromArgument$RuleMemoStart = startIndex;
         fromArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            fromArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FROM_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            fromArgument$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         fromArgument$RuleMemoStart = startIndex;
         fromArgument$RuleMemoEnd = -1;
         fromArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FromClause : ("from" TestNoAlpha OptionalSpacing FromArgument (',' OptionalSpacing FromArgument)*)
   protected boolean fromClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("from" TestNoAlpha OptionalSpacing FromArgument (',' OptionalSpacing FromArgument)*)
      // "from"
      match = ignoreCaseStringMatcher("from", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // FromArgument
               match = fromArgument$Rule();
               if (match) {
                  // (',' OptionalSpacing FromArgument)*
                  do {
                     // (',' OptionalSpacing FromArgument)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // FromArgument
                           match = fromArgument$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FROM_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CurrentOf : ("current" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing SqlObjectIdentifier)
   protected boolean currentOf$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (currentOf$RuleMemoStart == index) {
         if (currentOf$RuleMemoStart <= currentOf$RuleMemoEnd) {
            index = currentOf$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CURRENT_OF, currentOf$RuleMemoStart, currentOf$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (currentOf$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(currentOf$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("current" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing SqlObjectIdentifier)
      // "current"
      match = ignoreCaseStringMatcher("current", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "of"
               match = ignoreCaseStringMatcher("of", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlObjectIdentifier
                        match = sqlObjectIdentifier$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         currentOf$RuleMemoStart = startIndex;
         currentOf$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            currentOf$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURRENT_OF, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            currentOf$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         currentOf$RuleMemoStart = startIndex;
         currentOf$RuleMemoEnd = -1;
         currentOf$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WhereClause : ("where" TestNoAlpha OptionalSpacing (CurrentOf | SqlCondition))
   protected boolean whereClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (whereClause$RuleMemoStart == index) {
         if (whereClause$RuleMemoStart <= whereClause$RuleMemoEnd) {
            index = whereClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.WHERE_CLAUSE, whereClause$RuleMemoStart, whereClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (whereClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(whereClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("where" TestNoAlpha OptionalSpacing (CurrentOf | SqlCondition))
      // "where"
      match = ignoreCaseStringMatcher("where", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (CurrentOf | SqlCondition)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '\'':
                  case '(':
                  case '+':
                  case '-':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ':':
                  case '?':
                  case 'A':
                  case 'B':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // SqlCondition
                     match = sqlCondition$Rule();
                     break;
                  }
                  case 'C':
                  case 'c': {
                     // CurrentOf
                     match = currentOf$Rule();
                     if (! match) {
                        // SqlCondition
                        match = sqlCondition$Rule();
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            }
         }
      }
      if (match) {
         whereClause$RuleMemoStart = startIndex;
         whereClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            whereClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.WHERE_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            whereClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         whereClause$RuleMemoStart = startIndex;
         whereClause$RuleMemoEnd = -1;
         whereClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BulkCollect : ("bulk" TestNoAlpha OptionalSpacing "collect" TestNoAlpha OptionalSpacing)
   protected boolean bulkCollect$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (bulkCollect$RuleMemoStart == index) {
         if (bulkCollect$RuleMemoStart <= bulkCollect$RuleMemoEnd) {
            index = bulkCollect$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BULK_COLLECT, bulkCollect$RuleMemoStart, bulkCollect$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (bulkCollect$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(bulkCollect$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("bulk" TestNoAlpha OptionalSpacing "collect" TestNoAlpha OptionalSpacing)
      // "bulk"
      match = ignoreCaseStringMatcher("bulk", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "collect"
               match = ignoreCaseStringMatcher("collect", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         bulkCollect$RuleMemoStart = startIndex;
         bulkCollect$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            bulkCollect$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BULK_COLLECT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            bulkCollect$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         bulkCollect$RuleMemoStart = startIndex;
         bulkCollect$RuleMemoEnd = -1;
         bulkCollect$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SelectIntoClause : (BulkCollect? "into" TestNoAlpha OptionalSpacing (('(' OptionalSpacing SqlObjectIdentifierList ')' OptionalSpacing) | SqlObjectIdentifierList))
   protected boolean selectIntoClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (BulkCollect? "into" TestNoAlpha OptionalSpacing (('(' OptionalSpacing SqlObjectIdentifierList ')' OptionalSpacing) | SqlObjectIdentifierList))
      // BulkCollect?
      // BulkCollect
      bulkCollect$Rule();
      // "into"
      match = ignoreCaseStringMatcher("into", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (('(' OptionalSpacing SqlObjectIdentifierList ')' OptionalSpacing) | SqlObjectIdentifierList)
               // ('(' OptionalSpacing SqlObjectIdentifierList ')' OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlObjectIdentifierList
                     match = sqlObjectIdentifierList$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               if (! match) {
                  // SqlObjectIdentifierList
                  match = sqlObjectIdentifierList$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_INTO_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Distinct : (("distinct" | "unique" | "all") TestNoAlpha OptionalSpacing)
   protected boolean distinct$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("distinct" | "unique" | "all") TestNoAlpha OptionalSpacing)
      // ("distinct" | "unique" | "all")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'a':
         case 'A': {
            ++index;
            // "ll"
            if (match = ignoreCaseStringTest("ll", 2)) {
               index += 2;
            }
            break;
         }
         case 'd':
         case 'D': {
            ++index;
            // "istinct"
            if (match = ignoreCaseStringTest("istinct", 7)) {
               index += 7;
            }
            break;
         }
         case 'u':
         case 'U': {
            ++index;
            // "nique"
            if (match = ignoreCaseStringTest("nique", 5)) {
               index += 5;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DISTINCT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnionType : (("union" TestNoAlpha OptionalSpacing "all" TestNoAlpha OptionalSpacing) | ("union" TestNoAlpha OptionalSpacing) | ("intersect" TestNoAlpha OptionalSpacing) | ("minus" TestNoAlpha OptionalSpacing))
   protected boolean unionType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("union" TestNoAlpha OptionalSpacing "all" TestNoAlpha OptionalSpacing) | ("union" TestNoAlpha OptionalSpacing) | ("intersect" TestNoAlpha OptionalSpacing) | ("minus" TestNoAlpha OptionalSpacing))
      // ("union" TestNoAlpha OptionalSpacing "all" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "union"
      match = ignoreCaseStringMatcher("union", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "all"
               match = ignoreCaseStringMatcher("all", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("union" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "union"
         match = ignoreCaseStringMatcher("union", 5);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("intersect" TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "intersect"
            match = ignoreCaseStringMatcher("intersect", 9);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                     currentNode = lastNode_3;
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // ("minus" TestNoAlpha OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "minus"
               match = ignoreCaseStringMatcher("minus", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNION_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnionClause : (UnionType Subquery)
   protected boolean unionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (UnionType Subquery)
      // UnionType
      match = unionType$Rule();
      if (match) {
         // Subquery
         match = subquery$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //QueryBlock : ("select" TestNoAlpha OptionalSpacing Hint? Distinct? SelectList SelectIntoClause? FromClause WhereClause? HierarchicalQueryClause? GroupByClause? HavingClause? ModelClause?)
   protected boolean queryBlock$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (queryBlock$RuleMemoStart == index) {
         if (queryBlock$RuleMemoStart <= queryBlock$RuleMemoEnd) {
            index = queryBlock$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_BLOCK, queryBlock$RuleMemoStart, queryBlock$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (queryBlock$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(queryBlock$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("select" TestNoAlpha OptionalSpacing Hint? Distinct? SelectList SelectIntoClause? FromClause WhereClause? HierarchicalQueryClause? GroupByClause? HavingClause? ModelClause?)
      // "select"
      match = ignoreCaseStringMatcher("select", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Hint?
               // Hint
               hint$Rule();
               // Distinct?
               // Distinct
               distinct$Rule();
               // SelectList
               match = selectList$Rule();
               if (match) {
                  // SelectIntoClause?
                  // SelectIntoClause
                  selectIntoClause$Rule();
                  // FromClause
                  match = fromClause$Rule();
                  if (match) {
                     // WhereClause?
                     // WhereClause
                     whereClause$Rule();
                     // HierarchicalQueryClause?
                     // HierarchicalQueryClause
                     hierarchicalQueryClause$Rule();
                     // GroupByClause?
                     // GroupByClause
                     groupByClause$Rule();
                     // HavingClause?
                     // HavingClause
                     havingClause$Rule();
                     // ModelClause?
                     // ModelClause
                     modelClause$Rule();
                     match = true;
                  }
               }
            }
         }
      }
      if (match) {
         queryBlock$RuleMemoStart = startIndex;
         queryBlock$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            queryBlock$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.QUERY_BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            queryBlock$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         queryBlock$RuleMemoStart = startIndex;
         queryBlock$RuleMemoEnd = -1;
         queryBlock$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EnclosedSubquery : ('(' OptionalSpacing Subquery ')' OptionalSpacing)
   protected boolean enclosedSubquery$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (enclosedSubquery$RuleMemoStart == index) {
         if (enclosedSubquery$RuleMemoStart <= enclosedSubquery$RuleMemoEnd) {
            index = enclosedSubquery$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ENCLOSED_SUBQUERY, enclosedSubquery$RuleMemoStart, enclosedSubquery$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (enclosedSubquery$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(enclosedSubquery$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing Subquery ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Subquery
            match = subquery$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         enclosedSubquery$RuleMemoStart = startIndex;
         enclosedSubquery$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            enclosedSubquery$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ENCLOSED_SUBQUERY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            enclosedSubquery$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         enclosedSubquery$RuleMemoStart = startIndex;
         enclosedSubquery$RuleMemoEnd = -1;
         enclosedSubquery$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Subquery : ((EnclosedSubquery | QueryBlock) UnionClause? OrderByClause?)
   protected boolean subquery$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (subquery$RuleMemoStart == index) {
         if (subquery$RuleMemoStart <= subquery$RuleMemoEnd) {
            index = subquery$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY, subquery$RuleMemoStart, subquery$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (subquery$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(subquery$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((EnclosedSubquery | QueryBlock) UnionClause? OrderByClause?)
      // (EnclosedSubquery | QueryBlock)
      switch(buffer.getChar(index)) {
         case 's':
         case 'S': {
            // QueryBlock
            match = queryBlock$Rule();
            break;
         }
         case '(': {
            // EnclosedSubquery
            match = enclosedSubquery$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         // UnionClause?
         // UnionClause
         unionClause$Rule();
         // OrderByClause?
         // OrderByClause
         orderByClause$Rule();
         match = true;
      }
      if (match) {
         subquery$RuleMemoStart = startIndex;
         subquery$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            subquery$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            subquery$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         subquery$RuleMemoStart = startIndex;
         subquery$RuleMemoEnd = -1;
         subquery$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NoCycleOption : ("nocycle" TestNoAlpha OptionalSpacing)?
   protected boolean noCycleOption$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("nocycle" TestNoAlpha OptionalSpacing)?
      // ("nocycle" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "nocycle"
      match = ignoreCaseStringMatcher("nocycle", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.NO_CYCLE_OPTION, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //StartWithCondition : ("start" TestNoAlpha OptionalSpacing "with" TestNoAlpha OptionalSpacing SqlCondition)
   protected boolean startWithCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (startWithCondition$RuleMemoStart == index) {
         if (startWithCondition$RuleMemoStart <= startWithCondition$RuleMemoEnd) {
            index = startWithCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.START_WITH_CONDITION, startWithCondition$RuleMemoStart, startWithCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (startWithCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(startWithCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("start" TestNoAlpha OptionalSpacing "with" TestNoAlpha OptionalSpacing SqlCondition)
      // "start"
      match = ignoreCaseStringMatcher("start", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "with"
               match = ignoreCaseStringMatcher("with", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlCondition
                        match = sqlCondition$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         startWithCondition$RuleMemoStart = startIndex;
         startWithCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            startWithCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.START_WITH_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            startWithCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         startWithCondition$RuleMemoStart = startIndex;
         startWithCondition$RuleMemoEnd = -1;
         startWithCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConnectByCondition : ("connect" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing NoCycleOption SqlCondition)
   protected boolean connectByCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (connectByCondition$RuleMemoStart == index) {
         if (connectByCondition$RuleMemoStart <= connectByCondition$RuleMemoEnd) {
            index = connectByCondition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CONNECT_BY_CONDITION, connectByCondition$RuleMemoStart, connectByCondition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (connectByCondition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(connectByCondition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("connect" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing NoCycleOption SqlCondition)
      // "connect"
      match = ignoreCaseStringMatcher("connect", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // NoCycleOption
                        match = noCycleOption$Rule();
                        if (match) {
                           // SqlCondition
                           match = sqlCondition$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         connectByCondition$RuleMemoStart = startIndex;
         connectByCondition$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            connectByCondition$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONNECT_BY_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            connectByCondition$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         connectByCondition$RuleMemoStart = startIndex;
         connectByCondition$RuleMemoEnd = -1;
         connectByCondition$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConnectBy : (ConnectByCondition StartWithCondition?)
   protected boolean connectBy$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (connectBy$RuleMemoStart == index) {
         if (connectBy$RuleMemoStart <= connectBy$RuleMemoEnd) {
            index = connectBy$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CONNECT_BY, connectBy$RuleMemoStart, connectBy$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (connectBy$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(connectBy$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ConnectByCondition StartWithCondition?)
      // ConnectByCondition
      match = connectByCondition$Rule();
      if (match) {
         // StartWithCondition?
         // StartWithCondition
         startWithCondition$Rule();
         match = true;
      }
      if (match) {
         connectBy$RuleMemoStart = startIndex;
         connectBy$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            connectBy$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONNECT_BY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            connectBy$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         connectBy$RuleMemoStart = startIndex;
         connectBy$RuleMemoEnd = -1;
         connectBy$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StartWith : (StartWithCondition ConnectByCondition)
   protected boolean startWith$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (startWith$RuleMemoStart == index) {
         if (startWith$RuleMemoStart <= startWith$RuleMemoEnd) {
            index = startWith$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.START_WITH, startWith$RuleMemoStart, startWith$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (startWith$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(startWith$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (StartWithCondition ConnectByCondition)
      // StartWithCondition
      match = startWithCondition$Rule();
      if (match) {
         // ConnectByCondition
         match = connectByCondition$Rule();
      }
      if (match) {
         startWith$RuleMemoStart = startIndex;
         startWith$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            startWith$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.START_WITH, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            startWith$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         startWith$RuleMemoStart = startIndex;
         startWith$RuleMemoEnd = -1;
         startWith$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //HierarchicalQueryClause : (ConnectBy | StartWith)
   protected boolean hierarchicalQueryClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ConnectBy | StartWith)
      switch(buffer.getChar(index)) {
         case 'c':
         case 'C': {
            // ConnectBy
            match = connectBy$Rule();
            break;
         }
         case 's':
         case 'S': {
            // StartWith
            match = startWith$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HIERARCHICAL_QUERY_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupByArgument : (RollupCubeClause | GroupingSetsClause | SqlExpression)
   protected boolean groupByArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (groupByArgument$RuleMemoStart == index) {
         if (groupByArgument$RuleMemoStart <= groupByArgument$RuleMemoEnd) {
            index = groupByArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.GROUP_BY_ARGUMENT, groupByArgument$RuleMemoStart, groupByArgument$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (groupByArgument$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(groupByArgument$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (RollupCubeClause | GroupingSetsClause | SqlExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'D':
         case 'E':
         case 'F':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'd':
         case 'e':
         case 'f':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlExpression
            match = sqlExpression$Rule();
            break;
         }
         case 'R':
         case 'r':
         case 'C':
         case 'c': {
            // RollupCubeClause
            match = rollupCubeClause$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         case 'G':
         case 'g': {
            // GroupingSetsClause
            match = groupingSetsClause$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         groupByArgument$RuleMemoStart = startIndex;
         groupByArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            groupByArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUP_BY_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            groupByArgument$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         groupByArgument$RuleMemoStart = startIndex;
         groupByArgument$RuleMemoEnd = -1;
         groupByArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupByArguments : (GroupByArgument (',' OptionalSpacing GroupByArgument)*)
   protected boolean groupByArguments$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (GroupByArgument (',' OptionalSpacing GroupByArgument)*)
      // GroupByArgument
      match = groupByArgument$Rule();
      if (match) {
         // (',' OptionalSpacing GroupByArgument)*
         do {
            // (',' OptionalSpacing GroupByArgument)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // GroupByArgument
                  match = groupByArgument$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUP_BY_ARGUMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RollupCubeClause : ((("rollup" | "cube") TestNoAlpha OptionalSpacing) '(' OptionalSpacing GroupingExpressionList ')' OptionalSpacing)
   protected boolean rollupCubeClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rollupCubeClause$RuleMemoStart == index) {
         if (rollupCubeClause$RuleMemoStart <= rollupCubeClause$RuleMemoEnd) {
            index = rollupCubeClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ROLLUP_CUBE_CLAUSE, rollupCubeClause$RuleMemoStart, rollupCubeClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rollupCubeClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rollupCubeClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("rollup" | "cube") TestNoAlpha OptionalSpacing) '(' OptionalSpacing GroupingExpressionList ')' OptionalSpacing)
      // (("rollup" | "cube") TestNoAlpha OptionalSpacing)
      // ("rollup" | "cube")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'r':
         case 'R': {
            ++index;
            // "ollup"
            if (match = ignoreCaseStringTest("ollup", 5)) {
               index += 5;
            }
            break;
         }
         case 'c':
         case 'C': {
            ++index;
            // "ube"
            if (match = ignoreCaseStringTest("ube", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // '('
         match = charMatcher('(');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // GroupingExpressionList
               match = groupingExpressionList$Rule();
               if (match) {
                  // ')'
                  match = charMatcher(')');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         rollupCubeClause$RuleMemoStart = startIndex;
         rollupCubeClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rollupCubeClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROLLUP_CUBE_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rollupCubeClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rollupCubeClause$RuleMemoStart = startIndex;
         rollupCubeClause$RuleMemoEnd = -1;
         rollupCubeClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupingExpressionList : (SqlExpressionList (',' OptionalSpacing SqlExpressionList)*)
   protected boolean groupingExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (groupingExpressionList$RuleMemoStart == index) {
         if (groupingExpressionList$RuleMemoStart <= groupingExpressionList$RuleMemoEnd) {
            index = groupingExpressionList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_EXPRESSION_LIST, groupingExpressionList$RuleMemoStart, groupingExpressionList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (groupingExpressionList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(groupingExpressionList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpressionList (',' OptionalSpacing SqlExpressionList)*)
      // SqlExpressionList
      match = sqlExpressionList$Rule();
      if (match) {
         // (',' OptionalSpacing SqlExpressionList)*
         do {
            // (',' OptionalSpacing SqlExpressionList)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlExpressionList
                  match = sqlExpressionList$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         groupingExpressionList$RuleMemoStart = startIndex;
         groupingExpressionList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            groupingExpressionList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            groupingExpressionList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         groupingExpressionList$RuleMemoStart = startIndex;
         groupingExpressionList$RuleMemoEnd = -1;
         groupingExpressionList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupingSetsClause : ("grouping" TestNoAlpha OptionalSpacing "sets" TestNoAlpha OptionalSpacing '(' OptionalSpacing GroupingSetsClauseArguments ')' OptionalSpacing)
   protected boolean groupingSetsClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (groupingSetsClause$RuleMemoStart == index) {
         if (groupingSetsClause$RuleMemoStart <= groupingSetsClause$RuleMemoEnd) {
            index = groupingSetsClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_SETS_CLAUSE, groupingSetsClause$RuleMemoStart, groupingSetsClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (groupingSetsClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(groupingSetsClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("grouping" TestNoAlpha OptionalSpacing "sets" TestNoAlpha OptionalSpacing '(' OptionalSpacing GroupingSetsClauseArguments ')' OptionalSpacing)
      // "grouping"
      match = ignoreCaseStringMatcher("grouping", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "sets"
               match = ignoreCaseStringMatcher("sets", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // GroupingSetsClauseArguments
                              match = groupingSetsClauseArguments$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         groupingSetsClause$RuleMemoStart = startIndex;
         groupingSetsClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            groupingSetsClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_SETS_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            groupingSetsClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         groupingSetsClause$RuleMemoStart = startIndex;
         groupingSetsClause$RuleMemoEnd = -1;
         groupingSetsClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupingSetsClauseArgument : (RollupCubeClause | GroupingExpressionList)
   protected boolean groupingSetsClauseArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (groupingSetsClauseArgument$RuleMemoStart == index) {
         if (groupingSetsClauseArgument$RuleMemoStart <= groupingSetsClauseArgument$RuleMemoEnd) {
            index = groupingSetsClauseArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_SETS_CLAUSE_ARGUMENT, groupingSetsClauseArgument$RuleMemoStart, groupingSetsClauseArgument$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (groupingSetsClauseArgument$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(groupingSetsClauseArgument$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (RollupCubeClause | GroupingExpressionList)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // GroupingExpressionList
            match = groupingExpressionList$Rule();
            break;
         }
         case 'R':
         case 'r':
         case 'C':
         case 'c': {
            // RollupCubeClause
            match = rollupCubeClause$Rule();
            if (! match) {
               // GroupingExpressionList
               match = groupingExpressionList$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         groupingSetsClauseArgument$RuleMemoStart = startIndex;
         groupingSetsClauseArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            groupingSetsClauseArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_SETS_CLAUSE_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            groupingSetsClauseArgument$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         groupingSetsClauseArgument$RuleMemoStart = startIndex;
         groupingSetsClauseArgument$RuleMemoEnd = -1;
         groupingSetsClauseArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupingSetsClauseArguments : (GroupingSetsClauseArgument (',' OptionalSpacing GroupingSetsClauseArgument)*)
   protected boolean groupingSetsClauseArguments$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (GroupingSetsClauseArgument (',' OptionalSpacing GroupingSetsClauseArgument)*)
      // GroupingSetsClauseArgument
      match = groupingSetsClauseArgument$Rule();
      if (match) {
         // (',' OptionalSpacing GroupingSetsClauseArgument)*
         do {
            // (',' OptionalSpacing GroupingSetsClauseArgument)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // GroupingSetsClauseArgument
                  match = groupingSetsClauseArgument$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUPING_SETS_CLAUSE_ARGUMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GroupByClause : ("group" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing GroupByArguments HavingClause?)
   protected boolean groupByClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("group" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing GroupByArguments HavingClause?)
      // "group"
      match = ignoreCaseStringMatcher("group", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // GroupByArguments
                        match = groupByArguments$Rule();
                        if (match) {
                           // HavingClause?
                           // HavingClause
                           havingClause$Rule();
                           match = true;
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GROUP_BY_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //HavingClause : ("having" TestNoAlpha OptionalSpacing SqlCondition)
   protected boolean havingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (havingClause$RuleMemoStart == index) {
         if (havingClause$RuleMemoStart <= havingClause$RuleMemoEnd) {
            index = havingClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.HAVING_CLAUSE, havingClause$RuleMemoStart, havingClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (havingClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(havingClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("having" TestNoAlpha OptionalSpacing SqlCondition)
      // "having"
      match = ignoreCaseStringMatcher("having", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlCondition
               match = sqlCondition$Rule();
            }
         }
      }
      if (match) {
         havingClause$RuleMemoStart = startIndex;
         havingClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            havingClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HAVING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            havingClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         havingClause$RuleMemoStart = startIndex;
         havingClause$RuleMemoEnd = -1;
         havingClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelClause : ("model" TestNoAlpha OptionalSpacing CellReferenceOptions ReturnRowsClause ReferenceModel MainModel)
   protected boolean modelClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("model" TestNoAlpha OptionalSpacing CellReferenceOptions ReturnRowsClause ReferenceModel MainModel)
      // "model"
      match = ignoreCaseStringMatcher("model", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // CellReferenceOptions
               match = cellReferenceOptions$Rule();
               if (match) {
                  // ReturnRowsClause
                  match = returnRowsClause$Rule();
                  if (match) {
                     // ReferenceModel
                     match = referenceModel$Rule();
                     if (match) {
                        // MainModel
                        match = mainModel$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CellReferenceOptions : (((("ignore" | "keep") TestNoAlpha OptionalSpacing) "nav" TestNoAlpha OptionalSpacing)? ("unique" TestNoAlpha OptionalSpacing (("dimension" TestNoAlpha OptionalSpacing) | ("single" TestNoAlpha OptionalSpacing "reference" TestNoAlpha OptionalSpacing)))?)
   protected boolean cellReferenceOptions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cellReferenceOptions$RuleMemoStart == index) {
         if (cellReferenceOptions$RuleMemoStart <= cellReferenceOptions$RuleMemoEnd) {
            index = cellReferenceOptions$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_REFERENCE_OPTIONS, cellReferenceOptions$RuleMemoStart, cellReferenceOptions$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cellReferenceOptions$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cellReferenceOptions$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (((("ignore" | "keep") TestNoAlpha OptionalSpacing) "nav" TestNoAlpha OptionalSpacing)? ("unique" TestNoAlpha OptionalSpacing (("dimension" TestNoAlpha OptionalSpacing) | ("single" TestNoAlpha OptionalSpacing "reference" TestNoAlpha OptionalSpacing)))?)
      // ((("ignore" | "keep") TestNoAlpha OptionalSpacing) "nav" TestNoAlpha OptionalSpacing)?
      // ((("ignore" | "keep") TestNoAlpha OptionalSpacing) "nav" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // (("ignore" | "keep") TestNoAlpha OptionalSpacing)
      Node lastNode_2 = currentNode;
      int lastIndex_2 = index;
      // ("ignore" | "keep")
      int startIndex_3 = index;
      switch(buffer.getChar(index)) {
         case 'i':
         case 'I': {
            ++index;
            // "gnore"
            if (match = ignoreCaseStringTest("gnore", 5)) {
               index += 5;
            }
            break;
         }
         case 'k':
         case 'K': {
            ++index;
            // "eep"
            if (match = ignoreCaseStringTest("eep", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_3;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
               currentNode = lastNode_2;
            }
         } else {
            index = lastIndex_2;
            lastNode_2.setSibling(null);
         }
      }
      if (match) {
         // "nav"
         match = ignoreCaseStringMatcher("nav", 3);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      match = true;
      // ("unique" TestNoAlpha OptionalSpacing (("dimension" TestNoAlpha OptionalSpacing) | ("single" TestNoAlpha OptionalSpacing "reference" TestNoAlpha OptionalSpacing)))?
      // ("unique" TestNoAlpha OptionalSpacing (("dimension" TestNoAlpha OptionalSpacing) | ("single" TestNoAlpha OptionalSpacing "reference" TestNoAlpha OptionalSpacing)))
      Node lastNode_4 = currentNode;
      int lastIndex_4 = index;
      // "unique"
      match = ignoreCaseStringMatcher("unique", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("dimension" TestNoAlpha OptionalSpacing) | ("single" TestNoAlpha OptionalSpacing "reference" TestNoAlpha OptionalSpacing))
               // ("dimension" TestNoAlpha OptionalSpacing)
               Node lastNode_5 = currentNode;
               int lastIndex_5 = index;
               // "dimension"
               match = ignoreCaseStringMatcher("dimension", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                        currentNode = lastNode_5;
                     }
                  } else {
                     index = lastIndex_5;
                     lastNode_5.setSibling(null);
                  }
               }
               if (! match) {
                  // ("single" TestNoAlpha OptionalSpacing "reference" TestNoAlpha OptionalSpacing)
                  Node lastNode_6 = currentNode;
                  int lastIndex_6 = index;
                  // "single"
                  match = ignoreCaseStringMatcher("single", 6);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "reference"
                           match = ignoreCaseStringMatcher("reference", 9);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_6;
                                    lastNode_6.setSibling(null);
                                    currentNode = lastNode_6;
                                 }
                              } else {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     } else {
                        index = lastIndex_6;
                        lastNode_6.setSibling(null);
                     }
                  }
               }
               if (! match) {
                  index = lastIndex_4;
                  lastNode_4.setSibling(null);
                  currentNode = lastNode_4;
               }
            } else {
               index = lastIndex_4;
               lastNode_4.setSibling(null);
            }
         } else {
            index = lastIndex_4;
            lastNode_4.setSibling(null);
         }
      }
      cellReferenceOptions$RuleMemoStart = startIndex;
      cellReferenceOptions$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         cellReferenceOptions$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_REFERENCE_OPTIONS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         cellReferenceOptions$RuleMemoFirstNode = currentNode;
      }
      return true;
   }

   //ReturnRowsClause : ("return" TestNoAlpha OptionalSpacing (("updated" | "all") TestNoAlpha OptionalSpacing) "rows" TestNoAlpha OptionalSpacing)?
   protected boolean returnRowsClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("return" TestNoAlpha OptionalSpacing (("updated" | "all") TestNoAlpha OptionalSpacing) "rows" TestNoAlpha OptionalSpacing)?
      // ("return" TestNoAlpha OptionalSpacing (("updated" | "all") TestNoAlpha OptionalSpacing) "rows" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "return"
      match = ignoreCaseStringMatcher("return", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("updated" | "all") TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // ("updated" | "all")
               int startIndex_3 = index;
               switch(buffer.getChar(index)) {
                  case 'a':
                  case 'A': {
                     ++index;
                     // "ll"
                     if (match = ignoreCaseStringTest("ll", 2)) {
                        index += 2;
                     }
                     break;
                  }
                  case 'u':
                  case 'U': {
                     ++index;
                     // "pdated"
                     if (match = ignoreCaseStringTest("pdated", 6)) {
                        index += 6;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! match) {
                  index = startIndex_3;
               } else if(! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               if (match) {
                  // "rows"
                  match = ignoreCaseStringMatcher("rows", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.RETURN_ROWS_CLAUSE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ReferenceModel : ("reference" TestNoAlpha OptionalSpacing SqlAnyIdentifier "on" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing ModelColumnClause CellReferenceOptions)*
   protected boolean referenceModel$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("reference" TestNoAlpha OptionalSpacing SqlAnyIdentifier "on" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing ModelColumnClause CellReferenceOptions)*
      do {
         // ("reference" TestNoAlpha OptionalSpacing SqlAnyIdentifier "on" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing ModelColumnClause CellReferenceOptions)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "reference"
         match = ignoreCaseStringMatcher("reference", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlAnyIdentifier
                  match = sqlAnyIdentifier$Rule();
                  if (match) {
                     // "on"
                     match = ignoreCaseStringMatcher("on", 2);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // '('
                              match = charMatcher('(');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // Subquery
                                    match = subquery$Rule();
                                    if (match) {
                                       // ')'
                                       match = charMatcher(')');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // ModelColumnClause
                                             match = modelColumnClause$Rule();
                                             if (match) {
                                                // CellReferenceOptions
                                                match = cellReferenceOptions$Rule();
                                                if (! match) {
                                                   index = lastIndex_1;
                                                   lastNode_1.setSibling(null);
                                                   currentNode = lastNode_1;
                                                }
                                             } else {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.REFERENCE_MODEL, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ModelColumnPartition : (QueryPartitionClause SqlIdentifier?)
   protected boolean modelColumnPartition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (QueryPartitionClause SqlIdentifier?)
      // QueryPartitionClause
      match = queryPartitionClause$Rule();
      if (match) {
         // SqlIdentifier?
         // SqlIdentifier
         sqlIdentifier$Rule();
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN_PARTITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelColumnClause : (ModelColumnPartition? "dimension" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing '(' OptionalSpacing ModelColumnList ')' OptionalSpacing "measures" TestNoAlpha OptionalSpacing '(' OptionalSpacing ModelColumnList ')' OptionalSpacing)
   protected boolean modelColumnClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (modelColumnClause$RuleMemoStart == index) {
         if (modelColumnClause$RuleMemoStart <= modelColumnClause$RuleMemoEnd) {
            index = modelColumnClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN_CLAUSE, modelColumnClause$RuleMemoStart, modelColumnClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (modelColumnClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(modelColumnClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ModelColumnPartition? "dimension" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing '(' OptionalSpacing ModelColumnList ')' OptionalSpacing "measures" TestNoAlpha OptionalSpacing '(' OptionalSpacing ModelColumnList ')' OptionalSpacing)
      // ModelColumnPartition?
      // ModelColumnPartition
      modelColumnPartition$Rule();
      // "dimension"
      match = ignoreCaseStringMatcher("dimension", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // ModelColumnList
                              match = modelColumnList$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "measures"
                                       match = ignoreCaseStringMatcher("measures", 8);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // '('
                                                match = charMatcher('(');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // ModelColumnList
                                                      match = modelColumnList$Rule();
                                                      if (match) {
                                                         // ')'
                                                         match = charMatcher(')');
                                                         if (match) {
                                                            // OptionalSpacing
                                                            match = optionalSpacing$Rule();
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         modelColumnClause$RuleMemoStart = startIndex;
         modelColumnClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            modelColumnClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            modelColumnClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         modelColumnClause$RuleMemoStart = startIndex;
         modelColumnClause$RuleMemoEnd = -1;
         modelColumnClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelColumnList : (ModelColumn (',' OptionalSpacing ModelColumn)*)
   protected boolean modelColumnList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (modelColumnList$RuleMemoStart == index) {
         if (modelColumnList$RuleMemoStart <= modelColumnList$RuleMemoEnd) {
            index = modelColumnList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN_LIST, modelColumnList$RuleMemoStart, modelColumnList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (modelColumnList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(modelColumnList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ModelColumn (',' OptionalSpacing ModelColumn)*)
      // ModelColumn
      match = modelColumn$Rule();
      if (match) {
         // (',' OptionalSpacing ModelColumn)*
         do {
            // (',' OptionalSpacing ModelColumn)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ModelColumn
                  match = modelColumn$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         modelColumnList$RuleMemoStart = startIndex;
         modelColumnList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            modelColumnList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            modelColumnList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         modelColumnList$RuleMemoStart = startIndex;
         modelColumnList$RuleMemoEnd = -1;
         modelColumnList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelColumn : (SqlExpression (AsOptionalAlias "AsAlias" TestNoAlpha OptionalSpacing)?)
   protected boolean modelColumn$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (modelColumn$RuleMemoStart == index) {
         if (modelColumn$RuleMemoStart <= modelColumn$RuleMemoEnd) {
            index = modelColumn$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN, modelColumn$RuleMemoStart, modelColumn$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (modelColumn$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(modelColumn$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlExpression (AsOptionalAlias "AsAlias" TestNoAlpha OptionalSpacing)?)
      // SqlExpression
      match = sqlExpression$Rule();
      if (match) {
         // (AsOptionalAlias "AsAlias" TestNoAlpha OptionalSpacing)?
         // (AsOptionalAlias "AsAlias" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // AsOptionalAlias
         match = asOptionalAlias$Rule();
         if (match) {
            // "AsAlias"
            match = ignoreCaseStringMatcher("AsAlias", 7);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         match = true;
      }
      if (match) {
         modelColumn$RuleMemoStart = startIndex;
         modelColumn$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            modelColumn$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_COLUMN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            modelColumn$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         modelColumn$RuleMemoStart = startIndex;
         modelColumn$RuleMemoEnd = -1;
         modelColumn$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MainModel : (("main" TestNoAlpha OptionalSpacing SqlAnyIdentifier)? ModelColumnClause CellReferenceOptions ModelRulesClause)
   protected boolean mainModel$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("main" TestNoAlpha OptionalSpacing SqlAnyIdentifier)? ModelColumnClause CellReferenceOptions ModelRulesClause)
      // ("main" TestNoAlpha OptionalSpacing SqlAnyIdentifier)?
      // ("main" TestNoAlpha OptionalSpacing SqlAnyIdentifier)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "main"
      match = ignoreCaseStringMatcher("main", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlAnyIdentifier
               match = sqlAnyIdentifier$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // ModelColumnClause
      match = modelColumnClause$Rule();
      if (match) {
         // CellReferenceOptions
         match = cellReferenceOptions$Rule();
         if (match) {
            // ModelRulesClause
            match = modelRulesClause$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MAIN_MODEL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelRulesUpdate : ("rules" TestNoAlpha OptionalSpacing (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))? ((("automatic" | "sequential") TestNoAlpha OptionalSpacing) "order" TestNoAlpha OptionalSpacing)?)?
   protected boolean modelRulesUpdate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("rules" TestNoAlpha OptionalSpacing (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))? ((("automatic" | "sequential") TestNoAlpha OptionalSpacing) "order" TestNoAlpha OptionalSpacing)?)?
      // ("rules" TestNoAlpha OptionalSpacing (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))? ((("automatic" | "sequential") TestNoAlpha OptionalSpacing) "order" TestNoAlpha OptionalSpacing)?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "rules"
      match = ignoreCaseStringMatcher("rules", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))?
               // (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))
               // ("update" TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // "update"
               match = ignoreCaseStringMatcher("update", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               if (! match) {
                  // ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?)
                  Node lastNode_3 = currentNode;
                  int lastIndex_3 = index;
                  // "upsert"
                  match = ignoreCaseStringMatcher("upsert", 6);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // ("all" TestNoAlpha OptionalSpacing)?
                           // ("all" TestNoAlpha OptionalSpacing)
                           Node lastNode_4 = currentNode;
                           int lastIndex_4 = index;
                           // "all"
                           match = ignoreCaseStringMatcher("all", 3);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_4;
                                    lastNode_4.setSibling(null);
                                    currentNode = lastNode_4;
                                 }
                              } else {
                                 index = lastIndex_4;
                                 lastNode_4.setSibling(null);
                              }
                           }
                           match = true;
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  }
               }
               match = true;
               // ((("automatic" | "sequential") TestNoAlpha OptionalSpacing) "order" TestNoAlpha OptionalSpacing)?
               // ((("automatic" | "sequential") TestNoAlpha OptionalSpacing) "order" TestNoAlpha OptionalSpacing)
               Node lastNode_5 = currentNode;
               int lastIndex_5 = index;
               // (("automatic" | "sequential") TestNoAlpha OptionalSpacing)
               Node lastNode_6 = currentNode;
               int lastIndex_6 = index;
               // ("automatic" | "sequential")
               int startIndex_7 = index;
               switch(buffer.getChar(index)) {
                  case 'a':
                  case 'A': {
                     ++index;
                     // "utomatic"
                     if (match = ignoreCaseStringTest("utomatic", 8)) {
                        index += 8;
                     }
                     break;
                  }
                  case 's':
                  case 'S': {
                     ++index;
                     // "equential"
                     if (match = ignoreCaseStringTest("equential", 9)) {
                        index += 9;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_7, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_6;
                        lastNode_6.setSibling(null);
                        currentNode = lastNode_6;
                     }
                  } else {
                     index = lastIndex_6;
                     lastNode_6.setSibling(null);
                  }
               }
               if (match) {
                  // "order"
                  match = ignoreCaseStringMatcher("order", 5);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                           currentNode = lastNode_5;
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  } else {
                     index = lastIndex_5;
                     lastNode_5.setSibling(null);
                  }
               }
               match = true;
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_RULES_UPDATE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //UntilCondition : ("until" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlCondition ')' OptionalSpacing)
   protected boolean untilCondition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("until" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlCondition ')' OptionalSpacing)
      // "until"
      match = ignoreCaseStringMatcher("until", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlCondition
                     match = sqlCondition$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNTIL_CONDITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelRulesIterate : ("iterate" TestNoAlpha OptionalSpacing '(' OptionalSpacing NumberLiteral ')' OptionalSpacing UntilCondition?)
   protected boolean modelRulesIterate$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("iterate" TestNoAlpha OptionalSpacing '(' OptionalSpacing NumberLiteral ')' OptionalSpacing UntilCondition?)
      // "iterate"
      match = ignoreCaseStringMatcher("iterate", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // NumberLiteral
                     match = numberLiteral$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // UntilCondition?
                              // UntilCondition
                              untilCondition$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_RULES_ITERATE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelRulesClause : (ModelRulesUpdate ModelRulesIterate? '(' OptionalSpacing ModelRulesClauseCellAssignmentList ')' OptionalSpacing)
   protected boolean modelRulesClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ModelRulesUpdate ModelRulesIterate? '(' OptionalSpacing ModelRulesClauseCellAssignmentList ')' OptionalSpacing)
      // ModelRulesUpdate
      match = modelRulesUpdate$Rule();
      if (match) {
         // ModelRulesIterate?
         // ModelRulesIterate
         modelRulesIterate$Rule();
         // '('
         match = charMatcher('(');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ModelRulesClauseCellAssignmentList
               match = modelRulesClauseCellAssignmentList$Rule();
               if (match) {
                  // ')'
                  match = charMatcher(')');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_RULES_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelRulesClauseCellAssignmentList : (ModelRulesClauseCellAssignment (',' OptionalSpacing ModelRulesClauseCellAssignment)*)
   protected boolean modelRulesClauseCellAssignmentList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ModelRulesClauseCellAssignment (',' OptionalSpacing ModelRulesClauseCellAssignment)*)
      // ModelRulesClauseCellAssignment
      match = modelRulesClauseCellAssignment$Rule();
      if (match) {
         // (',' OptionalSpacing ModelRulesClauseCellAssignment)*
         do {
            // (',' OptionalSpacing ModelRulesClauseCellAssignment)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ModelRulesClauseCellAssignment
                  match = modelRulesClauseCellAssignment$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_RULES_CLAUSE_CELL_ASSIGNMENT_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ModelRulesClauseCellAssignment : ((("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))? CellAssignment OrderByClause? '=' OptionalSpacing SqlExpression)
   protected boolean modelRulesClauseCellAssignment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (modelRulesClauseCellAssignment$RuleMemoStart == index) {
         if (modelRulesClauseCellAssignment$RuleMemoStart <= modelRulesClauseCellAssignment$RuleMemoEnd) {
            index = modelRulesClauseCellAssignment$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_RULES_CLAUSE_CELL_ASSIGNMENT, modelRulesClauseCellAssignment$RuleMemoStart, modelRulesClauseCellAssignment$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (modelRulesClauseCellAssignment$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(modelRulesClauseCellAssignment$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))? CellAssignment OrderByClause? '=' OptionalSpacing SqlExpression)
      // (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))?
      // (("update" TestNoAlpha OptionalSpacing) | ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?))
      // ("update" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "update"
      match = ignoreCaseStringMatcher("update", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("upsert" TestNoAlpha OptionalSpacing ("all" TestNoAlpha OptionalSpacing)?)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "upsert"
         match = ignoreCaseStringMatcher("upsert", 6);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ("all" TestNoAlpha OptionalSpacing)?
                  // ("all" TestNoAlpha OptionalSpacing)
                  Node lastNode_3 = currentNode;
                  int lastIndex_3 = index;
                  // "all"
                  match = ignoreCaseStringMatcher("all", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  }
                  match = true;
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
      }
      // CellAssignment
      match = cellAssignment$Rule();
      if (match) {
         // OrderByClause?
         // OrderByClause
         orderByClause$Rule();
         // '='
         match = charMatcher('=');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
         }
      }
      if (match) {
         modelRulesClauseCellAssignment$RuleMemoStart = startIndex;
         modelRulesClauseCellAssignment$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            modelRulesClauseCellAssignment$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MODEL_RULES_CLAUSE_CELL_ASSIGNMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            modelRulesClauseCellAssignment$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         modelRulesClauseCellAssignment$RuleMemoStart = startIndex;
         modelRulesClauseCellAssignment$RuleMemoEnd = -1;
         modelRulesClauseCellAssignment$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CellAssignment : (SqlAnyIdentifier '[' OptionalSpacing (CellAssignmentArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)
   protected boolean cellAssignment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SqlAnyIdentifier '[' OptionalSpacing (CellAssignmentArgumentsList | MultiColumnForLoop) ']' OptionalSpacing)
      // SqlAnyIdentifier
      match = sqlAnyIdentifier$Rule();
      if (match) {
         // '['
         match = charMatcher('[');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (CellAssignmentArgumentsList | MultiColumnForLoop)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '\'':
                  case '(':
                  case '+':
                  case '-':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ':':
                  case '?':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // CellAssignmentArgumentsList
                     match = cellAssignmentArgumentsList$Rule();
                     break;
                  }
                  case 'F':
                  case 'f': {
                     // CellAssignmentArgumentsList
                     match = cellAssignmentArgumentsList$Rule();
                     if (! match) {
                        // MultiColumnForLoop
                        match = multiColumnForLoop$Rule();
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (match) {
                  // ']'
                  match = charMatcher(']');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_ASSIGNMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CellAssignmentArgumentsList : (CellAssignmentArgument (',' OptionalSpacing CellAssignmentArgument)*)
   protected boolean cellAssignmentArgumentsList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cellAssignmentArgumentsList$RuleMemoStart == index) {
         if (cellAssignmentArgumentsList$RuleMemoStart <= cellAssignmentArgumentsList$RuleMemoEnd) {
            index = cellAssignmentArgumentsList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_ASSIGNMENT_ARGUMENTS_LIST, cellAssignmentArgumentsList$RuleMemoStart, cellAssignmentArgumentsList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cellAssignmentArgumentsList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cellAssignmentArgumentsList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (CellAssignmentArgument (',' OptionalSpacing CellAssignmentArgument)*)
      // CellAssignmentArgument
      match = cellAssignmentArgument$Rule();
      if (match) {
         // (',' OptionalSpacing CellAssignmentArgument)*
         do {
            // (',' OptionalSpacing CellAssignmentArgument)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // CellAssignmentArgument
                  match = cellAssignmentArgument$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         cellAssignmentArgumentsList$RuleMemoStart = startIndex;
         cellAssignmentArgumentsList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cellAssignmentArgumentsList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_ASSIGNMENT_ARGUMENTS_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cellAssignmentArgumentsList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cellAssignmentArgumentsList$RuleMemoStart = startIndex;
         cellAssignmentArgumentsList$RuleMemoEnd = -1;
         cellAssignmentArgumentsList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CellAssignmentArgument : (SqlCondition | SqlExpression | SingleColumnForLoop)
   protected boolean cellAssignmentArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cellAssignmentArgument$RuleMemoStart == index) {
         if (cellAssignmentArgument$RuleMemoStart <= cellAssignmentArgument$RuleMemoEnd) {
            index = cellAssignmentArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_ASSIGNMENT_ARGUMENT, cellAssignmentArgument$RuleMemoStart, cellAssignmentArgument$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cellAssignmentArgument$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cellAssignmentArgument$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlCondition | SqlExpression | SingleColumnForLoop)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlCondition
            match = sqlCondition$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         case 'F':
         case 'f': {
            // SqlCondition
            match = sqlCondition$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
               if (! match) {
                  // SingleColumnForLoop
                  match = singleColumnForLoop$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         cellAssignmentArgument$RuleMemoStart = startIndex;
         cellAssignmentArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cellAssignmentArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CELL_ASSIGNMENT_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cellAssignmentArgument$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cellAssignmentArgument$RuleMemoStart = startIndex;
         cellAssignmentArgument$RuleMemoEnd = -1;
         cellAssignmentArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForIn : ("in" TestNoAlpha OptionalSpacing '(' OptionalSpacing (SqlLiteralList | Subquery) ')' OptionalSpacing)
   protected boolean forIn$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forIn$RuleMemoStart == index) {
         if (forIn$RuleMemoStart <= forIn$RuleMemoEnd) {
            index = forIn$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_IN, forIn$RuleMemoStart, forIn$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (forIn$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(forIn$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("in" TestNoAlpha OptionalSpacing '(' OptionalSpacing (SqlLiteralList | Subquery) ')' OptionalSpacing)
      // "in"
      match = ignoreCaseStringMatcher("in", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // (SqlLiteralList | Subquery)
                     switch(buffer.getChar(index)) {
                        case 'd':
                        case 'D':
                        case '\'':
                        case 'i':
                        case 'I':
                        case '+':
                        case '-':
                        case 'n':
                        case 'N':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case 't':
                        case 'T':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9': {
                           // SqlLiteralList
                           match = sqlLiteralList$Rule();
                           break;
                        }
                        case 's':
                        case 'S':
                        case '(': {
                           // Subquery
                           match = subquery$Rule();
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         forIn$RuleMemoStart = startIndex;
         forIn$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forIn$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_IN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forIn$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         forIn$RuleMemoStart = startIndex;
         forIn$RuleMemoEnd = -1;
         forIn$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LikeString : ("like" TestNoAlpha OptionalSpacing StringLiteral)
   protected boolean likeString$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("like" TestNoAlpha OptionalSpacing StringLiteral)
      // "like"
      match = ignoreCaseStringMatcher("like", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // StringLiteral
               match = stringLiteral$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIKE_STRING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForLike : (LikeString? "from" TestNoAlpha OptionalSpacing SqlLiteral "to" TestNoAlpha OptionalSpacing SqlLiteral (("increment" | "decrement") TestNoAlpha OptionalSpacing) SqlLiteral)
   protected boolean forLike$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (forLike$RuleMemoStart == index) {
         if (forLike$RuleMemoStart <= forLike$RuleMemoEnd) {
            index = forLike$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_LIKE, forLike$RuleMemoStart, forLike$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (forLike$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(forLike$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (LikeString? "from" TestNoAlpha OptionalSpacing SqlLiteral "to" TestNoAlpha OptionalSpacing SqlLiteral (("increment" | "decrement") TestNoAlpha OptionalSpacing) SqlLiteral)
      // LikeString?
      // LikeString
      likeString$Rule();
      // "from"
      match = ignoreCaseStringMatcher("from", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlLiteral
               match = sqlLiteral$Rule();
               if (match) {
                  // "to"
                  match = ignoreCaseStringMatcher("to", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // SqlLiteral
                           match = sqlLiteral$Rule();
                           if (match) {
                              // (("increment" | "decrement") TestNoAlpha OptionalSpacing)
                              // ("increment" | "decrement")
                              int startIndex_1 = index;
                              switch(buffer.getChar(index)) {
                                 case 'i':
                                 case 'I': {
                                    ++index;
                                    // "ncrement"
                                    if (match = ignoreCaseStringTest("ncrement", 8)) {
                                       index += 8;
                                    }
                                    break;
                                 }
                                 case 'd':
                                 case 'D': {
                                    ++index;
                                    // "ecrement"
                                    if (match = ignoreCaseStringTest("ecrement", 8)) {
                                       index += 8;
                                    }
                                    break;
                                 }
                                 default: {
                                    match = false;
                                 }
                              }
                              if (! match) {
                                 index = startIndex_1;
                              } else if(! currentRuleIsAtomic) {
                                 currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                                 currentNode = currentNode.getSibling();
                              }
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                              if (match) {
                                 // SqlLiteral
                                 match = sqlLiteral$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         forLike$RuleMemoStart = startIndex;
         forLike$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            forLike$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_LIKE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            forLike$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         forLike$RuleMemoStart = startIndex;
         forLike$RuleMemoEnd = -1;
         forLike$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SingleColumnForLoop : ("for" TestNoAlpha OptionalSpacing SqlIdentifier (ForIn | ForLike))
   protected boolean singleColumnForLoop$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (singleColumnForLoop$RuleMemoStart == index) {
         if (singleColumnForLoop$RuleMemoStart <= singleColumnForLoop$RuleMemoEnd) {
            index = singleColumnForLoop$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_COLUMN_FOR_LOOP, singleColumnForLoop$RuleMemoStart, singleColumnForLoop$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (singleColumnForLoop$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(singleColumnForLoop$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing SqlIdentifier (ForIn | ForLike))
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlIdentifier
               match = sqlIdentifier$Rule();
               if (match) {
                  // (ForIn | ForLike)
                  switch(buffer.getChar(index)) {
                     case 'f':
                     case 'F':
                     case 'l':
                     case 'L': {
                        // ForLike
                        match = forLike$Rule();
                        break;
                     }
                     case 'i':
                     case 'I': {
                        // ForIn
                        match = forIn$Rule();
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         singleColumnForLoop$RuleMemoStart = startIndex;
         singleColumnForLoop$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            singleColumnForLoop$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_COLUMN_FOR_LOOP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            singleColumnForLoop$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         singleColumnForLoop$RuleMemoStart = startIndex;
         singleColumnForLoop$RuleMemoEnd = -1;
         singleColumnForLoop$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MultiColumnForLoop : ("for" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing "in" TestNoAlpha OptionalSpacing '(' OptionalSpacing (ParenthesesLiteralListList | Subquery) ')' OptionalSpacing)
   protected boolean multiColumnForLoop$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (multiColumnForLoop$RuleMemoStart == index) {
         if (multiColumnForLoop$RuleMemoStart <= multiColumnForLoop$RuleMemoEnd) {
            index = multiColumnForLoop$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MULTI_COLUMN_FOR_LOOP, multiColumnForLoop$RuleMemoStart, multiColumnForLoop$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (multiColumnForLoop$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(multiColumnForLoop$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlIdentifierList ')' OptionalSpacing "in" TestNoAlpha OptionalSpacing '(' OptionalSpacing (ParenthesesLiteralListList | Subquery) ')' OptionalSpacing)
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlIdentifierList
                     match = sqlIdentifierList$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // "in"
                              match = ignoreCaseStringMatcher("in", 2);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // '('
                                       match = charMatcher('(');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // (ParenthesesLiteralListList | Subquery)
                                             switch(buffer.getChar(index)) {
                                                case 's':
                                                case 'S': {
                                                   // Subquery
                                                   match = subquery$Rule();
                                                   break;
                                                }
                                                case '(': {
                                                   // ParenthesesLiteralListList
                                                   match = parenthesesLiteralListList$Rule();
                                                   if (! match) {
                                                      // Subquery
                                                      match = subquery$Rule();
                                                   }
                                                   break;
                                                }
                                                default: {
                                                   match = false;
                                                }
                                             }
                                             if (match) {
                                                // ')'
                                                match = charMatcher(')');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         multiColumnForLoop$RuleMemoStart = startIndex;
         multiColumnForLoop$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            multiColumnForLoop$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MULTI_COLUMN_FOR_LOOP, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            multiColumnForLoop$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         multiColumnForLoop$RuleMemoStart = startIndex;
         multiColumnForLoop$RuleMemoEnd = -1;
         multiColumnForLoop$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlLiteral : (NumberLiteral | StringLiteral | DateLiteral | TimestampLiteral | IntervalDayToSecondLiteral | IntervalYearToMonthLiteral | NullLiteral)
   protected boolean sqlLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlLiteral$RuleMemoStart == index) {
         if (sqlLiteral$RuleMemoStart <= sqlLiteral$RuleMemoEnd) {
            index = sqlLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_LITERAL, sqlLiteral$RuleMemoStart, sqlLiteral$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (NumberLiteral | StringLiteral | DateLiteral | TimestampLiteral | IntervalDayToSecondLiteral | IntervalYearToMonthLiteral | NullLiteral)
      switch(buffer.getChar(index)) {
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case '+':
         case '-': {
            // NumberLiteral
            match = numberLiteral$Rule();
            break;
         }
         case 'n':
         case 'N': {
            // StringLiteral
            match = stringLiteral$Rule();
            if (! match) {
               // NullLiteral
               match = nullLiteral$Rule();
            }
            break;
         }
         case 't':
         case 'T': {
            // TimestampLiteral
            match = timestampLiteral$Rule();
            break;
         }
         case 'd':
         case 'D': {
            // DateLiteral
            match = dateLiteral$Rule();
            break;
         }
         case '\'': {
            // StringLiteral
            match = stringLiteral$Rule();
            break;
         }
         case 'i':
         case 'I': {
            // IntervalDayToSecondLiteral
            match = intervalDayToSecondLiteral$Rule();
            if (! match) {
               // IntervalYearToMonthLiteral
               match = intervalYearToMonthLiteral$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlLiteral$RuleMemoStart = startIndex;
         sqlLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlLiteral$RuleMemoStart = startIndex;
         sqlLiteral$RuleMemoEnd = -1;
         sqlLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NullLiteral : (NullPattern TestNoAlpha OptionalSpacing)
   protected boolean nullLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (nullLiteral$RuleMemoStart == index) {
         if (nullLiteral$RuleMemoStart <= nullLiteral$RuleMemoEnd) {
            index = nullLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NULL_LITERAL, nullLiteral$RuleMemoStart, nullLiteral$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (nullLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(nullLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (NullPattern TestNoAlpha OptionalSpacing)
      // NullPattern
      match = nullPattern$Rule();
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         nullLiteral$RuleMemoStart = startIndex;
         nullLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            nullLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NULL_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            nullLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         nullLiteral$RuleMemoStart = startIndex;
         nullLiteral$RuleMemoEnd = -1;
         nullLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NullPattern : "null"
   protected boolean nullPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // "null"
      match = ignoreCaseStringMatcher("null", 4);
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NULL_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DateLiteral : (DatePattern "DateLiteral" TestNoAlpha OptionalSpacing OptionalSpacing)
   protected boolean dateLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dateLiteral$RuleMemoStart == index) {
         if (dateLiteral$RuleMemoStart <= dateLiteral$RuleMemoEnd) {
            index = dateLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DATE_LITERAL, dateLiteral$RuleMemoStart, dateLiteral$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (dateLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(dateLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (DatePattern "DateLiteral" TestNoAlpha OptionalSpacing OptionalSpacing)
      // DatePattern
      match = datePattern$Rule();
      if (match) {
         // "DateLiteral"
         match = ignoreCaseStringMatcher("DateLiteral", 11);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         dateLiteral$RuleMemoStart = startIndex;
         dateLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            dateLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DATE_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            dateLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         dateLiteral$RuleMemoStart = startIndex;
         dateLiteral$RuleMemoEnd = -1;
         dateLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Year : ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing '0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
   protected boolean year$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (year$RuleMemoStart == index) {
         if (year$RuleMemoStart <= year$RuleMemoEnd) {
            index = year$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.YEAR, year$RuleMemoStart, year$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (year$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(year$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing '0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '0'-'9'
                        match = charRangeMatcher('0', '9');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         year$RuleMemoStart = startIndex;
         year$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            year$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.YEAR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            year$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         year$RuleMemoStart = startIndex;
         year$RuleMemoEnd = -1;
         year$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Month : ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
   protected boolean month$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (month$RuleMemoStart == index) {
         if (month$RuleMemoStart <= month$RuleMemoEnd) {
            index = month$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MONTH, month$RuleMemoStart, month$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (month$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(month$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         month$RuleMemoStart = startIndex;
         month$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            month$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MONTH, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            month$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         month$RuleMemoStart = startIndex;
         month$RuleMemoEnd = -1;
         month$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Day : ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
   protected boolean day$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (day$RuleMemoStart == index) {
         if (day$RuleMemoStart <= day$RuleMemoEnd) {
            index = day$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DAY, day$RuleMemoStart, day$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (day$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(day$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         day$RuleMemoStart = startIndex;
         day$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            day$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DAY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            day$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         day$RuleMemoStart = startIndex;
         day$RuleMemoEnd = -1;
         day$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Hour : ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
   protected boolean hour$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HOUR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Minute : ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
   protected boolean minute$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MINUTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Second : ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
   protected boolean second$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('0'-'9' OptionalSpacing '0'-'9' OptionalSpacing)
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SECOND, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DatePattern : ("date" '\'' Spaces? Year Spaces? '-' Spaces? Month Spaces? '-' Spaces? Day Spaces? '\'')
   protected boolean datePattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // ("date" '\'' Spaces? Year Spaces? '-' Spaces? Month Spaces? '-' Spaces? Day Spaces? '\'')
      // "date"
      match = ignoreCaseStringMatcher("date", 4);
      if (match) {
         // '\''
         match = charMatcher('\'');
         if (match) {
            // Spaces?
            // Spaces
            spaces$Rule();
            // Year
            match = year$Rule();
            if (match) {
               // Spaces?
               // Spaces
               spaces$Rule();
               // '-'
               match = charMatcher('-');
               if (match) {
                  // Spaces?
                  // Spaces
                  spaces$Rule();
                  // Month
                  match = month$Rule();
                  if (match) {
                     // Spaces?
                     // Spaces
                     spaces$Rule();
                     // '-'
                     match = charMatcher('-');
                     if (match) {
                        // Spaces?
                        // Spaces
                        spaces$Rule();
                        // Day
                        match = day$Rule();
                        if (match) {
                           // Spaces?
                           // Spaces
                           spaces$Rule();
                           // '\''
                           match = charMatcher('\'');
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DATE_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TimestampLiteral : (TimestampPattern OptionalSpacing)
   protected boolean timestampLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (timestampLiteral$RuleMemoStart == index) {
         if (timestampLiteral$RuleMemoStart <= timestampLiteral$RuleMemoEnd) {
            index = timestampLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TIMESTAMP_LITERAL, timestampLiteral$RuleMemoStart, timestampLiteral$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (timestampLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(timestampLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TimestampPattern OptionalSpacing)
      // TimestampPattern
      match = timestampPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         timestampLiteral$RuleMemoStart = startIndex;
         timestampLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            timestampLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TIMESTAMP_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            timestampLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         timestampLiteral$RuleMemoStart = startIndex;
         timestampLiteral$RuleMemoEnd = -1;
         timestampLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TimestampPattern : ("timestamp" '\'' Spaces? Year Spaces? '-' Spaces? Month Spaces? '-' Spaces? Day Spaces? Hour Spaces? ':' Spaces? Minute Spaces? ':' Spaces? Second Spaces? '\'')
   protected boolean timestampPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // ("timestamp" '\'' Spaces? Year Spaces? '-' Spaces? Month Spaces? '-' Spaces? Day Spaces? Hour Spaces? ':' Spaces? Minute Spaces? ':' Spaces? Second Spaces? '\'')
      // "timestamp"
      match = ignoreCaseStringMatcher("timestamp", 9);
      if (match) {
         // '\''
         match = charMatcher('\'');
         if (match) {
            // Spaces?
            // Spaces
            spaces$Rule();
            // Year
            match = year$Rule();
            if (match) {
               // Spaces?
               // Spaces
               spaces$Rule();
               // '-'
               match = charMatcher('-');
               if (match) {
                  // Spaces?
                  // Spaces
                  spaces$Rule();
                  // Month
                  match = month$Rule();
                  if (match) {
                     // Spaces?
                     // Spaces
                     spaces$Rule();
                     // '-'
                     match = charMatcher('-');
                     if (match) {
                        // Spaces?
                        // Spaces
                        spaces$Rule();
                        // Day
                        match = day$Rule();
                        if (match) {
                           // Spaces?
                           // Spaces
                           spaces$Rule();
                           // Hour
                           match = hour$Rule();
                           if (match) {
                              // Spaces?
                              // Spaces
                              spaces$Rule();
                              // ':'
                              match = charMatcher(':');
                              if (match) {
                                 // Spaces?
                                 // Spaces
                                 spaces$Rule();
                                 // Minute
                                 match = minute$Rule();
                                 if (match) {
                                    // Spaces?
                                    // Spaces
                                    spaces$Rule();
                                    // ':'
                                    match = charMatcher(':');
                                    if (match) {
                                       // Spaces?
                                       // Spaces
                                       spaces$Rule();
                                       // Second
                                       match = second$Rule();
                                       if (match) {
                                          // Spaces?
                                          // Spaces
                                          spaces$Rule();
                                          // '\''
                                          match = charMatcher('\'');
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TIMESTAMP_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StringLiteral : (StringPattern OptionalSpacing)
   protected boolean stringLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (stringLiteral$RuleMemoStart == index) {
         if (stringLiteral$RuleMemoStart <= stringLiteral$RuleMemoEnd) {
            index = stringLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.STRING_LITERAL, stringLiteral$RuleMemoStart, stringLiteral$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (stringLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(stringLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (StringPattern OptionalSpacing)
      // StringPattern
      match = stringPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         stringLiteral$RuleMemoStart = startIndex;
         stringLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            stringLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.STRING_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            stringLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         stringLiteral$RuleMemoStart = startIndex;
         stringLiteral$RuleMemoEnd = -1;
         stringLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //StringPattern : (('n' | 'N')? ('\'' ("''" | '\''!)* '\''))
   protected boolean stringPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (('n' | 'N')? ('\'' ("''" | '\''!)* '\''))
      // ('n' | 'N')?
      // ('n' | 'N')
      switch(buffer.getChar(index)) {
         case 'n': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case 'N': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      // ('\'' ("''" | '\''!)* '\'')
      // '\''
      match = charMatcher('\'');
      if (match) {
         // ("''" | '\''!)*
         do {
            // ("''" | '\''!)
            // "''"
            match = ignoreCaseStringMatcher("\'\'", 4);
            if (! match) {
               // '\''!
               // '\''
               match = buffer.matchChar(index, '\'');
               match = ! match;
            }
         } while(match);
         // '\''
         match = charMatcher('\'');
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.STRING, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Order : (("asc" | "desc") TestNoAlpha OptionalSpacing)
   protected boolean order$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("asc" | "desc") TestNoAlpha OptionalSpacing)
      // ("asc" | "desc")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'a':
         case 'A': {
            ++index;
            // "sc"
            if (match = ignoreCaseStringTest("sc", 2)) {
               index += 2;
            }
            break;
         }
         case 'd':
         case 'D': {
            ++index;
            // "esc"
            if (match = ignoreCaseStringTest("esc", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NullsOrder : ("nulls" TestNoAlpha OptionalSpacing (("first" | "last") TestNoAlpha OptionalSpacing))
   protected boolean nullsOrder$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("nulls" TestNoAlpha OptionalSpacing (("first" | "last") TestNoAlpha OptionalSpacing))
      // "nulls"
      match = ignoreCaseStringMatcher("nulls", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("first" | "last") TestNoAlpha OptionalSpacing)
               // ("first" | "last")
               int startIndex_1 = index;
               switch(buffer.getChar(index)) {
                  case 'f':
                  case 'F': {
                     ++index;
                     // "irst"
                     if (match = ignoreCaseStringTest("irst", 4)) {
                        index += 4;
                     }
                     break;
                  }
                  case 'l':
                  case 'L': {
                     ++index;
                     // "ast"
                     if (match = ignoreCaseStringTest("ast", 3)) {
                        index += 3;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! match) {
                  index = startIndex_1;
               } else if(! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NULLS_ORDER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrderByArg : (IntegerLiteral | SqlExpression)
   protected boolean orderByArg$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (IntegerLiteral | SqlExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case ':':
         case '?':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlExpression
            match = sqlExpression$Rule();
            break;
         }
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // IntegerLiteral
            match = integerLiteral$Rule();
            if (! match) {
               // SqlExpression
               match = sqlExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_ARG, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrderByArgument : (OrderByArg Order? NullsOrder?)
   protected boolean orderByArgument$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (orderByArgument$RuleMemoStart == index) {
         if (orderByArgument$RuleMemoStart <= orderByArgument$RuleMemoEnd) {
            index = orderByArgument$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_ARGUMENT, orderByArgument$RuleMemoStart, orderByArgument$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (orderByArgument$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(orderByArgument$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OrderByArg Order? NullsOrder?)
      // OrderByArg
      match = orderByArg$Rule();
      if (match) {
         // Order?
         // Order
         order$Rule();
         // NullsOrder?
         // NullsOrder
         nullsOrder$Rule();
         match = true;
      }
      if (match) {
         orderByArgument$RuleMemoStart = startIndex;
         orderByArgument$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            orderByArgument$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_ARGUMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            orderByArgument$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         orderByArgument$RuleMemoStart = startIndex;
         orderByArgument$RuleMemoEnd = -1;
         orderByArgument$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrderByArguments : (OrderByArgument (',' OptionalSpacing OrderByArgument)*)
   protected boolean orderByArguments$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (orderByArguments$RuleMemoStart == index) {
         if (orderByArguments$RuleMemoStart <= orderByArguments$RuleMemoEnd) {
            index = orderByArguments$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_ARGUMENTS, orderByArguments$RuleMemoStart, orderByArguments$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (orderByArguments$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(orderByArguments$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (OrderByArgument (',' OptionalSpacing OrderByArgument)*)
      // OrderByArgument
      match = orderByArgument$Rule();
      if (match) {
         // (',' OptionalSpacing OrderByArgument)*
         do {
            // (',' OptionalSpacing OrderByArgument)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // OrderByArgument
                  match = orderByArgument$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         orderByArguments$RuleMemoStart = startIndex;
         orderByArguments$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            orderByArguments$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_ARGUMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            orderByArguments$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         orderByArguments$RuleMemoStart = startIndex;
         orderByArguments$RuleMemoEnd = -1;
         orderByArguments$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrderByClause : ("order" TestNoAlpha OptionalSpacing ("siblings" TestNoAlpha OptionalSpacing)? "by" TestNoAlpha OptionalSpacing OrderByArguments)
   protected boolean orderByClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (orderByClause$RuleMemoStart == index) {
         if (orderByClause$RuleMemoStart <= orderByClause$RuleMemoEnd) {
            index = orderByClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_CLAUSE, orderByClause$RuleMemoStart, orderByClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (orderByClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(orderByClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("order" TestNoAlpha OptionalSpacing ("siblings" TestNoAlpha OptionalSpacing)? "by" TestNoAlpha OptionalSpacing OrderByArguments)
      // "order"
      match = ignoreCaseStringMatcher("order", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("siblings" TestNoAlpha OptionalSpacing)?
               // ("siblings" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "siblings"
               match = ignoreCaseStringMatcher("siblings", 8);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // OrderByArguments
                        match = orderByArguments$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         orderByClause$RuleMemoStart = startIndex;
         orderByClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            orderByClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ORDER_BY_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            orderByClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         orderByClause$RuleMemoStart = startIndex;
         orderByClause$RuleMemoEnd = -1;
         orderByClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryFactoringSource : (SqlIdentifier "as" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
   protected boolean subqueryFactoringSource$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (subqueryFactoringSource$RuleMemoStart == index) {
         if (subqueryFactoringSource$RuleMemoStart <= subqueryFactoringSource$RuleMemoEnd) {
            index = subqueryFactoringSource$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_FACTORING_SOURCE, subqueryFactoringSource$RuleMemoStart, subqueryFactoringSource$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (subqueryFactoringSource$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(subqueryFactoringSource$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlIdentifier "as" TestNoAlpha OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         // "as"
         match = ignoreCaseStringMatcher("as", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // '('
                  match = charMatcher('(');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Subquery
                        match = subquery$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         subqueryFactoringSource$RuleMemoStart = startIndex;
         subqueryFactoringSource$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            subqueryFactoringSource$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_FACTORING_SOURCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            subqueryFactoringSource$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         subqueryFactoringSource$RuleMemoStart = startIndex;
         subqueryFactoringSource$RuleMemoEnd = -1;
         subqueryFactoringSource$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryFactoringClause : ("with" TestNoAlpha OptionalSpacing SubqueryFactoringSource (',' OptionalSpacing SubqueryFactoringSource)*)
   protected boolean subqueryFactoringClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("with" TestNoAlpha OptionalSpacing SubqueryFactoringSource (',' OptionalSpacing SubqueryFactoringSource)*)
      // "with"
      match = ignoreCaseStringMatcher("with", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SubqueryFactoringSource
               match = subqueryFactoringSource$Rule();
               if (match) {
                  // (',' OptionalSpacing SubqueryFactoringSource)*
                  do {
                     // (',' OptionalSpacing SubqueryFactoringSource)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // SubqueryFactoringSource
                           match = subqueryFactoringSource$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_FACTORING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WaitClause : (("nowait" TestNoAlpha OptionalSpacing) | ("wait" TestNoAlpha OptionalSpacing IntegerLiteral) | ("skip" TestNoAlpha OptionalSpacing "locked" TestNoAlpha OptionalSpacing))
   protected boolean waitClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("nowait" TestNoAlpha OptionalSpacing) | ("wait" TestNoAlpha OptionalSpacing IntegerLiteral) | ("skip" TestNoAlpha OptionalSpacing "locked" TestNoAlpha OptionalSpacing))
      // ("nowait" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "nowait"
      match = ignoreCaseStringMatcher("nowait", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("wait" TestNoAlpha OptionalSpacing IntegerLiteral)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "wait"
         match = ignoreCaseStringMatcher("wait", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // IntegerLiteral
                  match = integerLiteral$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("skip" TestNoAlpha OptionalSpacing "locked" TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "skip"
            match = ignoreCaseStringMatcher("skip", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // "locked"
                     match = ignoreCaseStringMatcher("locked", 6);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                              currentNode = lastNode_3;
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.WAIT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForUpdateClause : ("for" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing (("of" TestNoAlpha OptionalSpacing TableName) "OfTable" TestNoAlpha OptionalSpacing)? WaitClause?)
   protected boolean forUpdateClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing "update" TestNoAlpha OptionalSpacing (("of" TestNoAlpha OptionalSpacing TableName) "OfTable" TestNoAlpha OptionalSpacing)? WaitClause?)
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "update"
               match = ignoreCaseStringMatcher("update", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (("of" TestNoAlpha OptionalSpacing TableName) "OfTable" TestNoAlpha OptionalSpacing)?
                        // (("of" TestNoAlpha OptionalSpacing TableName) "OfTable" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // ("of" TestNoAlpha OptionalSpacing TableName)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "of"
                        match = ignoreCaseStringMatcher("of", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // TableName
                                 match = tableName$Rule();
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        if (match) {
                           // "OfTable"
                           match = ignoreCaseStringMatcher("OfTable", 7);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // WaitClause?
                        // WaitClause
                        waitClause$Rule();
                        match = true;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_UPDATE_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OnlyDmlTableExpresionClause : ("only" TestNoAlpha OptionalSpacing '(' OptionalSpacing DmlTableExpressionClause ')' OptionalSpacing)
   protected boolean onlyDmlTableExpresionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (onlyDmlTableExpresionClause$RuleMemoStart == index) {
         if (onlyDmlTableExpresionClause$RuleMemoStart <= onlyDmlTableExpresionClause$RuleMemoEnd) {
            index = onlyDmlTableExpresionClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ONLY_DML_TABLE_EXPRESION_CLAUSE, onlyDmlTableExpresionClause$RuleMemoStart, onlyDmlTableExpresionClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (onlyDmlTableExpresionClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(onlyDmlTableExpresionClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("only" TestNoAlpha OptionalSpacing '(' OptionalSpacing DmlTableExpressionClause ')' OptionalSpacing)
      // "only"
      match = ignoreCaseStringMatcher("only", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // DmlTableExpressionClause
                     match = dmlTableExpressionClause$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         onlyDmlTableExpresionClause$RuleMemoStart = startIndex;
         onlyDmlTableExpresionClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            onlyDmlTableExpresionClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ONLY_DML_TABLE_EXPRESION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            onlyDmlTableExpresionClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         onlyDmlTableExpresionClause$RuleMemoStart = startIndex;
         onlyDmlTableExpresionClause$RuleMemoEnd = -1;
         onlyDmlTableExpresionClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UpdateStatement : ("update" TestNoAlpha OptionalSpacing Hint? (OnlyDmlTableExpresionClause | DmlTableExpressionClause) SqlIdentifier? UpdateSetClause WhereClause? ReturningClause?)
   protected boolean updateStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (updateStatement$RuleMemoStart == index) {
         if (updateStatement$RuleMemoStart <= updateStatement$RuleMemoEnd) {
            index = updateStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UPDATE_STATEMENT, updateStatement$RuleMemoStart, updateStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (updateStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(updateStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("update" TestNoAlpha OptionalSpacing Hint? (OnlyDmlTableExpresionClause | DmlTableExpressionClause) SqlIdentifier? UpdateSetClause WhereClause? ReturningClause?)
      // "update"
      match = ignoreCaseStringMatcher("update", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Hint?
               // Hint
               hint$Rule();
               match = true;
               // (OnlyDmlTableExpresionClause | DmlTableExpressionClause)
               switch(buffer.getChar(index)) {
                  case 'O':
                  case 'o': {
                     // OnlyDmlTableExpresionClause
                     match = onlyDmlTableExpresionClause$Rule();
                     if (! match) {
                        // DmlTableExpressionClause
                        match = dmlTableExpressionClause$Rule();
                     }
                     break;
                  }
                  case '\"':
                  case '#':
                  case '$':
                  case '(':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // DmlTableExpressionClause
                     match = dmlTableExpressionClause$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               // SqlIdentifier?
               // SqlIdentifier
               sqlIdentifier$Rule();
               // UpdateSetClause
               match = updateSetClause$Rule();
               if (match) {
                  // WhereClause?
                  // WhereClause
                  whereClause$Rule();
                  // ReturningClause?
                  // ReturningClause
                  returningClause$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         updateStatement$RuleMemoStart = startIndex;
         updateStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            updateStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UPDATE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            updateStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         updateStatement$RuleMemoStart = startIndex;
         updateStatement$RuleMemoEnd = -1;
         updateStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PartitionName : ('(' OptionalSpacing SqlAnyIdentifier ')' OptionalSpacing)
   protected boolean partitionName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (partitionName$RuleMemoStart == index) {
         if (partitionName$RuleMemoStart <= partitionName$RuleMemoEnd) {
            index = partitionName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARTITION_NAME, partitionName$RuleMemoStart, partitionName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (partitionName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(partitionName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing SqlAnyIdentifier ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlAnyIdentifier
            match = sqlAnyIdentifier$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         partitionName$RuleMemoStart = startIndex;
         partitionName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            partitionName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARTITION_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            partitionName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         partitionName$RuleMemoStart = startIndex;
         partitionName$RuleMemoEnd = -1;
         partitionName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PartitionKey : ("for" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing)
   protected boolean partitionKey$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (partitionKey$RuleMemoStart == index) {
         if (partitionKey$RuleMemoStart <= partitionKey$RuleMemoEnd) {
            index = partitionKey$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.PARTITION_KEY, partitionKey$RuleMemoStart, partitionKey$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (partitionKey$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(partitionKey$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlExpression ')' OptionalSpacing)
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         partitionKey$RuleMemoStart = startIndex;
         partitionKey$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            partitionKey$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARTITION_KEY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            partitionKey$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         partitionKey$RuleMemoStart = startIndex;
         partitionKey$RuleMemoEnd = -1;
         partitionKey$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TablePartitionName : (TableName "partition" TestNoAlpha OptionalSpacing (PartitionName | PartitionKey))
   protected boolean tablePartitionName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tablePartitionName$RuleMemoStart == index) {
         if (tablePartitionName$RuleMemoStart <= tablePartitionName$RuleMemoEnd) {
            index = tablePartitionName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_PARTITION_NAME, tablePartitionName$RuleMemoStart, tablePartitionName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (tablePartitionName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(tablePartitionName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TableName "partition" TestNoAlpha OptionalSpacing (PartitionName | PartitionKey))
      // TableName
      match = tableName$Rule();
      if (match) {
         // "partition"
         match = ignoreCaseStringMatcher("partition", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // (PartitionName | PartitionKey)
                  switch(buffer.getChar(index)) {
                     case 'f':
                     case 'F': {
                        // PartitionKey
                        match = partitionKey$Rule();
                        break;
                     }
                     case '(': {
                        // PartitionName
                        match = partitionName$Rule();
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         tablePartitionName$RuleMemoStart = startIndex;
         tablePartitionName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tablePartitionName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_PARTITION_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tablePartitionName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         tablePartitionName$RuleMemoStart = startIndex;
         tablePartitionName$RuleMemoEnd = -1;
         tablePartitionName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TableSubPartitionName : (TableName "subpartition" TestNoAlpha OptionalSpacing (PartitionName | PartitionKey))
   protected boolean tableSubPartitionName$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (tableSubPartitionName$RuleMemoStart == index) {
         if (tableSubPartitionName$RuleMemoStart <= tableSubPartitionName$RuleMemoEnd) {
            index = tableSubPartitionName$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_SUB_PARTITION_NAME, tableSubPartitionName$RuleMemoStart, tableSubPartitionName$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (tableSubPartitionName$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(tableSubPartitionName$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TableName "subpartition" TestNoAlpha OptionalSpacing (PartitionName | PartitionKey))
      // TableName
      match = tableName$Rule();
      if (match) {
         // "subpartition"
         match = ignoreCaseStringMatcher("subpartition", 12);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // (PartitionName | PartitionKey)
                  switch(buffer.getChar(index)) {
                     case 'f':
                     case 'F': {
                        // PartitionKey
                        match = partitionKey$Rule();
                        break;
                     }
                     case '(': {
                        // PartitionName
                        match = partitionName$Rule();
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         tableSubPartitionName$RuleMemoStart = startIndex;
         tableSubPartitionName$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            tableSubPartitionName$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TABLE_SUB_PARTITION_NAME, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            tableSubPartitionName$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         tableSubPartitionName$RuleMemoStart = startIndex;
         tableSubPartitionName$RuleMemoEnd = -1;
         tableSubPartitionName$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubqueryDmlExpression : ('(' OptionalSpacing Subquery SubqueryRestriction ')' OptionalSpacing)
   protected boolean subqueryDmlExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (subqueryDmlExpression$RuleMemoStart == index) {
         if (subqueryDmlExpression$RuleMemoStart <= subqueryDmlExpression$RuleMemoEnd) {
            index = subqueryDmlExpression$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_DML_EXPRESSION, subqueryDmlExpression$RuleMemoStart, subqueryDmlExpression$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (subqueryDmlExpression$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(subqueryDmlExpression$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing Subquery SubqueryRestriction ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Subquery
            match = subquery$Rule();
            if (match) {
               // SubqueryRestriction
               match = subqueryRestriction$Rule();
               if (match) {
                  // ')'
                  match = charMatcher(')');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         subqueryDmlExpression$RuleMemoStart = startIndex;
         subqueryDmlExpression$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            subqueryDmlExpression$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBQUERY_DML_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            subqueryDmlExpression$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         subqueryDmlExpression$RuleMemoStart = startIndex;
         subqueryDmlExpression$RuleMemoEnd = -1;
         subqueryDmlExpression$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DmlTableExpressionClause : (TablePartitionName | TableSubPartitionName | TableName | SubqueryDmlExpression | TableCollectionExpression)
   protected boolean dmlTableExpressionClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (dmlTableExpressionClause$RuleMemoStart == index) {
         if (dmlTableExpressionClause$RuleMemoStart <= dmlTableExpressionClause$RuleMemoEnd) {
            index = dmlTableExpressionClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DML_TABLE_EXPRESSION_CLAUSE, dmlTableExpressionClause$RuleMemoStart, dmlTableExpressionClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (dmlTableExpressionClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(dmlTableExpressionClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (TablePartitionName | TableSubPartitionName | TableName | SubqueryDmlExpression | TableCollectionExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // TablePartitionName
            match = tablePartitionName$Rule();
            if (! match) {
               // TableSubPartitionName
               match = tableSubPartitionName$Rule();
               if (! match) {
                  // TableName
                  match = tableName$Rule();
               }
            }
            break;
         }
         case 'T':
         case 't': {
            // TablePartitionName
            match = tablePartitionName$Rule();
            if (! match) {
               // TableSubPartitionName
               match = tableSubPartitionName$Rule();
               if (! match) {
                  // TableName
                  match = tableName$Rule();
                  if (! match) {
                     // TableCollectionExpression
                     match = tableCollectionExpression$Rule();
                  }
               }
            }
            break;
         }
         case '(': {
            // SubqueryDmlExpression
            match = subqueryDmlExpression$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         dmlTableExpressionClause$RuleMemoStart = startIndex;
         dmlTableExpressionClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            dmlTableExpressionClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DML_TABLE_EXPRESSION_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            dmlTableExpressionClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         dmlTableExpressionClause$RuleMemoStart = startIndex;
         dmlTableExpressionClause$RuleMemoEnd = -1;
         dmlTableExpressionClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UpdateSetClause : ("set" TestNoAlpha OptionalSpacing (ObjectSetValue | ColumnSetValueList))
   protected boolean updateSetClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (updateSetClause$RuleMemoStart == index) {
         if (updateSetClause$RuleMemoStart <= updateSetClause$RuleMemoEnd) {
            index = updateSetClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UPDATE_SET_CLAUSE, updateSetClause$RuleMemoStart, updateSetClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (updateSetClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(updateSetClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("set" TestNoAlpha OptionalSpacing (ObjectSetValue | ColumnSetValueList))
      // "set"
      match = ignoreCaseStringMatcher("set", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (ObjectSetValue | ColumnSetValueList)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '(':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // ColumnSetValueList
                     match = columnSetValueList$Rule();
                     break;
                  }
                  case 'V':
                  case 'v': {
                     // ObjectSetValue
                     match = objectSetValue$Rule();
                     if (! match) {
                        // ColumnSetValueList
                        match = columnSetValueList$Rule();
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            }
         }
      }
      if (match) {
         updateSetClause$RuleMemoStart = startIndex;
         updateSetClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            updateSetClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UPDATE_SET_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            updateSetClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         updateSetClause$RuleMemoStart = startIndex;
         updateSetClause$RuleMemoEnd = -1;
         updateSetClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Alias : SqlIdentifier
   protected boolean alias$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (alias$RuleMemoStart == index) {
         if (alias$RuleMemoStart <= alias$RuleMemoEnd) {
            index = alias$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ALIAS, alias$RuleMemoStart, alias$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (alias$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(alias$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         alias$RuleMemoStart = startIndex;
         alias$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            alias$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ALIAS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            alias$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         alias$RuleMemoStart = startIndex;
         alias$RuleMemoEnd = -1;
         alias$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ObjectSetValue : ("value" TestNoAlpha OptionalSpacing '(' OptionalSpacing Alias ')' OptionalSpacing '=' OptionalSpacing (('(' OptionalSpacing Subquery ')' OptionalSpacing) | SqlExpression))
   protected boolean objectSetValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (objectSetValue$RuleMemoStart == index) {
         if (objectSetValue$RuleMemoStart <= objectSetValue$RuleMemoEnd) {
            index = objectSetValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OBJECT_SET_VALUE, objectSetValue$RuleMemoStart, objectSetValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (objectSetValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(objectSetValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("value" TestNoAlpha OptionalSpacing '(' OptionalSpacing Alias ')' OptionalSpacing '=' OptionalSpacing (('(' OptionalSpacing Subquery ')' OptionalSpacing) | SqlExpression))
      // "value"
      match = ignoreCaseStringMatcher("value", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // Alias
                     match = alias$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // '='
                              match = charMatcher('=');
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // (('(' OptionalSpacing Subquery ')' OptionalSpacing) | SqlExpression)
                                    // ('(' OptionalSpacing Subquery ')' OptionalSpacing)
                                    Node lastNode_1 = currentNode;
                                    int lastIndex_1 = index;
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // Subquery
                                          match = subquery$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (! match) {
                                                   index = lastIndex_1;
                                                   lastNode_1.setSibling(null);
                                                   currentNode = lastNode_1;
                                                }
                                             } else {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // SqlExpression
                                       match = sqlExpression$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         objectSetValue$RuleMemoStart = startIndex;
         objectSetValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            objectSetValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OBJECT_SET_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            objectSetValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         objectSetValue$RuleMemoStart = startIndex;
         objectSetValue$RuleMemoEnd = -1;
         objectSetValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ColumnsGroupSetValue : (ColumnsList '=' OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
   protected boolean columnsGroupSetValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (columnsGroupSetValue$RuleMemoStart == index) {
         if (columnsGroupSetValue$RuleMemoStart <= columnsGroupSetValue$RuleMemoEnd) {
            index = columnsGroupSetValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMNS_GROUP_SET_VALUE, columnsGroupSetValue$RuleMemoStart, columnsGroupSetValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (columnsGroupSetValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(columnsGroupSetValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ColumnsList '=' OptionalSpacing '(' OptionalSpacing Subquery ')' OptionalSpacing)
      // ColumnsList
      match = columnsList$Rule();
      if (match) {
         // '='
         match = charMatcher('=');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // '('
               match = charMatcher('(');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // Subquery
                     match = subquery$Rule();
                     if (match) {
                        // ')'
                        match = charMatcher(')');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         columnsGroupSetValue$RuleMemoStart = startIndex;
         columnsGroupSetValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            columnsGroupSetValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMNS_GROUP_SET_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            columnsGroupSetValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         columnsGroupSetValue$RuleMemoStart = startIndex;
         columnsGroupSetValue$RuleMemoEnd = -1;
         columnsGroupSetValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SingleColumnSetValue : (ColumnName '=' OptionalSpacing (("default" TestNoAlpha OptionalSpacing) | ('(' OptionalSpacing Subquery ')' OptionalSpacing) | SqlExpression))
   protected boolean singleColumnSetValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (singleColumnSetValue$RuleMemoStart == index) {
         if (singleColumnSetValue$RuleMemoStart <= singleColumnSetValue$RuleMemoEnd) {
            index = singleColumnSetValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_COLUMN_SET_VALUE, singleColumnSetValue$RuleMemoStart, singleColumnSetValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (singleColumnSetValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(singleColumnSetValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ColumnName '=' OptionalSpacing (("default" TestNoAlpha OptionalSpacing) | ('(' OptionalSpacing Subquery ')' OptionalSpacing) | SqlExpression))
      // ColumnName
      match = columnName$Rule();
      if (match) {
         // '='
         match = charMatcher('=');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("default" TestNoAlpha OptionalSpacing) | ('(' OptionalSpacing Subquery ')' OptionalSpacing) | SqlExpression)
               // ("default" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "default"
               match = ignoreCaseStringMatcher("default", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               if (! match) {
                  // ('(' OptionalSpacing Subquery ')' OptionalSpacing)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // '('
                  match = charMatcher('(');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Subquery
                        match = subquery$Rule();
                        if (match) {
                           // ')'
                           match = charMatcher(')');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        } else {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
                  if (! match) {
                     // SqlExpression
                     match = sqlExpression$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         singleColumnSetValue$RuleMemoStart = startIndex;
         singleColumnSetValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            singleColumnSetValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_COLUMN_SET_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            singleColumnSetValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         singleColumnSetValue$RuleMemoStart = startIndex;
         singleColumnSetValue$RuleMemoEnd = -1;
         singleColumnSetValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ColumnSetValue : (ColumnsGroupSetValue | SingleColumnSetValue)
   protected boolean columnSetValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (columnSetValue$RuleMemoStart == index) {
         if (columnSetValue$RuleMemoStart <= columnSetValue$RuleMemoEnd) {
            index = columnSetValue$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_SET_VALUE, columnSetValue$RuleMemoStart, columnSetValue$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (columnSetValue$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(columnSetValue$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ColumnsGroupSetValue | SingleColumnSetValue)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SingleColumnSetValue
            match = singleColumnSetValue$Rule();
            break;
         }
         case '(': {
            // ColumnsGroupSetValue
            match = columnsGroupSetValue$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         columnSetValue$RuleMemoStart = startIndex;
         columnSetValue$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            columnSetValue$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_SET_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            columnSetValue$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         columnSetValue$RuleMemoStart = startIndex;
         columnSetValue$RuleMemoEnd = -1;
         columnSetValue$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ColumnSetValueList : (ColumnSetValue (',' OptionalSpacing ColumnSetValue)*)
   protected boolean columnSetValueList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (columnSetValueList$RuleMemoStart == index) {
         if (columnSetValueList$RuleMemoStart <= columnSetValueList$RuleMemoEnd) {
            index = columnSetValueList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_SET_VALUE_LIST, columnSetValueList$RuleMemoStart, columnSetValueList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (columnSetValueList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(columnSetValueList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ColumnSetValue (',' OptionalSpacing ColumnSetValue)*)
      // ColumnSetValue
      match = columnSetValue$Rule();
      if (match) {
         // (',' OptionalSpacing ColumnSetValue)*
         do {
            // (',' OptionalSpacing ColumnSetValue)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ColumnSetValue
                  match = columnSetValue$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         columnSetValueList$RuleMemoStart = startIndex;
         columnSetValueList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            columnSetValueList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLUMN_SET_VALUE_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            columnSetValueList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         columnSetValueList$RuleMemoStart = startIndex;
         columnSetValueList$RuleMemoEnd = -1;
         columnSetValueList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReturningClause : ((("returning" | "return") TestNoAlpha OptionalSpacing) SqlExpressionList BulkCollect? "into" TestNoAlpha OptionalSpacing ReturnIntoVariablesList)
   protected boolean returningClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (returningClause$RuleMemoStart == index) {
         if (returningClause$RuleMemoStart <= returningClause$RuleMemoEnd) {
            index = returningClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RETURNING_CLAUSE, returningClause$RuleMemoStart, returningClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (returningClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(returningClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("returning" | "return") TestNoAlpha OptionalSpacing) SqlExpressionList BulkCollect? "into" TestNoAlpha OptionalSpacing ReturnIntoVariablesList)
      // (("returning" | "return") TestNoAlpha OptionalSpacing)
      // ("returning" | "return")
      int startIndex_1 = index;
      if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
         ++index;
         // ("eturning" | "eturn")
         if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
            ++index;
            // ("turning" | "turn")
            if (buffer.matchChar(index, 't') || buffer.matchChar(index, 'T')) {
               ++index;
               // ("urning" | "urn")
               if (buffer.matchChar(index, 'u') || buffer.matchChar(index, 'U')) {
                  ++index;
                  // ("rning" | "rn")
                  if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                     ++index;
                     // ("ning" | "n")
                     if (buffer.matchChar(index, 'n') || buffer.matchChar(index, 'N')) {
                        ++index;
                        // ("ing" | <EMPTY>)
                        if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
                           ++index;
                           // "ng"
                           if (match = ignoreCaseStringTest("ng", 2)) {
                              index += 2;
                           }
                        } else {
                           match = true;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
               } else {
                  match = false;
               }
            } else {
               match = false;
            }
         } else {
            match = false;
         }
      } else {
         match = false;
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // SqlExpressionList
         match = sqlExpressionList$Rule();
         if (match) {
            // BulkCollect?
            // BulkCollect
            bulkCollect$Rule();
            // "into"
            match = ignoreCaseStringMatcher("into", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // ReturnIntoVariablesList
                     match = returnIntoVariablesList$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         returningClause$RuleMemoStart = startIndex;
         returningClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            returningClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RETURNING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            returningClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         returningClause$RuleMemoStart = startIndex;
         returningClause$RuleMemoEnd = -1;
         returningClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BindVariable : (('?' OptionalSpacing) | (':' OptionalSpacing (SqlAnyIdentifier | IntegerLiteral)))
   protected boolean bindVariable$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (bindVariable$RuleMemoStart == index) {
         if (bindVariable$RuleMemoStart <= bindVariable$RuleMemoEnd) {
            index = bindVariable$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BIND_VARIABLE, bindVariable$RuleMemoStart, bindVariable$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (bindVariable$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(bindVariable$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (('?' OptionalSpacing) | (':' OptionalSpacing (SqlAnyIdentifier | IntegerLiteral)))
      // ('?' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '?'
      match = charMatcher('?');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (! match) {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
            currentNode = lastNode_1;
         }
      }
      if (! match) {
         // (':' OptionalSpacing (SqlAnyIdentifier | IntegerLiteral))
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // ':'
         match = charMatcher(':');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (SqlAnyIdentifier | IntegerLiteral)
               switch(buffer.getChar(index)) {
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9': {
                     // SqlAnyIdentifier
                     match = sqlAnyIdentifier$Rule();
                     if (! match) {
                        // IntegerLiteral
                        match = integerLiteral$Rule();
                     }
                     break;
                  }
                  case '\"':
                  case '#':
                  case '$':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // SqlAnyIdentifier
                     match = sqlAnyIdentifier$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
      }
      if (match) {
         bindVariable$RuleMemoStart = startIndex;
         bindVariable$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            bindVariable$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BIND_VARIABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            bindVariable$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         bindVariable$RuleMemoStart = startIndex;
         bindVariable$RuleMemoEnd = -1;
         bindVariable$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReturnIntoVariable : (BindVariable | SqlObjectIdentifier)
   protected boolean returnIntoVariable$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (returnIntoVariable$RuleMemoStart == index) {
         if (returnIntoVariable$RuleMemoStart <= returnIntoVariable$RuleMemoEnd) {
            index = returnIntoVariable$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RETURN_INTO_VARIABLE, returnIntoVariable$RuleMemoStart, returnIntoVariable$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (returnIntoVariable$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(returnIntoVariable$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BindVariable | SqlObjectIdentifier)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // SqlObjectIdentifier
            match = sqlObjectIdentifier$Rule();
            break;
         }
         case ':':
         case '?': {
            // BindVariable
            match = bindVariable$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         returnIntoVariable$RuleMemoStart = startIndex;
         returnIntoVariable$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            returnIntoVariable$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RETURN_INTO_VARIABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            returnIntoVariable$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         returnIntoVariable$RuleMemoStart = startIndex;
         returnIntoVariable$RuleMemoEnd = -1;
         returnIntoVariable$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReturnIntoVariablesList : (ReturnIntoVariable (',' OptionalSpacing ReturnIntoVariable)*)
   protected boolean returnIntoVariablesList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ReturnIntoVariable (',' OptionalSpacing ReturnIntoVariable)*)
      // ReturnIntoVariable
      match = returnIntoVariable$Rule();
      if (match) {
         // (',' OptionalSpacing ReturnIntoVariable)*
         do {
            // (',' OptionalSpacing ReturnIntoVariable)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // ReturnIntoVariable
                  match = returnIntoVariable$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RETURN_INTO_VARIABLES_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InsertStatement : (SingleTableInsert | MultiTableInsert)
   protected boolean insertStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (insertStatement$RuleMemoStart == index) {
         if (insertStatement$RuleMemoStart <= insertStatement$RuleMemoEnd) {
            index = insertStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_STATEMENT, insertStatement$RuleMemoStart, insertStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (insertStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(insertStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SingleTableInsert | MultiTableInsert)
      switch(buffer.getChar(index)) {
         case 'i':
         case 'I': {
            // SingleTableInsert
            match = singleTableInsert$Rule();
            if (! match) {
               // MultiTableInsert
               match = multiTableInsert$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         insertStatement$RuleMemoStart = startIndex;
         insertStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            insertStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            insertStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         insertStatement$RuleMemoStart = startIndex;
         insertStatement$RuleMemoEnd = -1;
         insertStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Values : (ValuesClause ReturningClause?)
   protected boolean values$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (values$RuleMemoStart == index) {
         if (values$RuleMemoStart <= values$RuleMemoEnd) {
            index = values$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES, values$RuleMemoStart, values$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (values$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(values$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (ValuesClause ReturningClause?)
      // ValuesClause
      match = valuesClause$Rule();
      if (match) {
         // ReturningClause?
         // ReturningClause
         returningClause$Rule();
         match = true;
      }
      if (match) {
         values$RuleMemoStart = startIndex;
         values$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            values$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            values$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         values$RuleMemoStart = startIndex;
         values$RuleMemoEnd = -1;
         values$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SingleInsertSource : (Values | Subquery)
   protected boolean singleInsertSource$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Values | Subquery)
      switch(buffer.getChar(index)) {
         case 's':
         case 'S':
         case '(': {
            // Subquery
            match = subquery$Rule();
            break;
         }
         case 'v':
         case 'V': {
            // Values
            match = values$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_INSERT_SOURCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SingleTableInsert : ("insert" TestNoAlpha OptionalSpacing Hint? InsertIntoClause SingleInsertSource ErrorLogingClause?)
   protected boolean singleTableInsert$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (singleTableInsert$RuleMemoStart == index) {
         if (singleTableInsert$RuleMemoStart <= singleTableInsert$RuleMemoEnd) {
            index = singleTableInsert$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_TABLE_INSERT, singleTableInsert$RuleMemoStart, singleTableInsert$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (singleTableInsert$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(singleTableInsert$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("insert" TestNoAlpha OptionalSpacing Hint? InsertIntoClause SingleInsertSource ErrorLogingClause?)
      // "insert"
      match = ignoreCaseStringMatcher("insert", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Hint?
               // Hint
               hint$Rule();
               // InsertIntoClause
               match = insertIntoClause$Rule();
               if (match) {
                  // SingleInsertSource
                  match = singleInsertSource$Rule();
                  if (match) {
                     // ErrorLogingClause?
                     // ErrorLogingClause
                     errorLogingClause$Rule();
                     match = true;
                  }
               }
            }
         }
      }
      if (match) {
         singleTableInsert$RuleMemoStart = startIndex;
         singleTableInsert$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            singleTableInsert$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SINGLE_TABLE_INSERT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            singleTableInsert$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         singleTableInsert$RuleMemoStart = startIndex;
         singleTableInsert$RuleMemoEnd = -1;
         singleTableInsert$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InsertInto : (InsertIntoClause ValuesClause? ErrorLogingClause?)
   protected boolean insertInto$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (InsertIntoClause ValuesClause? ErrorLogingClause?)
      // InsertIntoClause
      match = insertIntoClause$Rule();
      if (match) {
         // ValuesClause?
         // ValuesClause
         valuesClause$Rule();
         // ErrorLogingClause?
         // ErrorLogingClause
         errorLogingClause$Rule();
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_INTO, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MultiIntoClause : ("all" TestNoAlpha OptionalSpacing InsertInto+)
   protected boolean multiIntoClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (multiIntoClause$RuleMemoStart == index) {
         if (multiIntoClause$RuleMemoStart <= multiIntoClause$RuleMemoEnd) {
            index = multiIntoClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MULTI_INTO_CLAUSE, multiIntoClause$RuleMemoStart, multiIntoClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (multiIntoClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(multiIntoClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("all" TestNoAlpha OptionalSpacing InsertInto+)
      // "all"
      match = ignoreCaseStringMatcher("all", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // InsertInto+
               // InsertInto
               match = insertInto$Rule();
               if (match) {
                  do {
                     // InsertInto
                     match = insertInto$Rule();
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         multiIntoClause$RuleMemoStart = startIndex;
         multiIntoClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            multiIntoClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MULTI_INTO_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            multiIntoClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         multiIntoClause$RuleMemoStart = startIndex;
         multiIntoClause$RuleMemoEnd = -1;
         multiIntoClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MultiTableInsert : ("insert" TestNoAlpha OptionalSpacing Hint? (MultiIntoClause | ConditionalInsertClause) Subquery)
   protected boolean multiTableInsert$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (multiTableInsert$RuleMemoStart == index) {
         if (multiTableInsert$RuleMemoStart <= multiTableInsert$RuleMemoEnd) {
            index = multiTableInsert$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.MULTI_TABLE_INSERT, multiTableInsert$RuleMemoStart, multiTableInsert$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (multiTableInsert$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(multiTableInsert$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("insert" TestNoAlpha OptionalSpacing Hint? (MultiIntoClause | ConditionalInsertClause) Subquery)
      // "insert"
      match = ignoreCaseStringMatcher("insert", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Hint?
               // Hint
               hint$Rule();
               match = true;
               // (MultiIntoClause | ConditionalInsertClause)
               switch(buffer.getChar(index)) {
                  case 'a':
                  case 'A': {
                     // MultiIntoClause
                     match = multiIntoClause$Rule();
                     if (! match) {
                        // ConditionalInsertClause
                        match = conditionalInsertClause$Rule();
                     }
                     break;
                  }
                  case 'f':
                  case 'F':
                  case 'w':
                  case 'W': {
                     // ConditionalInsertClause
                     match = conditionalInsertClause$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               // Subquery
               match = subquery$Rule();
            }
         }
      }
      if (match) {
         multiTableInsert$RuleMemoStart = startIndex;
         multiTableInsert$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            multiTableInsert$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MULTI_TABLE_INSERT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            multiTableInsert$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         multiTableInsert$RuleMemoStart = startIndex;
         multiTableInsert$RuleMemoEnd = -1;
         multiTableInsert$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InsertIntoValuesClause : (InsertIntoClause ValuesClause?)
   protected boolean insertIntoValuesClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (InsertIntoClause ValuesClause?)
      // InsertIntoClause
      match = insertIntoClause$Rule();
      if (match) {
         // ValuesClause?
         // ValuesClause
         valuesClause$Rule();
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_INTO_VALUES_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InsertIntoValuesClauseList : InsertIntoValuesClause+
   protected boolean insertIntoValuesClauseList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (insertIntoValuesClauseList$RuleMemoStart == index) {
         if (insertIntoValuesClauseList$RuleMemoStart <= insertIntoValuesClauseList$RuleMemoEnd) {
            index = insertIntoValuesClauseList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_INTO_VALUES_CLAUSE_LIST, insertIntoValuesClauseList$RuleMemoStart, insertIntoValuesClauseList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (insertIntoValuesClauseList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(insertIntoValuesClauseList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // InsertIntoValuesClause+
      // InsertIntoValuesClause
      match = insertIntoValuesClause$Rule();
      if (match) {
         do {
            // InsertIntoValuesClause
            match = insertIntoValuesClause$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         insertIntoValuesClauseList$RuleMemoStart = startIndex;
         insertIntoValuesClauseList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            insertIntoValuesClauseList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_INTO_VALUES_CLAUSE_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            insertIntoValuesClauseList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         insertIntoValuesClauseList$RuleMemoStart = startIndex;
         insertIntoValuesClauseList$RuleMemoEnd = -1;
         insertIntoValuesClauseList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalInsertWhen : ("when" TestNoAlpha OptionalSpacing SqlCondition "then" TestNoAlpha OptionalSpacing InsertIntoValuesClauseList)
   protected boolean conditionalInsertWhen$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing SqlCondition "then" TestNoAlpha OptionalSpacing InsertIntoValuesClauseList)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlCondition
               match = sqlCondition$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // InsertIntoValuesClauseList
                           match = insertIntoValuesClauseList$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITIONAL_INSERT_WHEN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalInsertElse : ("else" TestNoAlpha OptionalSpacing InsertIntoValuesClauseList)
   protected boolean conditionalInsertElse$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("else" TestNoAlpha OptionalSpacing InsertIntoValuesClauseList)
      // "else"
      match = ignoreCaseStringMatcher("else", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // InsertIntoValuesClauseList
               match = insertIntoValuesClauseList$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITIONAL_INSERT_ELSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalInsertWhenList : ConditionalInsertWhen+
   protected boolean conditionalInsertWhenList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ConditionalInsertWhen+
      // ConditionalInsertWhen
      match = conditionalInsertWhen$Rule();
      if (match) {
         do {
            // ConditionalInsertWhen
            match = conditionalInsertWhen$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITIONAL_INSERT_WHEN_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConditionalInsertClause : ((("all" | "first") TestNoAlpha OptionalSpacing)? ConditionalInsertWhenList ConditionalInsertElse?)
   protected boolean conditionalInsertClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (conditionalInsertClause$RuleMemoStart == index) {
         if (conditionalInsertClause$RuleMemoStart <= conditionalInsertClause$RuleMemoEnd) {
            index = conditionalInsertClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITIONAL_INSERT_CLAUSE, conditionalInsertClause$RuleMemoStart, conditionalInsertClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (conditionalInsertClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(conditionalInsertClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((("all" | "first") TestNoAlpha OptionalSpacing)? ConditionalInsertWhenList ConditionalInsertElse?)
      // (("all" | "first") TestNoAlpha OptionalSpacing)?
      // (("all" | "first") TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // ("all" | "first")
      int startIndex_2 = index;
      switch(buffer.getChar(index)) {
         case 'f':
         case 'F': {
            ++index;
            // "irst"
            if (match = ignoreCaseStringTest("irst", 4)) {
               index += 4;
            }
            break;
         }
         case 'a':
         case 'A': {
            ++index;
            // "ll"
            if (match = ignoreCaseStringTest("ll", 2)) {
               index += 2;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_2;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_2, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // ConditionalInsertWhenList
      match = conditionalInsertWhenList$Rule();
      if (match) {
         // ConditionalInsertElse?
         // ConditionalInsertElse
         conditionalInsertElse$Rule();
         match = true;
      }
      if (match) {
         conditionalInsertClause$RuleMemoStart = startIndex;
         conditionalInsertClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            conditionalInsertClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONDITIONAL_INSERT_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            conditionalInsertClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         conditionalInsertClause$RuleMemoStart = startIndex;
         conditionalInsertClause$RuleMemoEnd = -1;
         conditionalInsertClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InsertIntoClause : ("into" TestNoAlpha OptionalSpacing DmlTableExpressionClause (SqlIdentifier "Alias" TestNoAlpha OptionalSpacing)? ColumnsList?)
   protected boolean insertIntoClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (insertIntoClause$RuleMemoStart == index) {
         if (insertIntoClause$RuleMemoStart <= insertIntoClause$RuleMemoEnd) {
            index = insertIntoClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_INTO_CLAUSE, insertIntoClause$RuleMemoStart, insertIntoClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (insertIntoClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(insertIntoClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("into" TestNoAlpha OptionalSpacing DmlTableExpressionClause (SqlIdentifier "Alias" TestNoAlpha OptionalSpacing)? ColumnsList?)
      // "into"
      match = ignoreCaseStringMatcher("into", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // DmlTableExpressionClause
               match = dmlTableExpressionClause$Rule();
               if (match) {
                  // (SqlIdentifier "Alias" TestNoAlpha OptionalSpacing)?
                  // (SqlIdentifier "Alias" TestNoAlpha OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // SqlIdentifier
                  match = sqlIdentifier$Rule();
                  if (match) {
                     // "Alias"
                     match = ignoreCaseStringMatcher("Alias", 5);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
                  // ColumnsList?
                  // ColumnsList
                  columnsList$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         insertIntoClause$RuleMemoStart = startIndex;
         insertIntoClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            insertIntoClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INSERT_INTO_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            insertIntoClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         insertIntoClause$RuleMemoStart = startIndex;
         insertIntoClause$RuleMemoEnd = -1;
         insertIntoClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ValueClauseData : (("default" TestNoAlpha OptionalSpacing) | SqlExpression)
   protected boolean valueClauseData$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (valueClauseData$RuleMemoStart == index) {
         if (valueClauseData$RuleMemoStart <= valueClauseData$RuleMemoEnd) {
            index = valueClauseData$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VALUE_CLAUSE_DATA, valueClauseData$RuleMemoStart, valueClauseData$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (valueClauseData$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(valueClauseData$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("default" TestNoAlpha OptionalSpacing) | SqlExpression)
      // ("default" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "default"
      match = ignoreCaseStringMatcher("default", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // SqlExpression
         match = sqlExpression$Rule();
      }
      if (match) {
         valueClauseData$RuleMemoStart = startIndex;
         valueClauseData$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            valueClauseData$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VALUE_CLAUSE_DATA, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            valueClauseData$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         valueClauseData$RuleMemoStart = startIndex;
         valueClauseData$RuleMemoEnd = -1;
         valueClauseData$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ValuesClauseList : ('(' OptionalSpacing ValueClauseData (',' OptionalSpacing ValueClauseData)* ')' OptionalSpacing)
   protected boolean valuesClauseList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (valuesClauseList$RuleMemoStart == index) {
         if (valuesClauseList$RuleMemoStart <= valuesClauseList$RuleMemoEnd) {
            index = valuesClauseList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES_CLAUSE_LIST, valuesClauseList$RuleMemoStart, valuesClauseList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (valuesClauseList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(valuesClauseList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing ValueClauseData (',' OptionalSpacing ValueClauseData)* ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ValueClauseData
            match = valueClauseData$Rule();
            if (match) {
               // (',' OptionalSpacing ValueClauseData)*
               do {
                  // (',' OptionalSpacing ValueClauseData)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ValueClauseData
                        match = valueClauseData$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         valuesClauseList$RuleMemoStart = startIndex;
         valuesClauseList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            valuesClauseList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES_CLAUSE_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            valuesClauseList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         valuesClauseList$RuleMemoStart = startIndex;
         valuesClauseList$RuleMemoEnd = -1;
         valuesClauseList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ValuesClause : ("values" TestNoAlpha OptionalSpacing (ValuesClauseList | SqlObjectIdentifier))
   protected boolean valuesClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (valuesClause$RuleMemoStart == index) {
         if (valuesClause$RuleMemoStart <= valuesClause$RuleMemoEnd) {
            index = valuesClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES_CLAUSE, valuesClause$RuleMemoStart, valuesClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (valuesClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(valuesClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("values" TestNoAlpha OptionalSpacing (ValuesClauseList | SqlObjectIdentifier))
      // "values"
      match = ignoreCaseStringMatcher("values", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (ValuesClauseList | SqlObjectIdentifier)
               switch(buffer.getChar(index)) {
                  case '\"':
                  case '#':
                  case '$':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'O':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // SqlObjectIdentifier
                     match = sqlObjectIdentifier$Rule();
                     break;
                  }
                  case '(': {
                     // ValuesClauseList
                     match = valuesClauseList$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            }
         }
      }
      if (match) {
         valuesClause$RuleMemoStart = startIndex;
         valuesClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            valuesClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            valuesClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         valuesClause$RuleMemoStart = startIndex;
         valuesClause$RuleMemoEnd = -1;
         valuesClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntoTable : ("into" TestNoAlpha OptionalSpacing TableName)
   protected boolean intoTable$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("into" TestNoAlpha OptionalSpacing TableName)
      // "into"
      match = ignoreCaseStringMatcher("into", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // TableName
               match = tableName$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTO_TABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RejectLimit : ("reject" TestNoAlpha OptionalSpacing "limit" TestNoAlpha OptionalSpacing (("unlimited" TestNoAlpha OptionalSpacing) | IntegerLiteral))
   protected boolean rejectLimit$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("reject" TestNoAlpha OptionalSpacing "limit" TestNoAlpha OptionalSpacing (("unlimited" TestNoAlpha OptionalSpacing) | IntegerLiteral))
      // "reject"
      match = ignoreCaseStringMatcher("reject", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "limit"
               match = ignoreCaseStringMatcher("limit", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (("unlimited" TestNoAlpha OptionalSpacing) | IntegerLiteral)
                        // ("unlimited" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // "unlimited"
                        match = ignoreCaseStringMatcher("unlimited", 9);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        if (! match) {
                           // IntegerLiteral
                           match = integerLiteral$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.REJECT_LIMIT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ErrorLogingClause : ("log" TestNoAlpha OptionalSpacing "errors" TestNoAlpha OptionalSpacing IntoTable? ('(' OptionalSpacing SqlSimpleExpression ')' OptionalSpacing)? RejectLimit?)
   protected boolean errorLogingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (errorLogingClause$RuleMemoStart == index) {
         if (errorLogingClause$RuleMemoStart <= errorLogingClause$RuleMemoEnd) {
            index = errorLogingClause$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.ERROR_LOGING_CLAUSE, errorLogingClause$RuleMemoStart, errorLogingClause$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (errorLogingClause$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(errorLogingClause$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("log" TestNoAlpha OptionalSpacing "errors" TestNoAlpha OptionalSpacing IntoTable? ('(' OptionalSpacing SqlSimpleExpression ')' OptionalSpacing)? RejectLimit?)
      // "log"
      match = ignoreCaseStringMatcher("log", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "errors"
               match = ignoreCaseStringMatcher("errors", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // IntoTable?
                        // IntoTable
                        intoTable$Rule();
                        match = true;
                        // ('(' OptionalSpacing SqlSimpleExpression ')' OptionalSpacing)?
                        // ('(' OptionalSpacing SqlSimpleExpression ')' OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlSimpleExpression
                              match = sqlSimpleExpression$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                       currentNode = lastNode_1;
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // RejectLimit?
                        // RejectLimit
                        rejectLimit$Rule();
                        match = true;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         errorLogingClause$RuleMemoStart = startIndex;
         errorLogingClause$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            errorLogingClause$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ERROR_LOGING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            errorLogingClause$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         errorLogingClause$RuleMemoStart = startIndex;
         errorLogingClause$RuleMemoEnd = -1;
         errorLogingClause$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DeleteStatement : ("delete" TestNoAlpha OptionalSpacing Hint? ("from" TestNoAlpha OptionalSpacing)? (OnlyDmlTableExpresionClause | DmlTableExpressionClause) SqlIdentifier? WhereClause? ReturningClause? ErrorLogingClause?)
   protected boolean deleteStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (deleteStatement$RuleMemoStart == index) {
         if (deleteStatement$RuleMemoStart <= deleteStatement$RuleMemoEnd) {
            index = deleteStatement$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.DELETE_STATEMENT, deleteStatement$RuleMemoStart, deleteStatement$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (deleteStatement$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(deleteStatement$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("delete" TestNoAlpha OptionalSpacing Hint? ("from" TestNoAlpha OptionalSpacing)? (OnlyDmlTableExpresionClause | DmlTableExpressionClause) SqlIdentifier? WhereClause? ReturningClause? ErrorLogingClause?)
      // "delete"
      match = ignoreCaseStringMatcher("delete", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Hint?
               // Hint
               hint$Rule();
               match = true;
               // ("from" TestNoAlpha OptionalSpacing)?
               // ("from" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "from"
               match = ignoreCaseStringMatcher("from", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
               // (OnlyDmlTableExpresionClause | DmlTableExpressionClause)
               switch(buffer.getChar(index)) {
                  case 'O':
                  case 'o': {
                     // OnlyDmlTableExpresionClause
                     match = onlyDmlTableExpresionClause$Rule();
                     if (! match) {
                        // DmlTableExpressionClause
                        match = dmlTableExpressionClause$Rule();
                     }
                     break;
                  }
                  case '\"':
                  case '#':
                  case '$':
                  case '(':
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'I':
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'M':
                  case 'N':
                  case 'P':
                  case 'Q':
                  case 'R':
                  case 'S':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'g':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'l':
                  case 'm':
                  case 'n':
                  case 'p':
                  case 'q':
                  case 'r':
                  case 's':
                  case 't':
                  case 'u':
                  case 'v':
                  case 'w':
                  case 'x':
                  case 'y':
                  case 'z': {
                     // DmlTableExpressionClause
                     match = dmlTableExpressionClause$Rule();
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               // SqlIdentifier?
               // SqlIdentifier
               sqlIdentifier$Rule();
               // WhereClause?
               // WhereClause
               whereClause$Rule();
               // ReturningClause?
               // ReturningClause
               returningClause$Rule();
               // ErrorLogingClause?
               // ErrorLogingClause
               errorLogingClause$Rule();
               match = true;
            }
         }
      }
      if (match) {
         deleteStatement$RuleMemoStart = startIndex;
         deleteStatement$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            deleteStatement$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DELETE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            deleteStatement$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         deleteStatement$RuleMemoStart = startIndex;
         deleteStatement$RuleMemoEnd = -1;
         deleteStatement$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UnsignedNumber : (IntegerPattern ('.' OptionalSpacing IntegerPattern)?)
   protected boolean unsignedNumber$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (unsignedNumber$RuleMemoStart == index) {
         if (unsignedNumber$RuleMemoStart <= unsignedNumber$RuleMemoEnd) {
            index = unsignedNumber$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UNSIGNED_NUMBER, unsignedNumber$RuleMemoStart, unsignedNumber$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (unsignedNumber$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(unsignedNumber$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (IntegerPattern ('.' OptionalSpacing IntegerPattern)?)
      // IntegerPattern
      match = integerPattern$Rule();
      if (match) {
         // ('.' OptionalSpacing IntegerPattern)?
         // ('.' OptionalSpacing IntegerPattern)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '.'
         match = charMatcher('.');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // IntegerPattern
               match = integerPattern$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         match = true;
      }
      if (match) {
         unsignedNumber$RuleMemoStart = startIndex;
         unsignedNumber$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            unsignedNumber$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UNSIGNED_NUMBER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            unsignedNumber$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         unsignedNumber$RuleMemoStart = startIndex;
         unsignedNumber$RuleMemoEnd = -1;
         unsignedNumber$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Sign : (('+' | '-') OptionalSpacing)
   protected boolean sign$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sign$RuleMemoStart == index) {
         if (sign$RuleMemoStart <= sign$RuleMemoEnd) {
            index = sign$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SIGN, sign$RuleMemoStart, sign$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sign$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sign$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (('+' | '-') OptionalSpacing)
      // ('+' | '-')
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case '+': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '-': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         sign$RuleMemoStart = startIndex;
         sign$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sign$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SIGN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sign$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sign$RuleMemoStart = startIndex;
         sign$RuleMemoEnd = -1;
         sign$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NumberLiteral : (NumberPattern OptionalSpacing)
   protected boolean numberLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (numberLiteral$RuleMemoStart == index) {
         if (numberLiteral$RuleMemoStart <= numberLiteral$RuleMemoEnd) {
            index = numberLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NUMBER_LITERAL, numberLiteral$RuleMemoStart, numberLiteral$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (numberLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(numberLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (NumberPattern OptionalSpacing)
      // NumberPattern
      match = numberPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         numberLiteral$RuleMemoStart = startIndex;
         numberLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            numberLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NUMBER_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            numberLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         numberLiteral$RuleMemoStart = startIndex;
         numberLiteral$RuleMemoEnd = -1;
         numberLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Exponent : ((("E" | "e") TestNoAlpha OptionalSpacing) Sign? IntegerPattern (("D" | "d") TestNoAlpha OptionalSpacing)?)
   protected boolean exponent$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((("E" | "e") TestNoAlpha OptionalSpacing) Sign? IntegerPattern (("D" | "d") TestNoAlpha OptionalSpacing)?)
      // (("E" | "e") TestNoAlpha OptionalSpacing)
      // ("E" | "e")
      int startIndex_1 = index;
      if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
         ++index;
         // <EMPTY>
         match = true;
      } else {
         match = false;
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // Sign?
         // Sign
         sign$Rule();
         // IntegerPattern
         match = integerPattern$Rule();
         if (match) {
            // (("D" | "d") TestNoAlpha OptionalSpacing)?
            // (("D" | "d") TestNoAlpha OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ("D" | "d")
            int startIndex_3 = index;
            if (buffer.matchChar(index, 'd') || buffer.matchChar(index, 'D')) {
               ++index;
               // <EMPTY>
               match = true;
            } else {
               match = false;
            }
            if (! match) {
               index = startIndex_3;
            } else if(! currentRuleIsAtomic) {
               currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
               currentNode = currentNode.getSibling();
            }
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
            match = true;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXPONENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NumberPattern : (Sign? UnsignedNumber Exponent?)
   protected boolean numberPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (Sign? UnsignedNumber Exponent?)
      // Sign?
      // Sign
      sign$Rule();
      // UnsignedNumber
      match = unsignedNumber$Rule();
      if (match) {
         // Exponent?
         // Exponent
         exponent$Rule();
         match = true;
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NUMBER_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntegerLiteral : (IntegerPattern OptionalSpacing)
   protected boolean integerLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (integerLiteral$RuleMemoStart == index) {
         if (integerLiteral$RuleMemoStart <= integerLiteral$RuleMemoEnd) {
            index = integerLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTEGER_LITERAL, integerLiteral$RuleMemoStart, integerLiteral$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (integerLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(integerLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (IntegerPattern OptionalSpacing)
      // IntegerPattern
      match = integerPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         integerLiteral$RuleMemoStart = startIndex;
         integerLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            integerLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTEGER_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            integerLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         integerLiteral$RuleMemoStart = startIndex;
         integerLiteral$RuleMemoEnd = -1;
         integerLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntegerPattern : '0'-'9'+
   protected boolean integerPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (integerPattern$RuleMemoStart == index) {
         if (integerPattern$RuleMemoStart <= integerPattern$RuleMemoEnd) {
            index = integerPattern$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTEGER_LITERAL, integerPattern$RuleMemoStart, integerPattern$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (integerPattern$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(integerPattern$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // '0'-'9'+
      // '0'-'9'
      match = charRangeMatcher('0', '9');
      if (match) {
         do {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
         } while(match);
         match = true;
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         integerPattern$RuleMemoStart = startIndex;
         integerPattern$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            integerPattern$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTEGER_LITERAL, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            integerPattern$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         integerPattern$RuleMemoStart = startIndex;
         integerPattern$RuleMemoEnd = -1;
         integerPattern$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Size : ('(' OptionalSpacing NumberLiteral ')' OptionalSpacing)
   protected boolean size$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (size$RuleMemoStart == index) {
         if (size$RuleMemoStart <= size$RuleMemoEnd) {
            index = size$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SIZE, size$RuleMemoStart, size$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (size$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(size$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing NumberLiteral ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // NumberLiteral
            match = numberLiteral$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         size$RuleMemoStart = startIndex;
         size$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            size$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SIZE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            size$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         size$RuleMemoStart = startIndex;
         size$RuleMemoEnd = -1;
         size$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CharSetDefinition : ("character" TestNoAlpha OptionalSpacing "set" TestNoAlpha OptionalSpacing SqlObjectIdentifier CharSetAttr)?
   protected boolean charSetDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (charSetDefinition$RuleMemoStart == index) {
         if (charSetDefinition$RuleMemoStart <= charSetDefinition$RuleMemoEnd) {
            index = charSetDefinition$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_SET_DEFINITION, charSetDefinition$RuleMemoStart, charSetDefinition$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (charSetDefinition$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(charSetDefinition$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("character" TestNoAlpha OptionalSpacing "set" TestNoAlpha OptionalSpacing SqlObjectIdentifier CharSetAttr)?
      // ("character" TestNoAlpha OptionalSpacing "set" TestNoAlpha OptionalSpacing SqlObjectIdentifier CharSetAttr)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "character"
      match = ignoreCaseStringMatcher("character", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "set"
               match = ignoreCaseStringMatcher("set", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlObjectIdentifier
                        match = sqlObjectIdentifier$Rule();
                        if (match) {
                           // CharSetAttr
                           match = charSetAttr$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      charSetDefinition$RuleMemoStart = startIndex;
      charSetDefinition$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         charSetDefinition$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_SET_DEFINITION, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         charSetDefinition$RuleMemoFirstNode = currentNode;
      }
      return true;
   }

   //CharSetAttr : ('%' OptionalSpacing "charset" TestNoAlpha OptionalSpacing)?
   protected boolean charSetAttr$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('%' OptionalSpacing "charset" TestNoAlpha OptionalSpacing)?
      // ('%' OptionalSpacing "charset" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '%'
      match = charMatcher('%');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // "charset"
            match = ignoreCaseStringMatcher("charset", 7);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_SET_ATTR, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //CharSize : ('(' OptionalSpacing NumberLiteral (("byte" | "char") TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)?
   protected boolean charSize$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (charSize$RuleMemoStart == index) {
         if (charSize$RuleMemoStart <= charSize$RuleMemoEnd) {
            index = charSize$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_SIZE, charSize$RuleMemoStart, charSize$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (charSize$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(charSize$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing NumberLiteral (("byte" | "char") TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)?
      // ('(' OptionalSpacing NumberLiteral (("byte" | "char") TestNoAlpha OptionalSpacing)? ')' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // NumberLiteral
            match = numberLiteral$Rule();
            if (match) {
               // (("byte" | "char") TestNoAlpha OptionalSpacing)?
               // (("byte" | "char") TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // ("byte" | "char")
               int startIndex_3 = index;
               switch(buffer.getChar(index)) {
                  case 'b':
                  case 'B': {
                     ++index;
                     // "yte"
                     if (match = ignoreCaseStringTest("yte", 3)) {
                        index += 3;
                     }
                     break;
                  }
                  case 'c':
                  case 'C': {
                     ++index;
                     // "har"
                     if (match = ignoreCaseStringTest("har", 3)) {
                        index += 3;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
               if (! match) {
                  index = startIndex_3;
               } else if(! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      charSize$RuleMemoStart = startIndex;
      charSize$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         charSize$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_SIZE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         charSize$RuleMemoFirstNode = currentNode;
      }
      return true;
   }

   //VarChar2DataType : ("varchar2" OptionalSpacing CharSize CharSetDefinition)
   protected boolean varChar2DataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (varChar2DataType$RuleMemoStart == index) {
         if (varChar2DataType$RuleMemoStart <= varChar2DataType$RuleMemoEnd) {
            index = varChar2DataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_CHAR2_DATA_TYPE, varChar2DataType$RuleMemoStart, varChar2DataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (varChar2DataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(varChar2DataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("varchar2" OptionalSpacing CharSize CharSetDefinition)
      // "varchar2"
      match = ignoreCaseStringMatcher("varchar2", 8);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // CharSize
            match = charSize$Rule();
            if (match) {
               // CharSetDefinition
               match = charSetDefinition$Rule();
            }
         }
      }
      if (match) {
         varChar2DataType$RuleMemoStart = startIndex;
         varChar2DataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            varChar2DataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_CHAR2_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            varChar2DataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         varChar2DataType$RuleMemoStart = startIndex;
         varChar2DataType$RuleMemoEnd = -1;
         varChar2DataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VarCharDataType : ("varchar" TestNoAlpha OptionalSpacing CharSize CharSetDefinition)
   protected boolean varCharDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (varCharDataType$RuleMemoStart == index) {
         if (varCharDataType$RuleMemoStart <= varCharDataType$RuleMemoEnd) {
            index = varCharDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_CHAR_DATA_TYPE, varCharDataType$RuleMemoStart, varCharDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (varCharDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(varCharDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("varchar" TestNoAlpha OptionalSpacing CharSize CharSetDefinition)
      // "varchar"
      match = ignoreCaseStringMatcher("varchar", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // CharSize
               match = charSize$Rule();
               if (match) {
                  // CharSetDefinition
                  match = charSetDefinition$Rule();
               }
            }
         }
      }
      if (match) {
         varCharDataType$RuleMemoStart = startIndex;
         varCharDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            varCharDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VAR_CHAR_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            varCharDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         varCharDataType$RuleMemoStart = startIndex;
         varCharDataType$RuleMemoEnd = -1;
         varCharDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CharDataType : ("char" TestNoAlpha OptionalSpacing ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)? CharSize CharSetDefinition)
   protected boolean charDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (charDataType$RuleMemoStart == index) {
         if (charDataType$RuleMemoStart <= charDataType$RuleMemoEnd) {
            index = charDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_DATA_TYPE, charDataType$RuleMemoStart, charDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (charDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(charDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("char" TestNoAlpha OptionalSpacing ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)? CharSize CharSetDefinition)
      // "char"
      match = ignoreCaseStringMatcher("char", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)?
               // ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "varying"
               match = ignoreCaseStringMatcher("varying", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "Varying"
                        match = ignoreCaseStringMatcher("Varying", 7);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // CharSize
               match = charSize$Rule();
               if (match) {
                  // CharSetDefinition
                  match = charSetDefinition$Rule();
               }
            }
         }
      }
      if (match) {
         charDataType$RuleMemoStart = startIndex;
         charDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            charDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CHAR_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            charDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         charDataType$RuleMemoStart = startIndex;
         charDataType$RuleMemoEnd = -1;
         charDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Precision : NumberLiteral
   protected boolean precision$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // NumberLiteral
      match = numberLiteral$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRECISION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NumberSize : ('(' OptionalSpacing Precision (',' OptionalSpacing NumberLiteral)? ')' OptionalSpacing)?
   protected boolean numberSize$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing Precision (',' OptionalSpacing NumberLiteral)? ')' OptionalSpacing)?
      // ('(' OptionalSpacing Precision (',' OptionalSpacing NumberLiteral)? ')' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Precision
            match = precision$Rule();
            if (match) {
               // (',' OptionalSpacing NumberLiteral)?
               // (',' OptionalSpacing NumberLiteral)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // ','
               match = charMatcher(',');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // NumberLiteral
                     match = numberLiteral$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.NUMBER_SIZE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //NumberDataType : ("number" TestNoAlpha OptionalSpacing NumberSize)
   protected boolean numberDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (numberDataType$RuleMemoStart == index) {
         if (numberDataType$RuleMemoStart <= numberDataType$RuleMemoEnd) {
            index = numberDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NUMBER_DATA_TYPE, numberDataType$RuleMemoStart, numberDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (numberDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(numberDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("number" TestNoAlpha OptionalSpacing NumberSize)
      // "number"
      match = ignoreCaseStringMatcher("number", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // NumberSize
               match = numberSize$Rule();
            }
         }
      }
      if (match) {
         numberDataType$RuleMemoStart = startIndex;
         numberDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            numberDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NUMBER_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            numberDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         numberDataType$RuleMemoStart = startIndex;
         numberDataType$RuleMemoEnd = -1;
         numberDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FloatDataType : ("float" TestNoAlpha OptionalSpacing Size?)
   protected boolean floatDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (floatDataType$RuleMemoStart == index) {
         if (floatDataType$RuleMemoStart <= floatDataType$RuleMemoEnd) {
            index = floatDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.FLOAT_DATA_TYPE, floatDataType$RuleMemoStart, floatDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (floatDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(floatDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("float" TestNoAlpha OptionalSpacing Size?)
      // "float"
      match = ignoreCaseStringMatcher("float", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         floatDataType$RuleMemoStart = startIndex;
         floatDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            floatDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FLOAT_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            floatDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         floatDataType$RuleMemoStart = startIndex;
         floatDataType$RuleMemoEnd = -1;
         floatDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TimestampDataType : ("timestamp" TestNoAlpha OptionalSpacing Size? ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)? "TimeZone" TestNoAlpha OptionalSpacing)
   protected boolean timestampDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (timestampDataType$RuleMemoStart == index) {
         if (timestampDataType$RuleMemoStart <= timestampDataType$RuleMemoEnd) {
            index = timestampDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TIMESTAMP_DATA_TYPE, timestampDataType$RuleMemoStart, timestampDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (timestampDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(timestampDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("timestamp" TestNoAlpha OptionalSpacing Size? ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)? "TimeZone" TestNoAlpha OptionalSpacing)
      // "timestamp"
      match = ignoreCaseStringMatcher("timestamp", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
               // ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)?
               // ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "with"
               match = ignoreCaseStringMatcher("with", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ("local" TestNoAlpha OptionalSpacing)?
                        // ("local" TestNoAlpha OptionalSpacing)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "local"
                        match = ignoreCaseStringMatcher("local", 5);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        // "time"
                        match = ignoreCaseStringMatcher("time", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "zone"
                                 match = ignoreCaseStringMatcher("zone", 4);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                          currentNode = lastNode_1;
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // "TimeZone"
               match = ignoreCaseStringMatcher("TimeZone", 8);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         timestampDataType$RuleMemoStart = startIndex;
         timestampDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            timestampDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TIMESTAMP_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            timestampDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         timestampDataType$RuleMemoStart = startIndex;
         timestampDataType$RuleMemoEnd = -1;
         timestampDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalDayToSecondSpec : ('\'' OptionalSpacing ((IntegerPattern TimeExpression) | TimeExpression | IntegerPattern) '\'' OptionalSpacing)
   protected boolean intervalDayToSecondSpec$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('\'' OptionalSpacing ((IntegerPattern TimeExpression) | TimeExpression | IntegerPattern) '\'' OptionalSpacing)
      // '\''
      match = charMatcher('\'');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ((IntegerPattern TimeExpression) | TimeExpression | IntegerPattern)
            // (IntegerPattern TimeExpression)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // IntegerPattern
            match = integerPattern$Rule();
            if (match) {
               // TimeExpression
               match = timeExpression$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
            if (! match) {
               // TimeExpression
               match = timeExpression$Rule();
               if (! match) {
                  // IntegerPattern
                  match = integerPattern$Rule();
               }
            }
            if (match) {
               // '\''
               match = charMatcher('\'');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_DAY_TO_SECOND_SPEC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalDayToSecondLeadingPrecision : ('(' OptionalSpacing IntegerPattern ("," OptionalSpacing IntegerPattern)? ')' OptionalSpacing)
   protected boolean intervalDayToSecondLeadingPrecision$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing IntegerPattern ("," OptionalSpacing IntegerPattern)? ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // IntegerPattern
            match = integerPattern$Rule();
            if (match) {
               // ("," OptionalSpacing IntegerPattern)?
               // ("," OptionalSpacing IntegerPattern)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // ","
               match = ignoreCaseCharMatcher(',');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // IntegerPattern
                     match = integerPattern$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_DAY_TO_SECOND_LEADING_PRECISION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalDayToSecondLiteral : ("interval" TestNoAlpha OptionalSpacing IntervalDayToSecondSpec (("day" | "hour" | "minute" | "seconds") TestNoAlpha OptionalSpacing) IntervalDayToSecondLeadingPrecision ("to" TestNoAlpha OptionalSpacing (("day" TestNoAlpha OptionalSpacing) | ("hour" TestNoAlpha OptionalSpacing) | ("minute" TestNoAlpha OptionalSpacing) | ("second" TestNoAlpha OptionalSpacing IntegerPattern?)))?)
   protected boolean intervalDayToSecondLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (intervalDayToSecondLiteral$RuleMemoStart == index) {
         if (intervalDayToSecondLiteral$RuleMemoStart <= intervalDayToSecondLiteral$RuleMemoEnd) {
            index = intervalDayToSecondLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_DAY_TO_SECOND_LITERAL, intervalDayToSecondLiteral$RuleMemoStart, intervalDayToSecondLiteral$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (intervalDayToSecondLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(intervalDayToSecondLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("interval" TestNoAlpha OptionalSpacing IntervalDayToSecondSpec (("day" | "hour" | "minute" | "seconds") TestNoAlpha OptionalSpacing) IntervalDayToSecondLeadingPrecision ("to" TestNoAlpha OptionalSpacing (("day" TestNoAlpha OptionalSpacing) | ("hour" TestNoAlpha OptionalSpacing) | ("minute" TestNoAlpha OptionalSpacing) | ("second" TestNoAlpha OptionalSpacing IntegerPattern?)))?)
      // "interval"
      match = ignoreCaseStringMatcher("interval", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // IntervalDayToSecondSpec
               match = intervalDayToSecondSpec$Rule();
               if (match) {
                  // (("day" | "hour" | "minute" | "seconds") TestNoAlpha OptionalSpacing)
                  // ("day" | "hour" | "minute" | "seconds")
                  int startIndex_1 = index;
                  switch(buffer.getChar(index)) {
                     case 'h':
                     case 'H': {
                        ++index;
                        // "our"
                        if (match = ignoreCaseStringTest("our", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 's':
                     case 'S': {
                        ++index;
                        // "econds"
                        if (match = ignoreCaseStringTest("econds", 6)) {
                           index += 6;
                        }
                        break;
                     }
                     case 'd':
                     case 'D': {
                        ++index;
                        // "ay"
                        if (match = ignoreCaseStringTest("ay", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'm':
                     case 'M': {
                        ++index;
                        // "inute"
                        if (match = ignoreCaseStringTest("inute", 5)) {
                           index += 5;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  if (! match) {
                     index = startIndex_1;
                  } else if(! currentRuleIsAtomic) {
                     currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                     currentNode = currentNode.getSibling();
                  }
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
                  if (match) {
                     // IntervalDayToSecondLeadingPrecision
                     match = intervalDayToSecondLeadingPrecision$Rule();
                     if (match) {
                        // ("to" TestNoAlpha OptionalSpacing (("day" TestNoAlpha OptionalSpacing) | ("hour" TestNoAlpha OptionalSpacing) | ("minute" TestNoAlpha OptionalSpacing) | ("second" TestNoAlpha OptionalSpacing IntegerPattern?)))?
                        // ("to" TestNoAlpha OptionalSpacing (("day" TestNoAlpha OptionalSpacing) | ("hour" TestNoAlpha OptionalSpacing) | ("minute" TestNoAlpha OptionalSpacing) | ("second" TestNoAlpha OptionalSpacing IntegerPattern?)))
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "to"
                        match = ignoreCaseStringMatcher("to", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // (("day" TestNoAlpha OptionalSpacing) | ("hour" TestNoAlpha OptionalSpacing) | ("minute" TestNoAlpha OptionalSpacing) | ("second" TestNoAlpha OptionalSpacing IntegerPattern?))
                                 // ("day" TestNoAlpha OptionalSpacing)
                                 Node lastNode_3 = currentNode;
                                 int lastIndex_3 = index;
                                 // "day"
                                 match = ignoreCaseStringMatcher("day", 3);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_3;
                                          lastNode_3.setSibling(null);
                                          currentNode = lastNode_3;
                                       }
                                    } else {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                    }
                                 }
                                 if (! match) {
                                    // ("hour" TestNoAlpha OptionalSpacing)
                                    Node lastNode_4 = currentNode;
                                    int lastIndex_4 = index;
                                    // "hour"
                                    match = ignoreCaseStringMatcher("hour", 4);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_4;
                                             lastNode_4.setSibling(null);
                                             currentNode = lastNode_4;
                                          }
                                       } else {
                                          index = lastIndex_4;
                                          lastNode_4.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // ("minute" TestNoAlpha OptionalSpacing)
                                       Node lastNode_5 = currentNode;
                                       int lastIndex_5 = index;
                                       // "minute"
                                       match = ignoreCaseStringMatcher("minute", 6);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_5;
                                                lastNode_5.setSibling(null);
                                                currentNode = lastNode_5;
                                             }
                                          } else {
                                             index = lastIndex_5;
                                             lastNode_5.setSibling(null);
                                          }
                                       }
                                       if (! match) {
                                          // ("second" TestNoAlpha OptionalSpacing IntegerPattern?)
                                          Node lastNode_6 = currentNode;
                                          int lastIndex_6 = index;
                                          // "second"
                                          match = ignoreCaseStringMatcher("second", 6);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // IntegerPattern?
                                                   // IntegerPattern
                                                   integerPattern$Rule();
                                                   match = true;
                                                } else {
                                                   index = lastIndex_6;
                                                   lastNode_6.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_6;
                                                lastNode_6.setSibling(null);
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        match = true;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         intervalDayToSecondLiteral$RuleMemoStart = startIndex;
         intervalDayToSecondLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            intervalDayToSecondLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_DAY_TO_SECOND_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            intervalDayToSecondLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         intervalDayToSecondLiteral$RuleMemoStart = startIndex;
         intervalDayToSecondLiteral$RuleMemoEnd = -1;
         intervalDayToSecondLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalDayToSecondDataType : ("interval" TestNoAlpha OptionalSpacing "day" TestNoAlpha OptionalSpacing (Size "DayPrecision" TestNoAlpha OptionalSpacing)? "to" TestNoAlpha OptionalSpacing "second" TestNoAlpha OptionalSpacing (Size "FractionalSecondsPrecision" TestNoAlpha OptionalSpacing)?)
   protected boolean intervalDayToSecondDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (intervalDayToSecondDataType$RuleMemoStart == index) {
         if (intervalDayToSecondDataType$RuleMemoStart <= intervalDayToSecondDataType$RuleMemoEnd) {
            index = intervalDayToSecondDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_DAY_TO_SECOND_DATA_TYPE, intervalDayToSecondDataType$RuleMemoStart, intervalDayToSecondDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (intervalDayToSecondDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(intervalDayToSecondDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("interval" TestNoAlpha OptionalSpacing "day" TestNoAlpha OptionalSpacing (Size "DayPrecision" TestNoAlpha OptionalSpacing)? "to" TestNoAlpha OptionalSpacing "second" TestNoAlpha OptionalSpacing (Size "FractionalSecondsPrecision" TestNoAlpha OptionalSpacing)?)
      // "interval"
      match = ignoreCaseStringMatcher("interval", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "day"
               match = ignoreCaseStringMatcher("day", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (Size "DayPrecision" TestNoAlpha OptionalSpacing)?
                        // (Size "DayPrecision" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // Size
                        match = size$Rule();
                        if (match) {
                           // "DayPrecision"
                           match = ignoreCaseStringMatcher("DayPrecision", 12);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // "to"
                        match = ignoreCaseStringMatcher("to", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "second"
                                 match = ignoreCaseStringMatcher("second", 6);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // (Size "FractionalSecondsPrecision" TestNoAlpha OptionalSpacing)?
                                          // (Size "FractionalSecondsPrecision" TestNoAlpha OptionalSpacing)
                                          Node lastNode_2 = currentNode;
                                          int lastIndex_2 = index;
                                          // Size
                                          match = size$Rule();
                                          if (match) {
                                             // "FractionalSecondsPrecision"
                                             match = ignoreCaseStringMatcher("FractionalSecondsPrecision", 26);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (! match) {
                                                      index = lastIndex_2;
                                                      lastNode_2.setSibling(null);
                                                      currentNode = lastNode_2;
                                                   }
                                                } else {
                                                   index = lastIndex_2;
                                                   lastNode_2.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_2;
                                                lastNode_2.setSibling(null);
                                             }
                                          }
                                          match = true;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         intervalDayToSecondDataType$RuleMemoStart = startIndex;
         intervalDayToSecondDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            intervalDayToSecondDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_DAY_TO_SECOND_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            intervalDayToSecondDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         intervalDayToSecondDataType$RuleMemoStart = startIndex;
         intervalDayToSecondDataType$RuleMemoEnd = -1;
         intervalDayToSecondDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalYearToMonthLeadingTrailing : ('\'' OptionalSpacing IntegerPattern ("-" OptionalSpacing IntegerPattern)? '\'' OptionalSpacing)
   protected boolean intervalYearToMonthLeadingTrailing$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (intervalYearToMonthLeadingTrailing$RuleMemoStart == index) {
         if (intervalYearToMonthLeadingTrailing$RuleMemoStart <= intervalYearToMonthLeadingTrailing$RuleMemoEnd) {
            index = intervalYearToMonthLeadingTrailing$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_YEAR_TO_MONTH_LEADING_TRAILING, intervalYearToMonthLeadingTrailing$RuleMemoStart, intervalYearToMonthLeadingTrailing$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (intervalYearToMonthLeadingTrailing$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(intervalYearToMonthLeadingTrailing$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('\'' OptionalSpacing IntegerPattern ("-" OptionalSpacing IntegerPattern)? '\'' OptionalSpacing)
      // '\''
      match = charMatcher('\'');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // IntegerPattern
            match = integerPattern$Rule();
            if (match) {
               // ("-" OptionalSpacing IntegerPattern)?
               // ("-" OptionalSpacing IntegerPattern)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "-"
               match = ignoreCaseCharMatcher('-');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (match) {
                     // IntegerPattern
                     match = integerPattern$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // '\''
               match = charMatcher('\'');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         intervalYearToMonthLeadingTrailing$RuleMemoStart = startIndex;
         intervalYearToMonthLeadingTrailing$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            intervalYearToMonthLeadingTrailing$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_YEAR_TO_MONTH_LEADING_TRAILING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            intervalYearToMonthLeadingTrailing$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         intervalYearToMonthLeadingTrailing$RuleMemoStart = startIndex;
         intervalYearToMonthLeadingTrailing$RuleMemoEnd = -1;
         intervalYearToMonthLeadingTrailing$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalYearToMonthLiteral : (("interval" TestNoAlpha OptionalSpacing IntervalYearToMonthLeadingTrailing "year" TestNoAlpha OptionalSpacing Size? ("to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)?) | ("interval" TestNoAlpha OptionalSpacing IntervalYearToMonthLeadingTrailing "month" TestNoAlpha OptionalSpacing Size? ("to" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing)?))
   protected boolean intervalYearToMonthLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (intervalYearToMonthLiteral$RuleMemoStart == index) {
         if (intervalYearToMonthLiteral$RuleMemoStart <= intervalYearToMonthLiteral$RuleMemoEnd) {
            index = intervalYearToMonthLiteral$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_YEAR_TO_MONTH_LITERAL, intervalYearToMonthLiteral$RuleMemoStart, intervalYearToMonthLiteral$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (intervalYearToMonthLiteral$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(intervalYearToMonthLiteral$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("interval" TestNoAlpha OptionalSpacing IntervalYearToMonthLeadingTrailing "year" TestNoAlpha OptionalSpacing Size? ("to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)?) | ("interval" TestNoAlpha OptionalSpacing IntervalYearToMonthLeadingTrailing "month" TestNoAlpha OptionalSpacing Size? ("to" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing)?))
      // ("interval" TestNoAlpha OptionalSpacing IntervalYearToMonthLeadingTrailing "year" TestNoAlpha OptionalSpacing Size? ("to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "interval"
      match = ignoreCaseStringMatcher("interval", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // IntervalYearToMonthLeadingTrailing
               match = intervalYearToMonthLeadingTrailing$Rule();
               if (match) {
                  // "year"
                  match = ignoreCaseStringMatcher("year", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // Size?
                           // Size
                           size$Rule();
                           match = true;
                           // ("to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)?
                           // ("to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "to"
                           match = ignoreCaseStringMatcher("to", 2);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // "month"
                                    match = ignoreCaseStringMatcher("month", 5);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_2;
                                             lastNode_2.setSibling(null);
                                             currentNode = lastNode_2;
                                          }
                                       } else {
                                          index = lastIndex_2;
                                          lastNode_2.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_2;
                                       lastNode_2.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           match = true;
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("interval" TestNoAlpha OptionalSpacing IntervalYearToMonthLeadingTrailing "month" TestNoAlpha OptionalSpacing Size? ("to" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing)?)
         Node lastNode_3 = currentNode;
         int lastIndex_3 = index;
         // "interval"
         match = ignoreCaseStringMatcher("interval", 8);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // IntervalYearToMonthLeadingTrailing
                  match = intervalYearToMonthLeadingTrailing$Rule();
                  if (match) {
                     // "month"
                     match = ignoreCaseStringMatcher("month", 5);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // Size?
                              // Size
                              size$Rule();
                              match = true;
                              // ("to" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing)?
                              // ("to" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing)
                              Node lastNode_4 = currentNode;
                              int lastIndex_4 = index;
                              // "to"
                              match = ignoreCaseStringMatcher("to", 2);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "year"
                                       match = ignoreCaseStringMatcher("year", 4);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_4;
                                                lastNode_4.setSibling(null);
                                                currentNode = lastNode_4;
                                             }
                                          } else {
                                             index = lastIndex_4;
                                             lastNode_4.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_4;
                                          lastNode_4.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_4;
                                       lastNode_4.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_4;
                                    lastNode_4.setSibling(null);
                                 }
                              }
                              match = true;
                           } else {
                              index = lastIndex_3;
                              lastNode_3.setSibling(null);
                           }
                        } else {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            } else {
               index = lastIndex_3;
               lastNode_3.setSibling(null);
            }
         }
      }
      if (match) {
         intervalYearToMonthLiteral$RuleMemoStart = startIndex;
         intervalYearToMonthLiteral$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            intervalYearToMonthLiteral$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_YEAR_TO_MONTH_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            intervalYearToMonthLiteral$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         intervalYearToMonthLiteral$RuleMemoStart = startIndex;
         intervalYearToMonthLiteral$RuleMemoEnd = -1;
         intervalYearToMonthLiteral$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntervalYearToMonthDataType : ("interval" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing Size? "to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)
   protected boolean intervalYearToMonthDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (intervalYearToMonthDataType$RuleMemoStart == index) {
         if (intervalYearToMonthDataType$RuleMemoStart <= intervalYearToMonthDataType$RuleMemoEnd) {
            index = intervalYearToMonthDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_YEAR_TO_MONTH_DATA_TYPE, intervalYearToMonthDataType$RuleMemoStart, intervalYearToMonthDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (intervalYearToMonthDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(intervalYearToMonthDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("interval" TestNoAlpha OptionalSpacing "year" TestNoAlpha OptionalSpacing Size? "to" TestNoAlpha OptionalSpacing "month" TestNoAlpha OptionalSpacing)
      // "interval"
      match = ignoreCaseStringMatcher("interval", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "year"
               match = ignoreCaseStringMatcher("year", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // Size?
                        // Size
                        size$Rule();
                        // "to"
                        match = ignoreCaseStringMatcher("to", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "month"
                                 match = ignoreCaseStringMatcher("month", 5);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         intervalYearToMonthDataType$RuleMemoStart = startIndex;
         intervalYearToMonthDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            intervalYearToMonthDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTERVAL_YEAR_TO_MONTH_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            intervalYearToMonthDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         intervalYearToMonthDataType$RuleMemoStart = startIndex;
         intervalYearToMonthDataType$RuleMemoEnd = -1;
         intervalYearToMonthDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TimeDataType : ("time" TestNoAlpha OptionalSpacing Size? ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)? "TimeZone" TestNoAlpha OptionalSpacing)
   protected boolean timeDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (timeDataType$RuleMemoStart == index) {
         if (timeDataType$RuleMemoStart <= timeDataType$RuleMemoEnd) {
            index = timeDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TIME_DATA_TYPE, timeDataType$RuleMemoStart, timeDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (timeDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(timeDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("time" TestNoAlpha OptionalSpacing Size? ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)? "TimeZone" TestNoAlpha OptionalSpacing)
      // "time"
      match = ignoreCaseStringMatcher("time", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
               // ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)?
               // ("with" TestNoAlpha OptionalSpacing ("local" TestNoAlpha OptionalSpacing)? "time" TestNoAlpha OptionalSpacing "zone" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "with"
               match = ignoreCaseStringMatcher("with", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ("local" TestNoAlpha OptionalSpacing)?
                        // ("local" TestNoAlpha OptionalSpacing)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "local"
                        match = ignoreCaseStringMatcher("local", 5);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                        // "time"
                        match = ignoreCaseStringMatcher("time", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "zone"
                                 match = ignoreCaseStringMatcher("zone", 4);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                          currentNode = lastNode_1;
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // "TimeZone"
               match = ignoreCaseStringMatcher("TimeZone", 8);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         timeDataType$RuleMemoStart = startIndex;
         timeDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            timeDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TIME_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            timeDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         timeDataType$RuleMemoStart = startIndex;
         timeDataType$RuleMemoEnd = -1;
         timeDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RefXmlDataType : ("ref" TestNoAlpha OptionalSpacing "xmltype" TestNoAlpha OptionalSpacing)
   protected boolean refXmlDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (refXmlDataType$RuleMemoStart == index) {
         if (refXmlDataType$RuleMemoStart <= refXmlDataType$RuleMemoEnd) {
            index = refXmlDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.REF_XML_DATA_TYPE, refXmlDataType$RuleMemoStart, refXmlDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (refXmlDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(refXmlDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("ref" TestNoAlpha OptionalSpacing "xmltype" TestNoAlpha OptionalSpacing)
      // "ref"
      match = ignoreCaseStringMatcher("ref", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "xmltype"
               match = ignoreCaseStringMatcher("xmltype", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         refXmlDataType$RuleMemoStart = startIndex;
         refXmlDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            refXmlDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.REF_XML_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            refXmlDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         refXmlDataType$RuleMemoStart = startIndex;
         refXmlDataType$RuleMemoEnd = -1;
         refXmlDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NCharDataType : ("nchar" TestNoAlpha OptionalSpacing ("varying" TestNoAlpha OptionalSpacing)? Size?)
   protected boolean nCharDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (nCharDataType$RuleMemoStart == index) {
         if (nCharDataType$RuleMemoStart <= nCharDataType$RuleMemoEnd) {
            index = nCharDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NCHAR_DATA_TYPE, nCharDataType$RuleMemoStart, nCharDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (nCharDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(nCharDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("nchar" TestNoAlpha OptionalSpacing ("varying" TestNoAlpha OptionalSpacing)? Size?)
      // "nchar"
      match = ignoreCaseStringMatcher("nchar", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("varying" TestNoAlpha OptionalSpacing)?
               // ("varying" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "varying"
               match = ignoreCaseStringMatcher("varying", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         nCharDataType$RuleMemoStart = startIndex;
         nCharDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            nCharDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NCHAR_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            nCharDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         nCharDataType$RuleMemoStart = startIndex;
         nCharDataType$RuleMemoEnd = -1;
         nCharDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NVarChar2DataType : ("nvarchar2" OptionalSpacing Size?)
   protected boolean nVarChar2DataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (nVarChar2DataType$RuleMemoStart == index) {
         if (nVarChar2DataType$RuleMemoStart <= nVarChar2DataType$RuleMemoEnd) {
            index = nVarChar2DataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NVAR_CHAR2_DATA_TYPE, nVarChar2DataType$RuleMemoStart, nVarChar2DataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (nVarChar2DataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(nVarChar2DataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("nvarchar2" OptionalSpacing Size?)
      // "nvarchar2"
      match = ignoreCaseStringMatcher("nvarchar2", 9);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // Size?
            // Size
            size$Rule();
            match = true;
         }
      }
      if (match) {
         nVarChar2DataType$RuleMemoStart = startIndex;
         nVarChar2DataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            nVarChar2DataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NVAR_CHAR2_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            nVarChar2DataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         nVarChar2DataType$RuleMemoStart = startIndex;
         nVarChar2DataType$RuleMemoEnd = -1;
         nVarChar2DataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LongRawDataType : ("long" TestNoAlpha OptionalSpacing ("raw" TestNoAlpha OptionalSpacing)? Size?)
   protected boolean longRawDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (longRawDataType$RuleMemoStart == index) {
         if (longRawDataType$RuleMemoStart <= longRawDataType$RuleMemoEnd) {
            index = longRawDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LONG_RAW_DATA_TYPE, longRawDataType$RuleMemoStart, longRawDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (longRawDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(longRawDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("long" TestNoAlpha OptionalSpacing ("raw" TestNoAlpha OptionalSpacing)? Size?)
      // "long"
      match = ignoreCaseStringMatcher("long", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("raw" TestNoAlpha OptionalSpacing)?
               // ("raw" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "raw"
               match = ignoreCaseStringMatcher("raw", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         longRawDataType$RuleMemoStart = startIndex;
         longRawDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            longRawDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LONG_RAW_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            longRawDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         longRawDataType$RuleMemoStart = startIndex;
         longRawDataType$RuleMemoEnd = -1;
         longRawDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RawDataType : ("raw" TestNoAlpha OptionalSpacing Size?)
   protected boolean rawDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (rawDataType$RuleMemoStart == index) {
         if (rawDataType$RuleMemoStart <= rawDataType$RuleMemoEnd) {
            index = rawDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.RAW_DATA_TYPE, rawDataType$RuleMemoStart, rawDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (rawDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(rawDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("raw" TestNoAlpha OptionalSpacing Size?)
      // "raw"
      match = ignoreCaseStringMatcher("raw", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         rawDataType$RuleMemoStart = startIndex;
         rawDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            rawDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RAW_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            rawDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         rawDataType$RuleMemoStart = startIndex;
         rawDataType$RuleMemoEnd = -1;
         rawDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CLobDataType : ("clob" TestNoAlpha OptionalSpacing CharSetDefinition)
   protected boolean cLobDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (cLobDataType$RuleMemoStart == index) {
         if (cLobDataType$RuleMemoStart <= cLobDataType$RuleMemoEnd) {
            index = cLobDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.CLOB_DATA_TYPE, cLobDataType$RuleMemoStart, cLobDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (cLobDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(cLobDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("clob" TestNoAlpha OptionalSpacing CharSetDefinition)
      // "clob"
      match = ignoreCaseStringMatcher("clob", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // CharSetDefinition
               match = charSetDefinition$Rule();
            }
         }
      }
      if (match) {
         cLobDataType$RuleMemoStart = startIndex;
         cLobDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            cLobDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CLOB_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            cLobDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         cLobDataType$RuleMemoStart = startIndex;
         cLobDataType$RuleMemoEnd = -1;
         cLobDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //URowIdDataType : ("urowid" TestNoAlpha OptionalSpacing Size?)
   protected boolean uRowIdDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (uRowIdDataType$RuleMemoStart == index) {
         if (uRowIdDataType$RuleMemoStart <= uRowIdDataType$RuleMemoEnd) {
            index = uRowIdDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.UROW_ID_DATA_TYPE, uRowIdDataType$RuleMemoStart, uRowIdDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (uRowIdDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(uRowIdDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ("urowid" TestNoAlpha OptionalSpacing Size?)
      // "urowid"
      match = ignoreCaseStringMatcher("urowid", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         uRowIdDataType$RuleMemoStart = startIndex;
         uRowIdDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            uRowIdDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.UROW_ID_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            uRowIdDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         uRowIdDataType$RuleMemoStart = startIndex;
         uRowIdDataType$RuleMemoEnd = -1;
         uRowIdDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlDataType : (("binary_float" TestNoAlpha OptionalSpacing) | ("binary_double" TestNoAlpha OptionalSpacing) | ("date" TestNoAlpha OptionalSpacing) | NumberDataType | IntervalDayToSecondDataType | IntervalYearToMonthDataType | TimeDataType | TimestampDataType | RefXmlDataType | FloatDataType | CharDataType | NCharDataType | NVarChar2DataType | VarChar2DataType | VarCharDataType | LongRawDataType | RawDataType | ("blob" TestNoAlpha OptionalSpacing) | CLobDataType | ("nclob" TestNoAlpha OptionalSpacing) | ("bfile" TestNoAlpha OptionalSpacing) | ("rowid" TestNoAlpha OptionalSpacing) | URowIdDataType)
   protected boolean sqlDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlDataType$RuleMemoStart == index) {
         if (sqlDataType$RuleMemoStart <= sqlDataType$RuleMemoEnd) {
            index = sqlDataType$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_DATA_TYPE, sqlDataType$RuleMemoStart, sqlDataType$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlDataType$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlDataType$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (("binary_float" TestNoAlpha OptionalSpacing) | ("binary_double" TestNoAlpha OptionalSpacing) | ("date" TestNoAlpha OptionalSpacing) | NumberDataType | IntervalDayToSecondDataType | IntervalYearToMonthDataType | TimeDataType | TimestampDataType | RefXmlDataType | FloatDataType | CharDataType | NCharDataType | NVarChar2DataType | VarChar2DataType | VarCharDataType | LongRawDataType | RawDataType | ("blob" TestNoAlpha OptionalSpacing) | CLobDataType | ("nclob" TestNoAlpha OptionalSpacing) | ("bfile" TestNoAlpha OptionalSpacing) | ("rowid" TestNoAlpha OptionalSpacing) | URowIdDataType)
      // ("binary_float" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "binary_float"
      match = ignoreCaseStringMatcher("binary_float", 12);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("binary_double" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "binary_double"
         match = ignoreCaseStringMatcher("binary_double", 13);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // ("date" TestNoAlpha OptionalSpacing)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // "date"
            match = ignoreCaseStringMatcher("date", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                     currentNode = lastNode_3;
                  }
               } else {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
               }
            }
            if (! match) {
               // NumberDataType
               match = numberDataType$Rule();
               if (! match) {
                  // IntervalDayToSecondDataType
                  match = intervalDayToSecondDataType$Rule();
                  if (! match) {
                     // IntervalYearToMonthDataType
                     match = intervalYearToMonthDataType$Rule();
                     if (! match) {
                        // TimeDataType
                        match = timeDataType$Rule();
                        if (! match) {
                           // TimestampDataType
                           match = timestampDataType$Rule();
                           if (! match) {
                              // RefXmlDataType
                              match = refXmlDataType$Rule();
                              if (! match) {
                                 // FloatDataType
                                 match = floatDataType$Rule();
                                 if (! match) {
                                    // CharDataType
                                    match = charDataType$Rule();
                                    if (! match) {
                                       // NCharDataType
                                       match = nCharDataType$Rule();
                                       if (! match) {
                                          // NVarChar2DataType
                                          match = nVarChar2DataType$Rule();
                                          if (! match) {
                                             // VarChar2DataType
                                             match = varChar2DataType$Rule();
                                             if (! match) {
                                                // VarCharDataType
                                                match = varCharDataType$Rule();
                                                if (! match) {
                                                   // LongRawDataType
                                                   match = longRawDataType$Rule();
                                                   if (! match) {
                                                      // RawDataType
                                                      match = rawDataType$Rule();
                                                      if (! match) {
                                                         // ("blob" TestNoAlpha OptionalSpacing)
                                                         Node lastNode_4 = currentNode;
                                                         int lastIndex_4 = index;
                                                         // "blob"
                                                         match = ignoreCaseStringMatcher("blob", 4);
                                                         if (match) {
                                                            // TestNoAlpha
                                                            match = testNoAlpha$Rule();
                                                            if (match) {
                                                               // OptionalSpacing
                                                               match = optionalSpacing$Rule();
                                                               if (! match) {
                                                                  index = lastIndex_4;
                                                                  lastNode_4.setSibling(null);
                                                                  currentNode = lastNode_4;
                                                               }
                                                            } else {
                                                               index = lastIndex_4;
                                                               lastNode_4.setSibling(null);
                                                            }
                                                         }
                                                         if (! match) {
                                                            // CLobDataType
                                                            match = cLobDataType$Rule();
                                                            if (! match) {
                                                               // ("nclob" TestNoAlpha OptionalSpacing)
                                                               Node lastNode_5 = currentNode;
                                                               int lastIndex_5 = index;
                                                               // "nclob"
                                                               match = ignoreCaseStringMatcher("nclob", 5);
                                                               if (match) {
                                                                  // TestNoAlpha
                                                                  match = testNoAlpha$Rule();
                                                                  if (match) {
                                                                     // OptionalSpacing
                                                                     match = optionalSpacing$Rule();
                                                                     if (! match) {
                                                                        index = lastIndex_5;
                                                                        lastNode_5.setSibling(null);
                                                                        currentNode = lastNode_5;
                                                                     }
                                                                  } else {
                                                                     index = lastIndex_5;
                                                                     lastNode_5.setSibling(null);
                                                                  }
                                                               }
                                                               if (! match) {
                                                                  // ("bfile" TestNoAlpha OptionalSpacing)
                                                                  Node lastNode_6 = currentNode;
                                                                  int lastIndex_6 = index;
                                                                  // "bfile"
                                                                  match = ignoreCaseStringMatcher("bfile", 5);
                                                                  if (match) {
                                                                     // TestNoAlpha
                                                                     match = testNoAlpha$Rule();
                                                                     if (match) {
                                                                        // OptionalSpacing
                                                                        match = optionalSpacing$Rule();
                                                                        if (! match) {
                                                                           index = lastIndex_6;
                                                                           lastNode_6.setSibling(null);
                                                                           currentNode = lastNode_6;
                                                                        }
                                                                     } else {
                                                                        index = lastIndex_6;
                                                                        lastNode_6.setSibling(null);
                                                                     }
                                                                  }
                                                                  if (! match) {
                                                                     // ("rowid" TestNoAlpha OptionalSpacing)
                                                                     Node lastNode_7 = currentNode;
                                                                     int lastIndex_7 = index;
                                                                     // "rowid"
                                                                     match = ignoreCaseStringMatcher("rowid", 5);
                                                                     if (match) {
                                                                        // TestNoAlpha
                                                                        match = testNoAlpha$Rule();
                                                                        if (match) {
                                                                           // OptionalSpacing
                                                                           match = optionalSpacing$Rule();
                                                                           if (! match) {
                                                                              index = lastIndex_7;
                                                                              lastNode_7.setSibling(null);
                                                                              currentNode = lastNode_7;
                                                                           }
                                                                        } else {
                                                                           index = lastIndex_7;
                                                                           lastNode_7.setSibling(null);
                                                                        }
                                                                     }
                                                                     if (! match) {
                                                                        // URowIdDataType
                                                                        match = uRowIdDataType$Rule();
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         sqlDataType$RuleMemoStart = startIndex;
         sqlDataType$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlDataType$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlDataType$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlDataType$RuleMemoStart = startIndex;
         sqlDataType$RuleMemoEnd = -1;
         sqlDataType$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlParameters : ('(' OptionalSpacing (SqlFunctionParameter (',' OptionalSpacing SqlFunctionParameter)*)? ')' OptionalSpacing)
   protected boolean sqlParameters$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlParameters$RuleMemoStart == index) {
         if (sqlParameters$RuleMemoStart <= sqlParameters$RuleMemoEnd) {
            index = sqlParameters$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_PARAMETERS, sqlParameters$RuleMemoStart, sqlParameters$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlParameters$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlParameters$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('(' OptionalSpacing (SqlFunctionParameter (',' OptionalSpacing SqlFunctionParameter)*)? ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // (SqlFunctionParameter (',' OptionalSpacing SqlFunctionParameter)*)?
            // (SqlFunctionParameter (',' OptionalSpacing SqlFunctionParameter)*)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // SqlFunctionParameter
            match = sqlFunctionParameter$Rule();
            if (match) {
               // (',' OptionalSpacing SqlFunctionParameter)*
               do {
                  // (',' OptionalSpacing SqlFunctionParameter)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // SqlFunctionParameter
                        match = sqlFunctionParameter$Rule();
                        if (! match) {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                           currentNode = lastNode_2;
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
            // ')'
            match = charMatcher(')');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         sqlParameters$RuleMemoStart = startIndex;
         sqlParameters$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlParameters$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_PARAMETERS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlParameters$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlParameters$RuleMemoStart = startIndex;
         sqlParameters$RuleMemoEnd = -1;
         sqlParameters$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlParametersList : SqlParameters*
   protected boolean sqlParametersList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlParametersList$RuleMemoStart == index) {
         if (sqlParametersList$RuleMemoStart <= sqlParametersList$RuleMemoEnd) {
            index = sqlParametersList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_PARAMETERS_LIST, sqlParametersList$RuleMemoStart, sqlParametersList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlParametersList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlParametersList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // SqlParameters*
      do {
         // SqlParameters
         match = sqlParameters$Rule();
      } while(match);
      sqlParametersList$RuleMemoStart = startIndex;
      sqlParametersList$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         sqlParametersList$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_PARAMETERS_LIST, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         sqlParametersList$RuleMemoFirstNode = currentNode;
      }
      return true;
   }

   //SqlQualifiedIdentifierRemote : (SqlQualifiedIdentifier DBLink SqlParametersList SqlAttributes?)
   protected boolean sqlQualifiedIdentifierRemote$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlQualifiedIdentifierRemote$RuleMemoStart == index) {
         if (sqlQualifiedIdentifierRemote$RuleMemoStart <= sqlQualifiedIdentifierRemote$RuleMemoEnd) {
            index = sqlQualifiedIdentifierRemote$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_QUALIFIED_IDENTIFIER_REMOTE, sqlQualifiedIdentifierRemote$RuleMemoStart, sqlQualifiedIdentifierRemote$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlQualifiedIdentifierRemote$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlQualifiedIdentifierRemote$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlQualifiedIdentifier DBLink SqlParametersList SqlAttributes?)
      // SqlQualifiedIdentifier
      match = sqlQualifiedIdentifier$Rule();
      if (match) {
         // DBLink
         match = dBLink$Rule();
         if (match) {
            // SqlParametersList
            match = sqlParametersList$Rule();
            if (match) {
               // SqlAttributes?
               // SqlAttributes
               sqlAttributes$Rule();
               match = true;
            }
         }
      }
      if (match) {
         sqlQualifiedIdentifierRemote$RuleMemoStart = startIndex;
         sqlQualifiedIdentifierRemote$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlQualifiedIdentifierRemote$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_QUALIFIED_IDENTIFIER_REMOTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlQualifiedIdentifierRemote$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlQualifiedIdentifierRemote$RuleMemoStart = startIndex;
         sqlQualifiedIdentifierRemote$RuleMemoEnd = -1;
         sqlQualifiedIdentifierRemote$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlSimpleIdentifierRemote : (SqlSimpleIdentifier DBLink SqlParametersList SqlAttributes?)
   protected boolean sqlSimpleIdentifierRemote$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlSimpleIdentifierRemote$RuleMemoStart == index) {
         if (sqlSimpleIdentifierRemote$RuleMemoStart <= sqlSimpleIdentifierRemote$RuleMemoEnd) {
            index = sqlSimpleIdentifierRemote$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_IDENTIFIER_REMOTE, sqlSimpleIdentifierRemote$RuleMemoStart, sqlSimpleIdentifierRemote$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlSimpleIdentifierRemote$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlSimpleIdentifierRemote$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlSimpleIdentifier DBLink SqlParametersList SqlAttributes?)
      // SqlSimpleIdentifier
      match = sqlSimpleIdentifier$Rule();
      if (match) {
         // DBLink
         match = dBLink$Rule();
         if (match) {
            // SqlParametersList
            match = sqlParametersList$Rule();
            if (match) {
               // SqlAttributes?
               // SqlAttributes
               sqlAttributes$Rule();
               match = true;
            }
         }
      }
      if (match) {
         sqlSimpleIdentifierRemote$RuleMemoStart = startIndex;
         sqlSimpleIdentifierRemote$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlSimpleIdentifierRemote$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_IDENTIFIER_REMOTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlSimpleIdentifierRemote$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlSimpleIdentifierRemote$RuleMemoStart = startIndex;
         sqlSimpleIdentifierRemote$RuleMemoEnd = -1;
         sqlSimpleIdentifierRemote$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlAttributes : ('.' OptionalSpacing SqlAnySimpleIdentifier)+
   protected boolean sqlAttributes$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlAttributes$RuleMemoStart == index) {
         if (sqlAttributes$RuleMemoStart <= sqlAttributes$RuleMemoEnd) {
            index = sqlAttributes$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ATTRIBUTES, sqlAttributes$RuleMemoStart, sqlAttributes$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlAttributes$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlAttributes$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('.' OptionalSpacing SqlAnySimpleIdentifier)+
      // ('.' OptionalSpacing SqlAnySimpleIdentifier)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '.'
      match = charMatcher('.');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SqlAnySimpleIdentifier
            match = sqlAnySimpleIdentifier$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (match) {
         do {
            // ('.' OptionalSpacing SqlAnySimpleIdentifier)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlAnySimpleIdentifier
                  match = sqlAnySimpleIdentifier$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         sqlAttributes$RuleMemoStart = startIndex;
         sqlAttributes$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlAttributes$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ATTRIBUTES, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlAttributes$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlAttributes$RuleMemoStart = startIndex;
         sqlAttributes$RuleMemoEnd = -1;
         sqlAttributes$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlQualifiedIdentifier : (SqlSimpleIdentifier SqlAttributes)
   protected boolean sqlQualifiedIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlQualifiedIdentifier$RuleMemoStart == index) {
         if (sqlQualifiedIdentifier$RuleMemoStart <= sqlQualifiedIdentifier$RuleMemoEnd) {
            index = sqlQualifiedIdentifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_QUALIFIED_IDENTIFIER, sqlQualifiedIdentifier$RuleMemoStart, sqlQualifiedIdentifier$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlQualifiedIdentifier$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlQualifiedIdentifier$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlSimpleIdentifier SqlAttributes)
      // SqlSimpleIdentifier
      match = sqlSimpleIdentifier$Rule();
      if (match) {
         // SqlAttributes
         match = sqlAttributes$Rule();
      }
      if (match) {
         sqlQualifiedIdentifier$RuleMemoStart = startIndex;
         sqlQualifiedIdentifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlQualifiedIdentifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_QUALIFIED_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlQualifiedIdentifier$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlQualifiedIdentifier$RuleMemoStart = startIndex;
         sqlQualifiedIdentifier$RuleMemoEnd = -1;
         sqlQualifiedIdentifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlAnySimpleIdentifier : (SqlAnyIdentifier SqlParametersList)
   protected boolean sqlAnySimpleIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SqlAnyIdentifier SqlParametersList)
      // SqlAnyIdentifier
      match = sqlAnyIdentifier$Rule();
      if (match) {
         // SqlParametersList
         match = sqlParametersList$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ANY_SIMPLE_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlSimpleIdentifier : (SqlIdentifier SqlParametersList)
   protected boolean sqlSimpleIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlSimpleIdentifier$RuleMemoStart == index) {
         if (sqlSimpleIdentifier$RuleMemoStart <= sqlSimpleIdentifier$RuleMemoEnd) {
            index = sqlSimpleIdentifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_IDENTIFIER, sqlSimpleIdentifier$RuleMemoStart, sqlSimpleIdentifier$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlSimpleIdentifier$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlSimpleIdentifier$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlIdentifier SqlParametersList)
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         // SqlParametersList
         match = sqlParametersList$Rule();
      }
      if (match) {
         sqlSimpleIdentifier$RuleMemoStart = startIndex;
         sqlSimpleIdentifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlSimpleIdentifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_SIMPLE_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlSimpleIdentifier$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlSimpleIdentifier$RuleMemoStart = startIndex;
         sqlSimpleIdentifier$RuleMemoEnd = -1;
         sqlSimpleIdentifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlObjectIdentifier : (BuiltInFunctionCall | SqlQualifiedIdentifierRemote | SqlSimpleIdentifierRemote | SqlQualifiedIdentifier | SqlSimpleIdentifier)
   protected boolean sqlObjectIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlObjectIdentifier$RuleMemoStart == index) {
         if (sqlObjectIdentifier$RuleMemoStart <= sqlObjectIdentifier$RuleMemoEnd) {
            index = sqlObjectIdentifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_OBJECT_IDENTIFIER, sqlObjectIdentifier$RuleMemoStart, sqlObjectIdentifier$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlObjectIdentifier$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlObjectIdentifier$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (BuiltInFunctionCall | SqlQualifiedIdentifierRemote | SqlSimpleIdentifierRemote | SqlQualifiedIdentifier | SqlSimpleIdentifier)
      switch(buffer.getChar(index)) {
         case 'B':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'O':
         case 'Q':
         case 'U':
         case 'W':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case '\"':
         case '#':
         case '$':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'o':
         case '0':
         case '1':
         case 'q':
         case '2':
         case '3':
         case '4':
         case '5':
         case 'u':
         case '6':
         case '7':
         case 'w':
         case '8':
         case '9':
         case 'y':
         case 'z': {
            // SqlQualifiedIdentifierRemote
            match = sqlQualifiedIdentifierRemote$Rule();
            if (! match) {
               // SqlSimpleIdentifierRemote
               match = sqlSimpleIdentifierRemote$Rule();
               if (! match) {
                  // SqlQualifiedIdentifier
                  match = sqlQualifiedIdentifier$Rule();
                  if (! match) {
                     // SqlSimpleIdentifier
                     match = sqlSimpleIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case 'A':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'L':
         case 'M':
         case 'N':
         case 'P':
         case 'R':
         case 'S':
         case 'T':
         case 'V':
         case 'X':
         case 'a':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'l':
         case 'm':
         case 'n':
         case 'p':
         case 'r':
         case 's':
         case 't':
         case 'v':
         case 'x': {
            // BuiltInFunctionCall
            match = builtInFunctionCall$Rule();
            if (! match) {
               // SqlQualifiedIdentifierRemote
               match = sqlQualifiedIdentifierRemote$Rule();
               if (! match) {
                  // SqlSimpleIdentifierRemote
                  match = sqlSimpleIdentifierRemote$Rule();
                  if (! match) {
                     // SqlQualifiedIdentifier
                     match = sqlQualifiedIdentifier$Rule();
                     if (! match) {
                        // SqlSimpleIdentifier
                        match = sqlSimpleIdentifier$Rule();
                     }
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         sqlObjectIdentifier$RuleMemoStart = startIndex;
         sqlObjectIdentifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlObjectIdentifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_OBJECT_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlObjectIdentifier$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlObjectIdentifier$RuleMemoStart = startIndex;
         sqlObjectIdentifier$RuleMemoEnd = -1;
         sqlObjectIdentifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlIdentifier : (SqlKeyword! SqlIdentifierPattern OptionalSpacing)
   protected boolean sqlIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlIdentifier$RuleMemoStart == index) {
         if (sqlIdentifier$RuleMemoStart <= sqlIdentifier$RuleMemoEnd) {
            index = sqlIdentifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIER, sqlIdentifier$RuleMemoStart, sqlIdentifier$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (sqlIdentifier$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlIdentifier$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlKeyword! SqlIdentifierPattern OptionalSpacing)
      // SqlKeyword!
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      boolean lastAtomic_1 = currentRuleIsAtomic;
      // (("access" | "add" | "all" | "alter" | "and" | "any" | "as" | "asc" | "audit" | "between" | "bulk" | "by" | "case" | "char" | "check" | "cluster" | "collect" | "column" | "comment" | "compress" | "connect" | "create" | "current" | "date" | "decimal" | "default" | "delete" | "desc" | "distinct" | "drop" | "else" | "exclusive" | "exists" | "file" | "float" | "for" | "from" | "grant" | "group" | "having" | "identified" | "immediate" | "in" | "increment" | "index" | "initialvinsert" | "integer" | "intersect" | "into" | "is" | "level" | "like" | "lock" | "long" | "maxextents" | "minus" | "mlslabel" | "mode" | "modify" | "noaudit" | "nocompress" | "not" | "nowait" | "null" | "number" | "of" | "offline" | "on" | "online" | "option" | "or" | "order" | "pctfree" | "prior" | "privileges" | "public" | "raw" | "rename" | "resource" | "revoke" | "row" | "rowid" | "rownum" | "rows" | "select" | "session" | "set" | "share" | "size" | "smallint" | "start" | "successful" | "synonym" | "sysdate" | "table" | "then" | "to" | "trigger" | "uid" | "union" | "unique" | "update" | "user" | "using" | "validate" | "values" | "varchar" | "varchar2" | "view" | "whenever" | "when" | "where" | "with") TestNoAlpha)
      // ("access" | "add" | "all" | "alter" | "and" | "any" | "as" | "asc" | "audit" | "between" | "bulk" | "by" | "case" | "char" | "check" | "cluster" | "collect" | "column" | "comment" | "compress" | "connect" | "create" | "current" | "date" | "decimal" | "default" | "delete" | "desc" | "distinct" | "drop" | "else" | "exclusive" | "exists" | "file" | "float" | "for" | "from" | "grant" | "group" | "having" | "identified" | "immediate" | "in" | "increment" | "index" | "initialvinsert" | "integer" | "intersect" | "into" | "is" | "level" | "like" | "lock" | "long" | "maxextents" | "minus" | "mlslabel" | "mode" | "modify" | "noaudit" | "nocompress" | "not" | "nowait" | "null" | "number" | "of" | "offline" | "on" | "online" | "option" | "or" | "order" | "pctfree" | "prior" | "privileges" | "public" | "raw" | "rename" | "resource" | "revoke" | "row" | "rowid" | "rownum" | "rows" | "select" | "session" | "set" | "share" | "size" | "smallint" | "start" | "successful" | "synonym" | "sysdate" | "table" | "then" | "to" | "trigger" | "uid" | "union" | "unique" | "update" | "user" | "using" | "validate" | "values" | "varchar" | "varchar2" | "view" | "whenever" | "when" | "where" | "with")
      int startIndex_2 = index;
      switch(buffer.getChar(index)) {
         case 'f':
         case 'F': {
            ++index;
            // ("loat" | "ile" | "rom" | "or")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // "r"
                  if (match = buffer.matchIgnoreCaseChar(index, 'r')) {
                     ++index;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "le"
                  if (match = ignoreCaseStringTest("le", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // "om"
                  if (match = ignoreCaseStringTest("om", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // "oat"
                  if (match = ignoreCaseStringTest("oat", 3)) {
                     index += 3;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'v':
         case 'V': {
            ++index;
            // ("alidate" | "archar2" | "archar" | "alues" | "iew")
            switch(buffer.getChar(index)) {
               case 'a':
               case 'A': {
                  ++index;
                  // ("lidate" | "rchar2" | "rchar" | "lues")
                  switch(buffer.getChar(index)) {
                     case 'r':
                     case 'R': {
                        ++index;
                        // ("char2" | "char")
                        if (buffer.matchChar(index, 'c') || buffer.matchChar(index, 'C')) {
                           ++index;
                           // ("har2" | "har")
                           if (buffer.matchChar(index, 'h') || buffer.matchChar(index, 'H')) {
                              ++index;
                              // ("ar2" | "ar")
                              if (buffer.matchChar(index, 'a') || buffer.matchChar(index, 'A')) {
                                 ++index;
                                 // ("r2" | "r")
                                 if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                                    ++index;
                                    // ("2" | <EMPTY>)
                                    if (buffer.matchChar(index, '2')) {
                                       ++index;
                                       // <EMPTY>
                                       match = true;
                                    } else {
                                       match = true;
                                    }
                                 } else {
                                    match = false;
                                 }
                              } else {
                                 match = false;
                              }
                           } else {
                              match = false;
                           }
                        } else {
                           match = false;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // ("idate" | "ues")
                        switch(buffer.getChar(index)) {
                           case 'i':
                           case 'I': {
                              ++index;
                              // "date"
                              if (match = ignoreCaseStringTest("date", 4)) {
                                 index += 4;
                              }
                              break;
                           }
                           case 'u':
                           case 'U': {
                              ++index;
                              // "es"
                              if (match = ignoreCaseStringTest("es", 2)) {
                                 index += 2;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "ew"
                  if (match = ignoreCaseStringTest("ew", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'g':
         case 'G': {
            ++index;
            // ("rant" | "roup")
            if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
               ++index;
               // ("ant" | "oup")
               switch(buffer.getChar(index)) {
                  case 'o':
                  case 'O': {
                     ++index;
                     // "up"
                     if (match = ignoreCaseStringTest("up", 2)) {
                        index += 2;
                     }
                     break;
                  }
                  case 'a':
                  case 'A': {
                     ++index;
                     // "nt"
                     if (match = ignoreCaseStringTest("nt", 2)) {
                        index += 2;
                     }
                     break;
                  }
                  default: {
                     match = false;
                  }
               }
            } else {
               match = false;
            }
            break;
         }
         case 'w':
         case 'W': {
            ++index;
            // ("henever" | "here" | "hen" | "ith")
            switch(buffer.getChar(index)) {
               case 'h':
               case 'H': {
                  ++index;
                  // ("enever" | "ere" | "en")
                  if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                     ++index;
                     // ("never" | "re" | "n")
                     switch(buffer.getChar(index)) {
                        case 'n':
                        case 'N': {
                           ++index;
                           // ("ever" | <EMPTY>)
                           if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                              ++index;
                              // "ver"
                              if (match = ignoreCaseStringTest("ver", 3)) {
                                 index += 3;
                              }
                           } else {
                              match = true;
                           }
                           break;
                        }
                        case 'r':
                        case 'R': {
                           ++index;
                           // "e"
                           if (match = buffer.matchIgnoreCaseChar(index, 'e')) {
                              ++index;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "th"
                  if (match = ignoreCaseStringTest("th", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'h':
         case 'H': {
            ++index;
            // "aving"
            if (match = ignoreCaseStringTest("aving", 5)) {
               index += 5;
            }
            break;
         }
         case 'i':
         case 'I': {
            ++index;
            // ("nitialvinsert" | "dentified" | "mmediate" | "ncrement" | "ntersect" | "nteger" | "ndex" | "nto" | "n" | "s")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // ("itialvinsert" | "crement" | "tersect" | "teger" | "dex" | "to" | <EMPTY>)
                  switch(buffer.getChar(index)) {
                     case 'i':
                     case 'I': {
                        ++index;
                        // "tialvinsert"
                        if (match = ignoreCaseStringTest("tialvinsert", 11)) {
                           index += 11;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "rement"
                        if (match = ignoreCaseStringTest("rement", 6)) {
                           index += 6;
                        }
                        break;
                     }
                     case 't':
                     case 'T': {
                        ++index;
                        // ("ersect" | "eger" | "o")
                        switch(buffer.getChar(index)) {
                           case 'o':
                           case 'O': {
                              ++index;
                              // <EMPTY>
                              match = true;
                              break;
                           }
                           case 'e':
                           case 'E': {
                              ++index;
                              // ("rsect" | "ger")
                              switch(buffer.getChar(index)) {
                                 case 'g':
                                 case 'G': {
                                    ++index;
                                    // "er"
                                    if (match = ignoreCaseStringTest("er", 2)) {
                                       index += 2;
                                    }
                                    break;
                                 }
                                 case 'r':
                                 case 'R': {
                                    ++index;
                                    // "sect"
                                    if (match = ignoreCaseStringTest("sect", 4)) {
                                       index += 4;
                                    }
                                    break;
                                 }
                                 default: {
                                    match = false;
                                 }
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     case 'd':
                     case 'D': {
                        ++index;
                        // "ex"
                        if (match = ignoreCaseStringTest("ex", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     default: {
                        match = true;
                     }
                  }
                  break;
               }
               case 's':
               case 'S': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'd':
               case 'D': {
                  ++index;
                  // "entified"
                  if (match = ignoreCaseStringTest("entified", 8)) {
                     index += 8;
                  }
                  break;
               }
               case 'm':
               case 'M': {
                  ++index;
                  // "mediate"
                  if (match = ignoreCaseStringTest("mediate", 7)) {
                     index += 7;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'l':
         case 'L': {
            ++index;
            // ("evel" | "ike" | "ock" | "ong")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("ck" | "ng")
                  switch(buffer.getChar(index)) {
                     case 'n':
                     case 'N': {
                        ++index;
                        // "g"
                        if (match = buffer.matchIgnoreCaseChar(index, 'g')) {
                           ++index;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "k"
                        if (match = buffer.matchIgnoreCaseChar(index, 'k')) {
                           ++index;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "ke"
                  if (match = ignoreCaseStringTest("ke", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // "vel"
                  if (match = ignoreCaseStringTest("vel", 3)) {
                     index += 3;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'm':
         case 'M': {
            ++index;
            // ("axextents" | "lslabel" | "odify" | "inus" | "ode")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("dify" | "de")
                  if (buffer.matchChar(index, 'd') || buffer.matchChar(index, 'D')) {
                     ++index;
                     // ("ify" | "e")
                     switch(buffer.getChar(index)) {
                        case 'i':
                        case 'I': {
                           ++index;
                           // "fy"
                           if (match = ignoreCaseStringTest("fy", 2)) {
                              index += 2;
                           }
                           break;
                        }
                        case 'e':
                        case 'E': {
                           ++index;
                           // <EMPTY>
                           match = true;
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // "xextents"
                  if (match = ignoreCaseStringTest("xextents", 8)) {
                     index += 8;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "nus"
                  if (match = ignoreCaseStringTest("nus", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // "slabel"
                  if (match = ignoreCaseStringTest("slabel", 6)) {
                     index += 6;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'n':
         case 'N': {
            ++index;
            // ("ocompress" | "oaudit" | "owait" | "umber" | "ull" | "ot")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("compress" | "audit" | "wait" | "t")
                  switch(buffer.getChar(index)) {
                     case 'w':
                     case 'W': {
                        ++index;
                        // "ait"
                        if (match = ignoreCaseStringTest("ait", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 'a':
                     case 'A': {
                        ++index;
                        // "udit"
                        if (match = ignoreCaseStringTest("udit", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "ompress"
                        if (match = ignoreCaseStringTest("ompress", 7)) {
                           index += 7;
                        }
                        break;
                     }
                     case 't':
                     case 'T': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // ("mber" | "ll")
                  switch(buffer.getChar(index)) {
                     case 'l':
                     case 'L': {
                        ++index;
                        // "l"
                        if (match = buffer.matchIgnoreCaseChar(index, 'l')) {
                           ++index;
                        }
                        break;
                     }
                     case 'm':
                     case 'M': {
                        ++index;
                        // "ber"
                        if (match = ignoreCaseStringTest("ber", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'o':
         case 'O': {
            ++index;
            // ("ffline" | "nline" | "ption" | "rder" | "f" | "n" | "r")
            switch(buffer.getChar(index)) {
               case 'f':
               case 'F': {
                  ++index;
                  // ("fline" | <EMPTY>)
                  if (buffer.matchChar(index, 'f') || buffer.matchChar(index, 'F')) {
                     ++index;
                     // "line"
                     if (match = ignoreCaseStringTest("line", 4)) {
                        index += 4;
                     }
                  } else {
                     match = true;
                  }
                  break;
               }
               case 'n':
               case 'N': {
                  ++index;
                  // ("line" | <EMPTY>)
                  if (buffer.matchChar(index, 'l') || buffer.matchChar(index, 'L')) {
                     ++index;
                     // "ine"
                     if (match = ignoreCaseStringTest("ine", 3)) {
                        index += 3;
                     }
                  } else {
                     match = true;
                  }
                  break;
               }
               case 'p':
               case 'P': {
                  ++index;
                  // "tion"
                  if (match = ignoreCaseStringTest("tion", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // ("der" | <EMPTY>)
                  if (buffer.matchChar(index, 'd') || buffer.matchChar(index, 'D')) {
                     ++index;
                     // "er"
                     if (match = ignoreCaseStringTest("er", 2)) {
                        index += 2;
                     }
                  } else {
                     match = true;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'p':
         case 'P': {
            ++index;
            // ("rivileges" | "ctfree" | "ublic" | "rior")
            switch(buffer.getChar(index)) {
               case 'r':
               case 'R': {
                  ++index;
                  // ("ivileges" | "ior")
                  if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
                     ++index;
                     // ("vileges" | "or")
                     switch(buffer.getChar(index)) {
                        case 'v':
                        case 'V': {
                           ++index;
                           // "ileges"
                           if (match = ignoreCaseStringTest("ileges", 6)) {
                              index += 6;
                           }
                           break;
                        }
                        case 'o':
                        case 'O': {
                           ++index;
                           // "r"
                           if (match = buffer.matchIgnoreCaseChar(index, 'r')) {
                              ++index;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'c':
               case 'C': {
                  ++index;
                  // "tfree"
                  if (match = ignoreCaseStringTest("tfree", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "blic"
                  if (match = ignoreCaseStringTest("blic", 4)) {
                     index += 4;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'a':
         case 'A': {
            ++index;
            // ("ccess" | "lter" | "udit" | "dd" | "ll" | "nd" | "ny" | "sc" | "s")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // ("d" | "y")
                  switch(buffer.getChar(index)) {
                     case 'y':
                     case 'Y': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'd':
                     case 'D': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'c':
               case 'C': {
                  ++index;
                  // "cess"
                  if (match = ignoreCaseStringTest("cess", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 's':
               case 'S': {
                  ++index;
                  // ("c" | <EMPTY>)
                  if (buffer.matchChar(index, 'c') || buffer.matchChar(index, 'C')) {
                     ++index;
                     // <EMPTY>
                     match = true;
                  } else {
                     match = true;
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // ("ter" | "l")
                  switch(buffer.getChar(index)) {
                     case 't':
                     case 'T': {
                        ++index;
                        // "er"
                        if (match = ignoreCaseStringTest("er", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'd':
               case 'D': {
                  ++index;
                  // "d"
                  if (match = buffer.matchIgnoreCaseChar(index, 'd')) {
                     ++index;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "dit"
                  if (match = ignoreCaseStringTest("dit", 3)) {
                     index += 3;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'b':
         case 'B': {
            ++index;
            // ("etween" | "ulk" | "y")
            switch(buffer.getChar(index)) {
               case 'y':
               case 'Y': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // "tween"
                  if (match = ignoreCaseStringTest("tween", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "lk"
                  if (match = ignoreCaseStringTest("lk", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'r':
         case 'R': {
            ++index;
            // ("esource" | "ename" | "evoke" | "ownum" | "owid" | "ows" | "aw" | "ow")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("wnum" | "wid" | "ws" | "w")
                  if (buffer.matchChar(index, 'w') || buffer.matchChar(index, 'W')) {
                     ++index;
                     // ("num" | "id" | "s" | <EMPTY>)
                     switch(buffer.getChar(index)) {
                        case 'n':
                        case 'N': {
                           ++index;
                           // "um"
                           if (match = ignoreCaseStringTest("um", 2)) {
                              index += 2;
                           }
                           break;
                        }
                        case 'i':
                        case 'I': {
                           ++index;
                           // "d"
                           if (match = buffer.matchIgnoreCaseChar(index, 'd')) {
                              ++index;
                           }
                           break;
                        }
                        case 's':
                        case 'S': {
                           ++index;
                           // <EMPTY>
                           match = true;
                           break;
                        }
                        default: {
                           match = true;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // "w"
                  if (match = buffer.matchIgnoreCaseChar(index, 'w')) {
                     ++index;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // ("source" | "name" | "voke")
                  switch(buffer.getChar(index)) {
                     case 'n':
                     case 'N': {
                        ++index;
                        // "ame"
                        if (match = ignoreCaseStringTest("ame", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 'v':
                     case 'V': {
                        ++index;
                        // "oke"
                        if (match = ignoreCaseStringTest("oke", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 's':
                     case 'S': {
                        ++index;
                        // "ource"
                        if (match = ignoreCaseStringTest("ource", 5)) {
                           index += 5;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'c':
         case 'C': {
            ++index;
            // ("ompress" | "luster" | "ollect" | "omment" | "onnect" | "urrent" | "olumn" | "reate" | "heck" | "ase" | "har")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("mpress" | "llect" | "mment" | "nnect" | "lumn")
                  switch(buffer.getChar(index)) {
                     case 'n':
                     case 'N': {
                        ++index;
                        // "nect"
                        if (match = ignoreCaseStringTest("nect", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // ("lect" | "umn")
                        switch(buffer.getChar(index)) {
                           case 'l':
                           case 'L': {
                              ++index;
                              // "ect"
                              if (match = ignoreCaseStringTest("ect", 3)) {
                                 index += 3;
                              }
                              break;
                           }
                           case 'u':
                           case 'U': {
                              ++index;
                              // "mn"
                              if (match = ignoreCaseStringTest("mn", 2)) {
                                 index += 2;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     case 'm':
                     case 'M': {
                        ++index;
                        // ("press" | "ment")
                        switch(buffer.getChar(index)) {
                           case 'p':
                           case 'P': {
                              ++index;
                              // "ress"
                              if (match = ignoreCaseStringTest("ress", 4)) {
                                 index += 4;
                              }
                              break;
                           }
                           case 'm':
                           case 'M': {
                              ++index;
                              // "ent"
                              if (match = ignoreCaseStringTest("ent", 3)) {
                                 index += 3;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'h':
               case 'H': {
                  ++index;
                  // ("eck" | "ar")
                  switch(buffer.getChar(index)) {
                     case 'a':
                     case 'A': {
                        ++index;
                        // "r"
                        if (match = buffer.matchIgnoreCaseChar(index, 'r')) {
                           ++index;
                        }
                        break;
                     }
                     case 'e':
                     case 'E': {
                        ++index;
                        // "ck"
                        if (match = ignoreCaseStringTest("ck", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // "se"
                  if (match = ignoreCaseStringTest("se", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // "eate"
                  if (match = ignoreCaseStringTest("eate", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // "uster"
                  if (match = ignoreCaseStringTest("uster", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "rrent"
                  if (match = ignoreCaseStringTest("rrent", 5)) {
                     index += 5;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 's':
         case 'S': {
            ++index;
            // ("uccessful" | "mallint" | "ession" | "ynonym" | "ysdate" | "elect" | "hare" | "tart" | "ize" | "et")
            switch(buffer.getChar(index)) {
               case 'h':
               case 'H': {
                  ++index;
                  // "are"
                  if (match = ignoreCaseStringTest("are", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'y':
               case 'Y': {
                  ++index;
                  // ("nonym" | "sdate")
                  switch(buffer.getChar(index)) {
                     case 'n':
                     case 'N': {
                        ++index;
                        // "onym"
                        if (match = ignoreCaseStringTest("onym", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 's':
                     case 'S': {
                        ++index;
                        // "date"
                        if (match = ignoreCaseStringTest("date", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "ze"
                  if (match = ignoreCaseStringTest("ze", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 't':
               case 'T': {
                  ++index;
                  // "art"
                  if (match = ignoreCaseStringTest("art", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "ccessful"
                  if (match = ignoreCaseStringTest("ccessful", 8)) {
                     index += 8;
                  }
                  break;
               }
               case 'm':
               case 'M': {
                  ++index;
                  // "allint"
                  if (match = ignoreCaseStringTest("allint", 6)) {
                     index += 6;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // ("ssion" | "lect" | "t")
                  switch(buffer.getChar(index)) {
                     case 's':
                     case 'S': {
                        ++index;
                        // "sion"
                        if (match = ignoreCaseStringTest("sion", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // "ect"
                        if (match = ignoreCaseStringTest("ect", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 't':
                     case 'T': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'd':
         case 'D': {
            ++index;
            // ("istinct" | "ecimal" | "efault" | "elete" | "ate" | "esc" | "rop")
            switch(buffer.getChar(index)) {
               case 'i':
               case 'I': {
                  ++index;
                  // "stinct"
                  if (match = ignoreCaseStringTest("stinct", 6)) {
                     index += 6;
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // "te"
                  if (match = ignoreCaseStringTest("te", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // "op"
                  if (match = ignoreCaseStringTest("op", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // ("cimal" | "fault" | "lete" | "sc")
                  switch(buffer.getChar(index)) {
                     case 'f':
                     case 'F': {
                        ++index;
                        // "ault"
                        if (match = ignoreCaseStringTest("ault", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "imal"
                        if (match = ignoreCaseStringTest("imal", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 's':
                     case 'S': {
                        ++index;
                        // "c"
                        if (match = buffer.matchIgnoreCaseChar(index, 'c')) {
                           ++index;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // "ete"
                        if (match = ignoreCaseStringTest("ete", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 't':
         case 'T': {
            ++index;
            // ("rigger" | "able" | "hen" | "o")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'h':
               case 'H': {
                  ++index;
                  // "en"
                  if (match = ignoreCaseStringTest("en", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // "ble"
                  if (match = ignoreCaseStringTest("ble", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // "igger"
                  if (match = ignoreCaseStringTest("igger", 5)) {
                     index += 5;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'e':
         case 'E': {
            ++index;
            // ("xclusive" | "xists" | "lse")
            switch(buffer.getChar(index)) {
               case 'x':
               case 'X': {
                  ++index;
                  // ("clusive" | "ists")
                  switch(buffer.getChar(index)) {
                     case 'i':
                     case 'I': {
                        ++index;
                        // "sts"
                        if (match = ignoreCaseStringTest("sts", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "lusive"
                        if (match = ignoreCaseStringTest("lusive", 6)) {
                           index += 6;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // "se"
                  if (match = ignoreCaseStringTest("se", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'u':
         case 'U': {
            ++index;
            // ("nique" | "pdate" | "nion" | "sing" | "ser" | "id")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // ("ique" | "ion")
                  if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
                     ++index;
                     // ("que" | "on")
                     switch(buffer.getChar(index)) {
                        case 'o':
                        case 'O': {
                           ++index;
                           // "n"
                           if (match = buffer.matchIgnoreCaseChar(index, 'n')) {
                              ++index;
                           }
                           break;
                        }
                        case 'q':
                        case 'Q': {
                           ++index;
                           // "ue"
                           if (match = ignoreCaseStringTest("ue", 2)) {
                              index += 2;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'p':
               case 'P': {
                  ++index;
                  // "date"
                  if (match = ignoreCaseStringTest("date", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "d"
                  if (match = buffer.matchIgnoreCaseChar(index, 'd')) {
                     ++index;
                  }
                  break;
               }
               case 's':
               case 'S': {
                  ++index;
                  // ("ing" | "er")
                  switch(buffer.getChar(index)) {
                     case 'i':
                     case 'I': {
                        ++index;
                        // "ng"
                        if (match = ignoreCaseStringTest("ng", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'e':
                     case 'E': {
                        ++index;
                        // "r"
                        if (match = buffer.matchIgnoreCaseChar(index, 'r')) {
                           ++index;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_2;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_2, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
      }
      currentRuleIsAtomic = lastAtomic_1;
      index = lastIndex_1;
      lastNode_1.setSibling(null);
      currentNode = lastNode_1;
      match = ! match;
      if (match) {
         // SqlIdentifierPattern
         match = sqlIdentifierPattern$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         sqlIdentifier$RuleMemoStart = startIndex;
         sqlIdentifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlIdentifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIER, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlIdentifier$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlIdentifier$RuleMemoStart = startIndex;
         sqlIdentifier$RuleMemoEnd = -1;
         sqlIdentifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlIdentifierPattern : (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
   protected boolean sqlIdentifierPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
      // 'a'-'z'
      match = charRangeMatcher('a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = charRangeMatcher('A', 'Z');
         if (! match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (! match) {
               // '_'
               match = charMatcher('_');
               if (! match) {
                  // '$'
                  match = charMatcher('$');
                  if (! match) {
                     // '#'
                     match = charMatcher('#');
                  }
               }
            }
         }
      }
      if (match) {
         do {
            // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
            // 'a'-'z'
            match = charRangeMatcher('a', 'z');
            if (! match) {
               // 'A'-'Z'
               match = charRangeMatcher('A', 'Z');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (! match) {
                     // '_'
                     match = charMatcher('_');
                     if (! match) {
                        // '$'
                        match = charMatcher('$');
                        if (! match) {
                           // '#'
                           match = charMatcher('#');
                        }
                     }
                  }
               }
            }
         } while(match);
         match = true;
      }
      if (! match) {
         // ('"' (('\r' | '\n')! .)+ '"')
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '"'
         match = charMatcher('\"');
         if (match) {
            // (('\r' | '\n')! .)+
            // (('\r' | '\n')! .)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('\r' | '\n')!
            // ('\r' | '\n')
            int startIndex_3 = index;
            switch(buffer.getChar(index)) {
               case '\r': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\n': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            index = startIndex_3;
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            }
            if (match) {
               do {
                  // (('\r' | '\n')! .)
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // ('\r' | '\n')!
                  // ('\r' | '\n')
                  int startIndex_5 = index;
                  switch(buffer.getChar(index)) {
                     case '\r': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case '\n': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  index = startIndex_5;
                  match = ! match;
                  if (match) {
                     // .
                     match = anyCharMatcher();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  }
               } while(match);
               match = true;
            }
            if (match) {
               // '"'
               match = charMatcher('\"');
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIER, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlAnyIdentifier : (SqlAnyIdentifierPattern OptionalSpacing)
   protected boolean sqlAnyIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlAnyIdentifier$RuleMemoStart == index) {
         if (sqlAnyIdentifier$RuleMemoStart <= sqlAnyIdentifier$RuleMemoEnd) {
            index = sqlAnyIdentifier$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ANY_IDENTIFIER, sqlAnyIdentifier$RuleMemoStart, sqlAnyIdentifier$RuleMemoEnd, true, true);
               lastNode.setSibling(currentNode);
               if (sqlAnyIdentifier$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlAnyIdentifier$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlAnyIdentifierPattern OptionalSpacing)
      // SqlAnyIdentifierPattern
      match = sqlAnyIdentifierPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         sqlAnyIdentifier$RuleMemoStart = startIndex;
         sqlAnyIdentifier$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlAnyIdentifier$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ANY_IDENTIFIER, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlAnyIdentifier$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlAnyIdentifier$RuleMemoStart = startIndex;
         sqlAnyIdentifier$RuleMemoEnd = -1;
         sqlAnyIdentifier$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlAnyIdentifierPattern : (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
   protected boolean sqlAnyIdentifierPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
      // 'a'-'z'
      match = charRangeMatcher('a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = charRangeMatcher('A', 'Z');
         if (! match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (! match) {
               // '_'
               match = charMatcher('_');
               if (! match) {
                  // '$'
                  match = charMatcher('$');
                  if (! match) {
                     // '#'
                     match = charMatcher('#');
                  }
               }
            }
         }
      }
      if (match) {
         do {
            // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
            // 'a'-'z'
            match = charRangeMatcher('a', 'z');
            if (! match) {
               // 'A'-'Z'
               match = charRangeMatcher('A', 'Z');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (! match) {
                     // '_'
                     match = charMatcher('_');
                     if (! match) {
                        // '$'
                        match = charMatcher('$');
                        if (! match) {
                           // '#'
                           match = charMatcher('#');
                        }
                     }
                  }
               }
            }
         } while(match);
         match = true;
      }
      if (! match) {
         // ('"' (('\r' | '\n')! .)+ '"')
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '"'
         match = charMatcher('\"');
         if (match) {
            // (('\r' | '\n')! .)+
            // (('\r' | '\n')! .)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('\r' | '\n')!
            // ('\r' | '\n')
            int startIndex_3 = index;
            switch(buffer.getChar(index)) {
               case '\r': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\n': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            index = startIndex_3;
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            }
            if (match) {
               do {
                  // (('\r' | '\n')! .)
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // ('\r' | '\n')!
                  // ('\r' | '\n')
                  int startIndex_5 = index;
                  switch(buffer.getChar(index)) {
                     case '\r': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case '\n': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  index = startIndex_5;
                  match = ! match;
                  if (match) {
                     // .
                     match = anyCharMatcher();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  }
               } while(match);
               match = true;
            }
            if (match) {
               // '"'
               match = charMatcher('\"');
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_ANY_IDENTIFIER, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TestNoAlpha : ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')!
   protected boolean testNoAlpha$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (testNoAlpha$RuleMemoStart == index) {
         if (testNoAlpha$RuleMemoStart <= testNoAlpha$RuleMemoEnd) {
            index = testNoAlpha$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.TEST_NO_ALPHA, testNoAlpha$RuleMemoStart, testNoAlpha$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (testNoAlpha$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(testNoAlpha$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')!
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
      // 'a'-'z'
      match = buffer.matchCharRange(index, 'a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = buffer.matchCharRange(index, 'A', 'Z');
         if (! match) {
            // '0'-'9'
            match = buffer.matchCharRange(index, '0', '9');
            if (! match) {
               // '_'
               match = buffer.matchChar(index, '_');
               if (! match) {
                  // '$'
                  match = buffer.matchChar(index, '$');
                  if (! match) {
                     // '#'
                     match = buffer.matchChar(index, '#');
                  }
               }
            }
         }
      }
      match = ! match;
      if (match) {
         testNoAlpha$RuleMemoStart = startIndex;
         testNoAlpha$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            testNoAlpha$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TEST_NO_ALPHA, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            testNoAlpha$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         testNoAlpha$RuleMemoStart = startIndex;
         testNoAlpha$RuleMemoEnd = -1;
         testNoAlpha$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalSpacing : (Spaces | BlockComment | LineComment)*
   protected boolean optionalSpacing$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (optionalSpacing$RuleMemoStart == index) {
         if (optionalSpacing$RuleMemoStart <= optionalSpacing$RuleMemoEnd) {
            index = optionalSpacing$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.OPTIONAL_SPACING, optionalSpacing$RuleMemoStart, optionalSpacing$RuleMemoEnd, false, false);
               lastNode.setSibling(currentNode);
               if (optionalSpacing$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(optionalSpacing$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (Spaces | BlockComment | LineComment)*
      do {
         // (Spaces | BlockComment | LineComment)
         switch(buffer.getChar(index)) {
            case ' ':
            case '\t':
            case '\n':
            case '\f':
            case '\r': {
               // Spaces
               match = spaces$Rule();
               break;
            }
            case '-': {
               // LineComment
               match = lineComment$Rule();
               break;
            }
            case '/': {
               // BlockComment
               match = blockComment$Rule();
               break;
            }
            default: {
               match = false;
            }
         }
      } while(match);
      optionalSpacing$RuleMemoStart = startIndex;
      optionalSpacing$RuleMemoEnd = index;
      if (currentRuleIsAtomic) {
         optionalSpacing$RuleMemoFirstNode = null;
      } else {
         currentNode = new NodeImpl(OraclePlSqlRuleType.OPTIONAL_SPACING, startIndex, index, false, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
         optionalSpacing$RuleMemoFirstNode = currentNode;
      }
      return true;
   }

   //SqlObjectIdentifierList : (SqlObjectIdentifier (',' OptionalSpacing SqlObjectIdentifier)*)
   protected boolean sqlObjectIdentifierList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlObjectIdentifierList$RuleMemoStart == index) {
         if (sqlObjectIdentifierList$RuleMemoStart <= sqlObjectIdentifierList$RuleMemoEnd) {
            index = sqlObjectIdentifierList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_OBJECT_IDENTIFIER_LIST, sqlObjectIdentifierList$RuleMemoStart, sqlObjectIdentifierList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlObjectIdentifierList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlObjectIdentifierList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlObjectIdentifier (',' OptionalSpacing SqlObjectIdentifier)*)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // (',' OptionalSpacing SqlObjectIdentifier)*
         do {
            // (',' OptionalSpacing SqlObjectIdentifier)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlObjectIdentifier
                  match = sqlObjectIdentifier$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         sqlObjectIdentifierList$RuleMemoStart = startIndex;
         sqlObjectIdentifierList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlObjectIdentifierList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_OBJECT_IDENTIFIER_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlObjectIdentifierList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlObjectIdentifierList$RuleMemoStart = startIndex;
         sqlObjectIdentifierList$RuleMemoEnd = -1;
         sqlObjectIdentifierList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlIdentifierList : (SqlIdentifier (',' OptionalSpacing SqlIdentifier)*)
   protected boolean sqlIdentifierList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (sqlIdentifierList$RuleMemoStart == index) {
         if (sqlIdentifierList$RuleMemoStart <= sqlIdentifierList$RuleMemoEnd) {
            index = sqlIdentifierList$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIER_LIST, sqlIdentifierList$RuleMemoStart, sqlIdentifierList$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (sqlIdentifierList$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(sqlIdentifierList$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (SqlIdentifier (',' OptionalSpacing SqlIdentifier)*)
      // SqlIdentifier
      match = sqlIdentifier$Rule();
      if (match) {
         // (',' OptionalSpacing SqlIdentifier)*
         do {
            // (',' OptionalSpacing SqlIdentifier)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // ','
            match = charMatcher(',');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SqlIdentifier
                  match = sqlIdentifier$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         sqlIdentifierList$RuleMemoStart = startIndex;
         sqlIdentifierList$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            sqlIdentifierList$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_IDENTIFIER_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            sqlIdentifierList$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         sqlIdentifierList$RuleMemoStart = startIndex;
         sqlIdentifierList$RuleMemoEnd = -1;
         sqlIdentifierList$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Space : ((' ' | '\r' | '\n' | '\t' | '\f') OptionalSpacing)
   protected boolean space$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (space$RuleMemoStart == index) {
         if (space$RuleMemoStart <= space$RuleMemoEnd) {
            index = space$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SPACE, space$RuleMemoStart, space$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (space$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(space$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // ((' ' | '\r' | '\n' | '\t' | '\f') OptionalSpacing)
      // (' ' | '\r' | '\n' | '\t' | '\f')
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case '\f': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '\r': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case ' ': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '\t': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '\n': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         space$RuleMemoStart = startIndex;
         space$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            space$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SPACE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            space$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         space$RuleMemoStart = startIndex;
         space$RuleMemoEnd = -1;
         space$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Spaces : Space+
   protected boolean spaces$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (spaces$RuleMemoStart == index) {
         if (spaces$RuleMemoStart <= spaces$RuleMemoEnd) {
            index = spaces$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.SPACES, spaces$RuleMemoStart, spaces$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (spaces$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(spaces$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // Space+
      // Space
      match = space$Rule();
      if (match) {
         do {
            // Space
            match = space$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         spaces$RuleMemoStart = startIndex;
         spaces$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            spaces$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SPACES, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            spaces$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         spaces$RuleMemoStart = startIndex;
         spaces$RuleMemoEnd = -1;
         spaces$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BlockComment : ('/*' ('*/'! .)* '*/')
   protected boolean blockComment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (blockComment$RuleMemoStart == index) {
         if (blockComment$RuleMemoStart <= blockComment$RuleMemoEnd) {
            index = blockComment$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.BLOCK_COMMENT, blockComment$RuleMemoStart, blockComment$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (blockComment$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(blockComment$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('/*' ('*/'! .)* '*/')
      // '/*'
      match = stringMatcher("/*", 2);
      if (match) {
         // ('*/'! .)*
         do {
            // ('*/'! .)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '*/'!
            // '*/'
            match = stringTest("*/", 2);
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
         } while(match);
         // '*/'
         match = stringMatcher("*/", 2);
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         blockComment$RuleMemoStart = startIndex;
         blockComment$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            blockComment$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BLOCK_COMMENT, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            blockComment$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         blockComment$RuleMemoStart = startIndex;
         blockComment$RuleMemoEnd = -1;
         blockComment$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NewLine : (('\n' | '\r\n') OptionalSpacing)
   protected boolean newLine$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      if (newLine$RuleMemoStart == index) {
         if (newLine$RuleMemoStart <= newLine$RuleMemoEnd) {
            index = newLine$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.NEW_LINE, newLine$RuleMemoStart, newLine$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (newLine$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(newLine$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      startIndex = index;
      // (('\n' | '\r\n') OptionalSpacing)
      // ('\n' | '\r\n')
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case '\r': {
            ++index;
            // '\n'
            if (match = buffer.matchChar(index, '\n')) {
               ++index;
            }
            break;
         }
         case '\n': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         newLine$RuleMemoStart = startIndex;
         newLine$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            newLine$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NEW_LINE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
            newLine$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         newLine$RuleMemoStart = startIndex;
         newLine$RuleMemoEnd = -1;
         newLine$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LineComment : ('--' ('\n'! .)* (NewLine | <EOI>))
   protected boolean lineComment$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      if (lineComment$RuleMemoStart == index) {
         if (lineComment$RuleMemoStart <= lineComment$RuleMemoEnd) {
            index = lineComment$RuleMemoEnd;
            if (! currentRuleIsAtomic) {
               currentNode = new NodeImpl(OraclePlSqlRuleType.LINE_COMMENT, lineComment$RuleMemoStart, lineComment$RuleMemoEnd, true, false);
               lastNode.setSibling(currentNode);
               if (lineComment$RuleMemoFirstNode != null) {
                  currentNode.setFirstChild(lineComment$RuleMemoFirstNode.getFirstChild());
               }
            }
            return true;
         } else {
            return false;
         }
      }
      currentRuleIsAtomic = true;
      startIndex = index;
      // ('--' ('\n'! .)* (NewLine | <EOI>))
      // '--'
      match = stringMatcher("--", 2);
      if (match) {
         // ('\n'! .)*
         do {
            // ('\n'! .)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // '\n'!
            // '\n'
            match = buffer.matchChar(index, '\n');
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            }
         } while(match);
         // (NewLine | <EOI>)
         // NewLine
         match = newLine$Rule();
         if (! match) {
            // <EOI>
            match = eoi();
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         lineComment$RuleMemoStart = startIndex;
         lineComment$RuleMemoEnd = index;
         if (currentRuleIsAtomic) {
            lineComment$RuleMemoFirstNode = null;
         } else {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LINE_COMMENT, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
            lineComment$RuleMemoFirstNode = currentNode;
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         lineComment$RuleMemoStart = startIndex;
         lineComment$RuleMemoEnd = -1;
         lineComment$RuleMemoFirstNode = null;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Spacing : (Spaces | BlockComment | LineComment)+
   protected boolean spacing$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Spaces | BlockComment | LineComment)+
      // (Spaces | BlockComment | LineComment)
      switch(buffer.getChar(index)) {
         case ' ':
         case '\t':
         case '\n':
         case '\f':
         case '\r': {
            // Spaces
            match = spaces$Rule();
            break;
         }
         case '-': {
            // LineComment
            match = lineComment$Rule();
            break;
         }
         case '/': {
            // BlockComment
            match = blockComment$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         do {
            // (Spaces | BlockComment | LineComment)
            switch(buffer.getChar(index)) {
               case ' ':
               case '\t':
               case '\n':
               case '\f':
               case '\r': {
                  // Spaces
                  match = spaces$Rule();
                  break;
               }
               case '-': {
                  // LineComment
                  match = lineComment$Rule();
                  break;
               }
               case '/': {
                  // BlockComment
                  match = blockComment$Rule();
                  break;
               }
               default: {
                  match = false;
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SPACING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlProgram : (OptionalSpacing PlSqlSource OptionalSpacing)
   protected boolean plSqlProgram$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (OptionalSpacing PlSqlSource OptionalSpacing)
      // OptionalSpacing
      match = optionalSpacing$Rule();
      if (match) {
         // PlSqlSource
         match = plSqlSource$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_PROGRAM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlSource : (CreatePackageBody | CreatePackage | CreateFunction | CreateProcedure | AnonymousPlSqlBlock)
   protected boolean plSqlSource$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CreatePackageBody | CreatePackage | CreateFunction | CreateProcedure | AnonymousPlSqlBlock)
      switch(buffer.getChar(index)) {
         case 'b':
         case 'B':
         case 'd':
         case 'D': {
            // AnonymousPlSqlBlock
            match = anonymousPlSqlBlock$Rule();
            break;
         }
         case 'c':
         case 'C': {
            // CreatePackageBody
            match = createPackageBody$Rule();
            if (! match) {
               // CreatePackage
               match = createPackage$Rule();
               if (! match) {
                  // CreateFunction
                  match = createFunction$Rule();
                  if (! match) {
                     // CreateProcedure
                     match = createProcedure$Rule();
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_SOURCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlExpression : (OptionalAndExpression OrExpression*)
   protected boolean plSqlExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (OptionalAndExpression OrExpression*)
      // OptionalAndExpression
      match = optionalAndExpression$Rule();
      if (match) {
         // OrExpression*
         do {
            // OrExpression
            match = orExpression$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrExpression : ("or" TestNoAlpha OptionalSpacing OptionalAndExpression)
   protected boolean orExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("or" TestNoAlpha OptionalSpacing OptionalAndExpression)
      // "or"
      match = ignoreCaseStringMatcher("or", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // OptionalAndExpression
               match = optionalAndExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OR_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalAndExpression : (LogicalExpression AndExpression*)
   protected boolean optionalAndExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (LogicalExpression AndExpression*)
      // LogicalExpression
      match = logicalExpression$Rule();
      if (match) {
         // AndExpression*
         do {
            // AndExpression
            match = andExpression$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OPTIONAL_AND_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AndExpression : ("and" TestNoAlpha OptionalSpacing LogicalExpression)
   protected boolean andExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("and" TestNoAlpha OptionalSpacing LogicalExpression)
      // "and"
      match = ignoreCaseStringMatcher("and", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // LogicalExpression
               match = logicalExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AND_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LogicalExpression : (NotExpression | RelationalExpression)
   protected boolean logicalExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NotExpression | RelationalExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // RelationalExpression
            match = relationalExpression$Rule();
            break;
         }
         case 'N':
         case 'n': {
            // NotExpression
            match = notExpression$Rule();
            if (! match) {
               // RelationalExpression
               match = relationalExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LOGICAL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NotExpression : ("not" TestNoAlpha OptionalSpacing RelationalExpression)
   protected boolean notExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("not" TestNoAlpha OptionalSpacing RelationalExpression)
      // "not"
      match = ignoreCaseStringMatcher("not", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // RelationalExpression
               match = relationalExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NOT_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RelationalExpression : (ComparisonExpression | InExpression | BetweenExpression | LikeExpression | IsNullExpression | NumericExpression)
   protected boolean relationalExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ComparisonExpression | InExpression | BetweenExpression | LikeExpression | IsNullExpression | NumericExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ComparisonExpression
            match = comparisonExpression$Rule();
            if (! match) {
               // InExpression
               match = inExpression$Rule();
               if (! match) {
                  // BetweenExpression
                  match = betweenExpression$Rule();
                  if (! match) {
                     // LikeExpression
                     match = likeExpression$Rule();
                     if (! match) {
                        // IsNullExpression
                        match = isNullExpression$Rule();
                        if (! match) {
                           // NumericExpression
                           match = numericExpression$Rule();
                        }
                     }
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RELATIONAL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ComparisonExpression : (NumericExpression RelationalOperator PlSqlExpression)
   protected boolean comparisonExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NumericExpression RelationalOperator PlSqlExpression)
      // NumericExpression
      match = numericExpression$Rule();
      if (match) {
         // RelationalOperator
         match = relationalOperator$Rule();
         if (match) {
            // PlSqlExpression
            match = plSqlExpression$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COMPARISON_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InExpression : (NumericExpression Not? "in" TestNoAlpha OptionalSpacing PlSqlExpressionList)
   protected boolean inExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NumericExpression Not? "in" TestNoAlpha OptionalSpacing PlSqlExpressionList)
      // NumericExpression
      match = numericExpression$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "in"
         match = ignoreCaseStringMatcher("in", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // PlSqlExpressionList
                  match = plSqlExpressionList$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IN_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BetweenExpression : (NumericExpression Not? BetweenBounds)
   protected boolean betweenExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NumericExpression Not? BetweenBounds)
      // NumericExpression
      match = numericExpression$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // BetweenBounds
         match = betweenBounds$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BETWEEN_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LikeExpression : (NumericExpression Not? "like" TestNoAlpha OptionalSpacing PlSqlExpression)
   protected boolean likeExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NumericExpression Not? "like" TestNoAlpha OptionalSpacing PlSqlExpression)
      // NumericExpression
      match = numericExpression$Rule();
      if (match) {
         // Not?
         // Not
         not$Rule();
         // "like"
         match = ignoreCaseStringMatcher("like", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // PlSqlExpression
                  match = plSqlExpression$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIKE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsNullExpression : (NumericExpression "is" TestNoAlpha OptionalSpacing Nullable)
   protected boolean isNullExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NumericExpression "is" TestNoAlpha OptionalSpacing Nullable)
      // NumericExpression
      match = numericExpression$Rule();
      if (match) {
         // "is"
         match = ignoreCaseStringMatcher("is", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // Nullable
                  match = nullable$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_NULL_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NumericExpression : (PlSqlMathExpression | PlSqlUnaryExpression | PlSqlAtomicExpression)
   protected boolean numericExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlMathExpression | PlSqlUnaryExpression | PlSqlAtomicExpression)
      switch(buffer.getChar(index)) {
         case '+':
         case '-': {
            // PlSqlMathExpression
            match = plSqlMathExpression$Rule();
            if (! match) {
               // PlSqlUnaryExpression
               match = plSqlUnaryExpression$Rule();
               if (! match) {
                  // PlSqlAtomicExpression
                  match = plSqlAtomicExpression$Rule();
               }
            }
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // PlSqlMathExpression
            match = plSqlMathExpression$Rule();
            if (! match) {
               // PlSqlAtomicExpression
               match = plSqlAtomicExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NUMERIC_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlMathExpression : (PlSqlAtomicExpression SqlMathOperator PlSqlExpression)
   protected boolean plSqlMathExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlAtomicExpression SqlMathOperator PlSqlExpression)
      // PlSqlAtomicExpression
      match = plSqlAtomicExpression$Rule();
      if (match) {
         // SqlMathOperator
         match = sqlMathOperator$Rule();
         if (match) {
            // PlSqlExpression
            match = plSqlExpression$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_MATH_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlUnaryExpression : ((('+' | '-') OptionalSpacing) "Sign" TestNoAlpha OptionalSpacing PlSqlExpression)
   protected boolean plSqlUnaryExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((('+' | '-') OptionalSpacing) "Sign" TestNoAlpha OptionalSpacing PlSqlExpression)
      // (('+' | '-') OptionalSpacing)
      // ('+' | '-')
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case '+': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         case '-': {
            ++index;
            // <EMPTY>
            match = true;
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         // "Sign"
         match = ignoreCaseStringMatcher("Sign", 4);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // PlSqlExpression
                  match = plSqlExpression$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_UNARY_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlParenthesesExpression : ('(' OptionalSpacing PlSqlExpression ')' OptionalSpacing)
   protected boolean plSqlParenthesesExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing PlSqlExpression ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PlSqlExpression
            match = plSqlExpression$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_PARENTHESES_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlCursorAttribute : ("sql" TestNoAlpha OptionalSpacing CursorAttribute)
   protected boolean sqlCursorAttribute$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("sql" TestNoAlpha OptionalSpacing CursorAttribute)
      // "sql"
      match = ignoreCaseStringMatcher("sql", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // CursorAttribute
               match = cursorAttribute$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_CURSOR_ATTRIBUTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlObjectCursor : (PlSqlObjectIdentifier CursorAttribute)
   protected boolean plSqlObjectCursor$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlObjectIdentifier CursorAttribute)
      // PlSqlObjectIdentifier
      match = plSqlObjectIdentifier$Rule();
      if (match) {
         // CursorAttribute
         match = cursorAttribute$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_OBJECT_CURSOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlObjectCollection : (PlSqlObjectIdentifier CollectionAttribute)
   protected boolean plSqlObjectCollection$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlObjectIdentifier CollectionAttribute)
      // PlSqlObjectIdentifier
      match = plSqlObjectIdentifier$Rule();
      if (match) {
         // CollectionAttribute
         match = collectionAttribute$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_OBJECT_COLLECTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //HostVariableCursor : (HostVariable CursorAttribute)
   protected boolean hostVariableCursor$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (HostVariable CursorAttribute)
      // HostVariable
      match = hostVariable$Rule();
      if (match) {
         // CursorAttribute
         match = cursorAttribute$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HOST_VARIABLE_CURSOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlAtomicExpression : (PlSqlParenthesesExpression | PlSqlLiteral | SqlCursorAttribute | PlSqlCaseExpression | PlSqlObjectCursor | PlSqlObjectCollection | PlSqlObjectIdentifier | HostVariableCursor | HostVariable)
   protected boolean plSqlAtomicExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlParenthesesExpression | PlSqlLiteral | SqlCursorAttribute | PlSqlCaseExpression | PlSqlObjectCursor | PlSqlObjectCollection | PlSqlObjectIdentifier | HostVariableCursor | HostVariable)
      switch(buffer.getChar(index)) {
         case '\'':
         case '+':
         case '-': {
            // PlSqlLiteral
            match = plSqlLiteral$Rule();
            break;
         }
         case 'D':
         case 'd':
         case 'F':
         case 'f':
         case 'I':
         case 'i':
         case 'N':
         case 'n':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case 'T':
         case 't':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // PlSqlLiteral
            match = plSqlLiteral$Rule();
            if (! match) {
               // PlSqlObjectCursor
               match = plSqlObjectCursor$Rule();
               if (! match) {
                  // PlSqlObjectCollection
                  match = plSqlObjectCollection$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case 'A':
         case 'B':
         case 'E':
         case 'G':
         case 'H':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case '\"':
         case '#':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // PlSqlObjectCursor
            match = plSqlObjectCursor$Rule();
            if (! match) {
               // PlSqlObjectCollection
               match = plSqlObjectCollection$Rule();
               if (! match) {
                  // PlSqlObjectIdentifier
                  match = plSqlObjectIdentifier$Rule();
               }
            }
            break;
         }
         case 'C':
         case 'c': {
            // PlSqlCaseExpression
            match = plSqlCaseExpression$Rule();
            if (! match) {
               // PlSqlObjectCursor
               match = plSqlObjectCursor$Rule();
               if (! match) {
                  // PlSqlObjectCollection
                  match = plSqlObjectCollection$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case 'S':
         case 's': {
            // SqlCursorAttribute
            match = sqlCursorAttribute$Rule();
            if (! match) {
               // PlSqlObjectCursor
               match = plSqlObjectCursor$Rule();
               if (! match) {
                  // PlSqlObjectCollection
                  match = plSqlObjectCollection$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case '(': {
            // PlSqlParenthesesExpression
            match = plSqlParenthesesExpression$Rule();
            break;
         }
         case ':': {
            // HostVariableCursor
            match = hostVariableCursor$Rule();
            if (! match) {
               // HostVariable
               match = hostVariable$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_ATOMIC_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseExpressionElse : ("else" TestNoAlpha OptionalSpacing PlSqlExpression)
   protected boolean caseExpressionElse$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("else" TestNoAlpha OptionalSpacing PlSqlExpression)
      // "else"
      match = ignoreCaseStringMatcher("else", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_EXPRESSION_ELSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseExpressionWhen : ("when" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlExpression)
   protected boolean caseExpressionWhen$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlExpression)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlExpression
                           match = plSqlExpression$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_EXPRESSION_WHEN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseExpressionWhenList : CaseExpressionWhen+
   protected boolean caseExpressionWhenList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // CaseExpressionWhen+
      // CaseExpressionWhen
      match = caseExpressionWhen$Rule();
      if (match) {
         do {
            // CaseExpressionWhen
            match = caseExpressionWhen$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_EXPRESSION_WHEN_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlCaseExpression : ("case" TestNoAlpha OptionalSpacing PlSqlExpression? CaseExpressionWhenList CaseExpressionElse? "end" TestNoAlpha OptionalSpacing)
   protected boolean plSqlCaseExpression$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("case" TestNoAlpha OptionalSpacing PlSqlExpression? CaseExpressionWhenList CaseExpressionElse? "end" TestNoAlpha OptionalSpacing)
      // "case"
      match = ignoreCaseStringMatcher("case", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression?
               // PlSqlExpression
               plSqlExpression$Rule();
               // CaseExpressionWhenList
               match = caseExpressionWhenList$Rule();
               if (match) {
                  // CaseExpressionElse?
                  // CaseExpressionElse
                  caseExpressionElse$Rule();
                  // "end"
                  match = ignoreCaseStringMatcher("end", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_CASE_EXPRESSION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CollectionAttribute : ('.' OptionalSpacing (("count" TestNoAlpha OptionalSpacing) | ("Count" TestNoAlpha OptionalSpacing) | ("first" TestNoAlpha OptionalSpacing) | ("First" TestNoAlpha OptionalSpacing) | ("last" TestNoAlpha OptionalSpacing) | ("Last" TestNoAlpha OptionalSpacing) | ("limit" TestNoAlpha OptionalSpacing) | ("Limit" TestNoAlpha OptionalSpacing) | ("exists" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Exists" TestNoAlpha OptionalSpacing) | ("next" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Next" TestNoAlpha OptionalSpacing) | ("prior" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Prior" TestNoAlpha OptionalSpacing)))
   protected boolean collectionAttribute$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('.' OptionalSpacing (("count" TestNoAlpha OptionalSpacing) | ("Count" TestNoAlpha OptionalSpacing) | ("first" TestNoAlpha OptionalSpacing) | ("First" TestNoAlpha OptionalSpacing) | ("last" TestNoAlpha OptionalSpacing) | ("Last" TestNoAlpha OptionalSpacing) | ("limit" TestNoAlpha OptionalSpacing) | ("Limit" TestNoAlpha OptionalSpacing) | ("exists" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Exists" TestNoAlpha OptionalSpacing) | ("next" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Next" TestNoAlpha OptionalSpacing) | ("prior" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Prior" TestNoAlpha OptionalSpacing)))
      // '.'
      match = charMatcher('.');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // (("count" TestNoAlpha OptionalSpacing) | ("Count" TestNoAlpha OptionalSpacing) | ("first" TestNoAlpha OptionalSpacing) | ("First" TestNoAlpha OptionalSpacing) | ("last" TestNoAlpha OptionalSpacing) | ("Last" TestNoAlpha OptionalSpacing) | ("limit" TestNoAlpha OptionalSpacing) | ("Limit" TestNoAlpha OptionalSpacing) | ("exists" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Exists" TestNoAlpha OptionalSpacing) | ("next" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Next" TestNoAlpha OptionalSpacing) | ("prior" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression) | ("Prior" TestNoAlpha OptionalSpacing))
            // ("count" TestNoAlpha OptionalSpacing)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // "count"
            match = ignoreCaseStringMatcher("count", 5);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            }
            if (! match) {
               // ("Count" TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // "Count"
               match = ignoreCaseStringMatcher("Count", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               if (! match) {
                  // ("first" TestNoAlpha OptionalSpacing)
                  Node lastNode_3 = currentNode;
                  int lastIndex_3 = index;
                  // "first"
                  match = ignoreCaseStringMatcher("first", 5);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_3;
                           lastNode_3.setSibling(null);
                           currentNode = lastNode_3;
                        }
                     } else {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("First" TestNoAlpha OptionalSpacing)
                     Node lastNode_4 = currentNode;
                     int lastIndex_4 = index;
                     // "First"
                     match = ignoreCaseStringMatcher("First", 5);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_4;
                              lastNode_4.setSibling(null);
                              currentNode = lastNode_4;
                           }
                        } else {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("last" TestNoAlpha OptionalSpacing)
                        Node lastNode_5 = currentNode;
                        int lastIndex_5 = index;
                        // "last"
                        match = ignoreCaseStringMatcher("last", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_5;
                                 lastNode_5.setSibling(null);
                                 currentNode = lastNode_5;
                              }
                           } else {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ("Last" TestNoAlpha OptionalSpacing)
                           Node lastNode_6 = currentNode;
                           int lastIndex_6 = index;
                           // "Last"
                           match = ignoreCaseStringMatcher("Last", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_6;
                                    lastNode_6.setSibling(null);
                                    currentNode = lastNode_6;
                                 }
                              } else {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ("limit" TestNoAlpha OptionalSpacing)
                              Node lastNode_7 = currentNode;
                              int lastIndex_7 = index;
                              // "limit"
                              match = ignoreCaseStringMatcher("limit", 5);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_7;
                                       lastNode_7.setSibling(null);
                                       currentNode = lastNode_7;
                                    }
                                 } else {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                 }
                              }
                              if (! match) {
                                 // ("Limit" TestNoAlpha OptionalSpacing)
                                 Node lastNode_8 = currentNode;
                                 int lastIndex_8 = index;
                                 // "Limit"
                                 match = ignoreCaseStringMatcher("Limit", 5);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_8;
                                          lastNode_8.setSibling(null);
                                          currentNode = lastNode_8;
                                       }
                                    } else {
                                       index = lastIndex_8;
                                       lastNode_8.setSibling(null);
                                    }
                                 }
                                 if (! match) {
                                    // ("exists" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression)
                                    Node lastNode_9 = currentNode;
                                    int lastIndex_9 = index;
                                    // "exists"
                                    match = ignoreCaseStringMatcher("exists", 6);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // PlSqlParenthesesExpression
                                             match = plSqlParenthesesExpression$Rule();
                                             if (! match) {
                                                index = lastIndex_9;
                                                lastNode_9.setSibling(null);
                                                currentNode = lastNode_9;
                                             }
                                          } else {
                                             index = lastIndex_9;
                                             lastNode_9.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_9;
                                          lastNode_9.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // ("Exists" TestNoAlpha OptionalSpacing)
                                       Node lastNode_10 = currentNode;
                                       int lastIndex_10 = index;
                                       // "Exists"
                                       match = ignoreCaseStringMatcher("Exists", 6);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_10;
                                                lastNode_10.setSibling(null);
                                                currentNode = lastNode_10;
                                             }
                                          } else {
                                             index = lastIndex_10;
                                             lastNode_10.setSibling(null);
                                          }
                                       }
                                       if (! match) {
                                          // ("next" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression)
                                          Node lastNode_11 = currentNode;
                                          int lastIndex_11 = index;
                                          // "next"
                                          match = ignoreCaseStringMatcher("next", 4);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // PlSqlParenthesesExpression
                                                   match = plSqlParenthesesExpression$Rule();
                                                   if (! match) {
                                                      index = lastIndex_11;
                                                      lastNode_11.setSibling(null);
                                                      currentNode = lastNode_11;
                                                   }
                                                } else {
                                                   index = lastIndex_11;
                                                   lastNode_11.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_11;
                                                lastNode_11.setSibling(null);
                                             }
                                          }
                                          if (! match) {
                                             // ("Next" TestNoAlpha OptionalSpacing)
                                             Node lastNode_12 = currentNode;
                                             int lastIndex_12 = index;
                                             // "Next"
                                             match = ignoreCaseStringMatcher("Next", 4);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (! match) {
                                                      index = lastIndex_12;
                                                      lastNode_12.setSibling(null);
                                                      currentNode = lastNode_12;
                                                   }
                                                } else {
                                                   index = lastIndex_12;
                                                   lastNode_12.setSibling(null);
                                                }
                                             }
                                             if (! match) {
                                                // ("prior" TestNoAlpha OptionalSpacing PlSqlParenthesesExpression)
                                                Node lastNode_13 = currentNode;
                                                int lastIndex_13 = index;
                                                // "prior"
                                                match = ignoreCaseStringMatcher("prior", 5);
                                                if (match) {
                                                   // TestNoAlpha
                                                   match = testNoAlpha$Rule();
                                                   if (match) {
                                                      // OptionalSpacing
                                                      match = optionalSpacing$Rule();
                                                      if (match) {
                                                         // PlSqlParenthesesExpression
                                                         match = plSqlParenthesesExpression$Rule();
                                                         if (! match) {
                                                            index = lastIndex_13;
                                                            lastNode_13.setSibling(null);
                                                            currentNode = lastNode_13;
                                                         }
                                                      } else {
                                                         index = lastIndex_13;
                                                         lastNode_13.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_13;
                                                      lastNode_13.setSibling(null);
                                                   }
                                                }
                                                if (! match) {
                                                   // ("Prior" TestNoAlpha OptionalSpacing)
                                                   Node lastNode_14 = currentNode;
                                                   int lastIndex_14 = index;
                                                   // "Prior"
                                                   match = ignoreCaseStringMatcher("Prior", 5);
                                                   if (match) {
                                                      // TestNoAlpha
                                                      match = testNoAlpha$Rule();
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (! match) {
                                                            index = lastIndex_14;
                                                            lastNode_14.setSibling(null);
                                                            currentNode = lastNode_14;
                                                         }
                                                      } else {
                                                         index = lastIndex_14;
                                                         lastNode_14.setSibling(null);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLLECTION_ATTRIBUTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorAttribute : ('%' OptionalSpacing PlSqlObjectIdentifier)
   protected boolean cursorAttribute$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('%' OptionalSpacing PlSqlObjectIdentifier)
      // '%'
      match = charMatcher('%');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PlSqlObjectIdentifier
            match = plSqlObjectIdentifier$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_ATTRIBUTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IsAsKeyword : (("is" | "as") TestNoAlpha OptionalSpacing)
   protected boolean isAsKeyword$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("is" | "as") TestNoAlpha OptionalSpacing)
      // ("is" | "as")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'i':
         case 'I': {
            ++index;
            // "s"
            if (match = buffer.matchIgnoreCaseChar(index, 's')) {
               ++index;
            }
            break;
         }
         case 'a':
         case 'A': {
            ++index;
            // "s"
            if (match = buffer.matchIgnoreCaseChar(index, 's')) {
               ++index;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IS_AS_KEYWORD, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DeclarationSection : ("declare" TestNoAlpha OptionalSpacing DeclareSection?)
   protected boolean declarationSection$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("declare" TestNoAlpha OptionalSpacing DeclareSection?)
      // "declare"
      match = ignoreCaseStringMatcher("declare", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // DeclareSection?
               // DeclareSection
               declareSection$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DECLARATION_SECTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //EndBlock : ("end" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier?)
   protected boolean endBlock$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("end" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier?)
      // "end"
      match = ignoreCaseStringMatcher("end", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier?
               // PlSqlAnyIdentifier
               plSqlAnyIdentifier$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.END_BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PackageBody : (EndBlock | PlSqlBody)
   protected boolean packageBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (EndBlock | PlSqlBody)
      switch(buffer.getChar(index)) {
         case 'b':
         case 'B': {
            // PlSqlBody
            match = plSqlBody$Rule();
            break;
         }
         case 'e':
         case 'E': {
            // EndBlock
            match = endBlock$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PACKAGE_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CreatePackageBody : (CreateOrReplace "package" TestNoAlpha OptionalSpacing "body" TestNoAlpha OptionalSpacing SchemaObjectName IsAsKeyword DeclareSection? PackageBody ';' OptionalSpacing)
   protected boolean createPackageBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CreateOrReplace "package" TestNoAlpha OptionalSpacing "body" TestNoAlpha OptionalSpacing SchemaObjectName IsAsKeyword DeclareSection? PackageBody ';' OptionalSpacing)
      // CreateOrReplace
      match = createOrReplace$Rule();
      if (match) {
         // "package"
         match = ignoreCaseStringMatcher("package", 7);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // "body"
                  match = ignoreCaseStringMatcher("body", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // SchemaObjectName
                           match = schemaObjectName$Rule();
                           if (match) {
                              // IsAsKeyword
                              match = isAsKeyword$Rule();
                              if (match) {
                                 // DeclareSection?
                                 // DeclareSection
                                 declareSection$Rule();
                                 // PackageBody
                                 match = packageBody$Rule();
                                 if (match) {
                                    // ';'
                                    match = charMatcher(';');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CREATE_PACKAGE_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AuthIdCurrentUser : ("authid" TestNoAlpha OptionalSpacing "current_user" TestNoAlpha OptionalSpacing)
   protected boolean authIdCurrentUser$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("authid" TestNoAlpha OptionalSpacing "current_user" TestNoAlpha OptionalSpacing)
      // "authid"
      match = ignoreCaseStringMatcher("authid", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "current_user"
               match = ignoreCaseStringMatcher("current_user", 12);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AUTH_ID_CURRENT_USER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AuthIdDefiner : ("authid" TestNoAlpha OptionalSpacing "definer" TestNoAlpha OptionalSpacing)
   protected boolean authIdDefiner$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("authid" TestNoAlpha OptionalSpacing "definer" TestNoAlpha OptionalSpacing)
      // "authid"
      match = ignoreCaseStringMatcher("authid", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "definer"
               match = ignoreCaseStringMatcher("definer", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.AUTH_ID_DEFINER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //InvokerRights : (AuthIdCurrentUser | AuthIdDefiner)
   protected boolean invokerRights$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (AuthIdCurrentUser | AuthIdDefiner)
      switch(buffer.getChar(index)) {
         case 'a':
         case 'A': {
            // AuthIdCurrentUser
            match = authIdCurrentUser$Rule();
            if (! match) {
               // AuthIdDefiner
               match = authIdDefiner$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INVOKER_RIGHTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CreatePackage : (CreateOrReplace "package" TestNoAlpha OptionalSpacing SchemaObjectName InvokerRights? IsAsKeyword ItemList1? "DeclareSection" TestNoAlpha OptionalSpacing "end" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)? ';' OptionalSpacing)
   protected boolean createPackage$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CreateOrReplace "package" TestNoAlpha OptionalSpacing SchemaObjectName InvokerRights? IsAsKeyword ItemList1? "DeclareSection" TestNoAlpha OptionalSpacing "end" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)? ';' OptionalSpacing)
      // CreateOrReplace
      match = createOrReplace$Rule();
      if (match) {
         // "package"
         match = ignoreCaseStringMatcher("package", 7);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // SchemaObjectName
                  match = schemaObjectName$Rule();
                  if (match) {
                     // InvokerRights?
                     // InvokerRights
                     invokerRights$Rule();
                     // IsAsKeyword
                     match = isAsKeyword$Rule();
                     if (match) {
                        // ItemList1?
                        // ItemList1
                        itemList1$Rule();
                        // "DeclareSection"
                        match = ignoreCaseStringMatcher("DeclareSection", 14);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // "end"
                                 match = ignoreCaseStringMatcher("end", 3);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?
                                          // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)
                                          Node lastNode_1 = currentNode;
                                          int lastIndex_1 = index;
                                          // PlSqlAnyIdentifier
                                          match = plSqlAnyIdentifier$Rule();
                                          if (match) {
                                             // "EndIdentifier"
                                             match = ignoreCaseStringMatcher("EndIdentifier", 13);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (! match) {
                                                      index = lastIndex_1;
                                                      lastNode_1.setSibling(null);
                                                      currentNode = lastNode_1;
                                                   }
                                                } else {
                                                   index = lastIndex_1;
                                                   lastNode_1.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                             }
                                          }
                                          // ';'
                                          match = charMatcher(';');
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CREATE_PACKAGE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExternalCParameter : (PlSqlIdentifier PlSqlIdentifier?)
   protected boolean externalCParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier PlSqlIdentifier?)
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (match) {
         // PlSqlIdentifier?
         // PlSqlIdentifier
         plSqlIdentifier$Rule();
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXTERNAL_CPARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExternalCParametersDeclaration : ('(' OptionalSpacing ExternalCParameter (',' OptionalSpacing ExternalCParameter)* ')' OptionalSpacing)
   protected boolean externalCParametersDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing ExternalCParameter (',' OptionalSpacing ExternalCParameter)* ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ExternalCParameter
            match = externalCParameter$Rule();
            if (match) {
               // (',' OptionalSpacing ExternalCParameter)*
               do {
                  // (',' OptionalSpacing ExternalCParameter)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ExternalCParameter
                        match = externalCParameter$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXTERNAL_CPARAMETERS_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CallJavaSpec : ("language" TestNoAlpha OptionalSpacing "java" TestNoAlpha OptionalSpacing "name" TestNoAlpha OptionalSpacing StringLiteral)
   protected boolean callJavaSpec$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("language" TestNoAlpha OptionalSpacing "java" TestNoAlpha OptionalSpacing "name" TestNoAlpha OptionalSpacing StringLiteral)
      // "language"
      match = ignoreCaseStringMatcher("language", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "java"
               match = ignoreCaseStringMatcher("java", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "name"
                        match = ignoreCaseStringMatcher("name", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // StringLiteral
                                 match = stringLiteral$Rule();
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CALL_JAVA_SPEC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CallCSpec : ("language" TestNoAlpha OptionalSpacing "c" TestNoAlpha OptionalSpacing ("name" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier)? "library" TestNoAlpha OptionalSpacing PlSqlIdentifier ("agent" TestNoAlpha OptionalSpacing "in" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlIdentifier (',' OptionalSpacing PlSqlIdentifier)* ')' OptionalSpacing)? ("with" TestNoAlpha OptionalSpacing "context" TestNoAlpha OptionalSpacing)? ("parameters" TestNoAlpha OptionalSpacing ExternalCParametersDeclaration)?)
   protected boolean callCSpec$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("language" TestNoAlpha OptionalSpacing "c" TestNoAlpha OptionalSpacing ("name" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier)? "library" TestNoAlpha OptionalSpacing PlSqlIdentifier ("agent" TestNoAlpha OptionalSpacing "in" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlIdentifier (',' OptionalSpacing PlSqlIdentifier)* ')' OptionalSpacing)? ("with" TestNoAlpha OptionalSpacing "context" TestNoAlpha OptionalSpacing)? ("parameters" TestNoAlpha OptionalSpacing ExternalCParametersDeclaration)?)
      // "language"
      match = ignoreCaseStringMatcher("language", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "c"
               match = ignoreCaseCharMatcher('c');
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ("name" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier)?
                        // ("name" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // "name"
                        match = ignoreCaseStringMatcher("name", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // PlSqlAnyIdentifier
                                 match = plSqlAnyIdentifier$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        // "library"
                        match = ignoreCaseStringMatcher("library", 7);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // PlSqlIdentifier
                                 match = plSqlIdentifier$Rule();
                                 if (match) {
                                    // ("agent" TestNoAlpha OptionalSpacing "in" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlIdentifier (',' OptionalSpacing PlSqlIdentifier)* ')' OptionalSpacing)?
                                    // ("agent" TestNoAlpha OptionalSpacing "in" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlIdentifier (',' OptionalSpacing PlSqlIdentifier)* ')' OptionalSpacing)
                                    Node lastNode_2 = currentNode;
                                    int lastIndex_2 = index;
                                    // "agent"
                                    match = ignoreCaseStringMatcher("agent", 5);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // "in"
                                             match = ignoreCaseStringMatcher("in", 2);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // '('
                                                      match = charMatcher('(');
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (match) {
                                                            // PlSqlIdentifier
                                                            match = plSqlIdentifier$Rule();
                                                            if (match) {
                                                               // (',' OptionalSpacing PlSqlIdentifier)*
                                                               do {
                                                                  // (',' OptionalSpacing PlSqlIdentifier)
                                                                  Node lastNode_3 = currentNode;
                                                                  int lastIndex_3 = index;
                                                                  // ','
                                                                  match = charMatcher(',');
                                                                  if (match) {
                                                                     // OptionalSpacing
                                                                     match = optionalSpacing$Rule();
                                                                     if (match) {
                                                                        // PlSqlIdentifier
                                                                        match = plSqlIdentifier$Rule();
                                                                        if (! match) {
                                                                           index = lastIndex_3;
                                                                           lastNode_3.setSibling(null);
                                                                           currentNode = lastNode_3;
                                                                        }
                                                                     } else {
                                                                        index = lastIndex_3;
                                                                        lastNode_3.setSibling(null);
                                                                     }
                                                                  }
                                                               } while(match);
                                                               // ')'
                                                               match = charMatcher(')');
                                                               if (match) {
                                                                  // OptionalSpacing
                                                                  match = optionalSpacing$Rule();
                                                                  if (! match) {
                                                                     index = lastIndex_2;
                                                                     lastNode_2.setSibling(null);
                                                                     currentNode = lastNode_2;
                                                                  }
                                                               } else {
                                                                  index = lastIndex_2;
                                                                  lastNode_2.setSibling(null);
                                                               }
                                                            } else {
                                                               index = lastIndex_2;
                                                               lastNode_2.setSibling(null);
                                                            }
                                                         } else {
                                                            index = lastIndex_2;
                                                            lastNode_2.setSibling(null);
                                                         }
                                                      } else {
                                                         index = lastIndex_2;
                                                         lastNode_2.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_2;
                                                      lastNode_2.setSibling(null);
                                                   }
                                                } else {
                                                   index = lastIndex_2;
                                                   lastNode_2.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_2;
                                                lastNode_2.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_2;
                                             lastNode_2.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_2;
                                          lastNode_2.setSibling(null);
                                       }
                                    }
                                    match = true;
                                    // ("with" TestNoAlpha OptionalSpacing "context" TestNoAlpha OptionalSpacing)?
                                    // ("with" TestNoAlpha OptionalSpacing "context" TestNoAlpha OptionalSpacing)
                                    Node lastNode_4 = currentNode;
                                    int lastIndex_4 = index;
                                    // "with"
                                    match = ignoreCaseStringMatcher("with", 4);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // "context"
                                             match = ignoreCaseStringMatcher("context", 7);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (! match) {
                                                      index = lastIndex_4;
                                                      lastNode_4.setSibling(null);
                                                      currentNode = lastNode_4;
                                                   }
                                                } else {
                                                   index = lastIndex_4;
                                                   lastNode_4.setSibling(null);
                                                }
                                             } else {
                                                index = lastIndex_4;
                                                lastNode_4.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_4;
                                             lastNode_4.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_4;
                                          lastNode_4.setSibling(null);
                                       }
                                    }
                                    match = true;
                                    // ("parameters" TestNoAlpha OptionalSpacing ExternalCParametersDeclaration)?
                                    // ("parameters" TestNoAlpha OptionalSpacing ExternalCParametersDeclaration)
                                    Node lastNode_5 = currentNode;
                                    int lastIndex_5 = index;
                                    // "parameters"
                                    match = ignoreCaseStringMatcher("parameters", 10);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // ExternalCParametersDeclaration
                                             match = externalCParametersDeclaration$Rule();
                                             if (! match) {
                                                index = lastIndex_5;
                                                lastNode_5.setSibling(null);
                                                currentNode = lastNode_5;
                                             }
                                          } else {
                                             index = lastIndex_5;
                                             lastNode_5.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_5;
                                          lastNode_5.setSibling(null);
                                       }
                                    }
                                    match = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CALL_CSPEC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CallSpec : (CallJavaSpec | CallCSpec)
   protected boolean callSpec$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CallJavaSpec | CallCSpec)
      switch(buffer.getChar(index)) {
         case 'l':
         case 'L': {
            // CallJavaSpec
            match = callJavaSpec$Rule();
            if (! match) {
               // CallCSpec
               match = callCSpec$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CALL_SPEC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PragmaOrStatement : (Pragma | PlSqlStatement)
   protected boolean pragmaOrStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Pragma | PlSqlStatement)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '(':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case '<':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // PlSqlStatement
            match = plSqlStatement$Rule();
            break;
         }
         case 'P':
         case 'p': {
            // Pragma
            match = pragma$Rule();
            if (! match) {
               // PlSqlStatement
               match = plSqlStatement$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRAGMA_OR_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlBodyStatements : (PragmaOrStatement ';' OptionalSpacing (PragmaOrStatement ';' OptionalSpacing)*)
   protected boolean plSqlBodyStatements$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PragmaOrStatement ';' OptionalSpacing (PragmaOrStatement ';' OptionalSpacing)*)
      // PragmaOrStatement
      match = pragmaOrStatement$Rule();
      if (match) {
         // ';'
         match = charMatcher(';');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (PragmaOrStatement ';' OptionalSpacing)*
               do {
                  // (PragmaOrStatement ';' OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // PragmaOrStatement
                  match = pragmaOrStatement$Rule();
                  if (match) {
                     // ';'
                     match = charMatcher(';');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_BODY_STATEMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlBody : ("begin" TestNoAlpha OptionalSpacing PlSqlBodyStatements? ExceptionBlock? "end" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
   protected boolean plSqlBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("begin" TestNoAlpha OptionalSpacing PlSqlBodyStatements? ExceptionBlock? "end" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
      // "begin"
      match = ignoreCaseStringMatcher("begin", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlBodyStatements?
               // PlSqlBodyStatements
               plSqlBodyStatements$Rule();
               // ExceptionBlock?
               // ExceptionBlock
               exceptionBlock$Rule();
               // "end"
               match = ignoreCaseStringMatcher("end", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?
                        // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // PlSqlAnyIdentifier
                        match = plSqlAnyIdentifier$Rule();
                        if (match) {
                           // "EndIdentifier"
                           match = ignoreCaseStringMatcher("EndIdentifier", 13);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                    currentNode = lastNode_1;
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        match = true;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FunctionBody : ((DeclareSection "DeclarationSection" TestNoAlpha OptionalSpacing)? PlSqlBlock)
   protected boolean functionBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((DeclareSection "DeclarationSection" TestNoAlpha OptionalSpacing)? PlSqlBlock)
      // (DeclareSection "DeclarationSection" TestNoAlpha OptionalSpacing)?
      // (DeclareSection "DeclarationSection" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // DeclareSection
      match = declareSection$Rule();
      if (match) {
         // "DeclarationSection"
         match = ignoreCaseStringMatcher("DeclarationSection", 18);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // PlSqlBlock
      match = plSqlBlock$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FUNCTION_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CallSpecOrFunctionBody : (CallSpec | FunctionBody)
   protected boolean callSpecOrFunctionBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CallSpec | FunctionBody)
      switch(buffer.getChar(index)) {
         case 'L':
         case 'l': {
            // CallSpec
            match = callSpec$Rule();
            if (! match) {
               // FunctionBody
               match = functionBody$Rule();
            }
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case '<':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // FunctionBody
            match = functionBody$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CALL_SPEC_OR_FUNCTION_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CreateFunction : (CreateOrReplace FunctionDefinition ';' OptionalSpacing)
   protected boolean createFunction$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CreateOrReplace FunctionDefinition ';' OptionalSpacing)
      // CreateOrReplace
      match = createOrReplace$Rule();
      if (match) {
         // FunctionDefinition
         match = functionDefinition$Rule();
         if (match) {
            // ';'
            match = charMatcher(';');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CREATE_FUNCTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FunctionDefinition : (FunctionHeading FunctionModifier IsAsKeyword CallSpecOrFunctionBody)
   protected boolean functionDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (FunctionHeading FunctionModifier IsAsKeyword CallSpecOrFunctionBody)
      // FunctionHeading
      match = functionHeading$Rule();
      if (match) {
         // FunctionModifier
         match = functionModifier$Rule();
         if (match) {
            // IsAsKeyword
            match = isAsKeyword$Rule();
            if (match) {
               // CallSpecOrFunctionBody
               match = callSpecOrFunctionBody$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FUNCTION_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CreateProcedure : (CreateOrReplace ProcedureDefinition ';' OptionalSpacing)
   protected boolean createProcedure$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (CreateOrReplace ProcedureDefinition ';' OptionalSpacing)
      // CreateOrReplace
      match = createOrReplace$Rule();
      if (match) {
         // ProcedureDefinition
         match = procedureDefinition$Rule();
         if (match) {
            // ';'
            match = charMatcher(';');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CREATE_PROCEDURE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ProcedureDefinition : (ProcedureHeading IsAsKeyword CallSpecOrFunctionBody)
   protected boolean procedureDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ProcedureHeading IsAsKeyword CallSpecOrFunctionBody)
      // ProcedureHeading
      match = procedureHeading$Rule();
      if (match) {
         // IsAsKeyword
         match = isAsKeyword$Rule();
         if (match) {
            // CallSpecOrFunctionBody
            match = callSpecOrFunctionBody$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PROCEDURE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CreateOrReplace : ("create" TestNoAlpha OptionalSpacing ("or" TestNoAlpha OptionalSpacing "replace" TestNoAlpha OptionalSpacing)?)
   protected boolean createOrReplace$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("create" TestNoAlpha OptionalSpacing ("or" TestNoAlpha OptionalSpacing "replace" TestNoAlpha OptionalSpacing)?)
      // "create"
      match = ignoreCaseStringMatcher("create", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("or" TestNoAlpha OptionalSpacing "replace" TestNoAlpha OptionalSpacing)?
               // ("or" TestNoAlpha OptionalSpacing "replace" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "or"
               match = ignoreCaseStringMatcher("or", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "replace"
                        match = ignoreCaseStringMatcher("replace", 7);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CREATE_OR_REPLACE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemList1First : (TypeDefinition | FunctionDeclaration | ProcedureDeclaration | ItemDeclaration)
   protected boolean itemList1First$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (TypeDefinition | FunctionDeclaration | ProcedureDeclaration | ItemDeclaration)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'Q':
         case 'R':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'q':
         case 'r':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ItemDeclaration
            match = itemDeclaration$Rule();
            break;
         }
         case 'P':
         case 'p': {
            // ProcedureDeclaration
            match = procedureDeclaration$Rule();
            if (! match) {
               // ItemDeclaration
               match = itemDeclaration$Rule();
            }
            break;
         }
         case 'S':
         case 's':
         case 'T':
         case 't': {
            // TypeDefinition
            match = typeDefinition$Rule();
            if (! match) {
               // ItemDeclaration
               match = itemDeclaration$Rule();
            }
            break;
         }
         case 'F':
         case 'f': {
            // FunctionDeclaration
            match = functionDeclaration$Rule();
            if (! match) {
               // ItemDeclaration
               match = itemDeclaration$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_LIST1_FIRST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemList1Second : (TypeDefinition | ProcedureDeclaration | FunctionDeclaration | Pragma | ItemDeclaration)
   protected boolean itemList1Second$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (TypeDefinition | ProcedureDeclaration | FunctionDeclaration | Pragma | ItemDeclaration)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'Q':
         case 'R':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'q':
         case 'r':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ItemDeclaration
            match = itemDeclaration$Rule();
            break;
         }
         case 'P':
         case 'p': {
            // ProcedureDeclaration
            match = procedureDeclaration$Rule();
            if (! match) {
               // Pragma
               match = pragma$Rule();
               if (! match) {
                  // ItemDeclaration
                  match = itemDeclaration$Rule();
               }
            }
            break;
         }
         case 'S':
         case 's':
         case 'T':
         case 't': {
            // TypeDefinition
            match = typeDefinition$Rule();
            if (! match) {
               // ItemDeclaration
               match = itemDeclaration$Rule();
            }
            break;
         }
         case 'F':
         case 'f': {
            // FunctionDeclaration
            match = functionDeclaration$Rule();
            if (! match) {
               // ItemDeclaration
               match = itemDeclaration$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_LIST1_SECOND, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemList1 : (ItemList1First ';' OptionalSpacing (ItemList1Second ';' OptionalSpacing)*)
   protected boolean itemList1$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ItemList1First ';' OptionalSpacing (ItemList1Second ';' OptionalSpacing)*)
      // ItemList1First
      match = itemList1First$Rule();
      if (match) {
         // ';'
         match = charMatcher(';');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (ItemList1Second ';' OptionalSpacing)*
               do {
                  // (ItemList1Second ';' OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ItemList1Second
                  match = itemList1Second$Rule();
                  if (match) {
                     // ';'
                     match = charMatcher(';');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_LIST1, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemList2First : (FunctionDefinition | FunctionDeclaration | ProcedureDefinition | ProcedureDeclaration)
   protected boolean itemList2First$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (FunctionDefinition | FunctionDeclaration | ProcedureDefinition | ProcedureDeclaration)
      switch(buffer.getChar(index)) {
         case 'p':
         case 'P': {
            // ProcedureDefinition
            match = procedureDefinition$Rule();
            if (! match) {
               // ProcedureDeclaration
               match = procedureDeclaration$Rule();
            }
            break;
         }
         case 'f':
         case 'F': {
            // FunctionDefinition
            match = functionDefinition$Rule();
            if (! match) {
               // FunctionDeclaration
               match = functionDeclaration$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_LIST2_FIRST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemList2Second : (FunctionDefinition | FunctionDeclaration | ProcedureDefinition | ProcedureDeclaration | Pragma)
   protected boolean itemList2Second$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (FunctionDefinition | FunctionDeclaration | ProcedureDefinition | ProcedureDeclaration | Pragma)
      switch(buffer.getChar(index)) {
         case 'p':
         case 'P': {
            // ProcedureDefinition
            match = procedureDefinition$Rule();
            if (! match) {
               // ProcedureDeclaration
               match = procedureDeclaration$Rule();
               if (! match) {
                  // Pragma
                  match = pragma$Rule();
               }
            }
            break;
         }
         case 'f':
         case 'F': {
            // FunctionDefinition
            match = functionDefinition$Rule();
            if (! match) {
               // FunctionDeclaration
               match = functionDeclaration$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_LIST2_SECOND, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemList2 : (ItemList2First ';' OptionalSpacing (ItemList2Second ';' OptionalSpacing)*)
   protected boolean itemList2$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ItemList2First ';' OptionalSpacing (ItemList2Second ';' OptionalSpacing)*)
      // ItemList2First
      match = itemList2First$Rule();
      if (match) {
         // ';'
         match = charMatcher(';');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (ItemList2Second ';' OptionalSpacing)*
               do {
                  // (ItemList2Second ';' OptionalSpacing)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ItemList2Second
                  match = itemList2Second$Rule();
                  if (match) {
                     // ';'
                     match = charMatcher(';');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_LIST2, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DeclareSection : ((ItemList1 ItemList2?) | ItemList2)
   protected boolean declareSection$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((ItemList1 ItemList2?) | ItemList2)
      // (ItemList1 ItemList2?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // ItemList1
      match = itemList1$Rule();
      if (match) {
         // ItemList2?
         // ItemList2
         itemList2$Rule();
         match = true;
      }
      if (! match) {
         // ItemList2
         match = itemList2$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DECLARE_SECTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeDefinition : (RecordTypeDefinition | RefCursorTypeDefinition | SubtypeDefinition | CollectionTypeDefinition)
   protected boolean typeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (RecordTypeDefinition | RefCursorTypeDefinition | SubtypeDefinition | CollectionTypeDefinition)
      switch(buffer.getChar(index)) {
         case 's':
         case 'S': {
            // SubtypeDefinition
            match = subtypeDefinition$Rule();
            break;
         }
         case 't':
         case 'T': {
            // RecordTypeDefinition
            match = recordTypeDefinition$Rule();
            if (! match) {
               // RefCursorTypeDefinition
               match = refCursorTypeDefinition$Rule();
               if (! match) {
                  // CollectionTypeDefinition
                  match = collectionTypeDefinition$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Null : ("null" TestNoAlpha OptionalSpacing)
   protected boolean null$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("null" TestNoAlpha OptionalSpacing)
      // "null"
      match = ignoreCaseStringMatcher("null", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NULL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NotNull : ("not" TestNoAlpha OptionalSpacing "null" TestNoAlpha OptionalSpacing)
   protected boolean notNull$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("not" TestNoAlpha OptionalSpacing "null" TestNoAlpha OptionalSpacing)
      // "not"
      match = ignoreCaseStringMatcher("not", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "null"
               match = ignoreCaseStringMatcher("null", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NOT_NULL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Nullable : (Null | NotNull)
   protected boolean nullable$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Null | NotNull)
      switch(buffer.getChar(index)) {
         case 'n':
         case 'N': {
            // Null
            match = null$Rule();
            if (! match) {
               // NotNull
               match = notNull$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NULLABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SubtypeDefinition : ("subtype" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing TypeSpec PlSqlExpressionList? Nullable?)
   protected boolean subtypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("subtype" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing TypeSpec PlSqlExpressionList? Nullable?)
      // "subtype"
      match = ignoreCaseStringMatcher("subtype", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // "is"
                  match = ignoreCaseStringMatcher("is", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // TypeSpec
                           match = typeSpec$Rule();
                           if (match) {
                              // PlSqlExpressionList?
                              // PlSqlExpressionList
                              plSqlExpressionList$Rule();
                              // Nullable?
                              // Nullable
                              nullable$Rule();
                              match = true;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SUBTYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RecordTypeDefinition : ("type" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing "record" TestNoAlpha OptionalSpacing '(' OptionalSpacing RecordFieldDeclaration (',' OptionalSpacing RecordFieldDeclaration)* ')' OptionalSpacing)
   protected boolean recordTypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("type" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing "record" TestNoAlpha OptionalSpacing '(' OptionalSpacing RecordFieldDeclaration (',' OptionalSpacing RecordFieldDeclaration)* ')' OptionalSpacing)
      // "type"
      match = ignoreCaseStringMatcher("type", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // "is"
                  match = ignoreCaseStringMatcher("is", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "record"
                           match = ignoreCaseStringMatcher("record", 6);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // '('
                                    match = charMatcher('(');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // RecordFieldDeclaration
                                          match = recordFieldDeclaration$Rule();
                                          if (match) {
                                             // (',' OptionalSpacing RecordFieldDeclaration)*
                                             do {
                                                // (',' OptionalSpacing RecordFieldDeclaration)
                                                Node lastNode_1 = currentNode;
                                                int lastIndex_1 = index;
                                                // ','
                                                match = charMatcher(',');
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                   if (match) {
                                                      // RecordFieldDeclaration
                                                      match = recordFieldDeclaration$Rule();
                                                      if (! match) {
                                                         index = lastIndex_1;
                                                         lastNode_1.setSibling(null);
                                                         currentNode = lastNode_1;
                                                      }
                                                   } else {
                                                      index = lastIndex_1;
                                                      lastNode_1.setSibling(null);
                                                   }
                                                }
                                             } while(match);
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RECORD_TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DefaultOperator : ((":=" OptionalSpacing) | ("default" TestNoAlpha OptionalSpacing))
   protected boolean defaultOperator$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((":=" OptionalSpacing) | ("default" TestNoAlpha OptionalSpacing))
      // (":=" OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // ":="
      match = ignoreCaseStringMatcher(":=", 2);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (! match) {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
            currentNode = lastNode_1;
         }
      }
      if (! match) {
         // ("default" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "default"
         match = ignoreCaseStringMatcher("default", 7);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DEFAULT_OPERATOR, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DefaultValue : (DefaultOperator PlSqlExpression)
   protected boolean defaultValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (DefaultOperator PlSqlExpression)
      // DefaultOperator
      match = defaultOperator$Rule();
      if (match) {
         // PlSqlExpression
         match = plSqlExpression$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DEFAULT_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RecordFieldDeclaration : (PlSqlIdentifier TypeSpec Nullable? DefaultValue?)
   protected boolean recordFieldDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier TypeSpec Nullable? DefaultValue?)
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (match) {
         // TypeSpec
         match = typeSpec$Rule();
         if (match) {
            // Nullable?
            // Nullable
            nullable$Rule();
            // DefaultValue?
            // DefaultValue
            defaultValue$Rule();
            match = true;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RECORD_FIELD_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CollectionTypeDefinition : ("type" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing (VarrayTypeDefinition | NestedTableTypeDefinition | AssociativeArrayTypeDefinition))
   protected boolean collectionTypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("type" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing (VarrayTypeDefinition | NestedTableTypeDefinition | AssociativeArrayTypeDefinition))
      // "type"
      match = ignoreCaseStringMatcher("type", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // "is"
                  match = ignoreCaseStringMatcher("is", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // (VarrayTypeDefinition | NestedTableTypeDefinition | AssociativeArrayTypeDefinition)
                           switch(buffer.getChar(index)) {
                              case 't':
                              case 'T': {
                                 // NestedTableTypeDefinition
                                 match = nestedTableTypeDefinition$Rule();
                                 if (! match) {
                                    // AssociativeArrayTypeDefinition
                                    match = associativeArrayTypeDefinition$Rule();
                                 }
                                 break;
                              }
                              case 'v':
                              case 'V': {
                                 // VarrayTypeDefinition
                                 match = varrayTypeDefinition$Rule();
                                 break;
                              }
                              default: {
                                 match = false;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.COLLECTION_TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IndexBy : ("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing (("pls_integer" TestNoAlpha OptionalSpacing) | ("binary_integer" TestNoAlpha OptionalSpacing) | ("varchar2" OptionalSpacing NumericExpression)))
   protected boolean indexBy$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing (("pls_integer" TestNoAlpha OptionalSpacing) | ("binary_integer" TestNoAlpha OptionalSpacing) | ("varchar2" OptionalSpacing NumericExpression)))
      // "index"
      match = ignoreCaseStringMatcher("index", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "by"
               match = ignoreCaseStringMatcher("by", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // (("pls_integer" TestNoAlpha OptionalSpacing) | ("binary_integer" TestNoAlpha OptionalSpacing) | ("varchar2" OptionalSpacing NumericExpression))
                        // ("pls_integer" TestNoAlpha OptionalSpacing)
                        Node lastNode_1 = currentNode;
                        int lastIndex_1 = index;
                        // "pls_integer"
                        match = ignoreCaseStringMatcher("pls_integer", 11);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ("binary_integer" TestNoAlpha OptionalSpacing)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "binary_integer"
                           match = ignoreCaseStringMatcher("binary_integer", 14);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ("varchar2" OptionalSpacing NumericExpression)
                              Node lastNode_3 = currentNode;
                              int lastIndex_3 = index;
                              // "varchar2"
                              match = ignoreCaseStringMatcher("varchar2", 8);
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // NumericExpression
                                    match = numericExpression$Rule();
                                    if (! match) {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                       currentNode = lastNode_3;
                                    }
                                 } else {
                                    index = lastIndex_3;
                                    lastNode_3.setSibling(null);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INDEX_BY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OptionalIndexBy : IndexBy?
   protected boolean optionalIndexBy$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // IndexBy?
      // IndexBy
      indexBy$Rule();
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.OPTIONAL_INDEX_BY, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //AssociativeArrayTypeDefinition : ("table" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing TypeSpec Nullable? OptionalIndexBy)
   protected boolean associativeArrayTypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("table" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing TypeSpec Nullable? OptionalIndexBy)
      // "table"
      match = ignoreCaseStringMatcher("table", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "of"
               match = ignoreCaseStringMatcher("of", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // TypeSpec
                        match = typeSpec$Rule();
                        if (match) {
                           // Nullable?
                           // Nullable
                           nullable$Rule();
                           // OptionalIndexBy
                           match = optionalIndexBy$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ASSOCIATIVE_ARRAY_TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VarrayTypeDefinition : ((("varying" TestNoAlpha OptionalSpacing ("array" TestNoAlpha OptionalSpacing)?) | ("varray" TestNoAlpha OptionalSpacing)) '(' OptionalSpacing IntegerLiteral ')' OptionalSpacing "of" TestNoAlpha OptionalSpacing TypeSpec Nullable?)
   protected boolean varrayTypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((("varying" TestNoAlpha OptionalSpacing ("array" TestNoAlpha OptionalSpacing)?) | ("varray" TestNoAlpha OptionalSpacing)) '(' OptionalSpacing IntegerLiteral ')' OptionalSpacing "of" TestNoAlpha OptionalSpacing TypeSpec Nullable?)
      // (("varying" TestNoAlpha OptionalSpacing ("array" TestNoAlpha OptionalSpacing)?) | ("varray" TestNoAlpha OptionalSpacing))
      // ("varying" TestNoAlpha OptionalSpacing ("array" TestNoAlpha OptionalSpacing)?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "varying"
      match = ignoreCaseStringMatcher("varying", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("array" TestNoAlpha OptionalSpacing)?
               // ("array" TestNoAlpha OptionalSpacing)
               Node lastNode_2 = currentNode;
               int lastIndex_2 = index;
               // "array"
               match = ignoreCaseStringMatcher("array", 5);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                        currentNode = lastNode_2;
                     }
                  } else {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                  }
               }
               match = true;
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("varray" TestNoAlpha OptionalSpacing)
         Node lastNode_3 = currentNode;
         int lastIndex_3 = index;
         // "varray"
         match = ignoreCaseStringMatcher("varray", 6);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_3;
                  lastNode_3.setSibling(null);
                  currentNode = lastNode_3;
               }
            } else {
               index = lastIndex_3;
               lastNode_3.setSibling(null);
            }
         }
      }
      if (match) {
         // '('
         match = charMatcher('(');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // IntegerLiteral
               match = integerLiteral$Rule();
               if (match) {
                  // ')'
                  match = charMatcher(')');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "of"
                        match = ignoreCaseStringMatcher("of", 2);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // TypeSpec
                                 match = typeSpec$Rule();
                                 if (match) {
                                    // Nullable?
                                    // Nullable
                                    nullable$Rule();
                                    match = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VARRAY_TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NestedTableTypeDefinition : ("table" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing TypeSpec Nullable? (("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing TypeSpec) "IndexBy" TestNoAlpha OptionalSpacing)?)
   protected boolean nestedTableTypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("table" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing TypeSpec Nullable? (("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing TypeSpec) "IndexBy" TestNoAlpha OptionalSpacing)?)
      // "table"
      match = ignoreCaseStringMatcher("table", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "of"
               match = ignoreCaseStringMatcher("of", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // TypeSpec
                        match = typeSpec$Rule();
                        if (match) {
                           // Nullable?
                           // Nullable
                           nullable$Rule();
                           match = true;
                           // (("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing TypeSpec) "IndexBy" TestNoAlpha OptionalSpacing)?
                           // (("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing TypeSpec) "IndexBy" TestNoAlpha OptionalSpacing)
                           Node lastNode_1 = currentNode;
                           int lastIndex_1 = index;
                           // ("index" TestNoAlpha OptionalSpacing "by" TestNoAlpha OptionalSpacing TypeSpec)
                           Node lastNode_2 = currentNode;
                           int lastIndex_2 = index;
                           // "index"
                           match = ignoreCaseStringMatcher("index", 5);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // "by"
                                    match = ignoreCaseStringMatcher("by", 2);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // TypeSpec
                                             match = typeSpec$Rule();
                                             if (! match) {
                                                index = lastIndex_2;
                                                lastNode_2.setSibling(null);
                                                currentNode = lastNode_2;
                                             }
                                          } else {
                                             index = lastIndex_2;
                                             lastNode_2.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_2;
                                          lastNode_2.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_2;
                                       lastNode_2.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           }
                           if (match) {
                              // "IndexBy"
                              match = ignoreCaseStringMatcher("IndexBy", 7);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                       currentNode = lastNode_1;
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           }
                           match = true;
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NESTED_TABLE_TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RefCursorTypeDefinition : ("type" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing "ref" TestNoAlpha OptionalSpacing "cursor" TestNoAlpha OptionalSpacing ReturnType?)
   protected boolean refCursorTypeDefinition$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("type" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "is" TestNoAlpha OptionalSpacing "ref" TestNoAlpha OptionalSpacing "cursor" TestNoAlpha OptionalSpacing ReturnType?)
      // "type"
      match = ignoreCaseStringMatcher("type", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // "is"
                  match = ignoreCaseStringMatcher("is", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "ref"
                           match = ignoreCaseStringMatcher("ref", 3);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // "cursor"
                                    match = ignoreCaseStringMatcher("cursor", 6);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // ReturnType?
                                             // ReturnType
                                             returnType$Rule();
                                             match = true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.REF_CURSOR_TYPE_DEFINITION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NumericDataType : ((("number" | "numeric" | "decimal" | "dec") TestNoAlpha OptionalSpacing) NumberSize)
   protected boolean numericDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((("number" | "numeric" | "decimal" | "dec") TestNoAlpha OptionalSpacing) NumberSize)
      // (("number" | "numeric" | "decimal" | "dec") TestNoAlpha OptionalSpacing)
      // ("number" | "numeric" | "decimal" | "dec")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'n':
         case 'N': {
            ++index;
            // ("umeric" | "umber")
            if (buffer.matchChar(index, 'u') || buffer.matchChar(index, 'U')) {
               ++index;
               // ("meric" | "mber")
               if (buffer.matchChar(index, 'm') || buffer.matchChar(index, 'M')) {
                  ++index;
                  // ("eric" | "ber")
                  switch(buffer.getChar(index)) {
                     case 'b':
                     case 'B': {
                        ++index;
                        // "er"
                        if (match = ignoreCaseStringTest("er", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'e':
                     case 'E': {
                        ++index;
                        // "ric"
                        if (match = ignoreCaseStringTest("ric", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
               } else {
                  match = false;
               }
            } else {
               match = false;
            }
            break;
         }
         case 'd':
         case 'D': {
            ++index;
            // ("ecimal" | "ec")
            if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
               ++index;
               // ("cimal" | "c")
               if (buffer.matchChar(index, 'c') || buffer.matchChar(index, 'C')) {
                  ++index;
                  // ("imal" | <EMPTY>)
                  if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
                     ++index;
                     // "mal"
                     if (match = ignoreCaseStringTest("mal", 3)) {
                        index += 3;
                     }
                  } else {
                     match = true;
                  }
               } else {
                  match = false;
               }
            } else {
               match = false;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // NumberSize
         match = numberSize$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NUMERIC_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SmallIntPrecisionDataType : ("smallint" TestNoAlpha OptionalSpacing "precision" TestNoAlpha OptionalSpacing)
   protected boolean smallIntPrecisionDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("smallint" TestNoAlpha OptionalSpacing "precision" TestNoAlpha OptionalSpacing)
      // "smallint"
      match = ignoreCaseStringMatcher("smallint", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "precision"
               match = ignoreCaseStringMatcher("precision", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SMALL_INT_PRECISION_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CharacterDataType : ("character" TestNoAlpha OptionalSpacing ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)? Size?)
   protected boolean characterDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("character" TestNoAlpha OptionalSpacing ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)? Size?)
      // "character"
      match = ignoreCaseStringMatcher("character", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)?
               // ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "varying"
               match = ignoreCaseStringMatcher("varying", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "Varying"
                        match = ignoreCaseStringMatcher("Varying", 7);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                                 currentNode = lastNode_1;
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CHARACTER_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NVarCharDataType : ("nvarchar" TestNoAlpha OptionalSpacing Size?)
   protected boolean nVarCharDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("nvarchar" TestNoAlpha OptionalSpacing Size?)
      // "nvarchar"
      match = ignoreCaseStringMatcher("nvarchar", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NVAR_CHAR_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NationalCharacterDataType : ("national" TestNoAlpha OptionalSpacing (("character" | "char") TestNoAlpha OptionalSpacing) ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)? Size?)
   protected boolean nationalCharacterDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("national" TestNoAlpha OptionalSpacing (("character" | "char") TestNoAlpha OptionalSpacing) ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)? Size?)
      // "national"
      match = ignoreCaseStringMatcher("national", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("character" | "char") TestNoAlpha OptionalSpacing)
               // ("character" | "char")
               int startIndex_1 = index;
               if (buffer.matchChar(index, 'c') || buffer.matchChar(index, 'C')) {
                  ++index;
                  // ("haracter" | "har")
                  if (buffer.matchChar(index, 'h') || buffer.matchChar(index, 'H')) {
                     ++index;
                     // ("aracter" | "ar")
                     if (buffer.matchChar(index, 'a') || buffer.matchChar(index, 'A')) {
                        ++index;
                        // ("racter" | "r")
                        if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                           ++index;
                           // ("acter" | <EMPTY>)
                           if (buffer.matchChar(index, 'a') || buffer.matchChar(index, 'A')) {
                              ++index;
                              // "cter"
                              if (match = ignoreCaseStringTest("cter", 4)) {
                                 index += 4;
                              }
                           } else {
                              match = true;
                           }
                        } else {
                           match = false;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
               } else {
                  match = false;
               }
               if (! match) {
                  index = startIndex_1;
               } else if(! currentRuleIsAtomic) {
                  currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
                  currentNode = currentNode.getSibling();
               }
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                  }
               }
               if (match) {
                  // ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)?
                  // ("varying" TestNoAlpha OptionalSpacing "Varying" TestNoAlpha OptionalSpacing)
                  Node lastNode_2 = currentNode;
                  int lastIndex_2 = index;
                  // "varying"
                  match = ignoreCaseStringMatcher("varying", 7);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "Varying"
                           match = ignoreCaseStringMatcher("Varying", 7);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (! match) {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                    currentNode = lastNode_2;
                                 }
                              } else {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        } else {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                        }
                     } else {
                        index = lastIndex_2;
                        lastNode_2.setSibling(null);
                     }
                  }
                  // Size?
                  // Size
                  size$Rule();
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NATIONAL_CHARACTER_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntegerDataType : ("integer" TestNoAlpha OptionalSpacing Size?)
   protected boolean integerDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("integer" TestNoAlpha OptionalSpacing Size?)
      // "integer"
      match = ignoreCaseStringMatcher("integer", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTEGER_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntDataType : ("int" TestNoAlpha OptionalSpacing Size?)
   protected boolean intDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("int" TestNoAlpha OptionalSpacing Size?)
      // "int"
      match = ignoreCaseStringMatcher("int", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INT_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SmallIntDataType : ("smallint" TestNoAlpha OptionalSpacing Size?)
   protected boolean smallIntDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("smallint" TestNoAlpha OptionalSpacing Size?)
      // "smallint"
      match = ignoreCaseStringMatcher("smallint", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SMALL_INT_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RealDataType : ("real" TestNoAlpha OptionalSpacing Size?)
   protected boolean realDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("real" TestNoAlpha OptionalSpacing Size?)
      // "real"
      match = ignoreCaseStringMatcher("real", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // Size?
               // Size
               size$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.REAL_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlDataType : (SqlDataType | ("binary_integer" TestNoAlpha OptionalSpacing) | ("BinaryInteger" TestNoAlpha OptionalSpacing) | ("natural" TestNoAlpha OptionalSpacing) | ("Natural" TestNoAlpha OptionalSpacing) | ("positive" TestNoAlpha OptionalSpacing) | ("Positive" TestNoAlpha OptionalSpacing) | NumericDataType | ("Number" TestNoAlpha OptionalSpacing) | ("boolean" TestNoAlpha OptionalSpacing) | ("Boolean" TestNoAlpha OptionalSpacing) | IntegerDataType | ("Integer" TestNoAlpha OptionalSpacing) | IntDataType | ("Int" TestNoAlpha OptionalSpacing) | SmallIntDataType | ("SmallInt" TestNoAlpha OptionalSpacing) | RealDataType | ("Real" TestNoAlpha OptionalSpacing) | SmallIntPrecisionDataType | ("SmallIntPrecision" TestNoAlpha OptionalSpacing) | CharacterDataType | ("Character" TestNoAlpha OptionalSpacing) | NVarCharDataType | ("NVarChar" TestNoAlpha OptionalSpacing) | NationalCharacterDataType | ("NationalCharacter" TestNoAlpha OptionalSpacing) | ("pls_integer" TestNoAlpha OptionalSpacing) | ("PLS_Integer" TestNoAlpha OptionalSpacing))
   protected boolean plSqlDataType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SqlDataType | ("binary_integer" TestNoAlpha OptionalSpacing) | ("BinaryInteger" TestNoAlpha OptionalSpacing) | ("natural" TestNoAlpha OptionalSpacing) | ("Natural" TestNoAlpha OptionalSpacing) | ("positive" TestNoAlpha OptionalSpacing) | ("Positive" TestNoAlpha OptionalSpacing) | NumericDataType | ("Number" TestNoAlpha OptionalSpacing) | ("boolean" TestNoAlpha OptionalSpacing) | ("Boolean" TestNoAlpha OptionalSpacing) | IntegerDataType | ("Integer" TestNoAlpha OptionalSpacing) | IntDataType | ("Int" TestNoAlpha OptionalSpacing) | SmallIntDataType | ("SmallInt" TestNoAlpha OptionalSpacing) | RealDataType | ("Real" TestNoAlpha OptionalSpacing) | SmallIntPrecisionDataType | ("SmallIntPrecision" TestNoAlpha OptionalSpacing) | CharacterDataType | ("Character" TestNoAlpha OptionalSpacing) | NVarCharDataType | ("NVarChar" TestNoAlpha OptionalSpacing) | NationalCharacterDataType | ("NationalCharacter" TestNoAlpha OptionalSpacing) | ("pls_integer" TestNoAlpha OptionalSpacing) | ("PLS_Integer" TestNoAlpha OptionalSpacing))
      // SqlDataType
      match = sqlDataType$Rule();
      if (! match) {
         // ("binary_integer" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "binary_integer"
         match = ignoreCaseStringMatcher("binary_integer", 14);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         if (! match) {
            // ("BinaryInteger" TestNoAlpha OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // "BinaryInteger"
            match = ignoreCaseStringMatcher("BinaryInteger", 13);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
            if (! match) {
               // ("natural" TestNoAlpha OptionalSpacing)
               Node lastNode_3 = currentNode;
               int lastIndex_3 = index;
               // "natural"
               match = ignoreCaseStringMatcher("natural", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               }
               if (! match) {
                  // ("Natural" TestNoAlpha OptionalSpacing)
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // "Natural"
                  match = ignoreCaseStringMatcher("Natural", 7);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_4;
                           lastNode_4.setSibling(null);
                           currentNode = lastNode_4;
                        }
                     } else {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("positive" TestNoAlpha OptionalSpacing)
                     Node lastNode_5 = currentNode;
                     int lastIndex_5 = index;
                     // "positive"
                     match = ignoreCaseStringMatcher("positive", 8);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                              currentNode = lastNode_5;
                           }
                        } else {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("Positive" TestNoAlpha OptionalSpacing)
                        Node lastNode_6 = currentNode;
                        int lastIndex_6 = index;
                        // "Positive"
                        match = ignoreCaseStringMatcher("Positive", 8);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_6;
                                 lastNode_6.setSibling(null);
                                 currentNode = lastNode_6;
                              }
                           } else {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                           }
                        }
                        if (! match) {
                           // NumericDataType
                           match = numericDataType$Rule();
                           if (! match) {
                              // ("Number" TestNoAlpha OptionalSpacing)
                              Node lastNode_7 = currentNode;
                              int lastIndex_7 = index;
                              // "Number"
                              match = ignoreCaseStringMatcher("Number", 6);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_7;
                                       lastNode_7.setSibling(null);
                                       currentNode = lastNode_7;
                                    }
                                 } else {
                                    index = lastIndex_7;
                                    lastNode_7.setSibling(null);
                                 }
                              }
                              if (! match) {
                                 // ("boolean" TestNoAlpha OptionalSpacing)
                                 Node lastNode_8 = currentNode;
                                 int lastIndex_8 = index;
                                 // "boolean"
                                 match = ignoreCaseStringMatcher("boolean", 7);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_8;
                                          lastNode_8.setSibling(null);
                                          currentNode = lastNode_8;
                                       }
                                    } else {
                                       index = lastIndex_8;
                                       lastNode_8.setSibling(null);
                                    }
                                 }
                                 if (! match) {
                                    // ("Boolean" TestNoAlpha OptionalSpacing)
                                    Node lastNode_9 = currentNode;
                                    int lastIndex_9 = index;
                                    // "Boolean"
                                    match = ignoreCaseStringMatcher("Boolean", 7);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (! match) {
                                             index = lastIndex_9;
                                             lastNode_9.setSibling(null);
                                             currentNode = lastNode_9;
                                          }
                                       } else {
                                          index = lastIndex_9;
                                          lastNode_9.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // IntegerDataType
                                       match = integerDataType$Rule();
                                       if (! match) {
                                          // ("Integer" TestNoAlpha OptionalSpacing)
                                          Node lastNode_10 = currentNode;
                                          int lastIndex_10 = index;
                                          // "Integer"
                                          match = ignoreCaseStringMatcher("Integer", 7);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (! match) {
                                                   index = lastIndex_10;
                                                   lastNode_10.setSibling(null);
                                                   currentNode = lastNode_10;
                                                }
                                             } else {
                                                index = lastIndex_10;
                                                lastNode_10.setSibling(null);
                                             }
                                          }
                                          if (! match) {
                                             // IntDataType
                                             match = intDataType$Rule();
                                             if (! match) {
                                                // ("Int" TestNoAlpha OptionalSpacing)
                                                Node lastNode_11 = currentNode;
                                                int lastIndex_11 = index;
                                                // "Int"
                                                match = ignoreCaseStringMatcher("Int", 3);
                                                if (match) {
                                                   // TestNoAlpha
                                                   match = testNoAlpha$Rule();
                                                   if (match) {
                                                      // OptionalSpacing
                                                      match = optionalSpacing$Rule();
                                                      if (! match) {
                                                         index = lastIndex_11;
                                                         lastNode_11.setSibling(null);
                                                         currentNode = lastNode_11;
                                                      }
                                                   } else {
                                                      index = lastIndex_11;
                                                      lastNode_11.setSibling(null);
                                                   }
                                                }
                                                if (! match) {
                                                   // SmallIntDataType
                                                   match = smallIntDataType$Rule();
                                                   if (! match) {
                                                      // ("SmallInt" TestNoAlpha OptionalSpacing)
                                                      Node lastNode_12 = currentNode;
                                                      int lastIndex_12 = index;
                                                      // "SmallInt"
                                                      match = ignoreCaseStringMatcher("SmallInt", 8);
                                                      if (match) {
                                                         // TestNoAlpha
                                                         match = testNoAlpha$Rule();
                                                         if (match) {
                                                            // OptionalSpacing
                                                            match = optionalSpacing$Rule();
                                                            if (! match) {
                                                               index = lastIndex_12;
                                                               lastNode_12.setSibling(null);
                                                               currentNode = lastNode_12;
                                                            }
                                                         } else {
                                                            index = lastIndex_12;
                                                            lastNode_12.setSibling(null);
                                                         }
                                                      }
                                                      if (! match) {
                                                         // RealDataType
                                                         match = realDataType$Rule();
                                                         if (! match) {
                                                            // ("Real" TestNoAlpha OptionalSpacing)
                                                            Node lastNode_13 = currentNode;
                                                            int lastIndex_13 = index;
                                                            // "Real"
                                                            match = ignoreCaseStringMatcher("Real", 4);
                                                            if (match) {
                                                               // TestNoAlpha
                                                               match = testNoAlpha$Rule();
                                                               if (match) {
                                                                  // OptionalSpacing
                                                                  match = optionalSpacing$Rule();
                                                                  if (! match) {
                                                                     index = lastIndex_13;
                                                                     lastNode_13.setSibling(null);
                                                                     currentNode = lastNode_13;
                                                                  }
                                                               } else {
                                                                  index = lastIndex_13;
                                                                  lastNode_13.setSibling(null);
                                                               }
                                                            }
                                                            if (! match) {
                                                               // SmallIntPrecisionDataType
                                                               match = smallIntPrecisionDataType$Rule();
                                                               if (! match) {
                                                                  // ("SmallIntPrecision" TestNoAlpha OptionalSpacing)
                                                                  Node lastNode_14 = currentNode;
                                                                  int lastIndex_14 = index;
                                                                  // "SmallIntPrecision"
                                                                  match = ignoreCaseStringMatcher("SmallIntPrecision", 17);
                                                                  if (match) {
                                                                     // TestNoAlpha
                                                                     match = testNoAlpha$Rule();
                                                                     if (match) {
                                                                        // OptionalSpacing
                                                                        match = optionalSpacing$Rule();
                                                                        if (! match) {
                                                                           index = lastIndex_14;
                                                                           lastNode_14.setSibling(null);
                                                                           currentNode = lastNode_14;
                                                                        }
                                                                     } else {
                                                                        index = lastIndex_14;
                                                                        lastNode_14.setSibling(null);
                                                                     }
                                                                  }
                                                                  if (! match) {
                                                                     // CharacterDataType
                                                                     match = characterDataType$Rule();
                                                                     if (! match) {
                                                                        // ("Character" TestNoAlpha OptionalSpacing)
                                                                        Node lastNode_15 = currentNode;
                                                                        int lastIndex_15 = index;
                                                                        // "Character"
                                                                        match = ignoreCaseStringMatcher("Character", 9);
                                                                        if (match) {
                                                                           // TestNoAlpha
                                                                           match = testNoAlpha$Rule();
                                                                           if (match) {
                                                                              // OptionalSpacing
                                                                              match = optionalSpacing$Rule();
                                                                              if (! match) {
                                                                                 index = lastIndex_15;
                                                                                 lastNode_15.setSibling(null);
                                                                                 currentNode = lastNode_15;
                                                                              }
                                                                           } else {
                                                                              index = lastIndex_15;
                                                                              lastNode_15.setSibling(null);
                                                                           }
                                                                        }
                                                                        if (! match) {
                                                                           // NVarCharDataType
                                                                           match = nVarCharDataType$Rule();
                                                                           if (! match) {
                                                                              // ("NVarChar" TestNoAlpha OptionalSpacing)
                                                                              Node lastNode_16 = currentNode;
                                                                              int lastIndex_16 = index;
                                                                              // "NVarChar"
                                                                              match = ignoreCaseStringMatcher("NVarChar", 8);
                                                                              if (match) {
                                                                                 // TestNoAlpha
                                                                                 match = testNoAlpha$Rule();
                                                                                 if (match) {
                                                                                    // OptionalSpacing
                                                                                    match = optionalSpacing$Rule();
                                                                                    if (! match) {
                                                                                       index = lastIndex_16;
                                                                                       lastNode_16.setSibling(null);
                                                                                       currentNode = lastNode_16;
                                                                                    }
                                                                                 } else {
                                                                                    index = lastIndex_16;
                                                                                    lastNode_16.setSibling(null);
                                                                                 }
                                                                              }
                                                                              if (! match) {
                                                                                 // NationalCharacterDataType
                                                                                 match = nationalCharacterDataType$Rule();
                                                                                 if (! match) {
                                                                                    // ("NationalCharacter" TestNoAlpha OptionalSpacing)
                                                                                    Node lastNode_17 = currentNode;
                                                                                    int lastIndex_17 = index;
                                                                                    // "NationalCharacter"
                                                                                    match = ignoreCaseStringMatcher("NationalCharacter", 17);
                                                                                    if (match) {
                                                                                       // TestNoAlpha
                                                                                       match = testNoAlpha$Rule();
                                                                                       if (match) {
                                                                                          // OptionalSpacing
                                                                                          match = optionalSpacing$Rule();
                                                                                          if (! match) {
                                                                                             index = lastIndex_17;
                                                                                             lastNode_17.setSibling(null);
                                                                                             currentNode = lastNode_17;
                                                                                          }
                                                                                       } else {
                                                                                          index = lastIndex_17;
                                                                                          lastNode_17.setSibling(null);
                                                                                       }
                                                                                    }
                                                                                    if (! match) {
                                                                                       // ("pls_integer" TestNoAlpha OptionalSpacing)
                                                                                       Node lastNode_18 = currentNode;
                                                                                       int lastIndex_18 = index;
                                                                                       // "pls_integer"
                                                                                       match = ignoreCaseStringMatcher("pls_integer", 11);
                                                                                       if (match) {
                                                                                          // TestNoAlpha
                                                                                          match = testNoAlpha$Rule();
                                                                                          if (match) {
                                                                                             // OptionalSpacing
                                                                                             match = optionalSpacing$Rule();
                                                                                             if (! match) {
                                                                                                index = lastIndex_18;
                                                                                                lastNode_18.setSibling(null);
                                                                                                currentNode = lastNode_18;
                                                                                             }
                                                                                          } else {
                                                                                             index = lastIndex_18;
                                                                                             lastNode_18.setSibling(null);
                                                                                          }
                                                                                       }
                                                                                       if (! match) {
                                                                                          // ("PLS_Integer" TestNoAlpha OptionalSpacing)
                                                                                          Node lastNode_19 = currentNode;
                                                                                          int lastIndex_19 = index;
                                                                                          // "PLS_Integer"
                                                                                          match = ignoreCaseStringMatcher("PLS_Integer", 11);
                                                                                          if (match) {
                                                                                             // TestNoAlpha
                                                                                             match = testNoAlpha$Rule();
                                                                                             if (match) {
                                                                                                // OptionalSpacing
                                                                                                match = optionalSpacing$Rule();
                                                                                                if (! match) {
                                                                                                   index = lastIndex_19;
                                                                                                   lastNode_19.setSibling(null);
                                                                                                   currentNode = lastNode_19;
                                                                                                }
                                                                                             } else {
                                                                                                index = lastIndex_19;
                                                                                                lastNode_19.setSibling(null);
                                                                                             }
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_DATA_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RowType : ('%' OptionalSpacing "rowtype" TestNoAlpha OptionalSpacing)
   protected boolean rowType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('%' OptionalSpacing "rowtype" TestNoAlpha OptionalSpacing)
      // '%'
      match = charMatcher('%');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // "rowtype"
            match = ignoreCaseStringMatcher("rowtype", 7);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ROW_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Type : ('%' OptionalSpacing "type" TestNoAlpha OptionalSpacing)
   protected boolean type$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('%' OptionalSpacing "type" TestNoAlpha OptionalSpacing)
      // '%'
      match = charMatcher('%');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // "type"
            match = ignoreCaseStringMatcher("type", 4);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorReturnType : ("return" TestNoAlpha OptionalSpacing SqlObjectIdentifier RowType)
   protected boolean cursorReturnType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("return" TestNoAlpha OptionalSpacing SqlObjectIdentifier RowType)
      // "return"
      match = ignoreCaseStringMatcher("return", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlObjectIdentifier
               match = sqlObjectIdentifier$Rule();
               if (match) {
                  // RowType
                  match = rowType$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_RETURN_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorRef : ("ref" TestNoAlpha OptionalSpacing "cursor" TestNoAlpha OptionalSpacing CursorReturnType?)
   protected boolean cursorRef$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("ref" TestNoAlpha OptionalSpacing "cursor" TestNoAlpha OptionalSpacing CursorReturnType?)
      // "ref"
      match = ignoreCaseStringMatcher("ref", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "cursor"
               match = ignoreCaseStringMatcher("cursor", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // CursorReturnType?
                        // CursorReturnType
                        cursorReturnType$Rule();
                        match = true;
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_REF, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UserTypeAttribute : (RowType | Type | Size)
   protected boolean userTypeAttribute$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (RowType | Type | Size)
      switch(buffer.getChar(index)) {
         case '%': {
            // RowType
            match = rowType$Rule();
            if (! match) {
               // Type
               match = type$Rule();
            }
            break;
         }
         case '(': {
            // Size
            match = size$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.USER_TYPE_ATTRIBUTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UserType : (SqlObjectIdentifier UserTypeAttribute?)
   protected boolean userType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SqlObjectIdentifier UserTypeAttribute?)
      // SqlObjectIdentifier
      match = sqlObjectIdentifier$Rule();
      if (match) {
         // UserTypeAttribute?
         // UserTypeAttribute
         userTypeAttribute$Rule();
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.USER_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //TypeSpec : (PlSqlDataType | CursorRef | UserType)
   protected boolean typeSpec$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlDataType | CursorRef | UserType)
      switch(buffer.getChar(index)) {
         case 'A':
         case 'E':
         case 'G':
         case 'H':
         case 'J':
         case 'K':
         case 'M':
         case 'O':
         case 'Q':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case '\"':
         case '#':
         case '$':
         case 'e':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'm':
         case 'o':
         case '0':
         case '1':
         case 'q':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case 'w':
         case '8':
         case 'x':
         case '9':
         case 'y':
         case 'z': {
            // UserType
            match = userType$Rule();
            break;
         }
         case 'B':
         case 'b':
         case 'C':
         case 'c':
         case 'D':
         case 'd':
         case 'F':
         case 'f':
         case 'I':
         case 'i':
         case 'L':
         case 'l':
         case 'N':
         case 'n':
         case 'P':
         case 'p':
         case 'S':
         case 's':
         case 'T':
         case 't':
         case 'U':
         case 'u':
         case 'V':
         case 'v': {
            // PlSqlDataType
            match = plSqlDataType$Rule();
            if (! match) {
               // UserType
               match = userType$Rule();
            }
            break;
         }
         case 'R':
         case 'r': {
            // PlSqlDataType
            match = plSqlDataType$Rule();
            if (! match) {
               // CursorRef
               match = cursorRef$Rule();
               if (! match) {
                  // UserType
                  match = userType$Rule();
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.TYPE_SPEC, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParenthesesParametersDeclaration : ('(' OptionalSpacing ParameterDeclaration (',' OptionalSpacing ParameterDeclaration)* ')' OptionalSpacing)
   protected boolean parenthesesParametersDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing ParameterDeclaration (',' OptionalSpacing ParameterDeclaration)* ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // ParameterDeclaration
            match = parameterDeclaration$Rule();
            if (match) {
               // (',' OptionalSpacing ParameterDeclaration)*
               do {
                  // (',' OptionalSpacing ParameterDeclaration)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // ParameterDeclaration
                        match = parameterDeclaration$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARENTHESES_PARAMETERS_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Out : ("out" TestNoAlpha OptionalSpacing ("nocopy" TestNoAlpha OptionalSpacing)?)
   protected boolean out$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("out" TestNoAlpha OptionalSpacing ("nocopy" TestNoAlpha OptionalSpacing)?)
      // "out"
      match = ignoreCaseStringMatcher("out", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("nocopy" TestNoAlpha OptionalSpacing)?
               // ("nocopy" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "nocopy"
               match = ignoreCaseStringMatcher("nocopy", 6);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OUT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParameterDeclaration : (PlSqlIdentifier ("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)? Out? TypeSpec DefaultValue?)
   protected boolean parameterDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier ("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)? Out? TypeSpec DefaultValue?)
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (match) {
         // ("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)?
         // ("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "in"
         match = ignoreCaseStringMatcher("in", 2);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // "In"
                  match = ignoreCaseStringMatcher("In", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         // Out?
         // Out
         out$Rule();
         // TypeSpec
         match = typeSpec$Rule();
         if (match) {
            // DefaultValue?
            // DefaultValue
            defaultValue$Rule();
            match = true;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PARAMETER_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorDeclaration : ("cursor" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier ParametersDeclaration "is" TestNoAlpha OptionalSpacing SelectStatement)
   protected boolean cursorDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("cursor" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier ParametersDeclaration "is" TestNoAlpha OptionalSpacing SelectStatement)
      // "cursor"
      match = ignoreCaseStringMatcher("cursor", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // ParametersDeclaration
                  match = parametersDeclaration$Rule();
                  if (match) {
                     // "is"
                     match = ignoreCaseStringMatcher("is", 2);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SelectStatement
                              match = selectStatement$Rule();
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ItemDeclaration : (ExceptionDeclaration | ConstantDeclaration | CursorDeclaration | VariableDeclaration)
   protected boolean itemDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (ExceptionDeclaration | ConstantDeclaration | CursorDeclaration | VariableDeclaration)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // ExceptionDeclaration
            match = exceptionDeclaration$Rule();
            if (! match) {
               // ConstantDeclaration
               match = constantDeclaration$Rule();
               if (! match) {
                  // VariableDeclaration
                  match = variableDeclaration$Rule();
               }
            }
            break;
         }
         case 'C':
         case 'c': {
            // ExceptionDeclaration
            match = exceptionDeclaration$Rule();
            if (! match) {
               // ConstantDeclaration
               match = constantDeclaration$Rule();
               if (! match) {
                  // CursorDeclaration
                  match = cursorDeclaration$Rule();
                  if (! match) {
                     // VariableDeclaration
                     match = variableDeclaration$Rule();
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ITEM_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExceptionDeclaration : (PlSqlAnyIdentifier "exception" TestNoAlpha OptionalSpacing)
   protected boolean exceptionDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlAnyIdentifier "exception" TestNoAlpha OptionalSpacing)
      // PlSqlAnyIdentifier
      match = plSqlAnyIdentifier$Rule();
      if (match) {
         // "exception"
         match = ignoreCaseStringMatcher("exception", 9);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXCEPTION_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ConstantDeclaration : (PlSqlAnyIdentifier "constant" TestNoAlpha OptionalSpacing TypeSpec Nullable? DefaultValue)
   protected boolean constantDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlAnyIdentifier "constant" TestNoAlpha OptionalSpacing TypeSpec Nullable? DefaultValue)
      // PlSqlAnyIdentifier
      match = plSqlAnyIdentifier$Rule();
      if (match) {
         // "constant"
         match = ignoreCaseStringMatcher("constant", 8);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // TypeSpec
                  match = typeSpec$Rule();
                  if (match) {
                     // Nullable?
                     // Nullable
                     nullable$Rule();
                     // DefaultValue
                     match = defaultValue$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONSTANT_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //VariableDeclaration : (PlSqlIdentifier TypeSpec Nullable? DefaultValue?)
   protected boolean variableDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier TypeSpec Nullable? DefaultValue?)
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (match) {
         // TypeSpec
         match = typeSpec$Rule();
         if (match) {
            // Nullable?
            // Nullable
            nullable$Rule();
            // DefaultValue?
            // DefaultValue
            defaultValue$Rule();
            match = true;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VARIABLE_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ResultCache : ("result_cache" TestNoAlpha OptionalSpacing ("relies_on" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier (',' OptionalSpacing SqlObjectIdentifier)* ')' OptionalSpacing)?)
   protected boolean resultCache$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("result_cache" TestNoAlpha OptionalSpacing ("relies_on" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier (',' OptionalSpacing SqlObjectIdentifier)* ')' OptionalSpacing)?)
      // "result_cache"
      match = ignoreCaseStringMatcher("result_cache", 12);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ("relies_on" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier (',' OptionalSpacing SqlObjectIdentifier)* ')' OptionalSpacing)?
               // ("relies_on" TestNoAlpha OptionalSpacing '(' OptionalSpacing SqlObjectIdentifier (',' OptionalSpacing SqlObjectIdentifier)* ')' OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "relies_on"
               match = ignoreCaseStringMatcher("relies_on", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // SqlObjectIdentifier
                              match = sqlObjectIdentifier$Rule();
                              if (match) {
                                 // (',' OptionalSpacing SqlObjectIdentifier)*
                                 do {
                                    // (',' OptionalSpacing SqlObjectIdentifier)
                                    Node lastNode_2 = currentNode;
                                    int lastIndex_2 = index;
                                    // ','
                                    match = charMatcher(',');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // SqlObjectIdentifier
                                          match = sqlObjectIdentifier$Rule();
                                          if (! match) {
                                             index = lastIndex_2;
                                             lastNode_2.setSibling(null);
                                             currentNode = lastNode_2;
                                          }
                                       } else {
                                          index = lastIndex_2;
                                          lastNode_2.setSibling(null);
                                       }
                                    }
                                 } while(match);
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                       currentNode = lastNode_1;
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RESULT_CACHE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FunctionDeclaration : (FunctionHeading FunctionModifier)
   protected boolean functionDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (FunctionHeading FunctionModifier)
      // FunctionHeading
      match = functionHeading$Rule();
      if (match) {
         // FunctionModifier
         match = functionModifier$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FUNCTION_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FunctionModifier : (("deterministic" TestNoAlpha OptionalSpacing) | ("pipelined" TestNoAlpha OptionalSpacing) | ("parallel_enable" TestNoAlpha OptionalSpacing) | ResultCache | InvokerRights)*
   protected boolean functionModifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("deterministic" TestNoAlpha OptionalSpacing) | ("pipelined" TestNoAlpha OptionalSpacing) | ("parallel_enable" TestNoAlpha OptionalSpacing) | ResultCache | InvokerRights)*
      do {
         // (("deterministic" TestNoAlpha OptionalSpacing) | ("pipelined" TestNoAlpha OptionalSpacing) | ("parallel_enable" TestNoAlpha OptionalSpacing) | ResultCache | InvokerRights)
         // ("deterministic" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // "deterministic"
         match = ignoreCaseStringMatcher("deterministic", 13);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         if (! match) {
            // ("pipelined" TestNoAlpha OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // "pipelined"
            match = ignoreCaseStringMatcher("pipelined", 9);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
            if (! match) {
               // ("parallel_enable" TestNoAlpha OptionalSpacing)
               Node lastNode_3 = currentNode;
               int lastIndex_3 = index;
               // "parallel_enable"
               match = ignoreCaseStringMatcher("parallel_enable", 15);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_3;
                        lastNode_3.setSibling(null);
                        currentNode = lastNode_3;
                     }
                  } else {
                     index = lastIndex_3;
                     lastNode_3.setSibling(null);
                  }
               }
               if (! match) {
                  // ResultCache
                  match = resultCache$Rule();
                  if (! match) {
                     // InvokerRights
                     match = invokerRights$Rule();
                  }
               }
            }
         }
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.FUNCTION_MODIFIER, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ProcedureDeclaration : ProcedureHeading
   protected boolean procedureDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ProcedureHeading
      match = procedureHeading$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PROCEDURE_DECLARATION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Pragma : ("pragma" TestNoAlpha OptionalSpacing (("restrict_references" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("default" TestNoAlpha OptionalSpacing) | PlSqlAnyIdentifier) (',' OptionalSpacing PragmaParam)+ ')' OptionalSpacing) | ("exception_init" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlAnyIdentifier ',' OptionalSpacing PlSqlLiteral ')' OptionalSpacing) | ("autonomous_transaction" TestNoAlpha OptionalSpacing) | ("serially_reusable" TestNoAlpha OptionalSpacing) | ("builtin" TestNoAlpha OptionalSpacing PragmaParams) | ("fipsflag" TestNoAlpha OptionalSpacing PragmaParams) | ("interface" TestNoAlpha OptionalSpacing PragmaParams) | ("new_names" TestNoAlpha OptionalSpacing PragmaParams) | ("timestamp" TestNoAlpha OptionalSpacing PragmaParams)))
   protected boolean pragma$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("pragma" TestNoAlpha OptionalSpacing (("restrict_references" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("default" TestNoAlpha OptionalSpacing) | PlSqlAnyIdentifier) (',' OptionalSpacing PragmaParam)+ ')' OptionalSpacing) | ("exception_init" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlAnyIdentifier ',' OptionalSpacing PlSqlLiteral ')' OptionalSpacing) | ("autonomous_transaction" TestNoAlpha OptionalSpacing) | ("serially_reusable" TestNoAlpha OptionalSpacing) | ("builtin" TestNoAlpha OptionalSpacing PragmaParams) | ("fipsflag" TestNoAlpha OptionalSpacing PragmaParams) | ("interface" TestNoAlpha OptionalSpacing PragmaParams) | ("new_names" TestNoAlpha OptionalSpacing PragmaParams) | ("timestamp" TestNoAlpha OptionalSpacing PragmaParams)))
      // "pragma"
      match = ignoreCaseStringMatcher("pragma", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (("restrict_references" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("default" TestNoAlpha OptionalSpacing) | PlSqlAnyIdentifier) (',' OptionalSpacing PragmaParam)+ ')' OptionalSpacing) | ("exception_init" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlAnyIdentifier ',' OptionalSpacing PlSqlLiteral ')' OptionalSpacing) | ("autonomous_transaction" TestNoAlpha OptionalSpacing) | ("serially_reusable" TestNoAlpha OptionalSpacing) | ("builtin" TestNoAlpha OptionalSpacing PragmaParams) | ("fipsflag" TestNoAlpha OptionalSpacing PragmaParams) | ("interface" TestNoAlpha OptionalSpacing PragmaParams) | ("new_names" TestNoAlpha OptionalSpacing PragmaParams) | ("timestamp" TestNoAlpha OptionalSpacing PragmaParams))
               // ("restrict_references" TestNoAlpha OptionalSpacing '(' OptionalSpacing (("default" TestNoAlpha OptionalSpacing) | PlSqlAnyIdentifier) (',' OptionalSpacing PragmaParam)+ ')' OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "restrict_references"
               match = ignoreCaseStringMatcher("restrict_references", 19);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // (("default" TestNoAlpha OptionalSpacing) | PlSqlAnyIdentifier)
                              // ("default" TestNoAlpha OptionalSpacing)
                              Node lastNode_2 = currentNode;
                              int lastIndex_2 = index;
                              // "default"
                              match = ignoreCaseStringMatcher("default", 7);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (! match) {
                                       index = lastIndex_2;
                                       lastNode_2.setSibling(null);
                                       currentNode = lastNode_2;
                                    }
                                 } else {
                                    index = lastIndex_2;
                                    lastNode_2.setSibling(null);
                                 }
                              }
                              if (! match) {
                                 // PlSqlAnyIdentifier
                                 match = plSqlAnyIdentifier$Rule();
                              }
                              if (match) {
                                 // (',' OptionalSpacing PragmaParam)+
                                 // (',' OptionalSpacing PragmaParam)
                                 Node lastNode_3 = currentNode;
                                 int lastIndex_3 = index;
                                 // ','
                                 match = charMatcher(',');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // PragmaParam
                                       match = pragmaParam$Rule();
                                       if (! match) {
                                          index = lastIndex_3;
                                          lastNode_3.setSibling(null);
                                          currentNode = lastNode_3;
                                       }
                                    } else {
                                       index = lastIndex_3;
                                       lastNode_3.setSibling(null);
                                    }
                                 }
                                 if (match) {
                                    do {
                                       // (',' OptionalSpacing PragmaParam)
                                       Node lastNode_4 = currentNode;
                                       int lastIndex_4 = index;
                                       // ','
                                       match = charMatcher(',');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // PragmaParam
                                             match = pragmaParam$Rule();
                                             if (! match) {
                                                index = lastIndex_4;
                                                lastNode_4.setSibling(null);
                                                currentNode = lastNode_4;
                                             }
                                          } else {
                                             index = lastIndex_4;
                                             lastNode_4.setSibling(null);
                                          }
                                       }
                                    } while(match);
                                    match = true;
                                 }
                                 if (match) {
                                    // ')'
                                    match = charMatcher(')');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (! match) {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                          currentNode = lastNode_1;
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_1;
                                 lastNode_1.setSibling(null);
                              }
                           } else {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               if (! match) {
                  // ("exception_init" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlAnyIdentifier ',' OptionalSpacing PlSqlLiteral ')' OptionalSpacing)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // "exception_init"
                  match = ignoreCaseStringMatcher("exception_init", 14);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // '('
                           match = charMatcher('(');
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // PlSqlAnyIdentifier
                                 match = plSqlAnyIdentifier$Rule();
                                 if (match) {
                                    // ','
                                    match = charMatcher(',');
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // PlSqlLiteral
                                          match = plSqlLiteral$Rule();
                                          if (match) {
                                             // ')'
                                             match = charMatcher(')');
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (! match) {
                                                   index = lastIndex_5;
                                                   lastNode_5.setSibling(null);
                                                   currentNode = lastNode_5;
                                                }
                                             } else {
                                                index = lastIndex_5;
                                                lastNode_5.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_5;
                                             lastNode_5.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_5;
                                          lastNode_5.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_5;
                                       lastNode_5.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_5;
                                    lastNode_5.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_5;
                                 lastNode_5.setSibling(null);
                              }
                           } else {
                              index = lastIndex_5;
                              lastNode_5.setSibling(null);
                           }
                        } else {
                           index = lastIndex_5;
                           lastNode_5.setSibling(null);
                        }
                     } else {
                        index = lastIndex_5;
                        lastNode_5.setSibling(null);
                     }
                  }
                  if (! match) {
                     // ("autonomous_transaction" TestNoAlpha OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // "autonomous_transaction"
                     match = ignoreCaseStringMatcher("autonomous_transaction", 22);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                              currentNode = lastNode_6;
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     if (! match) {
                        // ("serially_reusable" TestNoAlpha OptionalSpacing)
                        Node lastNode_7 = currentNode;
                        int lastIndex_7 = index;
                        // "serially_reusable"
                        match = ignoreCaseStringMatcher("serially_reusable", 17);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_7;
                                 lastNode_7.setSibling(null);
                                 currentNode = lastNode_7;
                              }
                           } else {
                              index = lastIndex_7;
                              lastNode_7.setSibling(null);
                           }
                        }
                        if (! match) {
                           // ("builtin" TestNoAlpha OptionalSpacing PragmaParams)
                           Node lastNode_8 = currentNode;
                           int lastIndex_8 = index;
                           // "builtin"
                           match = ignoreCaseStringMatcher("builtin", 7);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // PragmaParams
                                    match = pragmaParams$Rule();
                                    if (! match) {
                                       index = lastIndex_8;
                                       lastNode_8.setSibling(null);
                                       currentNode = lastNode_8;
                                    }
                                 } else {
                                    index = lastIndex_8;
                                    lastNode_8.setSibling(null);
                                 }
                              } else {
                                 index = lastIndex_8;
                                 lastNode_8.setSibling(null);
                              }
                           }
                           if (! match) {
                              // ("fipsflag" TestNoAlpha OptionalSpacing PragmaParams)
                              Node lastNode_9 = currentNode;
                              int lastIndex_9 = index;
                              // "fipsflag"
                              match = ignoreCaseStringMatcher("fipsflag", 8);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // PragmaParams
                                       match = pragmaParams$Rule();
                                       if (! match) {
                                          index = lastIndex_9;
                                          lastNode_9.setSibling(null);
                                          currentNode = lastNode_9;
                                       }
                                    } else {
                                       index = lastIndex_9;
                                       lastNode_9.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_9;
                                    lastNode_9.setSibling(null);
                                 }
                              }
                              if (! match) {
                                 // ("interface" TestNoAlpha OptionalSpacing PragmaParams)
                                 Node lastNode_10 = currentNode;
                                 int lastIndex_10 = index;
                                 // "interface"
                                 match = ignoreCaseStringMatcher("interface", 9);
                                 if (match) {
                                    // TestNoAlpha
                                    match = testNoAlpha$Rule();
                                    if (match) {
                                       // OptionalSpacing
                                       match = optionalSpacing$Rule();
                                       if (match) {
                                          // PragmaParams
                                          match = pragmaParams$Rule();
                                          if (! match) {
                                             index = lastIndex_10;
                                             lastNode_10.setSibling(null);
                                             currentNode = lastNode_10;
                                          }
                                       } else {
                                          index = lastIndex_10;
                                          lastNode_10.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_10;
                                       lastNode_10.setSibling(null);
                                    }
                                 }
                                 if (! match) {
                                    // ("new_names" TestNoAlpha OptionalSpacing PragmaParams)
                                    Node lastNode_11 = currentNode;
                                    int lastIndex_11 = index;
                                    // "new_names"
                                    match = ignoreCaseStringMatcher("new_names", 9);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // PragmaParams
                                             match = pragmaParams$Rule();
                                             if (! match) {
                                                index = lastIndex_11;
                                                lastNode_11.setSibling(null);
                                                currentNode = lastNode_11;
                                             }
                                          } else {
                                             index = lastIndex_11;
                                             lastNode_11.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_11;
                                          lastNode_11.setSibling(null);
                                       }
                                    }
                                    if (! match) {
                                       // ("timestamp" TestNoAlpha OptionalSpacing PragmaParams)
                                       Node lastNode_12 = currentNode;
                                       int lastIndex_12 = index;
                                       // "timestamp"
                                       match = ignoreCaseStringMatcher("timestamp", 9);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // PragmaParams
                                                match = pragmaParams$Rule();
                                                if (! match) {
                                                   index = lastIndex_12;
                                                   lastNode_12.setSibling(null);
                                                   currentNode = lastNode_12;
                                                }
                                             } else {
                                                index = lastIndex_12;
                                                lastNode_12.setSibling(null);
                                             }
                                          } else {
                                             index = lastIndex_12;
                                             lastNode_12.setSibling(null);
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRAGMA, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PragmaParams : ('(' OptionalSpacing PragmaParam (',' OptionalSpacing PragmaParam)* ')' OptionalSpacing)
   protected boolean pragmaParams$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing PragmaParam (',' OptionalSpacing PragmaParam)* ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PragmaParam
            match = pragmaParam$Rule();
            if (match) {
               // (',' OptionalSpacing PragmaParam)*
               do {
                  // (',' OptionalSpacing PragmaParam)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // PragmaParam
                        match = pragmaParam$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRAGMA_PARAMS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PragmaParam : (PlSqlIdentifier | StringLiteral | ((('+' | '-') OptionalSpacing)? NumberLiteral))
   protected boolean pragmaParam$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier | StringLiteral | ((('+' | '-') OptionalSpacing)? NumberLiteral))
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (! match) {
         // StringLiteral
         match = stringLiteral$Rule();
         if (! match) {
            // ((('+' | '-') OptionalSpacing)? NumberLiteral)
            Node lastNode_1 = currentNode;
            int lastIndex_1 = index;
            // (('+' | '-') OptionalSpacing)?
            // (('+' | '-') OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('+' | '-')
            int startIndex_3 = index;
            switch(buffer.getChar(index)) {
               case '+': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '-': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            if (! match) {
               index = startIndex_3;
            } else if(! currentRuleIsAtomic) {
               currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_3, index, false, false));
               currentNode = currentNode.getSibling();
            }
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            }
            // NumberLiteral
            match = numberLiteral$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PRAGMA_PARAM, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Label : ("<<" OptionalSpacing PlSqlAnyIdentifier ">>" OptionalSpacing)
   protected boolean label$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("<<" OptionalSpacing PlSqlAnyIdentifier ">>" OptionalSpacing)
      // "<<"
      match = ignoreCaseStringMatcher("<<", 2);
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PlSqlAnyIdentifier
            match = plSqlAnyIdentifier$Rule();
            if (match) {
               // ">>"
               match = ignoreCaseStringMatcher(">>", 2);
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LABEL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Labels : Label*
   protected boolean labels$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // Label*
      do {
         // Label
         match = label$Rule();
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.LABELS, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //PlSqlStatement : (Labels (AssignStatement | CaseStatement | CloseStatement | ContinueStatement | BasicLoopStatement | ExecuteImmediateStatement | ExitStatement | FetchStatement | ForLoopStatement | ForAllStatement | GotoStatement | IfStatement | NullStatement | OpenStatement | PlSqlBlock | RaiseStatement | ReturnStatement | SqlStatement | WhileLoopStatement | PipeRowStatement | PlSqlObjectIdentifier))
   protected boolean plSqlStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Labels (AssignStatement | CaseStatement | CloseStatement | ContinueStatement | BasicLoopStatement | ExecuteImmediateStatement | ExitStatement | FetchStatement | ForLoopStatement | ForAllStatement | GotoStatement | IfStatement | NullStatement | OpenStatement | PlSqlBlock | RaiseStatement | ReturnStatement | SqlStatement | WhileLoopStatement | PipeRowStatement | PlSqlObjectIdentifier))
      // Labels
      match = labels$Rule();
      if (match) {
         // (AssignStatement | CaseStatement | CloseStatement | ContinueStatement | BasicLoopStatement | ExecuteImmediateStatement | ExitStatement | FetchStatement | ForLoopStatement | ForAllStatement | GotoStatement | IfStatement | NullStatement | OpenStatement | PlSqlBlock | RaiseStatement | ReturnStatement | SqlStatement | WhileLoopStatement | PipeRowStatement | PlSqlObjectIdentifier)
         switch(buffer.getChar(index)) {
            case 'L':
            case 'l': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // BasicLoopStatement
                  match = basicLoopStatement$Rule();
                  if (! match) {
                     // SqlStatement
                     match = sqlStatement$Rule();
                     if (! match) {
                        // PlSqlObjectIdentifier
                        match = plSqlObjectIdentifier$Rule();
                     }
                  }
               }
               break;
            }
            case 'S':
            case 's':
            case 'U':
            case 'u':
            case 'M':
            case 'm': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // SqlStatement
                  match = sqlStatement$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
               break;
            }
            case 'N':
            case 'n': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // NullStatement
                  match = nullStatement$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
               break;
            }
            case 'O':
            case 'o': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // OpenStatement
                  match = openStatement$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
               break;
            }
            case 'A':
            case 'H':
            case 'J':
            case 'K':
            case 'Q':
            case 'T':
            case 'V':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case '\"':
            case '#':
            case '$':
            case 'h':
            case 'j':
            case 'k':
            case '0':
            case '1':
            case 'q':
            case '2':
            case '3':
            case '4':
            case 't':
            case '5':
            case '6':
            case 'v':
            case '7':
            case '8':
            case 'x':
            case '9':
            case 'y':
            case 'z': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // PlSqlObjectIdentifier
                  match = plSqlObjectIdentifier$Rule();
               }
               break;
            }
            case 'P':
            case 'p': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // PipeRowStatement
                  match = pipeRowStatement$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
               break;
            }
            case 'R':
            case 'r': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // RaiseStatement
                  match = raiseStatement$Rule();
                  if (! match) {
                     // ReturnStatement
                     match = returnStatement$Rule();
                     if (! match) {
                        // SqlStatement
                        match = sqlStatement$Rule();
                        if (! match) {
                           // PlSqlObjectIdentifier
                           match = plSqlObjectIdentifier$Rule();
                        }
                     }
                  }
               }
               break;
            }
            case 'W':
            case 'w': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // SqlStatement
                  match = sqlStatement$Rule();
                  if (! match) {
                     // WhileLoopStatement
                     match = whileLoopStatement$Rule();
                     if (! match) {
                        // PlSqlObjectIdentifier
                        match = plSqlObjectIdentifier$Rule();
                     }
                  }
               }
               break;
            }
            case ':': {
               // AssignStatement
               match = assignStatement$Rule();
               break;
            }
            case '<': {
               // PlSqlBlock
               match = plSqlBlock$Rule();
               break;
            }
            case 'B':
            case 'b': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // PlSqlBlock
                  match = plSqlBlock$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
               break;
            }
            case 'C':
            case 'c': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // CaseStatement
                  match = caseStatement$Rule();
                  if (! match) {
                     // CloseStatement
                     match = closeStatement$Rule();
                     if (! match) {
                        // ContinueStatement
                        match = continueStatement$Rule();
                        if (! match) {
                           // SqlStatement
                           match = sqlStatement$Rule();
                           if (! match) {
                              // PlSqlObjectIdentifier
                              match = plSqlObjectIdentifier$Rule();
                           }
                        }
                     }
                  }
               }
               break;
            }
            case 'D':
            case 'd': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // PlSqlBlock
                  match = plSqlBlock$Rule();
                  if (! match) {
                     // SqlStatement
                     match = sqlStatement$Rule();
                     if (! match) {
                        // PlSqlObjectIdentifier
                        match = plSqlObjectIdentifier$Rule();
                     }
                  }
               }
               break;
            }
            case 'E':
            case 'e': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // ExecuteImmediateStatement
                  match = executeImmediateStatement$Rule();
                  if (! match) {
                     // ExitStatement
                     match = exitStatement$Rule();
                     if (! match) {
                        // PlSqlObjectIdentifier
                        match = plSqlObjectIdentifier$Rule();
                     }
                  }
               }
               break;
            }
            case 'F':
            case 'f': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // FetchStatement
                  match = fetchStatement$Rule();
                  if (! match) {
                     // ForLoopStatement
                     match = forLoopStatement$Rule();
                     if (! match) {
                        // ForAllStatement
                        match = forAllStatement$Rule();
                        if (! match) {
                           // PlSqlObjectIdentifier
                           match = plSqlObjectIdentifier$Rule();
                        }
                     }
                  }
               }
               break;
            }
            case 'G':
            case 'g': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // GotoStatement
                  match = gotoStatement$Rule();
                  if (! match) {
                     // PlSqlObjectIdentifier
                     match = plSqlObjectIdentifier$Rule();
                  }
               }
               break;
            }
            case '(': {
               // SqlStatement
               match = sqlStatement$Rule();
               break;
            }
            case 'I':
            case 'i': {
               // AssignStatement
               match = assignStatement$Rule();
               if (! match) {
                  // IfStatement
                  match = ifStatement$Rule();
                  if (! match) {
                     // SqlStatement
                     match = sqlStatement$Rule();
                     if (! match) {
                        // PlSqlObjectIdentifier
                        match = plSqlObjectIdentifier$Rule();
                     }
                  }
               }
               break;
            }
            default: {
               match = false;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //HostVariable : (':' OptionalSpacing PlSqlObjectIdentifier)
   protected boolean hostVariable$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (':' OptionalSpacing PlSqlObjectIdentifier)
      // ':'
      match = charMatcher(':');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PlSqlObjectIdentifier
            match = plSqlObjectIdentifier$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HOST_VARIABLE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //LeftValue : (HostVariable | PlSqlObjectIdentifier)
   protected boolean leftValue$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (HostVariable | PlSqlObjectIdentifier)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // PlSqlObjectIdentifier
            match = plSqlObjectIdentifier$Rule();
            break;
         }
         case ':': {
            // HostVariable
            match = hostVariable$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LEFT_VALUE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AssignStatement : (LeftValue ":=" OptionalSpacing PlSqlExpression)
   protected boolean assignStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (LeftValue ":=" OptionalSpacing PlSqlExpression)
      // LeftValue
      match = leftValue$Rule();
      if (match) {
         // ":="
         match = ignoreCaseStringMatcher(":=", 2);
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ASSIGN_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NamedParameter : (PlSqlIdentifier PlSqlExpression)
   protected boolean namedParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier PlSqlExpression)
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (match) {
         // PlSqlExpression
         match = plSqlExpression$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NAMED_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlFunctionParameter : (NamedParameter | PlSqlExpression | BindVariable)
   protected boolean plSqlFunctionParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NamedParameter | PlSqlExpression | BindVariable)
      switch(buffer.getChar(index)) {
         case '\'':
         case '(':
         case '+':
         case '-': {
            // PlSqlExpression
            match = plSqlExpression$Rule();
            break;
         }
         case '?': {
            // BindVariable
            match = bindVariable$Rule();
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // NamedParameter
            match = namedParameter$Rule();
            if (! match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
            }
            break;
         }
         case ':': {
            // PlSqlExpression
            match = plSqlExpression$Rule();
            if (! match) {
               // BindVariable
               match = bindVariable$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_FUNCTION_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlParameters : ('(' OptionalSpacing (')'& | (PlSqlFunctionParameter (',' OptionalSpacing PlSqlFunctionParameter)*)) ')' OptionalSpacing)
   protected boolean plSqlParameters$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing (')'& | (PlSqlFunctionParameter (',' OptionalSpacing PlSqlFunctionParameter)*)) ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // (')'& | (PlSqlFunctionParameter (',' OptionalSpacing PlSqlFunctionParameter)*))
            // ')'&
            // ')'
            match = buffer.matchChar(index, ')');
            if (! match) {
               // (PlSqlFunctionParameter (',' OptionalSpacing PlSqlFunctionParameter)*)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // PlSqlFunctionParameter
               match = plSqlFunctionParameter$Rule();
               if (match) {
                  // (',' OptionalSpacing PlSqlFunctionParameter)*
                  do {
                     // (',' OptionalSpacing PlSqlFunctionParameter)
                     Node lastNode_2 = currentNode;
                     int lastIndex_2 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlFunctionParameter
                           match = plSqlFunctionParameter$Rule();
                           if (! match) {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                              currentNode = lastNode_2;
                           }
                        } else {
                           index = lastIndex_2;
                           lastNode_2.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_PARAMETERS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseStatementWhen : ("when" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlStatements)
   protected boolean caseStatementWhen$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlStatements)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlStatements
                           match = plSqlStatements$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_STATEMENT_WHEN, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseStatementWhenList : CaseStatementWhen+
   protected boolean caseStatementWhenList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // CaseStatementWhen+
      // CaseStatementWhen
      match = caseStatementWhen$Rule();
      if (match) {
         do {
            // CaseStatementWhen
            match = caseStatementWhen$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_STATEMENT_WHEN_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseStatementElse : ("else" TestNoAlpha OptionalSpacing PlSqlStatements)
   protected boolean caseStatementElse$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("else" TestNoAlpha OptionalSpacing PlSqlStatements)
      // "else"
      match = ignoreCaseStringMatcher("else", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlStatements
               match = plSqlStatements$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_STATEMENT_ELSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CaseStatement : ("case" TestNoAlpha OptionalSpacing PlSqlExpression? CaseStatementWhenList CaseStatementElse? "end" TestNoAlpha OptionalSpacing "case" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
   protected boolean caseStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("case" TestNoAlpha OptionalSpacing PlSqlExpression? CaseStatementWhenList CaseStatementElse? "end" TestNoAlpha OptionalSpacing "case" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
      // "case"
      match = ignoreCaseStringMatcher("case", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression?
               // PlSqlExpression
               plSqlExpression$Rule();
               // CaseStatementWhenList
               match = caseStatementWhenList$Rule();
               if (match) {
                  // CaseStatementElse?
                  // CaseStatementElse
                  caseStatementElse$Rule();
                  // "end"
                  match = ignoreCaseStringMatcher("end", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "case"
                           match = ignoreCaseStringMatcher("case", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?
                                    // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)
                                    Node lastNode_1 = currentNode;
                                    int lastIndex_1 = index;
                                    // PlSqlAnyIdentifier
                                    match = plSqlAnyIdentifier$Rule();
                                    if (match) {
                                       // "EndIdentifier"
                                       match = ignoreCaseStringMatcher("EndIdentifier", 13);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                                currentNode = lastNode_1;
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    }
                                    match = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CASE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ContinueStatement : ("continue" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier? PlSqlExpression?)
   protected boolean continueStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("continue" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier? PlSqlExpression?)
      // "continue"
      match = ignoreCaseStringMatcher("continue", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier?
               // PlSqlAnyIdentifier
               plSqlAnyIdentifier$Rule();
               // PlSqlExpression?
               // PlSqlExpression
               plSqlExpression$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CONTINUE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CloseStatement : ("close" TestNoAlpha OptionalSpacing SqlObjectIdentifier)
   protected boolean closeStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("close" TestNoAlpha OptionalSpacing SqlObjectIdentifier)
      // "close"
      match = ignoreCaseStringMatcher("close", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SqlObjectIdentifier
               match = sqlObjectIdentifier$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CLOSE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BasicLoopStatement : ("loop" TestNoAlpha OptionalSpacing PlSqlStatements "end" TestNoAlpha OptionalSpacing "loop" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
   protected boolean basicLoopStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("loop" TestNoAlpha OptionalSpacing PlSqlStatements "end" TestNoAlpha OptionalSpacing "loop" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
      // "loop"
      match = ignoreCaseStringMatcher("loop", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlStatements
               match = plSqlStatements$Rule();
               if (match) {
                  // "end"
                  match = ignoreCaseStringMatcher("end", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // "loop"
                           match = ignoreCaseStringMatcher("loop", 4);
                           if (match) {
                              // TestNoAlpha
                              match = testNoAlpha$Rule();
                              if (match) {
                                 // OptionalSpacing
                                 match = optionalSpacing$Rule();
                                 if (match) {
                                    // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?
                                    // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)
                                    Node lastNode_1 = currentNode;
                                    int lastIndex_1 = index;
                                    // PlSqlAnyIdentifier
                                    match = plSqlAnyIdentifier$Rule();
                                    if (match) {
                                       // "EndIdentifier"
                                       match = ignoreCaseStringMatcher("EndIdentifier", 13);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                                currentNode = lastNode_1;
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    }
                                    match = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BASIC_LOOP_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExecuteImediateOptions : ((IntoClause UsingClause?) | ("IntoClause" TestNoAlpha OptionalSpacing) | (BulkCollectIntoClause UsingClause?) | ("BulkIntoClause" TestNoAlpha OptionalSpacing) | (UsingClause DynamicReturningClause?) | ("UsingClauseDynamic" TestNoAlpha OptionalSpacing) | DynamicReturningClause)
   protected boolean executeImediateOptions$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((IntoClause UsingClause?) | ("IntoClause" TestNoAlpha OptionalSpacing) | (BulkCollectIntoClause UsingClause?) | ("BulkIntoClause" TestNoAlpha OptionalSpacing) | (UsingClause DynamicReturningClause?) | ("UsingClauseDynamic" TestNoAlpha OptionalSpacing) | DynamicReturningClause)
      // (IntoClause UsingClause?)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // IntoClause
      match = intoClause$Rule();
      if (match) {
         // UsingClause?
         // UsingClause
         usingClause$Rule();
         match = true;
      }
      if (! match) {
         // ("IntoClause" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "IntoClause"
         match = ignoreCaseStringMatcher("IntoClause", 10);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // (BulkCollectIntoClause UsingClause?)
            Node lastNode_3 = currentNode;
            int lastIndex_3 = index;
            // BulkCollectIntoClause
            match = bulkCollectIntoClause$Rule();
            if (match) {
               // UsingClause?
               // UsingClause
               usingClause$Rule();
               match = true;
            }
            if (! match) {
               // ("BulkIntoClause" TestNoAlpha OptionalSpacing)
               Node lastNode_4 = currentNode;
               int lastIndex_4 = index;
               // "BulkIntoClause"
               match = ignoreCaseStringMatcher("BulkIntoClause", 14);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  } else {
                     index = lastIndex_4;
                     lastNode_4.setSibling(null);
                  }
               }
               if (! match) {
                  // (UsingClause DynamicReturningClause?)
                  Node lastNode_5 = currentNode;
                  int lastIndex_5 = index;
                  // UsingClause
                  match = usingClause$Rule();
                  if (match) {
                     // DynamicReturningClause?
                     // DynamicReturningClause
                     dynamicReturningClause$Rule();
                     match = true;
                  }
                  if (! match) {
                     // ("UsingClauseDynamic" TestNoAlpha OptionalSpacing)
                     Node lastNode_6 = currentNode;
                     int lastIndex_6 = index;
                     // "UsingClauseDynamic"
                     match = ignoreCaseStringMatcher("UsingClauseDynamic", 18);
                     if (match) {
                        // TestNoAlpha
                        match = testNoAlpha$Rule();
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (! match) {
                              index = lastIndex_6;
                              lastNode_6.setSibling(null);
                              currentNode = lastNode_6;
                           }
                        } else {
                           index = lastIndex_6;
                           lastNode_6.setSibling(null);
                        }
                     }
                     if (! match) {
                        // DynamicReturningClause
                        match = dynamicReturningClause$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXECUTE_IMEDIATE_OPTIONS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExecuteImmediateStatement : ("execute" TestNoAlpha OptionalSpacing "immediate" TestNoAlpha OptionalSpacing PlSqlExpression ExecuteImediateOptions?)
   protected boolean executeImmediateStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("execute" TestNoAlpha OptionalSpacing "immediate" TestNoAlpha OptionalSpacing PlSqlExpression ExecuteImediateOptions?)
      // "execute"
      match = ignoreCaseStringMatcher("execute", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "immediate"
               match = ignoreCaseStringMatcher("immediate", 9);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // PlSqlExpression
                        match = plSqlExpression$Rule();
                        if (match) {
                           // ExecuteImediateOptions?
                           // ExecuteImediateOptions
                           executeImediateOptions$Rule();
                           match = true;
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXECUTE_IMMEDIATE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IntoClause : ("into" TestNoAlpha OptionalSpacing LeftValue (',' OptionalSpacing LeftValue)*)
   protected boolean intoClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("into" TestNoAlpha OptionalSpacing LeftValue (',' OptionalSpacing LeftValue)*)
      // "into"
      match = ignoreCaseStringMatcher("into", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // LeftValue
               match = leftValue$Rule();
               if (match) {
                  // (',' OptionalSpacing LeftValue)*
                  do {
                     // (',' OptionalSpacing LeftValue)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // LeftValue
                           match = leftValue$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INTO_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BulkCollectIntoClause : ("bulk" TestNoAlpha OptionalSpacing "collect" TestNoAlpha OptionalSpacing "into" TestNoAlpha OptionalSpacing LeftValue (',' OptionalSpacing LeftValue)*)
   protected boolean bulkCollectIntoClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("bulk" TestNoAlpha OptionalSpacing "collect" TestNoAlpha OptionalSpacing "into" TestNoAlpha OptionalSpacing LeftValue (',' OptionalSpacing LeftValue)*)
      // "bulk"
      match = ignoreCaseStringMatcher("bulk", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "collect"
               match = ignoreCaseStringMatcher("collect", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // "into"
                        match = ignoreCaseStringMatcher("into", 4);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (match) {
                                 // LeftValue
                                 match = leftValue$Rule();
                                 if (match) {
                                    // (',' OptionalSpacing LeftValue)*
                                    do {
                                       // (',' OptionalSpacing LeftValue)
                                       Node lastNode_1 = currentNode;
                                       int lastIndex_1 = index;
                                       // ','
                                       match = charMatcher(',');
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // LeftValue
                                             match = leftValue$Rule();
                                             if (! match) {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                                currentNode = lastNode_1;
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       }
                                    } while(match);
                                    match = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BULK_COLLECT_INTO_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UsingParameter : (("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)? Out? PlSqlExpression)
   protected boolean usingParameter$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)? Out? PlSqlExpression)
      // ("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)?
      // ("in" TestNoAlpha OptionalSpacing "In" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "in"
      match = ignoreCaseStringMatcher("in", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "In"
               match = ignoreCaseStringMatcher("In", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // Out?
      // Out
      out$Rule();
      // PlSqlExpression
      match = plSqlExpression$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.USING_PARAMETER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //UsingClause : ("using" TestNoAlpha OptionalSpacing UsingParameter (',' OptionalSpacing UsingParameter)*)
   protected boolean usingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("using" TestNoAlpha OptionalSpacing UsingParameter (',' OptionalSpacing UsingParameter)*)
      // "using"
      match = ignoreCaseStringMatcher("using", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // UsingParameter
               match = usingParameter$Rule();
               if (match) {
                  // (',' OptionalSpacing UsingParameter)*
                  do {
                     // (',' OptionalSpacing UsingParameter)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // ','
                     match = charMatcher(',');
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // UsingParameter
                           match = usingParameter$Rule();
                           if (! match) {
                              index = lastIndex_1;
                              lastNode_1.setSibling(null);
                              currentNode = lastNode_1;
                           }
                        } else {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                        }
                     }
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.USING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //DynamicReturningClause : ((("returning" | "return") TestNoAlpha OptionalSpacing) (IntoClause | BulkCollectIntoClause))
   protected boolean dynamicReturningClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ((("returning" | "return") TestNoAlpha OptionalSpacing) (IntoClause | BulkCollectIntoClause))
      // (("returning" | "return") TestNoAlpha OptionalSpacing)
      // ("returning" | "return")
      int startIndex_1 = index;
      if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
         ++index;
         // ("eturning" | "eturn")
         if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
            ++index;
            // ("turning" | "turn")
            if (buffer.matchChar(index, 't') || buffer.matchChar(index, 'T')) {
               ++index;
               // ("urning" | "urn")
               if (buffer.matchChar(index, 'u') || buffer.matchChar(index, 'U')) {
                  ++index;
                  // ("rning" | "rn")
                  if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                     ++index;
                     // ("ning" | "n")
                     if (buffer.matchChar(index, 'n') || buffer.matchChar(index, 'N')) {
                        ++index;
                        // ("ing" | <EMPTY>)
                        if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
                           ++index;
                           // "ng"
                           if (match = ignoreCaseStringTest("ng", 2)) {
                              index += 2;
                           }
                        } else {
                           match = true;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
               } else {
                  match = false;
               }
            } else {
               match = false;
            }
         } else {
            match = false;
         }
      } else {
         match = false;
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         // (IntoClause | BulkCollectIntoClause)
         switch(buffer.getChar(index)) {
            case 'b':
            case 'B': {
               // BulkCollectIntoClause
               match = bulkCollectIntoClause$Rule();
               break;
            }
            case 'i':
            case 'I': {
               // IntoClause
               match = intoClause$Rule();
               break;
            }
            default: {
               match = false;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.DYNAMIC_RETURNING_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExitStatement : ("exit" TestNoAlpha OptionalSpacing PlSqlIdentifier? ("when" TestNoAlpha OptionalSpacing PlSqlExpression)?)
   protected boolean exitStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("exit" TestNoAlpha OptionalSpacing PlSqlIdentifier? ("when" TestNoAlpha OptionalSpacing PlSqlExpression)?)
      // "exit"
      match = ignoreCaseStringMatcher("exit", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlIdentifier?
               // PlSqlIdentifier
               plSqlIdentifier$Rule();
               match = true;
               // ("when" TestNoAlpha OptionalSpacing PlSqlExpression)?
               // ("when" TestNoAlpha OptionalSpacing PlSqlExpression)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // "when"
               match = ignoreCaseStringMatcher("when", 4);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // PlSqlExpression
                        match = plSqlExpression$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXIT_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Limit : ("limit" TestNoAlpha OptionalSpacing NumericExpression)
   protected boolean limit$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("limit" TestNoAlpha OptionalSpacing NumericExpression)
      // "limit"
      match = ignoreCaseStringMatcher("limit", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // NumericExpression
               match = numericExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.LIMIT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FetchStatement : ("fetch" TestNoAlpha OptionalSpacing LeftValue (IntoClause | (BulkCollectIntoClause Limit?) | ("BullkLimited" TestNoAlpha OptionalSpacing)))
   protected boolean fetchStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("fetch" TestNoAlpha OptionalSpacing LeftValue (IntoClause | (BulkCollectIntoClause Limit?) | ("BullkLimited" TestNoAlpha OptionalSpacing)))
      // "fetch"
      match = ignoreCaseStringMatcher("fetch", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // LeftValue
               match = leftValue$Rule();
               if (match) {
                  // (IntoClause | (BulkCollectIntoClause Limit?) | ("BullkLimited" TestNoAlpha OptionalSpacing))
                  // IntoClause
                  match = intoClause$Rule();
                  if (! match) {
                     // (BulkCollectIntoClause Limit?)
                     Node lastNode_1 = currentNode;
                     int lastIndex_1 = index;
                     // BulkCollectIntoClause
                     match = bulkCollectIntoClause$Rule();
                     if (match) {
                        // Limit?
                        // Limit
                        limit$Rule();
                        match = true;
                     }
                     if (! match) {
                        // ("BullkLimited" TestNoAlpha OptionalSpacing)
                        Node lastNode_2 = currentNode;
                        int lastIndex_2 = index;
                        // "BullkLimited"
                        match = ignoreCaseStringMatcher("BullkLimited", 12);
                        if (match) {
                           // TestNoAlpha
                           match = testNoAlpha$Rule();
                           if (match) {
                              // OptionalSpacing
                              match = optionalSpacing$Rule();
                              if (! match) {
                                 index = lastIndex_2;
                                 lastNode_2.setSibling(null);
                                 currentNode = lastNode_2;
                              }
                           } else {
                              index = lastIndex_2;
                              lastNode_2.setSibling(null);
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FETCH_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForLoopStatement : ("for" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "in" TestNoAlpha OptionalSpacing ForBoundsClause "loop" TestNoAlpha OptionalSpacing PlSqlStatements "end" TestNoAlpha OptionalSpacing "loop" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
   protected boolean forLoopStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "in" TestNoAlpha OptionalSpacing ForBoundsClause "loop" TestNoAlpha OptionalSpacing PlSqlStatements "end" TestNoAlpha OptionalSpacing "loop" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // "in"
                  match = ignoreCaseStringMatcher("in", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // ForBoundsClause
                           match = forBoundsClause$Rule();
                           if (match) {
                              // "loop"
                              match = ignoreCaseStringMatcher("loop", 4);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // PlSqlStatements
                                       match = plSqlStatements$Rule();
                                       if (match) {
                                          // "end"
                                          match = ignoreCaseStringMatcher("end", 3);
                                          if (match) {
                                             // TestNoAlpha
                                             match = testNoAlpha$Rule();
                                             if (match) {
                                                // OptionalSpacing
                                                match = optionalSpacing$Rule();
                                                if (match) {
                                                   // "loop"
                                                   match = ignoreCaseStringMatcher("loop", 4);
                                                   if (match) {
                                                      // TestNoAlpha
                                                      match = testNoAlpha$Rule();
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (match) {
                                                            // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?
                                                            // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)
                                                            Node lastNode_1 = currentNode;
                                                            int lastIndex_1 = index;
                                                            // PlSqlAnyIdentifier
                                                            match = plSqlAnyIdentifier$Rule();
                                                            if (match) {
                                                               // "EndIdentifier"
                                                               match = ignoreCaseStringMatcher("EndIdentifier", 13);
                                                               if (match) {
                                                                  // TestNoAlpha
                                                                  match = testNoAlpha$Rule();
                                                                  if (match) {
                                                                     // OptionalSpacing
                                                                     match = optionalSpacing$Rule();
                                                                     if (! match) {
                                                                        index = lastIndex_1;
                                                                        lastNode_1.setSibling(null);
                                                                        currentNode = lastNode_1;
                                                                     }
                                                                  } else {
                                                                     index = lastIndex_1;
                                                                     lastNode_1.setSibling(null);
                                                                  }
                                                               } else {
                                                                  index = lastIndex_1;
                                                                  lastNode_1.setSibling(null);
                                                               }
                                                            }
                                                            match = true;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_LOOP_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RangeBounds : (("reverse" TestNoAlpha OptionalSpacing "Reverse" TestNoAlpha OptionalSpacing)? Range)
   protected boolean rangeBounds$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("reverse" TestNoAlpha OptionalSpacing "Reverse" TestNoAlpha OptionalSpacing)? Range)
      // ("reverse" TestNoAlpha OptionalSpacing "Reverse" TestNoAlpha OptionalSpacing)?
      // ("reverse" TestNoAlpha OptionalSpacing "Reverse" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "reverse"
      match = ignoreCaseStringMatcher("reverse", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "Reverse"
               match = ignoreCaseStringMatcher("Reverse", 7);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (! match) {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                        currentNode = lastNode_1;
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      // Range
      match = range$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RANGE_BOUNDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorBounds : (PlSqlObjectIdentifier (PlSqlExpressionList "CursorParameters" TestNoAlpha OptionalSpacing)?)
   protected boolean cursorBounds$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlObjectIdentifier (PlSqlExpressionList "CursorParameters" TestNoAlpha OptionalSpacing)?)
      // PlSqlObjectIdentifier
      match = plSqlObjectIdentifier$Rule();
      if (match) {
         // (PlSqlExpressionList "CursorParameters" TestNoAlpha OptionalSpacing)?
         // (PlSqlExpressionList "CursorParameters" TestNoAlpha OptionalSpacing)
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // PlSqlExpressionList
         match = plSqlExpressionList$Rule();
         if (match) {
            // "CursorParameters"
            match = ignoreCaseStringMatcher("CursorParameters", 16);
            if (match) {
               // TestNoAlpha
               match = testNoAlpha$Rule();
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                     currentNode = lastNode_1;
                  }
               } else {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_BOUNDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SelectBounds : ('(' OptionalSpacing SelectStatement ')' OptionalSpacing)
   protected boolean selectBounds$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing SelectStatement ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // SelectStatement
            match = selectStatement$Rule();
            if (match) {
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SELECT_BOUNDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForBoundsClause : (RangeBounds | CursorBounds | SelectBounds)
   protected boolean forBoundsClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (RangeBounds | CursorBounds | SelectBounds)
      switch(buffer.getChar(index)) {
         case '\'':
         case ':':
         case '+':
         case '-': {
            // RangeBounds
            match = rangeBounds$Rule();
            break;
         }
         case '\"':
         case '#':
         case '$':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'V':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'v':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // RangeBounds
            match = rangeBounds$Rule();
            if (! match) {
               // CursorBounds
               match = cursorBounds$Rule();
            }
            break;
         }
         case '(': {
            // RangeBounds
            match = rangeBounds$Rule();
            if (! match) {
               // SelectBounds
               match = selectBounds$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_BOUNDS_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForAllStatement : ("forall" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "in" TestNoAlpha OptionalSpacing ForAllBoundsClause ("save" TestNoAlpha OptionalSpacing "exceptions" TestNoAlpha OptionalSpacing)? (ExecuteImmediateStatement | SqlStatement))
   protected boolean forAllStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("forall" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier "in" TestNoAlpha OptionalSpacing ForAllBoundsClause ("save" TestNoAlpha OptionalSpacing "exceptions" TestNoAlpha OptionalSpacing)? (ExecuteImmediateStatement | SqlStatement))
      // "forall"
      match = ignoreCaseStringMatcher("forall", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
               if (match) {
                  // "in"
                  match = ignoreCaseStringMatcher("in", 2);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // ForAllBoundsClause
                           match = forAllBoundsClause$Rule();
                           if (match) {
                              // ("save" TestNoAlpha OptionalSpacing "exceptions" TestNoAlpha OptionalSpacing)?
                              // ("save" TestNoAlpha OptionalSpacing "exceptions" TestNoAlpha OptionalSpacing)
                              Node lastNode_1 = currentNode;
                              int lastIndex_1 = index;
                              // "save"
                              match = ignoreCaseStringMatcher("save", 4);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "exceptions"
                                       match = ignoreCaseStringMatcher("exceptions", 10);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (! match) {
                                                index = lastIndex_1;
                                                lastNode_1.setSibling(null);
                                                currentNode = lastNode_1;
                                             }
                                          } else {
                                             index = lastIndex_1;
                                             lastNode_1.setSibling(null);
                                          }
                                       } else {
                                          index = lastIndex_1;
                                          lastNode_1.setSibling(null);
                                       }
                                    } else {
                                       index = lastIndex_1;
                                       lastNode_1.setSibling(null);
                                    }
                                 } else {
                                    index = lastIndex_1;
                                    lastNode_1.setSibling(null);
                                 }
                              }
                              match = true;
                              // (ExecuteImmediateStatement | SqlStatement)
                              switch(buffer.getChar(index)) {
                                 case 'c':
                                 case 'C':
                                 case 'd':
                                 case 'D':
                                 case '(':
                                 case 'i':
                                 case 'I':
                                 case 'l':
                                 case 'L':
                                 case 'm':
                                 case 'M':
                                 case 'r':
                                 case 'R':
                                 case 's':
                                 case 'S':
                                 case 'u':
                                 case 'U':
                                 case 'w':
                                 case 'W': {
                                    // SqlStatement
                                    match = sqlStatement$Rule();
                                    break;
                                 }
                                 case 'e':
                                 case 'E': {
                                    // ExecuteImmediateStatement
                                    match = executeImmediateStatement$Rule();
                                    break;
                                 }
                                 default: {
                                    match = false;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_ALL_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Range : (NumericExpression ".." OptionalSpacing NumericExpression)
   protected boolean range$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (NumericExpression ".." OptionalSpacing NumericExpression)
      // NumericExpression
      match = numericExpression$Rule();
      if (match) {
         // ".."
         match = ignoreCaseStringMatcher("..", 2);
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // NumericExpression
               match = numericExpression$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RANGE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BetweenBounds : ("between" TestNoAlpha OptionalSpacing NumericExpression "and" TestNoAlpha OptionalSpacing NumericExpression)
   protected boolean betweenBounds$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("between" TestNoAlpha OptionalSpacing NumericExpression "and" TestNoAlpha OptionalSpacing NumericExpression)
      // "between"
      match = ignoreCaseStringMatcher("between", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // NumericExpression
               match = numericExpression$Rule();
               if (match) {
                  // "and"
                  match = ignoreCaseStringMatcher("and", 3);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // NumericExpression
                           match = numericExpression$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BETWEEN_BOUNDS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //IndicesOfCollection : ("indices" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing PlSqlAtomicExpression BetweenBounds?)
   protected boolean indicesOfCollection$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("indices" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing PlSqlAtomicExpression BetweenBounds?)
      // "indices"
      match = ignoreCaseStringMatcher("indices", 7);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "of"
               match = ignoreCaseStringMatcher("of", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // PlSqlAtomicExpression
                        match = plSqlAtomicExpression$Rule();
                        if (match) {
                           // BetweenBounds?
                           // BetweenBounds
                           betweenBounds$Rule();
                           match = true;
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.INDICES_OF_COLLECTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ValuesOfIndexCollection : ("values" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing PlSqlAtomicExpression)
   protected boolean valuesOfIndexCollection$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("values" TestNoAlpha OptionalSpacing "of" TestNoAlpha OptionalSpacing PlSqlAtomicExpression)
      // "values"
      match = ignoreCaseStringMatcher("values", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "of"
               match = ignoreCaseStringMatcher("of", 2);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // PlSqlAtomicExpression
                        match = plSqlAtomicExpression$Rule();
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.VALUES_OF_INDEX_COLLECTION, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForAllBoundsClause : (Range | IndicesOfCollection | ValuesOfIndexCollection)
   protected boolean forAllBoundsClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Range | IndicesOfCollection | ValuesOfIndexCollection)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '(':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'S':
         case 'T':
         case 'U':
         case 'W':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 's':
         case 't':
         case 'u':
         case 'w':
         case 'x':
         case 'y':
         case 'z': {
            // Range
            match = range$Rule();
            break;
         }
         case 'V':
         case 'v': {
            // Range
            match = range$Rule();
            if (! match) {
               // ValuesOfIndexCollection
               match = valuesOfIndexCollection$Rule();
            }
            break;
         }
         case 'I':
         case 'i': {
            // Range
            match = range$Rule();
            if (! match) {
               // IndicesOfCollection
               match = indicesOfCollection$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_ALL_BOUNDS_CLAUSE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //GotoStatement : ("goto" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier)
   protected boolean gotoStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("goto" TestNoAlpha OptionalSpacing PlSqlAnyIdentifier)
      // "goto"
      match = ignoreCaseStringMatcher("goto", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlAnyIdentifier
               match = plSqlAnyIdentifier$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.GOTO_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlStatements : (PlSqlStatement ';' OptionalSpacing)+
   protected boolean plSqlStatements$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlStatement ';' OptionalSpacing)+
      // (PlSqlStatement ';' OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // PlSqlStatement
      match = plSqlStatement$Rule();
      if (match) {
         // ';'
         match = charMatcher(';');
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (match) {
         do {
            // (PlSqlStatement ';' OptionalSpacing)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // PlSqlStatement
            match = plSqlStatement$Rule();
            if (match) {
               // ';'
               match = charMatcher(';');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_STATEMENTS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElsIf : ("elsif" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlStatements)
   protected boolean elsIf$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("elsif" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlStatements)
      // "elsif"
      match = ignoreCaseStringMatcher("elsif", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlStatements
                           match = plSqlStatements$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ELS_IF, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ElsIfList : ElsIf*
   protected boolean elsIfList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ElsIf*
      do {
         // ElsIf
         match = elsIf$Rule();
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.ELS_IF_LIST, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ElseBody : ("else" TestNoAlpha OptionalSpacing PlSqlStatements)
   protected boolean elseBody$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("else" TestNoAlpha OptionalSpacing PlSqlStatements)
      // "else"
      match = ignoreCaseStringMatcher("else", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlStatements
               match = plSqlStatements$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ELSE_BODY, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //Else : ElseBody?
   protected boolean else$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ElseBody?
      // ElseBody
      elseBody$Rule();
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.ELSE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //IfStatement : ("if" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlStatements ElsIfList Else "end" TestNoAlpha OptionalSpacing "if" TestNoAlpha OptionalSpacing)
   protected boolean ifStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("if" TestNoAlpha OptionalSpacing PlSqlExpression "then" TestNoAlpha OptionalSpacing PlSqlStatements ElsIfList Else "end" TestNoAlpha OptionalSpacing "if" TestNoAlpha OptionalSpacing)
      // "if"
      match = ignoreCaseStringMatcher("if", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlStatements
                           match = plSqlStatements$Rule();
                           if (match) {
                              // ElsIfList
                              match = elsIfList$Rule();
                              if (match) {
                                 // Else
                                 match = else$Rule();
                                 if (match) {
                                    // "end"
                                    match = ignoreCaseStringMatcher("end", 3);
                                    if (match) {
                                       // TestNoAlpha
                                       match = testNoAlpha$Rule();
                                       if (match) {
                                          // OptionalSpacing
                                          match = optionalSpacing$Rule();
                                          if (match) {
                                             // "if"
                                             match = ignoreCaseStringMatcher("if", 2);
                                             if (match) {
                                                // TestNoAlpha
                                                match = testNoAlpha$Rule();
                                                if (match) {
                                                   // OptionalSpacing
                                                   match = optionalSpacing$Rule();
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.IF_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //NullStatement : NullLiteral
   protected boolean nullStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // NullLiteral
      match = nullLiteral$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.NULL_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorSource : (SelectStatement | PlSqlExpression)
   protected boolean cursorSource$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SelectStatement | PlSqlExpression)
      switch(buffer.getChar(index)) {
         case '\"':
         case '#':
         case '$':
         case '\'':
         case '+':
         case '-':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
         case ':':
         case 'A':
         case 'B':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'L':
         case 'M':
         case 'N':
         case 'O':
         case 'P':
         case 'Q':
         case 'R':
         case 'T':
         case 'U':
         case 'V':
         case 'X':
         case 'Y':
         case 'Z':
         case '_':
         case 'a':
         case 'b':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'l':
         case 'm':
         case 'n':
         case 'o':
         case 'p':
         case 'q':
         case 'r':
         case 't':
         case 'u':
         case 'v':
         case 'x':
         case 'y':
         case 'z': {
            // PlSqlExpression
            match = plSqlExpression$Rule();
            break;
         }
         case 'S':
         case 's':
         case 'W':
         case 'w':
         case '(': {
            // SelectStatement
            match = selectStatement$Rule();
            if (! match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_SOURCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //CursorUsingClause : UsingClause?
   protected boolean cursorUsingClause$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // UsingClause?
      // UsingClause
      usingClause$Rule();
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.CURSOR_USING_CLAUSE, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ForCursorSource : ("for" TestNoAlpha OptionalSpacing CursorSource CursorUsingClause)
   protected boolean forCursorSource$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("for" TestNoAlpha OptionalSpacing CursorSource CursorUsingClause)
      // "for"
      match = ignoreCaseStringMatcher("for", 3);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // CursorSource
               match = cursorSource$Rule();
               if (match) {
                  // CursorUsingClause
                  match = cursorUsingClause$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_CURSOR_SOURCE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ForCursor : ForCursorSource?
   protected boolean forCursor$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ForCursorSource?
      // ForCursorSource
      forCursorSource$Rule();
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.FOR_CURSOR, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //OpenStatement : ("open" TestNoAlpha OptionalSpacing PlSqlObjectIdentifier ForCursor)
   protected boolean openStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("open" TestNoAlpha OptionalSpacing PlSqlObjectIdentifier ForCursor)
      // "open"
      match = ignoreCaseStringMatcher("open", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlObjectIdentifier
               match = plSqlObjectIdentifier$Rule();
               if (match) {
                  // ForCursor
                  match = forCursor$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OPEN_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //AnonymousPlSqlBlock : (DeclarationSection? PlSqlBody)
   protected boolean anonymousPlSqlBlock$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (DeclarationSection? PlSqlBody)
      // DeclarationSection?
      // DeclarationSection
      declarationSection$Rule();
      // PlSqlBody
      match = plSqlBody$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.ANONYMOUS_PL_SQL_BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlBlock : (Labels DeclarationSection? PlSqlBody)
   protected boolean plSqlBlock$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (Labels DeclarationSection? PlSqlBody)
      // Labels
      match = labels$Rule();
      if (match) {
         // DeclarationSection?
         // DeclarationSection
         declarationSection$Rule();
         // PlSqlBody
         match = plSqlBody$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //RaiseStatement : ("raise" TestNoAlpha OptionalSpacing (SqlObjectIdentifier "RaiseObject" TestNoAlpha OptionalSpacing)?)
   protected boolean raiseStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("raise" TestNoAlpha OptionalSpacing (SqlObjectIdentifier "RaiseObject" TestNoAlpha OptionalSpacing)?)
      // "raise"
      match = ignoreCaseStringMatcher("raise", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (SqlObjectIdentifier "RaiseObject" TestNoAlpha OptionalSpacing)?
               // (SqlObjectIdentifier "RaiseObject" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // SqlObjectIdentifier
               match = sqlObjectIdentifier$Rule();
               if (match) {
                  // "RaiseObject"
                  match = ignoreCaseStringMatcher("RaiseObject", 11);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RAISE_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ReturnStatement : ("return" TestNoAlpha OptionalSpacing (PlSqlExpression "ReturnExpression" TestNoAlpha OptionalSpacing)?)
   protected boolean returnStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("return" TestNoAlpha OptionalSpacing (PlSqlExpression "ReturnExpression" TestNoAlpha OptionalSpacing)?)
      // "return"
      match = ignoreCaseStringMatcher("return", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // (PlSqlExpression "ReturnExpression" TestNoAlpha OptionalSpacing)?
               // (PlSqlExpression "ReturnExpression" TestNoAlpha OptionalSpacing)
               Node lastNode_1 = currentNode;
               int lastIndex_1 = index;
               // PlSqlExpression
               match = plSqlExpression$Rule();
               if (match) {
                  // "ReturnExpression"
                  match = ignoreCaseStringMatcher("ReturnExpression", 16);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  } else {
                     index = lastIndex_1;
                     lastNode_1.setSibling(null);
                  }
               }
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RETURN_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //WhileLoopStatement : ("while" TestNoAlpha OptionalSpacing PlSqlExpression "loop" TestNoAlpha OptionalSpacing PlSqlStatements "end" TestNoAlpha OptionalSpacing "loop" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
   protected boolean whileLoopStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("while" TestNoAlpha OptionalSpacing PlSqlExpression "loop" TestNoAlpha OptionalSpacing PlSqlStatements "end" TestNoAlpha OptionalSpacing "loop" TestNoAlpha OptionalSpacing (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?)
      // "while"
      match = ignoreCaseStringMatcher("while", 5);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlExpression
               match = plSqlExpression$Rule();
               if (match) {
                  // "loop"
                  match = ignoreCaseStringMatcher("loop", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlStatements
                           match = plSqlStatements$Rule();
                           if (match) {
                              // "end"
                              match = ignoreCaseStringMatcher("end", 3);
                              if (match) {
                                 // TestNoAlpha
                                 match = testNoAlpha$Rule();
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                    if (match) {
                                       // "loop"
                                       match = ignoreCaseStringMatcher("loop", 4);
                                       if (match) {
                                          // TestNoAlpha
                                          match = testNoAlpha$Rule();
                                          if (match) {
                                             // OptionalSpacing
                                             match = optionalSpacing$Rule();
                                             if (match) {
                                                // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)?
                                                // (PlSqlAnyIdentifier "EndIdentifier" TestNoAlpha OptionalSpacing)
                                                Node lastNode_1 = currentNode;
                                                int lastIndex_1 = index;
                                                // PlSqlAnyIdentifier
                                                match = plSqlAnyIdentifier$Rule();
                                                if (match) {
                                                   // "EndIdentifier"
                                                   match = ignoreCaseStringMatcher("EndIdentifier", 13);
                                                   if (match) {
                                                      // TestNoAlpha
                                                      match = testNoAlpha$Rule();
                                                      if (match) {
                                                         // OptionalSpacing
                                                         match = optionalSpacing$Rule();
                                                         if (! match) {
                                                            index = lastIndex_1;
                                                            lastNode_1.setSibling(null);
                                                            currentNode = lastNode_1;
                                                         }
                                                      } else {
                                                         index = lastIndex_1;
                                                         lastNode_1.setSibling(null);
                                                      }
                                                   } else {
                                                      index = lastIndex_1;
                                                      lastNode_1.setSibling(null);
                                                   }
                                                }
                                                match = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.WHILE_LOOP_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PipeRowStatement : ("pipe" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlAnyIdentifier ')' OptionalSpacing)
   protected boolean pipeRowStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("pipe" TestNoAlpha OptionalSpacing "row" TestNoAlpha OptionalSpacing '(' OptionalSpacing PlSqlAnyIdentifier ')' OptionalSpacing)
      // "pipe"
      match = ignoreCaseStringMatcher("pipe", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // "row"
               match = ignoreCaseStringMatcher("row", 3);
               if (match) {
                  // TestNoAlpha
                  match = testNoAlpha$Rule();
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // '('
                        match = charMatcher('(');
                        if (match) {
                           // OptionalSpacing
                           match = optionalSpacing$Rule();
                           if (match) {
                              // PlSqlAnyIdentifier
                              match = plSqlAnyIdentifier$Rule();
                              if (match) {
                                 // ')'
                                 match = charMatcher(')');
                                 if (match) {
                                    // OptionalSpacing
                                    match = optionalSpacing$Rule();
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PIPE_ROW_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //SqlStatement : DmlSentence
   protected boolean sqlStatement$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // DmlSentence
      match = dmlSentence$Rule();
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.SQL_STATEMENT, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlExpressionList : ('(' OptionalSpacing PlSqlExpression (',' OptionalSpacing PlSqlExpression)* ')' OptionalSpacing)
   protected boolean plSqlExpressionList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('(' OptionalSpacing PlSqlExpression (',' OptionalSpacing PlSqlExpression)* ')' OptionalSpacing)
      // '('
      match = charMatcher('(');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PlSqlExpression
            match = plSqlExpression$Rule();
            if (match) {
               // (',' OptionalSpacing PlSqlExpression)*
               do {
                  // (',' OptionalSpacing PlSqlExpression)
                  Node lastNode_1 = currentNode;
                  int lastIndex_1 = index;
                  // ','
                  match = charMatcher(',');
                  if (match) {
                     // OptionalSpacing
                     match = optionalSpacing$Rule();
                     if (match) {
                        // PlSqlExpression
                        match = plSqlExpression$Rule();
                        if (! match) {
                           index = lastIndex_1;
                           lastNode_1.setSibling(null);
                           currentNode = lastNode_1;
                        }
                     } else {
                        index = lastIndex_1;
                        lastNode_1.setSibling(null);
                     }
                  }
               } while(match);
               // ')'
               match = charMatcher(')');
               if (match) {
                  // OptionalSpacing
                  match = optionalSpacing$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_EXPRESSION_LIST, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //OrHandlerIdentifier : ("or" TestNoAlpha OptionalSpacing PlSqlObjectIdentifier)
   protected boolean orHandlerIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("or" TestNoAlpha OptionalSpacing PlSqlObjectIdentifier)
      // "or"
      match = ignoreCaseStringMatcher("or", 2);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // PlSqlObjectIdentifier
               match = plSqlObjectIdentifier$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.OR_HANDLER_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //MultipleHandlerIdentifier : (PlSqlObjectIdentifier OrHandlerIdentifier*)
   protected boolean multipleHandlerIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlObjectIdentifier OrHandlerIdentifier*)
      // PlSqlObjectIdentifier
      match = plSqlObjectIdentifier$Rule();
      if (match) {
         // OrHandlerIdentifier*
         do {
            // OrHandlerIdentifier
            match = orHandlerIdentifier$Rule();
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.MULTIPLE_HANDLER_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //HandlerIdentifiers : (("others" TestNoAlpha OptionalSpacing) | ("Others" TestNoAlpha OptionalSpacing) | MultipleHandlerIdentifier)
   protected boolean handlerIdentifiers$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (("others" TestNoAlpha OptionalSpacing) | ("Others" TestNoAlpha OptionalSpacing) | MultipleHandlerIdentifier)
      // ("others" TestNoAlpha OptionalSpacing)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // "others"
      match = ignoreCaseStringMatcher("others", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (! match) {
         // ("Others" TestNoAlpha OptionalSpacing)
         Node lastNode_2 = currentNode;
         int lastIndex_2 = index;
         // "Others"
         match = ignoreCaseStringMatcher("Others", 6);
         if (match) {
            // TestNoAlpha
            match = testNoAlpha$Rule();
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            } else {
               index = lastIndex_2;
               lastNode_2.setSibling(null);
            }
         }
         if (! match) {
            // MultipleHandlerIdentifier
            match = multipleHandlerIdentifier$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.HANDLER_IDENTIFIERS, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExceptionHandler : ("when" TestNoAlpha OptionalSpacing HandlerIdentifiers "then" TestNoAlpha OptionalSpacing PlSqlStatements)
   protected boolean exceptionHandler$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("when" TestNoAlpha OptionalSpacing HandlerIdentifiers "then" TestNoAlpha OptionalSpacing PlSqlStatements)
      // "when"
      match = ignoreCaseStringMatcher("when", 4);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // HandlerIdentifiers
               match = handlerIdentifiers$Rule();
               if (match) {
                  // "then"
                  match = ignoreCaseStringMatcher("then", 4);
                  if (match) {
                     // TestNoAlpha
                     match = testNoAlpha$Rule();
                     if (match) {
                        // OptionalSpacing
                        match = optionalSpacing$Rule();
                        if (match) {
                           // PlSqlStatements
                           match = plSqlStatements$Rule();
                        }
                     }
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXCEPTION_HANDLER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ExceptionBlock : ("exception" TestNoAlpha OptionalSpacing ExceptionHandler+)
   protected boolean exceptionBlock$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("exception" TestNoAlpha OptionalSpacing ExceptionHandler+)
      // "exception"
      match = ignoreCaseStringMatcher("exception", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // ExceptionHandler+
               // ExceptionHandler
               match = exceptionHandler$Rule();
               if (match) {
                  do {
                     // ExceptionHandler
                     match = exceptionHandler$Rule();
                  } while(match);
                  match = true;
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.EXCEPTION_BLOCK, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ParametersDeclaration : ParenthesesParametersDeclaration?
   protected boolean parametersDeclaration$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ParenthesesParametersDeclaration?
      // ParenthesesParametersDeclaration
      parenthesesParametersDeclaration$Rule();
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.PARAMETERS_DECLARATION, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //ReturnType : ("return" TestNoAlpha OptionalSpacing TypeSpec)
   protected boolean returnType$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("return" TestNoAlpha OptionalSpacing TypeSpec)
      // "return"
      match = ignoreCaseStringMatcher("return", 6);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // TypeSpec
               match = typeSpec$Rule();
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.RETURN_TYPE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //FunctionHeading : ("function" TestNoAlpha OptionalSpacing SchemaObjectName ParametersDeclaration ReturnType)
   protected boolean functionHeading$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("function" TestNoAlpha OptionalSpacing SchemaObjectName ParametersDeclaration ReturnType)
      // "function"
      match = ignoreCaseStringMatcher("function", 8);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SchemaObjectName
               match = schemaObjectName$Rule();
               if (match) {
                  // ParametersDeclaration
                  match = parametersDeclaration$Rule();
                  if (match) {
                     // ReturnType
                     match = returnType$Rule();
                  }
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.FUNCTION_HEADING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //ProcedureHeading : ("procedure" TestNoAlpha OptionalSpacing SchemaObjectName ParametersDeclaration)
   protected boolean procedureHeading$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("procedure" TestNoAlpha OptionalSpacing SchemaObjectName ParametersDeclaration)
      // "procedure"
      match = ignoreCaseStringMatcher("procedure", 9);
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
            if (match) {
               // SchemaObjectName
               match = schemaObjectName$Rule();
               if (match) {
                  // ParametersDeclaration
                  match = parametersDeclaration$Rule();
               }
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PROCEDURE_HEADING, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BooleanLiteral : (BooleanPattern OptionalSpacing)
   protected boolean booleanLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (BooleanPattern OptionalSpacing)
      // BooleanPattern
      match = booleanPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BOOLEAN_LITERAL, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //BooleanPattern : ("true" | "false")
   protected boolean booleanPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ("true" | "false")
      int startIndex_1 = index;
      switch(buffer.getChar(index)) {
         case 'f':
         case 'F': {
            ++index;
            // "alse"
            if (match = ignoreCaseStringTest("alse", 4)) {
               index += 4;
            }
            break;
         }
         case 't':
         case 'T': {
            ++index;
            // "rue"
            if (match = ignoreCaseStringTest("rue", 3)) {
               index += 3;
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_1;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_1, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.BOOLEAN_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlLiteral : (SqlLiteral | BooleanLiteral)
   protected boolean plSqlLiteral$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (SqlLiteral | BooleanLiteral)
      switch(buffer.getChar(index)) {
         case 'd':
         case 'D':
         case '\'':
         case 'i':
         case 'I':
         case '+':
         case '-':
         case 'n':
         case 'N':
         case '0':
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9': {
            // SqlLiteral
            match = sqlLiteral$Rule();
            break;
         }
         case 't':
         case 'T': {
            // SqlLiteral
            match = sqlLiteral$Rule();
            if (! match) {
               // BooleanLiteral
               match = booleanLiteral$Rule();
            }
            break;
         }
         case 'f':
         case 'F': {
            // BooleanLiteral
            match = booleanLiteral$Rule();
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_LITERAL, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlParametersList : PlSqlParameters*
   protected boolean plSqlParametersList$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // PlSqlParameters*
      do {
         // PlSqlParameters
         match = plSqlParameters$Rule();
      } while(match);
      if (! currentRuleIsAtomic) {
         currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_PARAMETERS_LIST, startIndex, index, true, false);
         currentNode.setFirstChild(lastNode.getSibling());
         lastNode.setSibling(currentNode);
      }
      return true;
   }

   //PlSqlQualifiedIdentifierRemote : (PlSqlQualifiedIdentifier DBLink PlSqlParametersList PlSqlAttributes?)
   protected boolean plSqlQualifiedIdentifierRemote$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlQualifiedIdentifier DBLink PlSqlParametersList PlSqlAttributes?)
      // PlSqlQualifiedIdentifier
      match = plSqlQualifiedIdentifier$Rule();
      if (match) {
         // DBLink
         match = dBLink$Rule();
         if (match) {
            // PlSqlParametersList
            match = plSqlParametersList$Rule();
            if (match) {
               // PlSqlAttributes?
               // PlSqlAttributes
               plSqlAttributes$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_QUALIFIED_IDENTIFIER_REMOTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlSimpleIdentifierRemote : (PlSqlSimpleIdentifier DBLink PlSqlParametersList PlSqlAttributes?)
   protected boolean plSqlSimpleIdentifierRemote$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlSimpleIdentifier DBLink PlSqlParametersList PlSqlAttributes?)
      // PlSqlSimpleIdentifier
      match = plSqlSimpleIdentifier$Rule();
      if (match) {
         // DBLink
         match = dBLink$Rule();
         if (match) {
            // PlSqlParametersList
            match = plSqlParametersList$Rule();
            if (match) {
               // PlSqlAttributes?
               // PlSqlAttributes
               plSqlAttributes$Rule();
               match = true;
            }
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_SIMPLE_IDENTIFIER_REMOTE, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlAttributes : ('.' OptionalSpacing PlSqlAnySimpleIdentifier)+
   protected boolean plSqlAttributes$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // ('.' OptionalSpacing PlSqlAnySimpleIdentifier)+
      // ('.' OptionalSpacing PlSqlAnySimpleIdentifier)
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      // '.'
      match = charMatcher('.');
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
         if (match) {
            // PlSqlAnySimpleIdentifier
            match = plSqlAnySimpleIdentifier$Rule();
            if (! match) {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
               currentNode = lastNode_1;
            }
         } else {
            index = lastIndex_1;
            lastNode_1.setSibling(null);
         }
      }
      if (match) {
         do {
            // ('.' OptionalSpacing PlSqlAnySimpleIdentifier)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // '.'
            match = charMatcher('.');
            if (match) {
               // OptionalSpacing
               match = optionalSpacing$Rule();
               if (match) {
                  // PlSqlAnySimpleIdentifier
                  match = plSqlAnySimpleIdentifier$Rule();
                  if (! match) {
                     index = lastIndex_2;
                     lastNode_2.setSibling(null);
                     currentNode = lastNode_2;
                  }
               } else {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
               }
            }
         } while(match);
         match = true;
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_ATTRIBUTES, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlQualifiedIdentifier : (PlSqlSimpleIdentifier PlSqlAttributes)
   protected boolean plSqlQualifiedIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlSimpleIdentifier PlSqlAttributes)
      // PlSqlSimpleIdentifier
      match = plSqlSimpleIdentifier$Rule();
      if (match) {
         // PlSqlAttributes
         match = plSqlAttributes$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_QUALIFIED_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlAnySimpleIdentifier : (PlSqlAnyIdentifier PlSqlParametersList)
   protected boolean plSqlAnySimpleIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlAnyIdentifier PlSqlParametersList)
      // PlSqlAnyIdentifier
      match = plSqlAnyIdentifier$Rule();
      if (match) {
         // PlSqlParametersList
         match = plSqlParametersList$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_ANY_SIMPLE_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlSimpleIdentifier : (PlSqlIdentifier PlSqlParametersList)
   protected boolean plSqlSimpleIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlIdentifier PlSqlParametersList)
      // PlSqlIdentifier
      match = plSqlIdentifier$Rule();
      if (match) {
         // PlSqlParametersList
         match = plSqlParametersList$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_SIMPLE_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlObjectIdentifier : (BuiltInFunctionCall | PlSqlQualifiedIdentifierRemote | PlSqlSimpleIdentifierRemote | PlSqlQualifiedIdentifier | PlSqlSimpleIdentifier)
   protected boolean plSqlObjectIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (BuiltInFunctionCall | PlSqlQualifiedIdentifierRemote | PlSqlSimpleIdentifierRemote | PlSqlQualifiedIdentifier | PlSqlSimpleIdentifier)
      switch(buffer.getChar(index)) {
         case 'B':
         case 'G':
         case 'H':
         case 'I':
         case 'J':
         case 'K':
         case 'O':
         case 'Q':
         case 'U':
         case 'W':
         case 'Y':
         case 'Z':
         case '_':
         case 'b':
         case '\"':
         case '#':
         case '$':
         case 'g':
         case 'h':
         case 'i':
         case 'j':
         case 'k':
         case 'o':
         case '0':
         case '1':
         case 'q':
         case '2':
         case '3':
         case '4':
         case '5':
         case 'u':
         case '6':
         case '7':
         case 'w':
         case '8':
         case '9':
         case 'y':
         case 'z': {
            // PlSqlQualifiedIdentifierRemote
            match = plSqlQualifiedIdentifierRemote$Rule();
            if (! match) {
               // PlSqlSimpleIdentifierRemote
               match = plSqlSimpleIdentifierRemote$Rule();
               if (! match) {
                  // PlSqlQualifiedIdentifier
                  match = plSqlQualifiedIdentifier$Rule();
                  if (! match) {
                     // PlSqlSimpleIdentifier
                     match = plSqlSimpleIdentifier$Rule();
                  }
               }
            }
            break;
         }
         case 'A':
         case 'C':
         case 'D':
         case 'E':
         case 'F':
         case 'L':
         case 'M':
         case 'N':
         case 'P':
         case 'R':
         case 'S':
         case 'T':
         case 'V':
         case 'X':
         case 'a':
         case 'c':
         case 'd':
         case 'e':
         case 'f':
         case 'l':
         case 'm':
         case 'n':
         case 'p':
         case 'r':
         case 's':
         case 't':
         case 'v':
         case 'x': {
            // BuiltInFunctionCall
            match = builtInFunctionCall$Rule();
            if (! match) {
               // PlSqlQualifiedIdentifierRemote
               match = plSqlQualifiedIdentifierRemote$Rule();
               if (! match) {
                  // PlSqlSimpleIdentifierRemote
                  match = plSqlSimpleIdentifierRemote$Rule();
                  if (! match) {
                     // PlSqlQualifiedIdentifier
                     match = plSqlQualifiedIdentifier$Rule();
                     if (! match) {
                        // PlSqlSimpleIdentifier
                        match = plSqlSimpleIdentifier$Rule();
                     }
                  }
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_OBJECT_IDENTIFIER, startIndex, index, true, false);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlIdentifier : (PlSqlKeyword! PlSqlIdentifierPattern OptionalSpacing)
   protected boolean plSqlIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlKeyword! PlSqlIdentifierPattern OptionalSpacing)
      // PlSqlKeyword!
      Node lastNode_1 = currentNode;
      int lastIndex_1 = index;
      boolean lastAtomic_1 = currentRuleIsAtomic;
      // (("all" | "alter" | "and" | "any" | "array" | "arrow" | "as" | "asc" | "at" | "begin" | "between" | "by" | "case" | "check" | "clusters" | "cluster" | "colauth" | "columns" | "compress" | "connect" | "crash" | "create" | "current" | "decimal" | "declare" | "default" | "delete" | "desc" | "distinct" | "drop" | "else" | "end" | "exception" | "exclusive" | "exists" | "fetch" | "form" | "for" | "from" | "goto" | "grant" | "group" | "having" | "identified" | "if" | "in" | "indexes" | "index" | "insert" | "intersect" | "into" | "is" | "like" | "lock" | "minus" | "mode" | "nocompress" | "not" | "nowait" | "null" | "of" | "on" | "option" | "or" | "order" | "overlaps" | "prior" | "procedure" | "public" | "range" | "record" | "resource" | "revoke" | "select" | "share" | "size" | "sql" | "start" | "subtype" | "tabauth" | "table" | "then" | "to" | "type" | "union" | "unique" | "update" | "use" | "values" | "view" | "views" | "when" | "where" | "with") TestNoAlpha)
      // ("all" | "alter" | "and" | "any" | "array" | "arrow" | "as" | "asc" | "at" | "begin" | "between" | "by" | "case" | "check" | "clusters" | "cluster" | "colauth" | "columns" | "compress" | "connect" | "crash" | "create" | "current" | "decimal" | "declare" | "default" | "delete" | "desc" | "distinct" | "drop" | "else" | "end" | "exception" | "exclusive" | "exists" | "fetch" | "form" | "for" | "from" | "goto" | "grant" | "group" | "having" | "identified" | "if" | "in" | "indexes" | "index" | "insert" | "intersect" | "into" | "is" | "like" | "lock" | "minus" | "mode" | "nocompress" | "not" | "nowait" | "null" | "of" | "on" | "option" | "or" | "order" | "overlaps" | "prior" | "procedure" | "public" | "range" | "record" | "resource" | "revoke" | "select" | "share" | "size" | "sql" | "start" | "subtype" | "tabauth" | "table" | "then" | "to" | "type" | "union" | "unique" | "update" | "use" | "values" | "view" | "views" | "when" | "where" | "with")
      int startIndex_2 = index;
      switch(buffer.getChar(index)) {
         case 'f':
         case 'F': {
            ++index;
            // ("etch" | "orm" | "rom" | "or")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("rm" | "r")
                  if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                     ++index;
                     // ("m" | <EMPTY>)
                     if (buffer.matchChar(index, 'm') || buffer.matchChar(index, 'M')) {
                        ++index;
                        // <EMPTY>
                        match = true;
                     } else {
                        match = true;
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // "om"
                  if (match = ignoreCaseStringTest("om", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // "tch"
                  if (match = ignoreCaseStringTest("tch", 3)) {
                     index += 3;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'v':
         case 'V': {
            ++index;
            // ("alues" | "iews" | "iew")
            switch(buffer.getChar(index)) {
               case 'a':
               case 'A': {
                  ++index;
                  // "lues"
                  if (match = ignoreCaseStringTest("lues", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // ("ews" | "ew")
                  if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                     ++index;
                     // ("ws" | "w")
                     if (buffer.matchChar(index, 'w') || buffer.matchChar(index, 'W')) {
                        ++index;
                        // ("s" | <EMPTY>)
                        if (buffer.matchChar(index, 's') || buffer.matchChar(index, 'S')) {
                           ++index;
                           // <EMPTY>
                           match = true;
                        } else {
                           match = true;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'g':
         case 'G': {
            ++index;
            // ("rant" | "roup" | "oto")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // "to"
                  if (match = ignoreCaseStringTest("to", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // ("ant" | "oup")
                  switch(buffer.getChar(index)) {
                     case 'o':
                     case 'O': {
                        ++index;
                        // "up"
                        if (match = ignoreCaseStringTest("up", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'a':
                     case 'A': {
                        ++index;
                        // "nt"
                        if (match = ignoreCaseStringTest("nt", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'w':
         case 'W': {
            ++index;
            // ("here" | "hen" | "ith")
            switch(buffer.getChar(index)) {
               case 'h':
               case 'H': {
                  ++index;
                  // ("ere" | "en")
                  if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                     ++index;
                     // ("re" | "n")
                     switch(buffer.getChar(index)) {
                        case 'n':
                        case 'N': {
                           ++index;
                           // <EMPTY>
                           match = true;
                           break;
                        }
                        case 'r':
                        case 'R': {
                           ++index;
                           // "e"
                           if (match = buffer.matchIgnoreCaseChar(index, 'e')) {
                              ++index;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "th"
                  if (match = ignoreCaseStringTest("th", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'h':
         case 'H': {
            ++index;
            // "aving"
            if (match = ignoreCaseStringTest("aving", 5)) {
               index += 5;
            }
            break;
         }
         case 'i':
         case 'I': {
            ++index;
            // ("dentified" | "ntersect" | "ndexes" | "nsert" | "ndex" | "nto" | "f" | "n" | "s")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // ("tersect" | "dexes" | "sert" | "dex" | "to" | <EMPTY>)
                  switch(buffer.getChar(index)) {
                     case 's':
                     case 'S': {
                        ++index;
                        // "ert"
                        if (match = ignoreCaseStringTest("ert", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 't':
                     case 'T': {
                        ++index;
                        // ("ersect" | "o")
                        switch(buffer.getChar(index)) {
                           case 'o':
                           case 'O': {
                              ++index;
                              // <EMPTY>
                              match = true;
                              break;
                           }
                           case 'e':
                           case 'E': {
                              ++index;
                              // "rsect"
                              if (match = ignoreCaseStringTest("rsect", 5)) {
                                 index += 5;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     case 'd':
                     case 'D': {
                        ++index;
                        // ("exes" | "ex")
                        if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                           ++index;
                           // ("xes" | "x")
                           if (buffer.matchChar(index, 'x') || buffer.matchChar(index, 'X')) {
                              ++index;
                              // ("es" | <EMPTY>)
                              if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                                 ++index;
                                 // "s"
                                 if (match = buffer.matchIgnoreCaseChar(index, 's')) {
                                    ++index;
                                 }
                              } else {
                                 match = true;
                              }
                           } else {
                              match = false;
                           }
                        } else {
                           match = false;
                        }
                        break;
                     }
                     default: {
                        match = true;
                     }
                  }
                  break;
               }
               case 'f':
               case 'F': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 's':
               case 'S': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'd':
               case 'D': {
                  ++index;
                  // "entified"
                  if (match = ignoreCaseStringTest("entified", 8)) {
                     index += 8;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'l':
         case 'L': {
            ++index;
            // ("ike" | "ock")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // "ck"
                  if (match = ignoreCaseStringTest("ck", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "ke"
                  if (match = ignoreCaseStringTest("ke", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'm':
         case 'M': {
            ++index;
            // ("inus" | "ode")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // "de"
                  if (match = ignoreCaseStringTest("de", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "nus"
                  if (match = ignoreCaseStringTest("nus", 3)) {
                     index += 3;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'n':
         case 'N': {
            ++index;
            // ("ocompress" | "owait" | "ull" | "ot")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("compress" | "wait" | "t")
                  switch(buffer.getChar(index)) {
                     case 'w':
                     case 'W': {
                        ++index;
                        // "ait"
                        if (match = ignoreCaseStringTest("ait", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "ompress"
                        if (match = ignoreCaseStringTest("ompress", 7)) {
                           index += 7;
                        }
                        break;
                     }
                     case 't':
                     case 'T': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "ll"
                  if (match = ignoreCaseStringTest("ll", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'o':
         case 'O': {
            ++index;
            // ("verlaps" | "ption" | "rder" | "f" | "n" | "r")
            switch(buffer.getChar(index)) {
               case 'v':
               case 'V': {
                  ++index;
                  // "erlaps"
                  if (match = ignoreCaseStringTest("erlaps", 6)) {
                     index += 6;
                  }
                  break;
               }
               case 'f':
               case 'F': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'n':
               case 'N': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'p':
               case 'P': {
                  ++index;
                  // "tion"
                  if (match = ignoreCaseStringTest("tion", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // ("der" | <EMPTY>)
                  if (buffer.matchChar(index, 'd') || buffer.matchChar(index, 'D')) {
                     ++index;
                     // "er"
                     if (match = ignoreCaseStringTest("er", 2)) {
                        index += 2;
                     }
                  } else {
                     match = true;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'p':
         case 'P': {
            ++index;
            // ("rocedure" | "ublic" | "rior")
            switch(buffer.getChar(index)) {
               case 'r':
               case 'R': {
                  ++index;
                  // ("ocedure" | "ior")
                  switch(buffer.getChar(index)) {
                     case 'o':
                     case 'O': {
                        ++index;
                        // "cedure"
                        if (match = ignoreCaseStringTest("cedure", 6)) {
                           index += 6;
                        }
                        break;
                     }
                     case 'i':
                     case 'I': {
                        ++index;
                        // "or"
                        if (match = ignoreCaseStringTest("or", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "blic"
                  if (match = ignoreCaseStringTest("blic", 4)) {
                     index += 4;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'a':
         case 'A': {
            ++index;
            // ("lter" | "rray" | "rrow" | "ll" | "nd" | "ny" | "sc" | "s" | "t")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // ("d" | "y")
                  switch(buffer.getChar(index)) {
                     case 'y':
                     case 'Y': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case 'd':
                     case 'D': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // ("ray" | "row")
                  if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                     ++index;
                     // ("ay" | "ow")
                     switch(buffer.getChar(index)) {
                        case 'o':
                        case 'O': {
                           ++index;
                           // "w"
                           if (match = buffer.matchIgnoreCaseChar(index, 'w')) {
                              ++index;
                           }
                           break;
                        }
                        case 'a':
                        case 'A': {
                           ++index;
                           // "y"
                           if (match = buffer.matchIgnoreCaseChar(index, 'y')) {
                              ++index;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 's':
               case 'S': {
                  ++index;
                  // ("c" | <EMPTY>)
                  if (buffer.matchChar(index, 'c') || buffer.matchChar(index, 'C')) {
                     ++index;
                     // <EMPTY>
                     match = true;
                  } else {
                     match = true;
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // ("ter" | "l")
                  switch(buffer.getChar(index)) {
                     case 't':
                     case 'T': {
                        ++index;
                        // "er"
                        if (match = ignoreCaseStringTest("er", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 't':
               case 'T': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'b':
         case 'B': {
            ++index;
            // ("etween" | "egin" | "y")
            switch(buffer.getChar(index)) {
               case 'y':
               case 'Y': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // ("tween" | "gin")
                  switch(buffer.getChar(index)) {
                     case 'g':
                     case 'G': {
                        ++index;
                        // "in"
                        if (match = ignoreCaseStringTest("in", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 't':
                     case 'T': {
                        ++index;
                        // "ween"
                        if (match = ignoreCaseStringTest("ween", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'r':
         case 'R': {
            ++index;
            // ("esource" | "ecord" | "evoke" | "ange")
            switch(buffer.getChar(index)) {
               case 'a':
               case 'A': {
                  ++index;
                  // "nge"
                  if (match = ignoreCaseStringTest("nge", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // ("source" | "cord" | "voke")
                  switch(buffer.getChar(index)) {
                     case 'v':
                     case 'V': {
                        ++index;
                        // "oke"
                        if (match = ignoreCaseStringTest("oke", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 's':
                     case 'S': {
                        ++index;
                        // "ource"
                        if (match = ignoreCaseStringTest("ource", 5)) {
                           index += 5;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // "ord"
                        if (match = ignoreCaseStringTest("ord", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'c':
         case 'C': {
            ++index;
            // ("lusters" | "ompress" | "luster" | "olauth" | "olumns" | "onnect" | "urrent" | "reate" | "heck" | "rash" | "ase")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // ("mpress" | "lauth" | "lumns" | "nnect")
                  switch(buffer.getChar(index)) {
                     case 'n':
                     case 'N': {
                        ++index;
                        // "nect"
                        if (match = ignoreCaseStringTest("nect", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // ("auth" | "umns")
                        switch(buffer.getChar(index)) {
                           case 'a':
                           case 'A': {
                              ++index;
                              // "uth"
                              if (match = ignoreCaseStringTest("uth", 3)) {
                                 index += 3;
                              }
                              break;
                           }
                           case 'u':
                           case 'U': {
                              ++index;
                              // "mns"
                              if (match = ignoreCaseStringTest("mns", 3)) {
                                 index += 3;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     case 'm':
                     case 'M': {
                        ++index;
                        // "press"
                        if (match = ignoreCaseStringTest("press", 5)) {
                           index += 5;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'h':
               case 'H': {
                  ++index;
                  // "eck"
                  if (match = ignoreCaseStringTest("eck", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // "se"
                  if (match = ignoreCaseStringTest("se", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // ("eate" | "ash")
                  switch(buffer.getChar(index)) {
                     case 'a':
                     case 'A': {
                        ++index;
                        // "sh"
                        if (match = ignoreCaseStringTest("sh", 2)) {
                           index += 2;
                        }
                        break;
                     }
                     case 'e':
                     case 'E': {
                        ++index;
                        // "ate"
                        if (match = ignoreCaseStringTest("ate", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // ("usters" | "uster")
                  if (buffer.matchChar(index, 'u') || buffer.matchChar(index, 'U')) {
                     ++index;
                     // ("sters" | "ster")
                     if (buffer.matchChar(index, 's') || buffer.matchChar(index, 'S')) {
                        ++index;
                        // ("ters" | "ter")
                        if (buffer.matchChar(index, 't') || buffer.matchChar(index, 'T')) {
                           ++index;
                           // ("ers" | "er")
                           if (buffer.matchChar(index, 'e') || buffer.matchChar(index, 'E')) {
                              ++index;
                              // ("rs" | "r")
                              if (buffer.matchChar(index, 'r') || buffer.matchChar(index, 'R')) {
                                 ++index;
                                 // ("s" | <EMPTY>)
                                 if (buffer.matchChar(index, 's') || buffer.matchChar(index, 'S')) {
                                    ++index;
                                    // <EMPTY>
                                    match = true;
                                 } else {
                                    match = true;
                                 }
                              } else {
                                 match = false;
                              }
                           } else {
                              match = false;
                           }
                        } else {
                           match = false;
                        }
                     } else {
                        match = false;
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "rrent"
                  if (match = ignoreCaseStringTest("rrent", 5)) {
                     index += 5;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 's':
         case 'S': {
            ++index;
            // ("ubtype" | "elect" | "hare" | "tart" | "ize" | "ql")
            switch(buffer.getChar(index)) {
               case 'h':
               case 'H': {
                  ++index;
                  // "are"
                  if (match = ignoreCaseStringTest("are", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'i':
               case 'I': {
                  ++index;
                  // "ze"
                  if (match = ignoreCaseStringTest("ze", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'q':
               case 'Q': {
                  ++index;
                  // "l"
                  if (match = buffer.matchIgnoreCaseChar(index, 'l')) {
                     ++index;
                  }
                  break;
               }
               case 't':
               case 'T': {
                  ++index;
                  // "art"
                  if (match = ignoreCaseStringTest("art", 3)) {
                     index += 3;
                  }
                  break;
               }
               case 'u':
               case 'U': {
                  ++index;
                  // "btype"
                  if (match = ignoreCaseStringTest("btype", 5)) {
                     index += 5;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // "lect"
                  if (match = ignoreCaseStringTest("lect", 4)) {
                     index += 4;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'd':
         case 'D': {
            ++index;
            // ("istinct" | "ecimal" | "eclare" | "efault" | "elete" | "esc" | "rop")
            switch(buffer.getChar(index)) {
               case 'i':
               case 'I': {
                  ++index;
                  // "stinct"
                  if (match = ignoreCaseStringTest("stinct", 6)) {
                     index += 6;
                  }
                  break;
               }
               case 'r':
               case 'R': {
                  ++index;
                  // "op"
                  if (match = ignoreCaseStringTest("op", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'e':
               case 'E': {
                  ++index;
                  // ("cimal" | "clare" | "fault" | "lete" | "sc")
                  switch(buffer.getChar(index)) {
                     case 'f':
                     case 'F': {
                        ++index;
                        // "ault"
                        if (match = ignoreCaseStringTest("ault", 4)) {
                           index += 4;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // ("imal" | "lare")
                        switch(buffer.getChar(index)) {
                           case 'i':
                           case 'I': {
                              ++index;
                              // "mal"
                              if (match = ignoreCaseStringTest("mal", 3)) {
                                 index += 3;
                              }
                              break;
                           }
                           case 'l':
                           case 'L': {
                              ++index;
                              // "are"
                              if (match = ignoreCaseStringTest("are", 3)) {
                                 index += 3;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     case 's':
                     case 'S': {
                        ++index;
                        // "c"
                        if (match = buffer.matchIgnoreCaseChar(index, 'c')) {
                           ++index;
                        }
                        break;
                     }
                     case 'l':
                     case 'L': {
                        ++index;
                        // "ete"
                        if (match = ignoreCaseStringTest("ete", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 't':
         case 'T': {
            ++index;
            // ("abauth" | "able" | "hen" | "ype" | "o")
            switch(buffer.getChar(index)) {
               case 'o':
               case 'O': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case 'h':
               case 'H': {
                  ++index;
                  // "en"
                  if (match = ignoreCaseStringTest("en", 2)) {
                     index += 2;
                  }
                  break;
               }
               case 'a':
               case 'A': {
                  ++index;
                  // ("bauth" | "ble")
                  if (buffer.matchChar(index, 'b') || buffer.matchChar(index, 'B')) {
                     ++index;
                     // ("auth" | "le")
                     switch(buffer.getChar(index)) {
                        case 'a':
                        case 'A': {
                           ++index;
                           // "uth"
                           if (match = ignoreCaseStringTest("uth", 3)) {
                              index += 3;
                           }
                           break;
                        }
                        case 'l':
                        case 'L': {
                           ++index;
                           // "e"
                           if (match = buffer.matchIgnoreCaseChar(index, 'e')) {
                              ++index;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'y':
               case 'Y': {
                  ++index;
                  // "pe"
                  if (match = ignoreCaseStringTest("pe", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'e':
         case 'E': {
            ++index;
            // ("xception" | "xclusive" | "xists" | "lse" | "nd")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // "d"
                  if (match = buffer.matchIgnoreCaseChar(index, 'd')) {
                     ++index;
                  }
                  break;
               }
               case 'x':
               case 'X': {
                  ++index;
                  // ("ception" | "clusive" | "ists")
                  switch(buffer.getChar(index)) {
                     case 'i':
                     case 'I': {
                        ++index;
                        // "sts"
                        if (match = ignoreCaseStringTest("sts", 3)) {
                           index += 3;
                        }
                        break;
                     }
                     case 'c':
                     case 'C': {
                        ++index;
                        // ("eption" | "lusive")
                        switch(buffer.getChar(index)) {
                           case 'l':
                           case 'L': {
                              ++index;
                              // "usive"
                              if (match = ignoreCaseStringTest("usive", 5)) {
                                 index += 5;
                              }
                              break;
                           }
                           case 'e':
                           case 'E': {
                              ++index;
                              // "ption"
                              if (match = ignoreCaseStringTest("ption", 5)) {
                                 index += 5;
                              }
                              break;
                           }
                           default: {
                              match = false;
                           }
                        }
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  break;
               }
               case 'l':
               case 'L': {
                  ++index;
                  // "se"
                  if (match = ignoreCaseStringTest("se", 2)) {
                     index += 2;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         case 'u':
         case 'U': {
            ++index;
            // ("nique" | "pdate" | "nion" | "se")
            switch(buffer.getChar(index)) {
               case 'n':
               case 'N': {
                  ++index;
                  // ("ique" | "ion")
                  if (buffer.matchChar(index, 'i') || buffer.matchChar(index, 'I')) {
                     ++index;
                     // ("que" | "on")
                     switch(buffer.getChar(index)) {
                        case 'o':
                        case 'O': {
                           ++index;
                           // "n"
                           if (match = buffer.matchIgnoreCaseChar(index, 'n')) {
                              ++index;
                           }
                           break;
                        }
                        case 'q':
                        case 'Q': {
                           ++index;
                           // "ue"
                           if (match = ignoreCaseStringTest("ue", 2)) {
                              index += 2;
                           }
                           break;
                        }
                        default: {
                           match = false;
                        }
                     }
                  } else {
                     match = false;
                  }
                  break;
               }
               case 'p':
               case 'P': {
                  ++index;
                  // "date"
                  if (match = ignoreCaseStringTest("date", 4)) {
                     index += 4;
                  }
                  break;
               }
               case 's':
               case 'S': {
                  ++index;
                  // "e"
                  if (match = buffer.matchIgnoreCaseChar(index, 'e')) {
                     ++index;
                  }
                  break;
               }
               default: {
                  match = false;
               }
            }
            break;
         }
         default: {
            match = false;
         }
      }
      if (! match) {
         index = startIndex_2;
      } else if(! currentRuleIsAtomic) {
         currentNode.setSibling(new NodeImpl(Rule.TERMINAL, startIndex_2, index, false, false));
         currentNode = currentNode.getSibling();
      }
      if (match) {
         // TestNoAlpha
         match = testNoAlpha$Rule();
      }
      currentRuleIsAtomic = lastAtomic_1;
      index = lastIndex_1;
      lastNode_1.setSibling(null);
      currentNode = lastNode_1;
      match = ! match;
      if (match) {
         // PlSqlIdentifierPattern
         match = plSqlIdentifierPattern$Rule();
         if (match) {
            // OptionalSpacing
            match = optionalSpacing$Rule();
         }
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_IDENTIFIER, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlIdentifierPattern : (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
   protected boolean plSqlIdentifierPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
      // 'a'-'z'
      match = charRangeMatcher('a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = charRangeMatcher('A', 'Z');
         if (! match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (! match) {
               // '_'
               match = charMatcher('_');
               if (! match) {
                  // '$'
                  match = charMatcher('$');
                  if (! match) {
                     // '#'
                     match = charMatcher('#');
                  }
               }
            }
         }
      }
      if (match) {
         do {
            // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
            // 'a'-'z'
            match = charRangeMatcher('a', 'z');
            if (! match) {
               // 'A'-'Z'
               match = charRangeMatcher('A', 'Z');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (! match) {
                     // '_'
                     match = charMatcher('_');
                     if (! match) {
                        // '$'
                        match = charMatcher('$');
                        if (! match) {
                           // '#'
                           match = charMatcher('#');
                        }
                     }
                  }
               }
            }
         } while(match);
         match = true;
      }
      if (! match) {
         // ('"' (('\r' | '\n')! .)+ '"')
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '"'
         match = charMatcher('\"');
         if (match) {
            // (('\r' | '\n')! .)+
            // (('\r' | '\n')! .)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('\r' | '\n')!
            // ('\r' | '\n')
            int startIndex_3 = index;
            switch(buffer.getChar(index)) {
               case '\r': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\n': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            index = startIndex_3;
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            }
            if (match) {
               do {
                  // (('\r' | '\n')! .)
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // ('\r' | '\n')!
                  // ('\r' | '\n')
                  int startIndex_5 = index;
                  switch(buffer.getChar(index)) {
                     case '\r': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case '\n': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  index = startIndex_5;
                  match = ! match;
                  if (match) {
                     // .
                     match = anyCharMatcher();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  }
               } while(match);
               match = true;
            }
            if (match) {
               // '"'
               match = charMatcher('\"');
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_IDENTIFIER, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlAnyIdentifier : (PlSqlAnyIdentifierPattern OptionalSpacing)
   protected boolean plSqlAnyIdentifier$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      startIndex = index;
      // (PlSqlAnyIdentifierPattern OptionalSpacing)
      // PlSqlAnyIdentifierPattern
      match = plSqlAnyIdentifierPattern$Rule();
      if (match) {
         // OptionalSpacing
         match = optionalSpacing$Rule();
      }
      if (match) {
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_ANY_IDENTIFIER, startIndex, index, true, true);
            currentNode.setFirstChild(lastNode.getSibling());
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }

   //PlSqlAnyIdentifierPattern : (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
   protected boolean plSqlAnyIdentifierPattern$Rule() {
      Node lastNode = currentNode;
      int startIndex;
      boolean match;
      boolean lastRuleIsAtomic = currentRuleIsAtomic;
      currentRuleIsAtomic = true;
      startIndex = index;
      // (('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+ | ('"' (('\r' | '\n')! .)+ '"'))
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')+
      // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
      // 'a'-'z'
      match = charRangeMatcher('a', 'z');
      if (! match) {
         // 'A'-'Z'
         match = charRangeMatcher('A', 'Z');
         if (! match) {
            // '0'-'9'
            match = charRangeMatcher('0', '9');
            if (! match) {
               // '_'
               match = charMatcher('_');
               if (! match) {
                  // '$'
                  match = charMatcher('$');
                  if (! match) {
                     // '#'
                     match = charMatcher('#');
                  }
               }
            }
         }
      }
      if (match) {
         do {
            // ('a'-'z' | 'A'-'Z' | '0'-'9' | '_' | '$' | '#')
            // 'a'-'z'
            match = charRangeMatcher('a', 'z');
            if (! match) {
               // 'A'-'Z'
               match = charRangeMatcher('A', 'Z');
               if (! match) {
                  // '0'-'9'
                  match = charRangeMatcher('0', '9');
                  if (! match) {
                     // '_'
                     match = charMatcher('_');
                     if (! match) {
                        // '$'
                        match = charMatcher('$');
                        if (! match) {
                           // '#'
                           match = charMatcher('#');
                        }
                     }
                  }
               }
            }
         } while(match);
         match = true;
      }
      if (! match) {
         // ('"' (('\r' | '\n')! .)+ '"')
         Node lastNode_1 = currentNode;
         int lastIndex_1 = index;
         // '"'
         match = charMatcher('\"');
         if (match) {
            // (('\r' | '\n')! .)+
            // (('\r' | '\n')! .)
            Node lastNode_2 = currentNode;
            int lastIndex_2 = index;
            // ('\r' | '\n')!
            // ('\r' | '\n')
            int startIndex_3 = index;
            switch(buffer.getChar(index)) {
               case '\r': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               case '\n': {
                  ++index;
                  // <EMPTY>
                  match = true;
                  break;
               }
               default: {
                  match = false;
               }
            }
            index = startIndex_3;
            match = ! match;
            if (match) {
               // .
               match = anyCharMatcher();
               if (! match) {
                  index = lastIndex_2;
                  lastNode_2.setSibling(null);
                  currentNode = lastNode_2;
               }
            }
            if (match) {
               do {
                  // (('\r' | '\n')! .)
                  Node lastNode_4 = currentNode;
                  int lastIndex_4 = index;
                  // ('\r' | '\n')!
                  // ('\r' | '\n')
                  int startIndex_5 = index;
                  switch(buffer.getChar(index)) {
                     case '\r': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     case '\n': {
                        ++index;
                        // <EMPTY>
                        match = true;
                        break;
                     }
                     default: {
                        match = false;
                     }
                  }
                  index = startIndex_5;
                  match = ! match;
                  if (match) {
                     // .
                     match = anyCharMatcher();
                     if (! match) {
                        index = lastIndex_4;
                        lastNode_4.setSibling(null);
                        currentNode = lastNode_4;
                     }
                  }
               } while(match);
               match = true;
            }
            if (match) {
               // '"'
               match = charMatcher('\"');
               if (! match) {
                  index = lastIndex_1;
                  lastNode_1.setSibling(null);
                  currentNode = lastNode_1;
               }
            } else {
               index = lastIndex_1;
               lastNode_1.setSibling(null);
            }
         }
      }
      if (match) {
         currentRuleIsAtomic = lastRuleIsAtomic;
         if (! currentRuleIsAtomic) {
            currentNode = new NodeImpl(OraclePlSqlRuleType.PL_SQL_ANY_IDENTIFIER, startIndex, index, true, false);
            lastNode.setSibling(currentNode);
         }
         return true;
      } else {
         currentRuleIsAtomic = lastRuleIsAtomic;
         index = startIndex;
         lastNode.setSibling(null);
         currentNode = lastNode;
         return false;
      }
   }
}
