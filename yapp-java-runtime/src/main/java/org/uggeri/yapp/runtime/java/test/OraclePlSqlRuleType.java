/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.parser.Rule;

public enum OraclePlSqlRuleType implements Rule<OraclePlSqlVisitor> {
   SQL_SENTENCE {
      @Override
      public String getLabel() {
         return "SqlSentence";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlSentence(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlSentence(node);
      }
   },
   DML_SENTENCE {
      @Override
      public String getLabel() {
         return "DmlSentence";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDmlSentence(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDmlSentence(node);
      }
   },
   WAIT_MODE {
      @Override
      public String getLabel() {
         return "WaitMode";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterWaitMode(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitWaitMode(node);
      }
   },
   COMMIT_COMMENT {
      @Override
      public String getLabel() {
         return "CommitComment";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCommitComment(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCommitComment(node);
      }
   },
   WRITE_MODE {
      @Override
      public String getLabel() {
         return "WriteMode";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterWriteMode(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitWriteMode(node);
      }
   },
   FORCE_COMMIT {
      @Override
      public String getLabel() {
         return "ForceCommit";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForceCommit(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForceCommit(node);
      }
   },
   NORMAL_COMMIT {
      @Override
      public String getLabel() {
         return "NormalCommit";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNormalCommit(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNormalCommit(node);
      }
   },
   COMMIT_OPTIONS {
      @Override
      public String getLabel() {
         return "CommitOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCommitOptions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCommitOptions(node);
      }
   },
   COMMIT_STATEMENT {
      @Override
      public String getLabel() {
         return "CommitStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCommitStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCommitStatement(node);
      }
   },
   LOCK_TABLE_STATEMENT {
      @Override
      public String getLabel() {
         return "LockTableStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLockTableStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLockTableStatement(node);
      }
   },
   LOCK_MODE {
      @Override
      public String getLabel() {
         return "LockMode";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLockMode(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLockMode(node);
      }
   },
   TO_SAVE_POINT {
      @Override
      public String getLabel() {
         return "ToSavePoint";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterToSavePoint(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitToSavePoint(node);
      }
   },
   FORCE_ROLLBACK {
      @Override
      public String getLabel() {
         return "ForceRollback";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForceRollback(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForceRollback(node);
      }
   },
   ROLLBACK_OPTIONS {
      @Override
      public String getLabel() {
         return "RollbackOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRollbackOptions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRollbackOptions(node);
      }
   },
   ROLLBACKL_STATEMENT {
      @Override
      public String getLabel() {
         return "RollbacklStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRollbacklStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRollbacklStatement(node);
      }
   },
   TRANSACTION_NAME {
      @Override
      public String getLabel() {
         return "TransactionName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTransactionName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTransactionName(node);
      }
   },
   USE_ROLLBACK_SEGMENT {
      @Override
      public String getLabel() {
         return "UseRollbackSegment";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUseRollbackSegment(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUseRollbackSegment(node);
      }
   },
   ISOLATION_LEVEL {
      @Override
      public String getLabel() {
         return "IsolationLevel";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsolationLevel(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsolationLevel(node);
      }
   },
   READ_MODE {
      @Override
      public String getLabel() {
         return "ReadMode";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReadMode(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReadMode(node);
      }
   },
   SET_TRANSACTION_OPTIONS {
      @Override
      public String getLabel() {
         return "SetTransactionOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSetTransactionOptions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSetTransactionOptions(node);
      }
   },
   SET_TRANSACTION_STATEMENT {
      @Override
      public String getLabel() {
         return "SetTransactionStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSetTransactionStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSetTransactionStatement(node);
      }
   },
   SAVEPOINT_STATEMENT {
      @Override
      public String getLabel() {
         return "SavepointStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSavepointStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSavepointStatement(node);
      }
   },
   SELECT_STATEMENT {
      @Override
      public String getLabel() {
         return "SelectStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSelectStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSelectStatement(node);
      }
   },
   MERGE_UPDATE_CLAUSE {
      @Override
      public String getLabel() {
         return "MergeUpdateClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMergeUpdateClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMergeUpdateClause(node);
      }
   },
   MERGE_INSERT_CLAUSE {
      @Override
      public String getLabel() {
         return "MergeInsertClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMergeInsertClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMergeInsertClause(node);
      }
   },
   MERGE_STATEMENT {
      @Override
      public String getLabel() {
         return "MergeStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMergeStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMergeStatement(node);
      }
   },
   BLOCK_HINT {
      @Override
      public String getLabel() {
         return "BlockHint";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBlockHint(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBlockHint(node);
      }
   },
   LINE_HINT {
      @Override
      public String getLabel() {
         return "LineHint";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLineHint(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLineHint(node);
      }
   },
   HINT {
      @Override
      public String getLabel() {
         return "Hint";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHint(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHint(node);
      }
   },
   LIST_ALL_FIELDS {
      @Override
      public String getLabel() {
         return "ListAllFields";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterListAllFields(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitListAllFields(node);
      }
   },
   SELECT_LIST_EXPRESSION_ELEMENT {
      @Override
      public String getLabel() {
         return "SelectListExpressionElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSelectListExpressionElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSelectListExpressionElement(node);
      }
   },
   SELECT_LIST_ELEMENT {
      @Override
      public String getLabel() {
         return "SelectListElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSelectListElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSelectListElement(node);
      }
   },
   COLUMN_ALIAS {
      @Override
      public String getLabel() {
         return "ColumnAlias";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumnAlias(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumnAlias(node);
      }
   },
   COMMA_SELECT_LIST_ELEMENT {
      @Override
      public String getLabel() {
         return "CommaSelectListElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCommaSelectListElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCommaSelectListElement(node);
      }
   },
   ZERO_OR_MORE_COMMA_SELECT_LIST_ELEMENT {
      @Override
      public String getLabel() {
         return "ZeroOrMoreCommaSelectListElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterZeroOrMoreCommaSelectListElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitZeroOrMoreCommaSelectListElement(node);
      }
   },
   LIST_OF_SELECT_LIST_ELEMENT {
      @Override
      public String getLabel() {
         return "ListOfSelectListElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterListOfSelectListElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitListOfSelectListElement(node);
      }
   },
   SELECT_LIST {
      @Override
      public String getLabel() {
         return "SelectList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSelectList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSelectList(node);
      }
   },
   SUBQUERY_READ_ONLY_RESTRICTION {
      @Override
      public String getLabel() {
         return "SubqueryReadOnlyRestriction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryReadOnlyRestriction(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryReadOnlyRestriction(node);
      }
   },
   SUBQUERY_CHECK_CONSTRAINT_NAME {
      @Override
      public String getLabel() {
         return "SubqueryCheckConstraintName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryCheckConstraintName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryCheckConstraintName(node);
      }
   },
   SUBQUERY_CHECK_OPTION_RESTRICTION {
      @Override
      public String getLabel() {
         return "SubqueryCheckOptionRestriction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryCheckOptionRestriction(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryCheckOptionRestriction(node);
      }
   },
   SUBQUERY_RESTRICTION_TYPE {
      @Override
      public String getLabel() {
         return "SubqueryRestrictionType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryRestrictionType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryRestrictionType(node);
      }
   },
   SUBQUERY_RESTRICTION {
      @Override
      public String getLabel() {
         return "SubqueryRestriction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryRestriction(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryRestriction(node);
      }
   },
   SAMPLE_NUMBER {
      @Override
      public String getLabel() {
         return "SampleNumber";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSampleNumber(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSampleNumber(node);
      }
   },
   SEED {
      @Override
      public String getLabel() {
         return "Seed";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSeed(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSeed(node);
      }
   },
   SAMPLE_CLAUSE {
      @Override
      public String getLabel() {
         return "SampleClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSampleClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSampleClause(node);
      }
   },
   TABLE_OR_VIEW {
      @Override
      public String getLabel() {
         return "TableOrView";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTableOrView(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTableOrView(node);
      }
   },
   QUERY_TABLE_EXPRESSION {
      @Override
      public String getLabel() {
         return "QueryTableExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterQueryTableExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitQueryTableExpression(node);
      }
   },
   DBLINK {
      @Override
      public String getLabel() {
         return "DBLink";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDBLink(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDBLink(node);
      }
   },
   TABLE_NAME {
      @Override
      public String getLabel() {
         return "TableName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTableName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTableName(node);
      }
   },
   SQL_FUNCTION_CALL_AS_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlFunctionCallAsIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlFunctionCallAsIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlFunctionCallAsIdentifier(node);
      }
   },
   COLLECTION_EXPRESSION {
      @Override
      public String getLabel() {
         return "CollectionExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCollectionExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCollectionExpression(node);
      }
   },
   TABLE_COLLECTION_EXPRESSION {
      @Override
      public String getLabel() {
         return "TableCollectionExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTableCollectionExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTableCollectionExpression(node);
      }
   },
   SQL_MATH_OPERATOR {
      @Override
      public String getLabel() {
         return "SqlMathOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlMathOperator(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlMathOperator(node);
      }
   },
   SQL_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlExpression(node);
      }
   },
   SQL_MATH_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlMathExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlMathExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlMathExpression(node);
      }
   },
   PARENTHESES_SQL_EXPRESSION {
      @Override
      public String getLabel() {
         return "ParenthesesSqlExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParenthesesSqlExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParenthesesSqlExpression(node);
      }
   },
   SQL_UNARY_OPERATOR {
      @Override
      public String getLabel() {
         return "SqlUnaryOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlUnaryOperator(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlUnaryOperator(node);
      }
   },
   SQL_UNARY_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlUnaryExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlUnaryExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlUnaryExpression(node);
      }
   },
   SQL_LEFT_ATOMIC_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlLeftAtomicExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlLeftAtomicExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlLeftAtomicExpression(node);
      }
   },
   DATE_TIME_EXPRESSION {
      @Override
      public String getLabel() {
         return "DateTimeExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDateTimeExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDateTimeExpression(node);
      }
   },
   SQL_ATOMIC_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlAtomicExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlAtomicExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlAtomicExpression(node);
      }
   },
   SQL_CASE_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlCaseExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlCaseExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlCaseExpression(node);
      }
   },
   SQL_WHEN_EXPRESSION_THEN {
      @Override
      public String getLabel() {
         return "SqlWhenExpressionThen";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlWhenExpressionThen(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlWhenExpressionThen(node);
      }
   },
   SQL_SIMPLE_CASE_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlSimpleCaseExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlSimpleCaseExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlSimpleCaseExpression(node);
      }
   },
   SQL_WHEN_CONDITION_THEN {
      @Override
      public String getLabel() {
         return "SqlWhenConditionThen";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlWhenConditionThen(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlWhenConditionThen(node);
      }
   },
   SQL_SEARCHED_CASE_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlSearchedCaseExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlSearchedCaseExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlSearchedCaseExpression(node);
      }
   },
   SQL_CASE_EXPRESSION_ELSE {
      @Override
      public String getLabel() {
         return "SqlCaseExpressionElse";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlCaseExpressionElse(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlCaseExpressionElse(node);
      }
   },
   ROW_NUM {
      @Override
      public String getLabel() {
         return "RowNum";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRowNum(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRowNum(node);
      }
   },
   IDENTIFIED_ROW_ID {
      @Override
      public String getLabel() {
         return "IdentifiedRowId";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIdentifiedRowId(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIdentifiedRowId(node);
      }
   },
   ROW_ID {
      @Override
      public String getLabel() {
         return "RowId";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRowId(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRowId(node);
      }
   },
   LEVEL {
      @Override
      public String getLabel() {
         return "Level";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLevel(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLevel(node);
      }
   },
   SQL_OUTER_JOIN_OBJECT {
      @Override
      public String getLabel() {
         return "SqlOuterJoinObject";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlOuterJoinObject(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlOuterJoinObject(node);
      }
   },
   SQL_SIMPLE_EXPRESSION {
      @Override
      public String getLabel() {
         return "SqlSimpleExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlSimpleExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlSimpleExpression(node);
      }
   },
   SYS_DATE {
      @Override
      public String getLabel() {
         return "SysDate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSysDate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSysDate(node);
      }
   },
   TIME_EXPRESSION {
      @Override
      public String getLabel() {
         return "TimeExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTimeExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTimeExpression(node);
      }
   },
   OUTER_JOIN_SIGN {
      @Override
      public String getLabel() {
         return "OuterJoinSign";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOuterJoinSign(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOuterJoinSign(node);
      }
   },
   ORDER_BY_FUNCTION_CLAUSE {
      @Override
      public String getLabel() {
         return "OrderByFunctionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrderByFunctionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrderByFunctionClause(node);
      }
   },
   AVG {
      @Override
      public String getLabel() {
         return "Avg";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAvg(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAvg(node);
      }
   },
   CAST {
      @Override
      public String getLabel() {
         return "Cast";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCast(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCast(node);
      }
   },
   CHR {
      @Override
      public String getLabel() {
         return "Chr";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterChr(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitChr(node);
      }
   },
   MINING_ATTRIBUTE_CLAUSE {
      @Override
      public String getLabel() {
         return "MiningAttributeClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMiningAttributeClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMiningAttributeClause(node);
      }
   },
   CLUSTER_ID {
      @Override
      public String getLabel() {
         return "ClusterId";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterClusterId(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitClusterId(node);
      }
   },
   CLUSTER_PROBABILITY {
      @Override
      public String getLabel() {
         return "ClusterProbability";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterClusterProbability(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitClusterProbability(node);
      }
   },
   CLUSTER_SET {
      @Override
      public String getLabel() {
         return "ClusterSet";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterClusterSet(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitClusterSet(node);
      }
   },
   CORR {
      @Override
      public String getLabel() {
         return "Corr";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCorr(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCorr(node);
      }
   },
   DISTINCT_EXPRESSION {
      @Override
      public String getLabel() {
         return "DistinctExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDistinctExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDistinctExpression(node);
      }
   },
   ALL_EXPRESSION {
      @Override
      public String getLabel() {
         return "AllExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAllExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAllExpression(node);
      }
   },
   COUNT {
      @Override
      public String getLabel() {
         return "Count";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCount(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCount(node);
      }
   },
   COVAR_POP {
      @Override
      public String getLabel() {
         return "CovarPop";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCovarPop(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCovarPop(node);
      }
   },
   COVAR_SAMP {
      @Override
      public String getLabel() {
         return "CovarSamp";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCovarSamp(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCovarSamp(node);
      }
   },
   CUME_DIST_ANALYTIC {
      @Override
      public String getLabel() {
         return "CumeDistAnalytic";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCumeDistAnalytic(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCumeDistAnalytic(node);
      }
   },
   CUME_DIST_AGGREGATE {
      @Override
      public String getLabel() {
         return "CumeDistAggregate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCumeDistAggregate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCumeDistAggregate(node);
      }
   },
   DECOMPOSE {
      @Override
      public String getLabel() {
         return "Decompose";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDecompose(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDecompose(node);
      }
   },
   DENSE_RANK_AGGREGATE {
      @Override
      public String getLabel() {
         return "DenseRankAggregate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDenseRankAggregate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDenseRankAggregate(node);
      }
   },
   DENSE_RANK_ANALYTIC {
      @Override
      public String getLabel() {
         return "DenseRankAnalytic";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDenseRankAnalytic(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDenseRankAnalytic(node);
      }
   },
   OVER_QUERY_PARTITION_CLAUSE {
      @Override
      public String getLabel() {
         return "OverQueryPartitionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOverQueryPartitionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOverQueryPartitionClause(node);
      }
   },
   OVER_PARENTHESES_QUERY_PARTITION_CLAUSE {
      @Override
      public String getLabel() {
         return "OverParenthesesQueryPartitionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOverParenthesesQueryPartitionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOverParenthesesQueryPartitionClause(node);
      }
   },
   DENSE_RANK_CLAUSE {
      @Override
      public String getLabel() {
         return "DenseRankClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDenseRankClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDenseRankClause(node);
      }
   },
   DATA_TO_EXTRACT {
      @Override
      public String getLabel() {
         return "DataToExtract";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDataToExtract(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDataToExtract(node);
      }
   },
   EXTRACT {
      @Override
      public String getLabel() {
         return "Extract";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExtract(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExtract(node);
      }
   },
   FEATURE_ID {
      @Override
      public String getLabel() {
         return "FeatureId";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFeatureId(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFeatureId(node);
      }
   },
   FEATURE_SET {
      @Override
      public String getLabel() {
         return "FeatureSet";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFeatureSet(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFeatureSet(node);
      }
   },
   FEATURE_VALUE {
      @Override
      public String getLabel() {
         return "FeatureValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFeatureValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFeatureValue(node);
      }
   },
   IGNORE_NULLS {
      @Override
      public String getLabel() {
         return "IgnoreNulls";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIgnoreNulls(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIgnoreNulls(node);
      }
   },
   FIRST_VALUE {
      @Override
      public String getLabel() {
         return "FirstValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFirstValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFirstValue(node);
      }
   },
   LAG {
      @Override
      public String getLabel() {
         return "Lag";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLag(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLag(node);
      }
   },
   LAST_VALUE {
      @Override
      public String getLabel() {
         return "LastValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLastValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLastValue(node);
      }
   },
   LEAD {
      @Override
      public String getLabel() {
         return "Lead";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLead(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLead(node);
      }
   },
   LIST_AGG {
      @Override
      public String getLabel() {
         return "ListAgg";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterListAgg(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitListAgg(node);
      }
   },
   MAX {
      @Override
      public String getLabel() {
         return "Max";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMax(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMax(node);
      }
   },
   MEDIAN {
      @Override
      public String getLabel() {
         return "Median";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMedian(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMedian(node);
      }
   },
   MIN {
      @Override
      public String getLabel() {
         return "Min";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMin(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMin(node);
      }
   },
   NTILE {
      @Override
      public String getLabel() {
         return "NTile";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNTile(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNTile(node);
      }
   },
   PERCENT_RANK_AGGREGATE {
      @Override
      public String getLabel() {
         return "PercentRankAggregate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPercentRankAggregate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPercentRankAggregate(node);
      }
   },
   PERCENT_RANK_ANALYTIC {
      @Override
      public String getLabel() {
         return "PercentRankAnalytic";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPercentRankAnalytic(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPercentRankAnalytic(node);
      }
   },
   PERCENTILE_CONT {
      @Override
      public String getLabel() {
         return "PercentileCont";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPercentileCont(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPercentileCont(node);
      }
   },
   PERCENTILE_DISC {
      @Override
      public String getLabel() {
         return "PercentileDisc";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPercentileDisc(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPercentileDisc(node);
      }
   },
   COST_MATRIX_CLAUSE_VALUES {
      @Override
      public String getLabel() {
         return "CostMatrixClauseValues";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCostMatrixClauseValues(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCostMatrixClauseValues(node);
      }
   },
   COST_MATRIX_CLAUSE_MODEL {
      @Override
      public String getLabel() {
         return "CostMatrixClauseModel";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCostMatrixClauseModel(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCostMatrixClauseModel(node);
      }
   },
   COST_MATRIX_CLAUSE {
      @Override
      public String getLabel() {
         return "CostMatrixClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCostMatrixClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCostMatrixClause(node);
      }
   },
   PREDICTION {
      @Override
      public String getLabel() {
         return "Prediction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPrediction(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPrediction(node);
      }
   },
   PREDICTION_BOUNDS {
      @Override
      public String getLabel() {
         return "PredictionBounds";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPredictionBounds(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPredictionBounds(node);
      }
   },
   PREDICTION_COST {
      @Override
      public String getLabel() {
         return "PredictionCost";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPredictionCost(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPredictionCost(node);
      }
   },
   PREDICTION_DETAILS {
      @Override
      public String getLabel() {
         return "PredictionDetails";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPredictionDetails(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPredictionDetails(node);
      }
   },
   PREDICTION_PROBABILITY {
      @Override
      public String getLabel() {
         return "PredictionProbability";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPredictionProbability(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPredictionProbability(node);
      }
   },
   PREDICTION_SET {
      @Override
      public String getLabel() {
         return "PredictionSet";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPredictionSet(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPredictionSet(node);
      }
   },
   RANK_AGGREGATE {
      @Override
      public String getLabel() {
         return "RankAggregate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRankAggregate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRankAggregate(node);
      }
   },
   RANK_ANALYTIC {
      @Override
      public String getLabel() {
         return "RankAnalytic";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRankAnalytic(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRankAnalytic(node);
      }
   },
   RATIO_TO_REPORT {
      @Override
      public String getLabel() {
         return "RatioToReport";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRatioToReport(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRatioToReport(node);
      }
   },
   REGR_LINEAR_FUNCTIONS {
      @Override
      public String getLabel() {
         return "RegrLinearFunctions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRegrLinearFunctions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRegrLinearFunctions(node);
      }
   },
   ROW_NUMBER {
      @Override
      public String getLabel() {
         return "RowNumber";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRowNumber(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRowNumber(node);
      }
   },
   STD_DEV {
      @Override
      public String getLabel() {
         return "StdDev";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterStdDev(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitStdDev(node);
      }
   },
   STD_DEV_POP {
      @Override
      public String getLabel() {
         return "StdDevPop";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterStdDevPop(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitStdDevPop(node);
      }
   },
   STD_DEV_SAMP {
      @Override
      public String getLabel() {
         return "StdDevSamp";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterStdDevSamp(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitStdDevSamp(node);
      }
   },
   SUM {
      @Override
      public String getLabel() {
         return "Sum";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSum(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSum(node);
      }
   },
   TRANSLATE {
      @Override
      public String getLabel() {
         return "Translate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTranslate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTranslate(node);
      }
   },
   TREAT {
      @Override
      public String getLabel() {
         return "Treat";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTreat(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTreat(node);
      }
   },
   TRIM_MODE {
      @Override
      public String getLabel() {
         return "TrimMode";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTrimMode(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTrimMode(node);
      }
   },
   TRIM {
      @Override
      public String getLabel() {
         return "Trim";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTrim(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTrim(node);
      }
   },
   VAR_POP {
      @Override
      public String getLabel() {
         return "VarPop";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVarPop(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVarPop(node);
      }
   },
   VAR_SAMP {
      @Override
      public String getLabel() {
         return "VarSamp";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVarSamp(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVarSamp(node);
      }
   },
   VARIANCE {
      @Override
      public String getLabel() {
         return "Variance";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVariance(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVariance(node);
      }
   },
   XML_AGG {
      @Override
      public String getLabel() {
         return "XmlAgg";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlAgg(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlAgg(node);
      }
   },
   XML_ALIAS {
      @Override
      public String getLabel() {
         return "XmlAlias";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlAlias(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlAlias(node);
      }
   },
   XML_CAST {
      @Override
      public String getLabel() {
         return "XmlCast";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlCast(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlCast(node);
      }
   },
   XML_PAR {
      @Override
      public String getLabel() {
         return "XmlPar";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlPar(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlPar(node);
      }
   },
   XML_COL_ATT_VAL {
      @Override
      public String getLabel() {
         return "XmlColAttVal";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlColAttVal(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlColAttVal(node);
      }
   },
   XML_ATTRIBUTES_CLAUSE {
      @Override
      public String getLabel() {
         return "XmlAttributesClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlAttributesClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlAttributesClause(node);
      }
   },
   XML_ELEMENT {
      @Override
      public String getLabel() {
         return "XmlElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlElement(node);
      }
   },
   AS_ALIAS {
      @Override
      public String getLabel() {
         return "AsAlias";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAsAlias(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAsAlias(node);
      }
   },
   ALIASED_EXPRESSION {
      @Override
      public String getLabel() {
         return "AliasedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAliasedExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAliasedExpression(node);
      }
   },
   XML_PASSING_CLAUSE {
      @Override
      public String getLabel() {
         return "XmlPassingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlPassingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlPassingClause(node);
      }
   },
   XML_EXISTS {
      @Override
      public String getLabel() {
         return "XmlExists";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlExists(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlExists(node);
      }
   },
   XML_FOREST {
      @Override
      public String getLabel() {
         return "XmlForest";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlForest(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlForest(node);
      }
   },
   XML_PARSE {
      @Override
      public String getLabel() {
         return "XmlParse";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlParse(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlParse(node);
      }
   },
   XML_PI {
      @Override
      public String getLabel() {
         return "XmlPI";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlPI(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlPI(node);
      }
   },
   XML_QUERY {
      @Override
      public String getLabel() {
         return "XmlQuery";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlQuery(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlQuery(node);
      }
   },
   XML_ROOT {
      @Override
      public String getLabel() {
         return "XmlRoot";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlRoot(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlRoot(node);
      }
   },
   AS_DATA_TYPE {
      @Override
      public String getLabel() {
         return "AsDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAsDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAsDataType(node);
      }
   },
   XML_SERIALIZE {
      @Override
      public String getLabel() {
         return "XmlSerialize";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlSerialize(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlSerialize(node);
      }
   },
   XML_NAMESPACES_ARG {
      @Override
      public String getLabel() {
         return "XmlNamespacesArg";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlNamespacesArg(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlNamespacesArg(node);
      }
   },
   XML_NAMESPACES_ARGS {
      @Override
      public String getLabel() {
         return "XmlNamespacesArgs";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlNamespacesArgs(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlNamespacesArgs(node);
      }
   },
   XML_NAMESPACES_CLAUSE {
      @Override
      public String getLabel() {
         return "XmlNamespacesClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlNamespacesClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlNamespacesClause(node);
      }
   },
   XML_TABLE_COLUMN {
      @Override
      public String getLabel() {
         return "XmlTableColumn";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlTableColumn(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlTableColumn(node);
      }
   },
   XML_TABLE_OPTIONS {
      @Override
      public String getLabel() {
         return "XmlTableOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlTableOptions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlTableOptions(node);
      }
   },
   XML_TABLE {
      @Override
      public String getLabel() {
         return "XmlTable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterXmlTable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitXmlTable(node);
      }
   },
   BUILT_IN_FUNCTION_CALL {
      @Override
      public String getLabel() {
         return "BuiltInFunctionCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBuiltInFunctionCall(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBuiltInFunctionCall(node);
      }
   },
   ANALYTIC_FUNCTION_CALL {
      @Override
      public String getLabel() {
         return "AnalyticFunctionCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAnalyticFunctionCall(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAnalyticFunctionCall(node);
      }
   },
   SQL_IDENTIFIED_FUNCTION_PARAMETER {
      @Override
      public String getLabel() {
         return "SqlIdentifiedFunctionParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlIdentifiedFunctionParameter(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlIdentifiedFunctionParameter(node);
      }
   },
   SQL_FUNCTION_PARAMETER {
      @Override
      public String getLabel() {
         return "SqlFunctionParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlFunctionParameter(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlFunctionParameter(node);
      }
   },
   UNBOUNDED_PRECEDING {
      @Override
      public String getLabel() {
         return "UnboundedPreceding";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnboundedPreceding(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnboundedPreceding(node);
      }
   },
   UNBOUNDED_FOLLOWING {
      @Override
      public String getLabel() {
         return "UnboundedFollowing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnboundedFollowing(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnboundedFollowing(node);
      }
   },
   CURRENT_ROW {
      @Override
      public String getLabel() {
         return "CurrentRow";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCurrentRow(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCurrentRow(node);
      }
   },
   PRECEDING {
      @Override
      public String getLabel() {
         return "Preceding";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPreceding(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPreceding(node);
      }
   },
   FOLLOWING {
      @Override
      public String getLabel() {
         return "Following";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFollowing(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFollowing(node);
      }
   },
   BETWEEN_WINDOWING_CLAUSE {
      @Override
      public String getLabel() {
         return "BetweenWindowingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBetweenWindowingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBetweenWindowingClause(node);
      }
   },
   WINDOWING_CLAUSE {
      @Override
      public String getLabel() {
         return "WindowingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterWindowingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitWindowingClause(node);
      }
   },
   ANALYTIC_OVER_CLAUSE {
      @Override
      public String getLabel() {
         return "AnalyticOverClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAnalyticOverClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAnalyticOverClause(node);
      }
   },
   MODEL_EXPRESSION {
      @Override
      public String getLabel() {
         return "ModelExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelExpression(node);
      }
   },
   CURSOR_EXPRESSION {
      @Override
      public String getLabel() {
         return "CursorExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorExpression(node);
      }
   },
   CONDITION_OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "ConditionOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionOrExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionOrExpression(node);
      }
   },
   CONDITION_OR_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "ConditionOrExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionOrExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionOrExpressionList(node);
      }
   },
   CELL_REFERENCE_ARGUMENTS_LIST {
      @Override
      public String getLabel() {
         return "CellReferenceArgumentsList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCellReferenceArgumentsList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCellReferenceArgumentsList(node);
      }
   },
   CELL_REFERENCE_ARGUMENT {
      @Override
      public String getLabel() {
         return "CellReferenceArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCellReferenceArgument(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCellReferenceArgument(node);
      }
   },
   PLACE_HOLDER_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlaceHolderExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlaceHolderExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlaceHolderExpression(node);
      }
   },
   TYPE_CONSTRUCTOR_EXPRESSION {
      @Override
      public String getLabel() {
         return "TypeConstructorExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTypeConstructorExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTypeConstructorExpression(node);
      }
   },
   PIVOT_FOR_CLAUSE {
      @Override
      public String getLabel() {
         return "PivotForClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPivotForClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPivotForClause(node);
      }
   },
   ANY_LIST {
      @Override
      public String getLabel() {
         return "AnyList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAnyList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAnyList(node);
      }
   },
   SQL_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "SqlExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlExpressionList(node);
      }
   },
   PARENTHESES_SQL_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "ParenthesesSqlExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParenthesesSqlExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParenthesesSqlExpressionList(node);
      }
   },
   PIVO_IN_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "PivoInExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPivoInExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPivoInExpressionList(node);
      }
   },
   AS_OPTIONAL_ALIAS {
      @Override
      public String getLabel() {
         return "AsOptionalAlias";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAsOptionalAlias(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAsOptionalAlias(node);
      }
   },
   PIVOT_IN_EXPRESSION {
      @Override
      public String getLabel() {
         return "PivotInExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPivotInExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPivotInExpression(node);
      }
   },
   PIVOT_IN_CLAUSE {
      @Override
      public String getLabel() {
         return "PivotInClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPivotInClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPivotInClause(node);
      }
   },
   PIVOT_CLAUSE {
      @Override
      public String getLabel() {
         return "PivotClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPivotClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPivotClause(node);
      }
   },
   INCLUDE_NULLS {
      @Override
      public String getLabel() {
         return "IncludeNulls";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIncludeNulls(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIncludeNulls(node);
      }
   },
   EXCLUDE_NULLS {
      @Override
      public String getLabel() {
         return "ExcludeNulls";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExcludeNulls(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExcludeNulls(node);
      }
   },
   UNPIVOT_CLAUSE {
      @Override
      public String getLabel() {
         return "UnpivotClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnpivotClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnpivotClause(node);
      }
   },
   UNPIVOT_IN_CLAUSE {
      @Override
      public String getLabel() {
         return "UnpivotInClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnpivotInClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnpivotInClause(node);
      }
   },
   UNPIVOT_IN_ELEMENT {
      @Override
      public String getLabel() {
         return "UnpivotInElement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnpivotInElement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnpivotInElement(node);
      }
   },
   UNPIVOT_IN_CLAUSE_LIST {
      @Override
      public String getLabel() {
         return "UnpivotInClauseList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnpivotInClauseList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnpivotInClauseList(node);
      }
   },
   SQL_LITERAL_LIST {
      @Override
      public String getLabel() {
         return "SqlLiteralList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlLiteralList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlLiteralList(node);
      }
   },
   PARENTHESES_LITERAL_LIST {
      @Override
      public String getLabel() {
         return "ParenthesesLiteralList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParenthesesLiteralList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParenthesesLiteralList(node);
      }
   },
   PARENTHESES_LITERAL_LIST_LIST {
      @Override
      public String getLabel() {
         return "ParenthesesLiteralListList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParenthesesLiteralListList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParenthesesLiteralListList(node);
      }
   },
   SCHEMA {
      @Override
      public String getLabel() {
         return "Schema";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSchema(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSchema(node);
      }
   },
   TABLE {
      @Override
      public String getLabel() {
         return "Table";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTable(node);
      }
   },
   OBJECT {
      @Override
      public String getLabel() {
         return "Object";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterObject(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitObject(node);
      }
   },
   COLUMN {
      @Override
      public String getLabel() {
         return "Column";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumn(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumn(node);
      }
   },
   SCHEMA_OBJECT_NAME {
      @Override
      public String getLabel() {
         return "SchemaObjectName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSchemaObjectName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSchemaObjectName(node);
      }
   },
   COLUMN_NAME {
      @Override
      public String getLabel() {
         return "ColumnName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumnName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumnName(node);
      }
   },
   COLUMNS_LIST {
      @Override
      public String getLabel() {
         return "ColumnsList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumnsList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumnsList(node);
      }
   },
   ONLY_QUERY_TABLE_EXPRESSION {
      @Override
      public String getLabel() {
         return "OnlyQueryTableExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOnlyQueryTableExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOnlyQueryTableExpression(node);
      }
   },
   QUERY_TABLE_EXPRESSION_PIVOT_CLAUSE {
      @Override
      public String getLabel() {
         return "QueryTableExpressionPivotClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterQueryTableExpressionPivotClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitQueryTableExpressionPivotClause(node);
      }
   },
   QUERY_TABLE_EXPRESSION_UNPIVOT_CLAUSE {
      @Override
      public String getLabel() {
         return "QueryTableExpressionUnpivotClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterQueryTableExpressionUnpivotClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitQueryTableExpressionUnpivotClause(node);
      }
   },
   QUERY_TABLE_EXPRESSION_TYPE {
      @Override
      public String getLabel() {
         return "QueryTableExpressionType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterQueryTableExpressionType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitQueryTableExpressionType(node);
      }
   },
   TABLE_REFERENCE {
      @Override
      public String getLabel() {
         return "TableReference";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTableReference(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTableReference(node);
      }
   },
   VERSIONS_BETWEEN {
      @Override
      public String getLabel() {
         return "VersionsBetween";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVersionsBetween(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVersionsBetween(node);
      }
   },
   FLASHBACK_QUERY_CLAUSE {
      @Override
      public String getLabel() {
         return "FlashbackQueryClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFlashbackQueryClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFlashbackQueryClause(node);
      }
   },
   EQUALITY_OPERATOR {
      @Override
      public String getLabel() {
         return "EqualityOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterEqualityOperator(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitEqualityOperator(node);
      }
   },
   RELATIONAL_OPERATOR {
      @Override
      public String getLabel() {
         return "RelationalOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRelationalOperator(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRelationalOperator(node);
      }
   },
   SQL_CONDITION {
      @Override
      public String getLabel() {
         return "SqlCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlCondition(node);
      }
   },
   OR_CONDITION {
      @Override
      public String getLabel() {
         return "OrCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrCondition(node);
      }
   },
   AND_CONDITION {
      @Override
      public String getLabel() {
         return "AndCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAndCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAndCondition(node);
      }
   },
   NOT_CONDITION {
      @Override
      public String getLabel() {
         return "NotCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNotCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNotCondition(node);
      }
   },
   PARENTHESES_CONDITION {
      @Override
      public String getLabel() {
         return "ParenthesesCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParenthesesCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParenthesesCondition(node);
      }
   },
   CONDITION_EXPRESSION {
      @Override
      public String getLabel() {
         return "ConditionExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionExpression(node);
      }
   },
   EXISTS_CONDITION {
      @Override
      public String getLabel() {
         return "ExistsCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExistsCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExistsCondition(node);
      }
   },
   NOT {
      @Override
      public String getLabel() {
         return "Not";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNot(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNot(node);
      }
   },
   IS_CONDITION_OPTION {
      @Override
      public String getLabel() {
         return "IsConditionOption";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsConditionOption(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsConditionOption(node);
      }
   },
   IS_CONDITION {
      @Override
      public String getLabel() {
         return "IsCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsCondition(node);
      }
   },
   PRIOR {
      @Override
      public String getLabel() {
         return "Prior";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPrior(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPrior(node);
      }
   },
   RELATIONAL_CONDITION {
      @Override
      public String getLabel() {
         return "RelationalCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRelationalCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRelationalCondition(node);
      }
   },
   GROUP_CONDITION_COVERAGE_TYPE {
      @Override
      public String getLabel() {
         return "GroupConditionCoverageType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupConditionCoverageType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupConditionCoverageType(node);
      }
   },
   EQUALITY_GROUP_CONDITION {
      @Override
      public String getLabel() {
         return "EqualityGroupCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterEqualityGroupCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitEqualityGroupCondition(node);
      }
   },
   ANY_RELATIONAL_GROUP_CONDITION {
      @Override
      public String getLabel() {
         return "AnyRelationalGroupCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAnyRelationalGroupCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAnyRelationalGroupCondition(node);
      }
   },
   RELATIONAL_GROUP_CONDITION {
      @Override
      public String getLabel() {
         return "RelationalGroupCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRelationalGroupCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRelationalGroupCondition(node);
      }
   },
   IN_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "inExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterinExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitinExpressionList(node);
      }
   },
   IN_CONDITION {
      @Override
      public String getLabel() {
         return "InCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInCondition(node);
      }
   },
   IS_ASET_CONDITION {
      @Override
      public String getLabel() {
         return "IsASetCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsASetCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsASetCondition(node);
      }
   },
   OBJECT_IS {
      @Override
      public String getLabel() {
         return "ObjectIs";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterObjectIs(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitObjectIs(node);
      }
   },
   IS_ANY_CONDITION {
      @Override
      public String getLabel() {
         return "IsAnyCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsAnyCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsAnyCondition(node);
      }
   },
   IS_EMPTY_CONDITION {
      @Override
      public String getLabel() {
         return "IsEmptyCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsEmptyCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsEmptyCondition(node);
      }
   },
   IS_OF_TYPE_CONDITION {
      @Override
      public String getLabel() {
         return "IsOfTypeCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsOfTypeCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsOfTypeCondition(node);
      }
   },
   ONLY {
      @Override
      public String getLabel() {
         return "Only";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOnly(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOnly(node);
      }
   },
   IS_TYPE_OF_OBJECT {
      @Override
      public String getLabel() {
         return "IsTypeOfObject";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsTypeOfObject(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsTypeOfObject(node);
      }
   },
   IS_OF_TYPE_LIST {
      @Override
      public String getLabel() {
         return "IsOfTypeList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsOfTypeList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsOfTypeList(node);
      }
   },
   IS_PRESENT_CONDITION {
      @Override
      public String getLabel() {
         return "IsPresentCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsPresentCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsPresentCondition(node);
      }
   },
   LIKE_OPERATOR {
      @Override
      public String getLabel() {
         return "LikeOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLikeOperator(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLikeOperator(node);
      }
   },
   ESCAPE {
      @Override
      public String getLabel() {
         return "Escape";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterEscape(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitEscape(node);
      }
   },
   LIKE_CONDITION {
      @Override
      public String getLabel() {
         return "LikeCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLikeCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLikeCondition(node);
      }
   },
   MATCH_PARAM {
      @Override
      public String getLabel() {
         return "MatchParam";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMatchParam(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMatchParam(node);
      }
   },
   REGEX_CONDITION {
      @Override
      public String getLabel() {
         return "RegexCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRegexCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRegexCondition(node);
      }
   },
   MEMBER_CONDITION {
      @Override
      public String getLabel() {
         return "MemberCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMemberCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMemberCondition(node);
      }
   },
   BETWEEN_CONDITION {
      @Override
      public String getLabel() {
         return "BetweenCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBetweenCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBetweenCondition(node);
      }
   },
   SUB_MULTI_SET_CONDITION {
      @Override
      public String getLabel() {
         return "SubMultiSetCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubMultiSetCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubMultiSetCondition(node);
      }
   },
   CORRELATION_INTEGER {
      @Override
      public String getLabel() {
         return "CorrelationInteger";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCorrelationInteger(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCorrelationInteger(node);
      }
   },
   EQUALS_PATH_CONDITION {
      @Override
      public String getLabel() {
         return "EqualsPathCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterEqualsPathCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitEqualsPathCondition(node);
      }
   },
   UNDER_PATH_LEVELS {
      @Override
      public String getLabel() {
         return "UnderPathLevels";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnderPathLevels(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnderPathLevels(node);
      }
   },
   UNDER_PATH_CONDITION {
      @Override
      public String getLabel() {
         return "UnderPathCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnderPathCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnderPathCondition(node);
      }
   },
   IDENTIFIER_OR_STRING_LITERAL {
      @Override
      public String getLabel() {
         return "IdentifierOrStringLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIdentifierOrStringLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIdentifierOrStringLiteral(node);
      }
   },
   ON_CONDITION {
      @Override
      public String getLabel() {
         return "OnCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOnCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOnCondition(node);
      }
   },
   USING {
      @Override
      public String getLabel() {
         return "Using";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUsing(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUsing(node);
      }
   },
   INNER_CROSS_JOIN_CLAUSE {
      @Override
      public String getLabel() {
         return "InnerCrossJoinClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInnerCrossJoinClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInnerCrossJoinClause(node);
      }
   },
   NATURAL_OUTER_JOIN {
      @Override
      public String getLabel() {
         return "NaturalOuterJoin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNaturalOuterJoin(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNaturalOuterJoin(node);
      }
   },
   NORMAL_OUTER_JOIN {
      @Override
      public String getLabel() {
         return "NormalOuterJoin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNormalOuterJoin(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNormalOuterJoin(node);
      }
   },
   OUTER_JOIN_CLAUSE {
      @Override
      public String getLabel() {
         return "OuterJoinClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOuterJoinClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOuterJoinClause(node);
      }
   },
   JOIN_CLAUSE_TYPE {
      @Override
      public String getLabel() {
         return "JoinClauseType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterJoinClauseType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitJoinClauseType(node);
      }
   },
   JOIN_CLAUSE {
      @Override
      public String getLabel() {
         return "JoinClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterJoinClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitJoinClause(node);
      }
   },
   OUTER_JOIN_TYPE {
      @Override
      public String getLabel() {
         return "OuterJoinType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOuterJoinType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOuterJoinType(node);
      }
   },
   QUERY_PARTITION_CLAUSE {
      @Override
      public String getLabel() {
         return "QueryPartitionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterQueryPartitionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitQueryPartitionClause(node);
      }
   },
   FROM_ARGUMENT {
      @Override
      public String getLabel() {
         return "FromArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFromArgument(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFromArgument(node);
      }
   },
   FROM_CLAUSE {
      @Override
      public String getLabel() {
         return "FromClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFromClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFromClause(node);
      }
   },
   CURRENT_OF {
      @Override
      public String getLabel() {
         return "CurrentOf";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCurrentOf(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCurrentOf(node);
      }
   },
   WHERE_CLAUSE {
      @Override
      public String getLabel() {
         return "WhereClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterWhereClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitWhereClause(node);
      }
   },
   BULK_COLLECT {
      @Override
      public String getLabel() {
         return "BulkCollect";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBulkCollect(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBulkCollect(node);
      }
   },
   SELECT_INTO_CLAUSE {
      @Override
      public String getLabel() {
         return "SelectIntoClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSelectIntoClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSelectIntoClause(node);
      }
   },
   DISTINCT {
      @Override
      public String getLabel() {
         return "Distinct";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDistinct(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDistinct(node);
      }
   },
   UNION_TYPE {
      @Override
      public String getLabel() {
         return "UnionType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnionType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnionType(node);
      }
   },
   UNION_CLAUSE {
      @Override
      public String getLabel() {
         return "UnionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnionClause(node);
      }
   },
   QUERY_BLOCK {
      @Override
      public String getLabel() {
         return "QueryBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterQueryBlock(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitQueryBlock(node);
      }
   },
   ENCLOSED_SUBQUERY {
      @Override
      public String getLabel() {
         return "EnclosedSubquery";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterEnclosedSubquery(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitEnclosedSubquery(node);
      }
   },
   SUBQUERY {
      @Override
      public String getLabel() {
         return "Subquery";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubquery(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubquery(node);
      }
   },
   NO_CYCLE_OPTION {
      @Override
      public String getLabel() {
         return "NoCycleOption";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNoCycleOption(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNoCycleOption(node);
      }
   },
   START_WITH_CONDITION {
      @Override
      public String getLabel() {
         return "StartWithCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterStartWithCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitStartWithCondition(node);
      }
   },
   CONNECT_BY_CONDITION {
      @Override
      public String getLabel() {
         return "ConnectByCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConnectByCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConnectByCondition(node);
      }
   },
   CONNECT_BY {
      @Override
      public String getLabel() {
         return "ConnectBy";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConnectBy(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConnectBy(node);
      }
   },
   START_WITH {
      @Override
      public String getLabel() {
         return "StartWith";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterStartWith(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitStartWith(node);
      }
   },
   HIERARCHICAL_QUERY_CLAUSE {
      @Override
      public String getLabel() {
         return "HierarchicalQueryClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHierarchicalQueryClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHierarchicalQueryClause(node);
      }
   },
   GROUP_BY_ARGUMENT {
      @Override
      public String getLabel() {
         return "GroupByArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupByArgument(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupByArgument(node);
      }
   },
   GROUP_BY_ARGUMENTS {
      @Override
      public String getLabel() {
         return "GroupByArguments";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupByArguments(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupByArguments(node);
      }
   },
   ROLLUP_CUBE_CLAUSE {
      @Override
      public String getLabel() {
         return "RollupCubeClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRollupCubeClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRollupCubeClause(node);
      }
   },
   GROUPING_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "GroupingExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupingExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupingExpressionList(node);
      }
   },
   GROUPING_SETS_CLAUSE {
      @Override
      public String getLabel() {
         return "GroupingSetsClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupingSetsClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupingSetsClause(node);
      }
   },
   GROUPING_SETS_CLAUSE_ARGUMENT {
      @Override
      public String getLabel() {
         return "GroupingSetsClauseArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupingSetsClauseArgument(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupingSetsClauseArgument(node);
      }
   },
   GROUPING_SETS_CLAUSE_ARGUMENTS {
      @Override
      public String getLabel() {
         return "GroupingSetsClauseArguments";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupingSetsClauseArguments(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupingSetsClauseArguments(node);
      }
   },
   GROUP_BY_CLAUSE {
      @Override
      public String getLabel() {
         return "GroupByClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGroupByClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGroupByClause(node);
      }
   },
   HAVING_CLAUSE {
      @Override
      public String getLabel() {
         return "HavingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHavingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHavingClause(node);
      }
   },
   MODEL_CLAUSE {
      @Override
      public String getLabel() {
         return "ModelClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelClause(node);
      }
   },
   CELL_REFERENCE_OPTIONS {
      @Override
      public String getLabel() {
         return "CellReferenceOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCellReferenceOptions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCellReferenceOptions(node);
      }
   },
   RETURN_ROWS_CLAUSE {
      @Override
      public String getLabel() {
         return "ReturnRowsClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReturnRowsClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReturnRowsClause(node);
      }
   },
   REFERENCE_MODEL {
      @Override
      public String getLabel() {
         return "ReferenceModel";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReferenceModel(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReferenceModel(node);
      }
   },
   MODEL_COLUMN_PARTITION {
      @Override
      public String getLabel() {
         return "ModelColumnPartition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelColumnPartition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelColumnPartition(node);
      }
   },
   MODEL_COLUMN_CLAUSE {
      @Override
      public String getLabel() {
         return "ModelColumnClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelColumnClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelColumnClause(node);
      }
   },
   MODEL_COLUMN_LIST {
      @Override
      public String getLabel() {
         return "ModelColumnList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelColumnList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelColumnList(node);
      }
   },
   MODEL_COLUMN {
      @Override
      public String getLabel() {
         return "ModelColumn";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelColumn(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelColumn(node);
      }
   },
   MAIN_MODEL {
      @Override
      public String getLabel() {
         return "MainModel";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMainModel(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMainModel(node);
      }
   },
   MODEL_RULES_UPDATE {
      @Override
      public String getLabel() {
         return "ModelRulesUpdate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelRulesUpdate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelRulesUpdate(node);
      }
   },
   UNTIL_CONDITION {
      @Override
      public String getLabel() {
         return "UntilCondition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUntilCondition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUntilCondition(node);
      }
   },
   MODEL_RULES_ITERATE {
      @Override
      public String getLabel() {
         return "ModelRulesIterate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelRulesIterate(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelRulesIterate(node);
      }
   },
   MODEL_RULES_CLAUSE {
      @Override
      public String getLabel() {
         return "ModelRulesClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelRulesClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelRulesClause(node);
      }
   },
   MODEL_RULES_CLAUSE_CELL_ASSIGNMENT_LIST {
      @Override
      public String getLabel() {
         return "ModelRulesClauseCellAssignmentList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelRulesClauseCellAssignmentList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelRulesClauseCellAssignmentList(node);
      }
   },
   MODEL_RULES_CLAUSE_CELL_ASSIGNMENT {
      @Override
      public String getLabel() {
         return "ModelRulesClauseCellAssignment";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterModelRulesClauseCellAssignment(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitModelRulesClauseCellAssignment(node);
      }
   },
   CELL_ASSIGNMENT {
      @Override
      public String getLabel() {
         return "CellAssignment";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCellAssignment(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCellAssignment(node);
      }
   },
   CELL_ASSIGNMENT_ARGUMENTS_LIST {
      @Override
      public String getLabel() {
         return "CellAssignmentArgumentsList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCellAssignmentArgumentsList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCellAssignmentArgumentsList(node);
      }
   },
   CELL_ASSIGNMENT_ARGUMENT {
      @Override
      public String getLabel() {
         return "CellAssignmentArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCellAssignmentArgument(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCellAssignmentArgument(node);
      }
   },
   FOR_IN {
      @Override
      public String getLabel() {
         return "ForIn";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForIn(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForIn(node);
      }
   },
   LIKE_STRING {
      @Override
      public String getLabel() {
         return "LikeString";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLikeString(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLikeString(node);
      }
   },
   FOR_LIKE {
      @Override
      public String getLabel() {
         return "ForLike";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForLike(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForLike(node);
      }
   },
   SINGLE_COLUMN_FOR_LOOP {
      @Override
      public String getLabel() {
         return "SingleColumnForLoop";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSingleColumnForLoop(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSingleColumnForLoop(node);
      }
   },
   MULTI_COLUMN_FOR_LOOP {
      @Override
      public String getLabel() {
         return "MultiColumnForLoop";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMultiColumnForLoop(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMultiColumnForLoop(node);
      }
   },
   SQL_LITERAL {
      @Override
      public String getLabel() {
         return "SqlLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlLiteral(node);
      }
   },
   NULL_LITERAL {
      @Override
      public String getLabel() {
         return "NullLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNullLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNullLiteral(node);
      }
   },
   DATE_LITERAL {
      @Override
      public String getLabel() {
         return "DateLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDateLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDateLiteral(node);
      }
   },
   YEAR {
      @Override
      public String getLabel() {
         return "Year";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterYear(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitYear(node);
      }
   },
   MONTH {
      @Override
      public String getLabel() {
         return "Month";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMonth(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMonth(node);
      }
   },
   DAY {
      @Override
      public String getLabel() {
         return "Day";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDay(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDay(node);
      }
   },
   HOUR {
      @Override
      public String getLabel() {
         return "Hour";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHour(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHour(node);
      }
   },
   MINUTE {
      @Override
      public String getLabel() {
         return "Minute";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMinute(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMinute(node);
      }
   },
   SECOND {
      @Override
      public String getLabel() {
         return "Second";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSecond(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSecond(node);
      }
   },
   TIMESTAMP_LITERAL {
      @Override
      public String getLabel() {
         return "TimestampLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTimestampLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTimestampLiteral(node);
      }
   },
   STRING_LITERAL {
      @Override
      public String getLabel() {
         return "StringLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterStringLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitStringLiteral(node);
      }
   },
   STRING {
      @Override
      public String getLabel() {
         return "String";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterString(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitString(node);
      }
   },
   ORDER {
      @Override
      public String getLabel() {
         return "Order";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrder(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrder(node);
      }
   },
   NULLS_ORDER {
      @Override
      public String getLabel() {
         return "NullsOrder";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNullsOrder(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNullsOrder(node);
      }
   },
   ORDER_BY_ARG {
      @Override
      public String getLabel() {
         return "OrderByArg";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrderByArg(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrderByArg(node);
      }
   },
   ORDER_BY_ARGUMENT {
      @Override
      public String getLabel() {
         return "OrderByArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrderByArgument(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrderByArgument(node);
      }
   },
   ORDER_BY_ARGUMENTS {
      @Override
      public String getLabel() {
         return "OrderByArguments";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrderByArguments(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrderByArguments(node);
      }
   },
   ORDER_BY_CLAUSE {
      @Override
      public String getLabel() {
         return "OrderByClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrderByClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrderByClause(node);
      }
   },
   SUBQUERY_FACTORING_SOURCE {
      @Override
      public String getLabel() {
         return "SubqueryFactoringSource";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryFactoringSource(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryFactoringSource(node);
      }
   },
   SUBQUERY_FACTORING_CLAUSE {
      @Override
      public String getLabel() {
         return "SubqueryFactoringClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryFactoringClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryFactoringClause(node);
      }
   },
   WAIT_CLAUSE {
      @Override
      public String getLabel() {
         return "WaitClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterWaitClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitWaitClause(node);
      }
   },
   FOR_UPDATE_CLAUSE {
      @Override
      public String getLabel() {
         return "ForUpdateClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForUpdateClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForUpdateClause(node);
      }
   },
   ONLY_DML_TABLE_EXPRESION_CLAUSE {
      @Override
      public String getLabel() {
         return "OnlyDmlTableExpresionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOnlyDmlTableExpresionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOnlyDmlTableExpresionClause(node);
      }
   },
   UPDATE_STATEMENT {
      @Override
      public String getLabel() {
         return "UpdateStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUpdateStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUpdateStatement(node);
      }
   },
   PARTITION_NAME {
      @Override
      public String getLabel() {
         return "PartitionName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPartitionName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPartitionName(node);
      }
   },
   PARTITION_KEY {
      @Override
      public String getLabel() {
         return "PartitionKey";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPartitionKey(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPartitionKey(node);
      }
   },
   TABLE_PARTITION_NAME {
      @Override
      public String getLabel() {
         return "TablePartitionName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTablePartitionName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTablePartitionName(node);
      }
   },
   TABLE_SUB_PARTITION_NAME {
      @Override
      public String getLabel() {
         return "TableSubPartitionName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTableSubPartitionName(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTableSubPartitionName(node);
      }
   },
   SUBQUERY_DML_EXPRESSION {
      @Override
      public String getLabel() {
         return "SubqueryDmlExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubqueryDmlExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubqueryDmlExpression(node);
      }
   },
   DML_TABLE_EXPRESSION_CLAUSE {
      @Override
      public String getLabel() {
         return "DmlTableExpressionClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDmlTableExpressionClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDmlTableExpressionClause(node);
      }
   },
   UPDATE_SET_CLAUSE {
      @Override
      public String getLabel() {
         return "UpdateSetClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUpdateSetClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUpdateSetClause(node);
      }
   },
   ALIAS {
      @Override
      public String getLabel() {
         return "Alias";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAlias(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAlias(node);
      }
   },
   OBJECT_SET_VALUE {
      @Override
      public String getLabel() {
         return "ObjectSetValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterObjectSetValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitObjectSetValue(node);
      }
   },
   COLUMNS_GROUP_SET_VALUE {
      @Override
      public String getLabel() {
         return "ColumnsGroupSetValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumnsGroupSetValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumnsGroupSetValue(node);
      }
   },
   SINGLE_COLUMN_SET_VALUE {
      @Override
      public String getLabel() {
         return "SingleColumnSetValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSingleColumnSetValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSingleColumnSetValue(node);
      }
   },
   COLUMN_SET_VALUE {
      @Override
      public String getLabel() {
         return "ColumnSetValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumnSetValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumnSetValue(node);
      }
   },
   COLUMN_SET_VALUE_LIST {
      @Override
      public String getLabel() {
         return "ColumnSetValueList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterColumnSetValueList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitColumnSetValueList(node);
      }
   },
   RETURNING_CLAUSE {
      @Override
      public String getLabel() {
         return "ReturningClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReturningClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReturningClause(node);
      }
   },
   BIND_VARIABLE {
      @Override
      public String getLabel() {
         return "BindVariable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBindVariable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBindVariable(node);
      }
   },
   RETURN_INTO_VARIABLE {
      @Override
      public String getLabel() {
         return "ReturnIntoVariable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReturnIntoVariable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReturnIntoVariable(node);
      }
   },
   RETURN_INTO_VARIABLES_LIST {
      @Override
      public String getLabel() {
         return "ReturnIntoVariablesList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReturnIntoVariablesList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReturnIntoVariablesList(node);
      }
   },
   INSERT_STATEMENT {
      @Override
      public String getLabel() {
         return "InsertStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInsertStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInsertStatement(node);
      }
   },
   VALUES {
      @Override
      public String getLabel() {
         return "Values";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterValues(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitValues(node);
      }
   },
   SINGLE_INSERT_SOURCE {
      @Override
      public String getLabel() {
         return "SingleInsertSource";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSingleInsertSource(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSingleInsertSource(node);
      }
   },
   SINGLE_TABLE_INSERT {
      @Override
      public String getLabel() {
         return "SingleTableInsert";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSingleTableInsert(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSingleTableInsert(node);
      }
   },
   INSERT_INTO {
      @Override
      public String getLabel() {
         return "InsertInto";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInsertInto(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInsertInto(node);
      }
   },
   MULTI_INTO_CLAUSE {
      @Override
      public String getLabel() {
         return "MultiIntoClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMultiIntoClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMultiIntoClause(node);
      }
   },
   MULTI_TABLE_INSERT {
      @Override
      public String getLabel() {
         return "MultiTableInsert";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMultiTableInsert(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMultiTableInsert(node);
      }
   },
   INSERT_INTO_VALUES_CLAUSE {
      @Override
      public String getLabel() {
         return "InsertIntoValuesClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInsertIntoValuesClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInsertIntoValuesClause(node);
      }
   },
   INSERT_INTO_VALUES_CLAUSE_LIST {
      @Override
      public String getLabel() {
         return "InsertIntoValuesClauseList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInsertIntoValuesClauseList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInsertIntoValuesClauseList(node);
      }
   },
   CONDITIONAL_INSERT_WHEN {
      @Override
      public String getLabel() {
         return "ConditionalInsertWhen";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionalInsertWhen(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionalInsertWhen(node);
      }
   },
   CONDITIONAL_INSERT_ELSE {
      @Override
      public String getLabel() {
         return "ConditionalInsertElse";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionalInsertElse(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionalInsertElse(node);
      }
   },
   CONDITIONAL_INSERT_WHEN_LIST {
      @Override
      public String getLabel() {
         return "ConditionalInsertWhenList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionalInsertWhenList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionalInsertWhenList(node);
      }
   },
   CONDITIONAL_INSERT_CLAUSE {
      @Override
      public String getLabel() {
         return "ConditionalInsertClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConditionalInsertClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConditionalInsertClause(node);
      }
   },
   INSERT_INTO_CLAUSE {
      @Override
      public String getLabel() {
         return "InsertIntoClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInsertIntoClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInsertIntoClause(node);
      }
   },
   VALUE_CLAUSE_DATA {
      @Override
      public String getLabel() {
         return "ValueClauseData";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterValueClauseData(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitValueClauseData(node);
      }
   },
   VALUES_CLAUSE_LIST {
      @Override
      public String getLabel() {
         return "ValuesClauseList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterValuesClauseList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitValuesClauseList(node);
      }
   },
   VALUES_CLAUSE {
      @Override
      public String getLabel() {
         return "ValuesClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterValuesClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitValuesClause(node);
      }
   },
   INTO_TABLE {
      @Override
      public String getLabel() {
         return "IntoTable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntoTable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntoTable(node);
      }
   },
   REJECT_LIMIT {
      @Override
      public String getLabel() {
         return "RejectLimit";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRejectLimit(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRejectLimit(node);
      }
   },
   ERROR_LOGING_CLAUSE {
      @Override
      public String getLabel() {
         return "ErrorLogingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterErrorLogingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitErrorLogingClause(node);
      }
   },
   DELETE_STATEMENT {
      @Override
      public String getLabel() {
         return "DeleteStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDeleteStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDeleteStatement(node);
      }
   },
   UNSIGNED_NUMBER {
      @Override
      public String getLabel() {
         return "UnsignedNumber";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUnsignedNumber(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUnsignedNumber(node);
      }
   },
   SIGN {
      @Override
      public String getLabel() {
         return "Sign";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSign(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSign(node);
      }
   },
   NUMBER_LITERAL {
      @Override
      public String getLabel() {
         return "NumberLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNumberLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNumberLiteral(node);
      }
   },
   EXPONENT {
      @Override
      public String getLabel() {
         return "Exponent";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExponent(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExponent(node);
      }
   },
   INTEGER_LITERAL {
      @Override
      public String getLabel() {
         return "IntegerLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntegerLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntegerLiteral(node);
      }
   },
   SIZE {
      @Override
      public String getLabel() {
         return "Size";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSize(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSize(node);
      }
   },
   CHAR_SET_DEFINITION {
      @Override
      public String getLabel() {
         return "CharSetDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCharSetDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCharSetDefinition(node);
      }
   },
   CHAR_SET_ATTR {
      @Override
      public String getLabel() {
         return "CharSetAttr";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCharSetAttr(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCharSetAttr(node);
      }
   },
   CHAR_SIZE {
      @Override
      public String getLabel() {
         return "CharSize";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCharSize(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCharSize(node);
      }
   },
   VAR_CHAR2_DATA_TYPE {
      @Override
      public String getLabel() {
         return "VarChar2DataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVarChar2DataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVarChar2DataType(node);
      }
   },
   VAR_CHAR_DATA_TYPE {
      @Override
      public String getLabel() {
         return "VarCharDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVarCharDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVarCharDataType(node);
      }
   },
   CHAR_DATA_TYPE {
      @Override
      public String getLabel() {
         return "CharDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCharDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCharDataType(node);
      }
   },
   PRECISION {
      @Override
      public String getLabel() {
         return "Precision";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPrecision(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPrecision(node);
      }
   },
   NUMBER_SIZE {
      @Override
      public String getLabel() {
         return "NumberSize";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNumberSize(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNumberSize(node);
      }
   },
   NUMBER_DATA_TYPE {
      @Override
      public String getLabel() {
         return "NumberDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNumberDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNumberDataType(node);
      }
   },
   FLOAT_DATA_TYPE {
      @Override
      public String getLabel() {
         return "FloatDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFloatDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFloatDataType(node);
      }
   },
   TIMESTAMP_DATA_TYPE {
      @Override
      public String getLabel() {
         return "TimestampDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTimestampDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTimestampDataType(node);
      }
   },
   INTERVAL_DAY_TO_SECOND_SPEC {
      @Override
      public String getLabel() {
         return "IntervalDayToSecondSpec";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalDayToSecondSpec(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalDayToSecondSpec(node);
      }
   },
   INTERVAL_DAY_TO_SECOND_LEADING_PRECISION {
      @Override
      public String getLabel() {
         return "IntervalDayToSecondLeadingPrecision";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalDayToSecondLeadingPrecision(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalDayToSecondLeadingPrecision(node);
      }
   },
   INTERVAL_DAY_TO_SECOND_LITERAL {
      @Override
      public String getLabel() {
         return "IntervalDayToSecondLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalDayToSecondLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalDayToSecondLiteral(node);
      }
   },
   INTERVAL_DAY_TO_SECOND_DATA_TYPE {
      @Override
      public String getLabel() {
         return "IntervalDayToSecondDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalDayToSecondDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalDayToSecondDataType(node);
      }
   },
   INTERVAL_YEAR_TO_MONTH_LEADING_TRAILING {
      @Override
      public String getLabel() {
         return "IntervalYearToMonthLeadingTrailing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalYearToMonthLeadingTrailing(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalYearToMonthLeadingTrailing(node);
      }
   },
   INTERVAL_YEAR_TO_MONTH_LITERAL {
      @Override
      public String getLabel() {
         return "IntervalYearToMonthLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalYearToMonthLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalYearToMonthLiteral(node);
      }
   },
   INTERVAL_YEAR_TO_MONTH_DATA_TYPE {
      @Override
      public String getLabel() {
         return "IntervalYearToMonthDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntervalYearToMonthDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntervalYearToMonthDataType(node);
      }
   },
   TIME_DATA_TYPE {
      @Override
      public String getLabel() {
         return "TimeDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTimeDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTimeDataType(node);
      }
   },
   REF_XML_DATA_TYPE {
      @Override
      public String getLabel() {
         return "RefXmlDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRefXmlDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRefXmlDataType(node);
      }
   },
   NCHAR_DATA_TYPE {
      @Override
      public String getLabel() {
         return "NCharDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNCharDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNCharDataType(node);
      }
   },
   NVAR_CHAR2_DATA_TYPE {
      @Override
      public String getLabel() {
         return "NVarChar2DataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNVarChar2DataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNVarChar2DataType(node);
      }
   },
   LONG_RAW_DATA_TYPE {
      @Override
      public String getLabel() {
         return "LongRawDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLongRawDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLongRawDataType(node);
      }
   },
   RAW_DATA_TYPE {
      @Override
      public String getLabel() {
         return "RawDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRawDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRawDataType(node);
      }
   },
   CLOB_DATA_TYPE {
      @Override
      public String getLabel() {
         return "CLobDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCLobDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCLobDataType(node);
      }
   },
   UROW_ID_DATA_TYPE {
      @Override
      public String getLabel() {
         return "URowIdDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterURowIdDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitURowIdDataType(node);
      }
   },
   SQL_DATA_TYPE {
      @Override
      public String getLabel() {
         return "SqlDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlDataType(node);
      }
   },
   SQL_PARAMETERS {
      @Override
      public String getLabel() {
         return "SqlParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlParameters(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlParameters(node);
      }
   },
   SQL_PARAMETERS_LIST {
      @Override
      public String getLabel() {
         return "SqlParametersList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlParametersList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlParametersList(node);
      }
   },
   SQL_QUALIFIED_IDENTIFIER_REMOTE {
      @Override
      public String getLabel() {
         return "SqlQualifiedIdentifierRemote";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlQualifiedIdentifierRemote(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlQualifiedIdentifierRemote(node);
      }
   },
   SQL_SIMPLE_IDENTIFIER_REMOTE {
      @Override
      public String getLabel() {
         return "SqlSimpleIdentifierRemote";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlSimpleIdentifierRemote(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlSimpleIdentifierRemote(node);
      }
   },
   SQL_ATTRIBUTES {
      @Override
      public String getLabel() {
         return "SqlAttributes";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlAttributes(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlAttributes(node);
      }
   },
   SQL_QUALIFIED_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlQualifiedIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlQualifiedIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlQualifiedIdentifier(node);
      }
   },
   SQL_ANY_SIMPLE_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlAnySimpleIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlAnySimpleIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlAnySimpleIdentifier(node);
      }
   },
   SQL_SIMPLE_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlSimpleIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlSimpleIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlSimpleIdentifier(node);
      }
   },
   SQL_OBJECT_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlObjectIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlObjectIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlObjectIdentifier(node);
      }
   },
   SQL_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlIdentifier(node);
      }
   },
   SQL_ANY_IDENTIFIER {
      @Override
      public String getLabel() {
         return "SqlAnyIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlAnyIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlAnyIdentifier(node);
      }
   },
   TEST_NO_ALPHA {
      @Override
      public String getLabel() {
         return "TestNoAlpha";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTestNoAlpha(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTestNoAlpha(node);
      }
   },
   OPTIONAL_SPACING {
      @Override
      public String getLabel() {
         return "OptionalSpacing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOptionalSpacing(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOptionalSpacing(node);
      }
   },
   SQL_OBJECT_IDENTIFIER_LIST {
      @Override
      public String getLabel() {
         return "SqlObjectIdentifierList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlObjectIdentifierList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlObjectIdentifierList(node);
      }
   },
   SQL_IDENTIFIER_LIST {
      @Override
      public String getLabel() {
         return "SqlIdentifierList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlIdentifierList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlIdentifierList(node);
      }
   },
   SPACE {
      @Override
      public String getLabel() {
         return "Space";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSpace(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSpace(node);
      }
   },
   SPACES {
      @Override
      public String getLabel() {
         return "Spaces";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSpaces(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSpaces(node);
      }
   },
   BLOCK_COMMENT {
      @Override
      public String getLabel() {
         return "BlockComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBlockComment(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBlockComment(node);
      }
   },
   NEW_LINE {
      @Override
      public String getLabel() {
         return "NewLine";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNewLine(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNewLine(node);
      }
   },
   LINE_COMMENT {
      @Override
      public String getLabel() {
         return "LineComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLineComment(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLineComment(node);
      }
   },
   SPACING {
      @Override
      public String getLabel() {
         return "Spacing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSpacing(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSpacing(node);
      }
   },
   PL_SQL_PROGRAM {
      @Override
      public String getLabel() {
         return "PlSqlProgram";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlProgram(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlProgram(node);
      }
   },
   PL_SQL_SOURCE {
      @Override
      public String getLabel() {
         return "PlSqlSource";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlSource(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlSource(node);
      }
   },
   PL_SQL_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlSqlExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlExpression(node);
      }
   },
   OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "OrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrExpression(node);
      }
   },
   OPTIONAL_AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalAndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOptionalAndExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOptionalAndExpression(node);
      }
   },
   AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "AndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAndExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAndExpression(node);
      }
   },
   LOGICAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "LogicalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLogicalExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLogicalExpression(node);
      }
   },
   NOT_EXPRESSION {
      @Override
      public String getLabel() {
         return "NotExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNotExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNotExpression(node);
      }
   },
   RELATIONAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "RelationalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRelationalExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRelationalExpression(node);
      }
   },
   COMPARISON_EXPRESSION {
      @Override
      public String getLabel() {
         return "ComparisonExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterComparisonExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitComparisonExpression(node);
      }
   },
   IN_EXPRESSION {
      @Override
      public String getLabel() {
         return "InExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInExpression(node);
      }
   },
   BETWEEN_EXPRESSION {
      @Override
      public String getLabel() {
         return "BetweenExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBetweenExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBetweenExpression(node);
      }
   },
   LIKE_EXPRESSION {
      @Override
      public String getLabel() {
         return "LikeExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLikeExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLikeExpression(node);
      }
   },
   IS_NULL_EXPRESSION {
      @Override
      public String getLabel() {
         return "IsNullExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsNullExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsNullExpression(node);
      }
   },
   NUMERIC_EXPRESSION {
      @Override
      public String getLabel() {
         return "NumericExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNumericExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNumericExpression(node);
      }
   },
   PL_SQL_MATH_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlSqlMathExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlMathExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlMathExpression(node);
      }
   },
   PL_SQL_UNARY_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlSqlUnaryExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlUnaryExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlUnaryExpression(node);
      }
   },
   PL_SQL_PARENTHESES_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlSqlParenthesesExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlParenthesesExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlParenthesesExpression(node);
      }
   },
   SQL_CURSOR_ATTRIBUTE {
      @Override
      public String getLabel() {
         return "SqlCursorAttribute";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlCursorAttribute(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlCursorAttribute(node);
      }
   },
   PL_SQL_OBJECT_CURSOR {
      @Override
      public String getLabel() {
         return "PlSqlObjectCursor";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlObjectCursor(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlObjectCursor(node);
      }
   },
   PL_SQL_OBJECT_COLLECTION {
      @Override
      public String getLabel() {
         return "PlSqlObjectCollection";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlObjectCollection(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlObjectCollection(node);
      }
   },
   HOST_VARIABLE_CURSOR {
      @Override
      public String getLabel() {
         return "HostVariableCursor";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHostVariableCursor(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHostVariableCursor(node);
      }
   },
   PL_SQL_ATOMIC_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlSqlAtomicExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlAtomicExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlAtomicExpression(node);
      }
   },
   CASE_EXPRESSION_ELSE {
      @Override
      public String getLabel() {
         return "CaseExpressionElse";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseExpressionElse(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseExpressionElse(node);
      }
   },
   CASE_EXPRESSION_WHEN {
      @Override
      public String getLabel() {
         return "CaseExpressionWhen";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseExpressionWhen(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseExpressionWhen(node);
      }
   },
   CASE_EXPRESSION_WHEN_LIST {
      @Override
      public String getLabel() {
         return "CaseExpressionWhenList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseExpressionWhenList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseExpressionWhenList(node);
      }
   },
   PL_SQL_CASE_EXPRESSION {
      @Override
      public String getLabel() {
         return "PlSqlCaseExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlCaseExpression(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlCaseExpression(node);
      }
   },
   COLLECTION_ATTRIBUTE {
      @Override
      public String getLabel() {
         return "CollectionAttribute";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCollectionAttribute(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCollectionAttribute(node);
      }
   },
   CURSOR_ATTRIBUTE {
      @Override
      public String getLabel() {
         return "CursorAttribute";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorAttribute(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorAttribute(node);
      }
   },
   IS_AS_KEYWORD {
      @Override
      public String getLabel() {
         return "IsAsKeyword";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIsAsKeyword(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIsAsKeyword(node);
      }
   },
   DECLARATION_SECTION {
      @Override
      public String getLabel() {
         return "DeclarationSection";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDeclarationSection(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDeclarationSection(node);
      }
   },
   END_BLOCK {
      @Override
      public String getLabel() {
         return "EndBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterEndBlock(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitEndBlock(node);
      }
   },
   PACKAGE_BODY {
      @Override
      public String getLabel() {
         return "PackageBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPackageBody(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPackageBody(node);
      }
   },
   CREATE_PACKAGE_BODY {
      @Override
      public String getLabel() {
         return "CreatePackageBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCreatePackageBody(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCreatePackageBody(node);
      }
   },
   AUTH_ID_CURRENT_USER {
      @Override
      public String getLabel() {
         return "AuthIdCurrentUser";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAuthIdCurrentUser(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAuthIdCurrentUser(node);
      }
   },
   AUTH_ID_DEFINER {
      @Override
      public String getLabel() {
         return "AuthIdDefiner";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAuthIdDefiner(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAuthIdDefiner(node);
      }
   },
   INVOKER_RIGHTS {
      @Override
      public String getLabel() {
         return "InvokerRights";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterInvokerRights(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitInvokerRights(node);
      }
   },
   CREATE_PACKAGE {
      @Override
      public String getLabel() {
         return "CreatePackage";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCreatePackage(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCreatePackage(node);
      }
   },
   EXTERNAL_CPARAMETER {
      @Override
      public String getLabel() {
         return "ExternalCParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExternalCParameter(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExternalCParameter(node);
      }
   },
   EXTERNAL_CPARAMETERS_DECLARATION {
      @Override
      public String getLabel() {
         return "ExternalCParametersDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExternalCParametersDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExternalCParametersDeclaration(node);
      }
   },
   CALL_JAVA_SPEC {
      @Override
      public String getLabel() {
         return "CallJavaSpec";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCallJavaSpec(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCallJavaSpec(node);
      }
   },
   CALL_CSPEC {
      @Override
      public String getLabel() {
         return "CallCSpec";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCallCSpec(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCallCSpec(node);
      }
   },
   CALL_SPEC {
      @Override
      public String getLabel() {
         return "CallSpec";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCallSpec(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCallSpec(node);
      }
   },
   PRAGMA_OR_STATEMENT {
      @Override
      public String getLabel() {
         return "PragmaOrStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPragmaOrStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPragmaOrStatement(node);
      }
   },
   PL_SQL_BODY_STATEMENTS {
      @Override
      public String getLabel() {
         return "PlSqlBodyStatements";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlBodyStatements(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlBodyStatements(node);
      }
   },
   PL_SQL_BODY {
      @Override
      public String getLabel() {
         return "PlSqlBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlBody(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlBody(node);
      }
   },
   FUNCTION_BODY {
      @Override
      public String getLabel() {
         return "FunctionBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFunctionBody(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFunctionBody(node);
      }
   },
   CALL_SPEC_OR_FUNCTION_BODY {
      @Override
      public String getLabel() {
         return "CallSpecOrFunctionBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCallSpecOrFunctionBody(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCallSpecOrFunctionBody(node);
      }
   },
   CREATE_FUNCTION {
      @Override
      public String getLabel() {
         return "CreateFunction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCreateFunction(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCreateFunction(node);
      }
   },
   FUNCTION_DEFINITION {
      @Override
      public String getLabel() {
         return "FunctionDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFunctionDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFunctionDefinition(node);
      }
   },
   CREATE_PROCEDURE {
      @Override
      public String getLabel() {
         return "CreateProcedure";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCreateProcedure(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCreateProcedure(node);
      }
   },
   PROCEDURE_DEFINITION {
      @Override
      public String getLabel() {
         return "ProcedureDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterProcedureDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitProcedureDefinition(node);
      }
   },
   CREATE_OR_REPLACE {
      @Override
      public String getLabel() {
         return "CreateOrReplace";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCreateOrReplace(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCreateOrReplace(node);
      }
   },
   ITEM_LIST1_FIRST {
      @Override
      public String getLabel() {
         return "ItemList1First";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemList1First(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemList1First(node);
      }
   },
   ITEM_LIST1_SECOND {
      @Override
      public String getLabel() {
         return "ItemList1Second";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemList1Second(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemList1Second(node);
      }
   },
   ITEM_LIST1 {
      @Override
      public String getLabel() {
         return "ItemList1";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemList1(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemList1(node);
      }
   },
   ITEM_LIST2_FIRST {
      @Override
      public String getLabel() {
         return "ItemList2First";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemList2First(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemList2First(node);
      }
   },
   ITEM_LIST2_SECOND {
      @Override
      public String getLabel() {
         return "ItemList2Second";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemList2Second(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemList2Second(node);
      }
   },
   ITEM_LIST2 {
      @Override
      public String getLabel() {
         return "ItemList2";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemList2(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemList2(node);
      }
   },
   DECLARE_SECTION {
      @Override
      public String getLabel() {
         return "DeclareSection";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDeclareSection(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDeclareSection(node);
      }
   },
   TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "TypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTypeDefinition(node);
      }
   },
   NULL {
      @Override
      public String getLabel() {
         return "Null";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNull(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNull(node);
      }
   },
   NOT_NULL {
      @Override
      public String getLabel() {
         return "NotNull";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNotNull(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNotNull(node);
      }
   },
   NULLABLE {
      @Override
      public String getLabel() {
         return "Nullable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNullable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNullable(node);
      }
   },
   SUBTYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "SubtypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSubtypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSubtypeDefinition(node);
      }
   },
   RECORD_TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "RecordTypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRecordTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRecordTypeDefinition(node);
      }
   },
   DEFAULT_OPERATOR {
      @Override
      public String getLabel() {
         return "DefaultOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDefaultOperator(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDefaultOperator(node);
      }
   },
   DEFAULT_VALUE {
      @Override
      public String getLabel() {
         return "DefaultValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDefaultValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDefaultValue(node);
      }
   },
   RECORD_FIELD_DECLARATION {
      @Override
      public String getLabel() {
         return "RecordFieldDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRecordFieldDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRecordFieldDeclaration(node);
      }
   },
   COLLECTION_TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "CollectionTypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCollectionTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCollectionTypeDefinition(node);
      }
   },
   INDEX_BY {
      @Override
      public String getLabel() {
         return "IndexBy";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIndexBy(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIndexBy(node);
      }
   },
   OPTIONAL_INDEX_BY {
      @Override
      public String getLabel() {
         return "OptionalIndexBy";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOptionalIndexBy(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOptionalIndexBy(node);
      }
   },
   ASSOCIATIVE_ARRAY_TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "AssociativeArrayTypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAssociativeArrayTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAssociativeArrayTypeDefinition(node);
      }
   },
   VARRAY_TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "VarrayTypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVarrayTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVarrayTypeDefinition(node);
      }
   },
   NESTED_TABLE_TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "NestedTableTypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNestedTableTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNestedTableTypeDefinition(node);
      }
   },
   REF_CURSOR_TYPE_DEFINITION {
      @Override
      public String getLabel() {
         return "RefCursorTypeDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRefCursorTypeDefinition(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRefCursorTypeDefinition(node);
      }
   },
   NUMERIC_DATA_TYPE {
      @Override
      public String getLabel() {
         return "NumericDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNumericDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNumericDataType(node);
      }
   },
   SMALL_INT_PRECISION_DATA_TYPE {
      @Override
      public String getLabel() {
         return "SmallIntPrecisionDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSmallIntPrecisionDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSmallIntPrecisionDataType(node);
      }
   },
   CHARACTER_DATA_TYPE {
      @Override
      public String getLabel() {
         return "CharacterDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCharacterDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCharacterDataType(node);
      }
   },
   NVAR_CHAR_DATA_TYPE {
      @Override
      public String getLabel() {
         return "NVarCharDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNVarCharDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNVarCharDataType(node);
      }
   },
   NATIONAL_CHARACTER_DATA_TYPE {
      @Override
      public String getLabel() {
         return "NationalCharacterDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNationalCharacterDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNationalCharacterDataType(node);
      }
   },
   INTEGER_DATA_TYPE {
      @Override
      public String getLabel() {
         return "IntegerDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntegerDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntegerDataType(node);
      }
   },
   INT_DATA_TYPE {
      @Override
      public String getLabel() {
         return "IntDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntDataType(node);
      }
   },
   SMALL_INT_DATA_TYPE {
      @Override
      public String getLabel() {
         return "SmallIntDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSmallIntDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSmallIntDataType(node);
      }
   },
   REAL_DATA_TYPE {
      @Override
      public String getLabel() {
         return "RealDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRealDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRealDataType(node);
      }
   },
   PL_SQL_DATA_TYPE {
      @Override
      public String getLabel() {
         return "PlSqlDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlDataType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlDataType(node);
      }
   },
   ROW_TYPE {
      @Override
      public String getLabel() {
         return "RowType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRowType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRowType(node);
      }
   },
   TYPE {
      @Override
      public String getLabel() {
         return "Type";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitType(node);
      }
   },
   CURSOR_RETURN_TYPE {
      @Override
      public String getLabel() {
         return "CursorReturnType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorReturnType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorReturnType(node);
      }
   },
   CURSOR_REF {
      @Override
      public String getLabel() {
         return "CursorRef";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorRef(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorRef(node);
      }
   },
   USER_TYPE_ATTRIBUTE {
      @Override
      public String getLabel() {
         return "UserTypeAttribute";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUserTypeAttribute(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUserTypeAttribute(node);
      }
   },
   USER_TYPE {
      @Override
      public String getLabel() {
         return "UserType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUserType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUserType(node);
      }
   },
   TYPE_SPEC {
      @Override
      public String getLabel() {
         return "TypeSpec";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterTypeSpec(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitTypeSpec(node);
      }
   },
   PARENTHESES_PARAMETERS_DECLARATION {
      @Override
      public String getLabel() {
         return "ParenthesesParametersDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParenthesesParametersDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParenthesesParametersDeclaration(node);
      }
   },
   OUT {
      @Override
      public String getLabel() {
         return "Out";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOut(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOut(node);
      }
   },
   PARAMETER_DECLARATION {
      @Override
      public String getLabel() {
         return "ParameterDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParameterDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParameterDeclaration(node);
      }
   },
   CURSOR_DECLARATION {
      @Override
      public String getLabel() {
         return "CursorDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorDeclaration(node);
      }
   },
   ITEM_DECLARATION {
      @Override
      public String getLabel() {
         return "ItemDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterItemDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitItemDeclaration(node);
      }
   },
   EXCEPTION_DECLARATION {
      @Override
      public String getLabel() {
         return "ExceptionDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExceptionDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExceptionDeclaration(node);
      }
   },
   CONSTANT_DECLARATION {
      @Override
      public String getLabel() {
         return "ConstantDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterConstantDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitConstantDeclaration(node);
      }
   },
   VARIABLE_DECLARATION {
      @Override
      public String getLabel() {
         return "VariableDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterVariableDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitVariableDeclaration(node);
      }
   },
   RESULT_CACHE {
      @Override
      public String getLabel() {
         return "ResultCache";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterResultCache(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitResultCache(node);
      }
   },
   FUNCTION_DECLARATION {
      @Override
      public String getLabel() {
         return "FunctionDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFunctionDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFunctionDeclaration(node);
      }
   },
   FUNCTION_MODIFIER {
      @Override
      public String getLabel() {
         return "FunctionModifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFunctionModifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFunctionModifier(node);
      }
   },
   PROCEDURE_DECLARATION {
      @Override
      public String getLabel() {
         return "ProcedureDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterProcedureDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitProcedureDeclaration(node);
      }
   },
   PRAGMA {
      @Override
      public String getLabel() {
         return "Pragma";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPragma(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPragma(node);
      }
   },
   PRAGMA_PARAMS {
      @Override
      public String getLabel() {
         return "PragmaParams";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPragmaParams(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPragmaParams(node);
      }
   },
   PRAGMA_PARAM {
      @Override
      public String getLabel() {
         return "PragmaParam";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPragmaParam(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPragmaParam(node);
      }
   },
   LABEL {
      @Override
      public String getLabel() {
         return "Label";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLabel(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLabel(node);
      }
   },
   LABELS {
      @Override
      public String getLabel() {
         return "Labels";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLabels(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLabels(node);
      }
   },
   PL_SQL_STATEMENT {
      @Override
      public String getLabel() {
         return "PlSqlStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlStatement(node);
      }
   },
   HOST_VARIABLE {
      @Override
      public String getLabel() {
         return "HostVariable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHostVariable(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHostVariable(node);
      }
   },
   LEFT_VALUE {
      @Override
      public String getLabel() {
         return "LeftValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLeftValue(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLeftValue(node);
      }
   },
   ASSIGN_STATEMENT {
      @Override
      public String getLabel() {
         return "AssignStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAssignStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAssignStatement(node);
      }
   },
   NAMED_PARAMETER {
      @Override
      public String getLabel() {
         return "NamedParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNamedParameter(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNamedParameter(node);
      }
   },
   PL_SQL_FUNCTION_PARAMETER {
      @Override
      public String getLabel() {
         return "PlSqlFunctionParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlFunctionParameter(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlFunctionParameter(node);
      }
   },
   PL_SQL_PARAMETERS {
      @Override
      public String getLabel() {
         return "PlSqlParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlParameters(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlParameters(node);
      }
   },
   CASE_STATEMENT_WHEN {
      @Override
      public String getLabel() {
         return "CaseStatementWhen";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseStatementWhen(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseStatementWhen(node);
      }
   },
   CASE_STATEMENT_WHEN_LIST {
      @Override
      public String getLabel() {
         return "CaseStatementWhenList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseStatementWhenList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseStatementWhenList(node);
      }
   },
   CASE_STATEMENT_ELSE {
      @Override
      public String getLabel() {
         return "CaseStatementElse";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseStatementElse(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseStatementElse(node);
      }
   },
   CASE_STATEMENT {
      @Override
      public String getLabel() {
         return "CaseStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCaseStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCaseStatement(node);
      }
   },
   CONTINUE_STATEMENT {
      @Override
      public String getLabel() {
         return "ContinueStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterContinueStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitContinueStatement(node);
      }
   },
   CLOSE_STATEMENT {
      @Override
      public String getLabel() {
         return "CloseStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCloseStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCloseStatement(node);
      }
   },
   BASIC_LOOP_STATEMENT {
      @Override
      public String getLabel() {
         return "BasicLoopStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBasicLoopStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBasicLoopStatement(node);
      }
   },
   EXECUTE_IMEDIATE_OPTIONS {
      @Override
      public String getLabel() {
         return "ExecuteImediateOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExecuteImediateOptions(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExecuteImediateOptions(node);
      }
   },
   EXECUTE_IMMEDIATE_STATEMENT {
      @Override
      public String getLabel() {
         return "ExecuteImmediateStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExecuteImmediateStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExecuteImmediateStatement(node);
      }
   },
   INTO_CLAUSE {
      @Override
      public String getLabel() {
         return "IntoClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIntoClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIntoClause(node);
      }
   },
   BULK_COLLECT_INTO_CLAUSE {
      @Override
      public String getLabel() {
         return "BulkCollectIntoClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBulkCollectIntoClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBulkCollectIntoClause(node);
      }
   },
   USING_PARAMETER {
      @Override
      public String getLabel() {
         return "UsingParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUsingParameter(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUsingParameter(node);
      }
   },
   USING_CLAUSE {
      @Override
      public String getLabel() {
         return "UsingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterUsingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitUsingClause(node);
      }
   },
   DYNAMIC_RETURNING_CLAUSE {
      @Override
      public String getLabel() {
         return "DynamicReturningClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterDynamicReturningClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitDynamicReturningClause(node);
      }
   },
   EXIT_STATEMENT {
      @Override
      public String getLabel() {
         return "ExitStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExitStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExitStatement(node);
      }
   },
   LIMIT {
      @Override
      public String getLabel() {
         return "Limit";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterLimit(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitLimit(node);
      }
   },
   FETCH_STATEMENT {
      @Override
      public String getLabel() {
         return "FetchStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFetchStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFetchStatement(node);
      }
   },
   FOR_LOOP_STATEMENT {
      @Override
      public String getLabel() {
         return "ForLoopStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForLoopStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForLoopStatement(node);
      }
   },
   RANGE_BOUNDS {
      @Override
      public String getLabel() {
         return "RangeBounds";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRangeBounds(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRangeBounds(node);
      }
   },
   CURSOR_BOUNDS {
      @Override
      public String getLabel() {
         return "CursorBounds";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorBounds(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorBounds(node);
      }
   },
   SELECT_BOUNDS {
      @Override
      public String getLabel() {
         return "SelectBounds";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSelectBounds(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSelectBounds(node);
      }
   },
   FOR_BOUNDS_CLAUSE {
      @Override
      public String getLabel() {
         return "ForBoundsClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForBoundsClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForBoundsClause(node);
      }
   },
   FOR_ALL_STATEMENT {
      @Override
      public String getLabel() {
         return "ForAllStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForAllStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForAllStatement(node);
      }
   },
   RANGE {
      @Override
      public String getLabel() {
         return "Range";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRange(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRange(node);
      }
   },
   BETWEEN_BOUNDS {
      @Override
      public String getLabel() {
         return "BetweenBounds";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBetweenBounds(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBetweenBounds(node);
      }
   },
   INDICES_OF_COLLECTION {
      @Override
      public String getLabel() {
         return "IndicesOfCollection";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIndicesOfCollection(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIndicesOfCollection(node);
      }
   },
   VALUES_OF_INDEX_COLLECTION {
      @Override
      public String getLabel() {
         return "ValuesOfIndexCollection";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterValuesOfIndexCollection(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitValuesOfIndexCollection(node);
      }
   },
   FOR_ALL_BOUNDS_CLAUSE {
      @Override
      public String getLabel() {
         return "ForAllBoundsClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForAllBoundsClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForAllBoundsClause(node);
      }
   },
   GOTO_STATEMENT {
      @Override
      public String getLabel() {
         return "GotoStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterGotoStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitGotoStatement(node);
      }
   },
   PL_SQL_STATEMENTS {
      @Override
      public String getLabel() {
         return "PlSqlStatements";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlStatements(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlStatements(node);
      }
   },
   ELS_IF {
      @Override
      public String getLabel() {
         return "ElsIf";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterElsIf(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitElsIf(node);
      }
   },
   ELS_IF_LIST {
      @Override
      public String getLabel() {
         return "ElsIfList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterElsIfList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitElsIfList(node);
      }
   },
   ELSE_BODY {
      @Override
      public String getLabel() {
         return "ElseBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterElseBody(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitElseBody(node);
      }
   },
   ELSE {
      @Override
      public String getLabel() {
         return "Else";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterElse(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitElse(node);
      }
   },
   IF_STATEMENT {
      @Override
      public String getLabel() {
         return "IfStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterIfStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitIfStatement(node);
      }
   },
   NULL_STATEMENT {
      @Override
      public String getLabel() {
         return "NullStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterNullStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitNullStatement(node);
      }
   },
   CURSOR_SOURCE {
      @Override
      public String getLabel() {
         return "CursorSource";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorSource(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorSource(node);
      }
   },
   CURSOR_USING_CLAUSE {
      @Override
      public String getLabel() {
         return "CursorUsingClause";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterCursorUsingClause(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitCursorUsingClause(node);
      }
   },
   FOR_CURSOR_SOURCE {
      @Override
      public String getLabel() {
         return "ForCursorSource";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForCursorSource(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForCursorSource(node);
      }
   },
   FOR_CURSOR {
      @Override
      public String getLabel() {
         return "ForCursor";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterForCursor(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitForCursor(node);
      }
   },
   OPEN_STATEMENT {
      @Override
      public String getLabel() {
         return "OpenStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOpenStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOpenStatement(node);
      }
   },
   ANONYMOUS_PL_SQL_BLOCK {
      @Override
      public String getLabel() {
         return "AnonymousPlSqlBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterAnonymousPlSqlBlock(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitAnonymousPlSqlBlock(node);
      }
   },
   PL_SQL_BLOCK {
      @Override
      public String getLabel() {
         return "PlSqlBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlBlock(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlBlock(node);
      }
   },
   RAISE_STATEMENT {
      @Override
      public String getLabel() {
         return "RaiseStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterRaiseStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitRaiseStatement(node);
      }
   },
   RETURN_STATEMENT {
      @Override
      public String getLabel() {
         return "ReturnStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReturnStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReturnStatement(node);
      }
   },
   WHILE_LOOP_STATEMENT {
      @Override
      public String getLabel() {
         return "WhileLoopStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterWhileLoopStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitWhileLoopStatement(node);
      }
   },
   PIPE_ROW_STATEMENT {
      @Override
      public String getLabel() {
         return "PipeRowStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPipeRowStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPipeRowStatement(node);
      }
   },
   SQL_STATEMENT {
      @Override
      public String getLabel() {
         return "SqlStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterSqlStatement(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitSqlStatement(node);
      }
   },
   PL_SQL_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "PlSqlExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlExpressionList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlExpressionList(node);
      }
   },
   OR_HANDLER_IDENTIFIER {
      @Override
      public String getLabel() {
         return "OrHandlerIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterOrHandlerIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitOrHandlerIdentifier(node);
      }
   },
   MULTIPLE_HANDLER_IDENTIFIER {
      @Override
      public String getLabel() {
         return "MultipleHandlerIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterMultipleHandlerIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitMultipleHandlerIdentifier(node);
      }
   },
   HANDLER_IDENTIFIERS {
      @Override
      public String getLabel() {
         return "HandlerIdentifiers";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterHandlerIdentifiers(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitHandlerIdentifiers(node);
      }
   },
   EXCEPTION_HANDLER {
      @Override
      public String getLabel() {
         return "ExceptionHandler";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExceptionHandler(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExceptionHandler(node);
      }
   },
   EXCEPTION_BLOCK {
      @Override
      public String getLabel() {
         return "ExceptionBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterExceptionBlock(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitExceptionBlock(node);
      }
   },
   PARAMETERS_DECLARATION {
      @Override
      public String getLabel() {
         return "ParametersDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterParametersDeclaration(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitParametersDeclaration(node);
      }
   },
   RETURN_TYPE {
      @Override
      public String getLabel() {
         return "ReturnType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterReturnType(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitReturnType(node);
      }
   },
   FUNCTION_HEADING {
      @Override
      public String getLabel() {
         return "FunctionHeading";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterFunctionHeading(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitFunctionHeading(node);
      }
   },
   PROCEDURE_HEADING {
      @Override
      public String getLabel() {
         return "ProcedureHeading";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterProcedureHeading(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitProcedureHeading(node);
      }
   },
   BOOLEAN_LITERAL {
      @Override
      public String getLabel() {
         return "BooleanLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterBooleanLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitBooleanLiteral(node);
      }
   },
   PL_SQL_LITERAL {
      @Override
      public String getLabel() {
         return "PlSqlLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlLiteral(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlLiteral(node);
      }
   },
   PL_SQL_PARAMETERS_LIST {
      @Override
      public String getLabel() {
         return "PlSqlParametersList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlParametersList(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlParametersList(node);
      }
   },
   PL_SQL_QUALIFIED_IDENTIFIER_REMOTE {
      @Override
      public String getLabel() {
         return "PlSqlQualifiedIdentifierRemote";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlQualifiedIdentifierRemote(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlQualifiedIdentifierRemote(node);
      }
   },
   PL_SQL_SIMPLE_IDENTIFIER_REMOTE {
      @Override
      public String getLabel() {
         return "PlSqlSimpleIdentifierRemote";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlSimpleIdentifierRemote(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlSimpleIdentifierRemote(node);
      }
   },
   PL_SQL_ATTRIBUTES {
      @Override
      public String getLabel() {
         return "PlSqlAttributes";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlAttributes(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlAttributes(node);
      }
   },
   PL_SQL_QUALIFIED_IDENTIFIER {
      @Override
      public String getLabel() {
         return "PlSqlQualifiedIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlQualifiedIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlQualifiedIdentifier(node);
      }
   },
   PL_SQL_ANY_SIMPLE_IDENTIFIER {
      @Override
      public String getLabel() {
         return "PlSqlAnySimpleIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlAnySimpleIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlAnySimpleIdentifier(node);
      }
   },
   PL_SQL_SIMPLE_IDENTIFIER {
      @Override
      public String getLabel() {
         return "PlSqlSimpleIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlSimpleIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlSimpleIdentifier(node);
      }
   },
   PL_SQL_OBJECT_IDENTIFIER {
      @Override
      public String getLabel() {
         return "PlSqlObjectIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlObjectIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlObjectIdentifier(node);
      }
   },
   PL_SQL_IDENTIFIER {
      @Override
      public String getLabel() {
         return "PlSqlIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlIdentifier(node);
      }
   },
   PL_SQL_ANY_IDENTIFIER {
      @Override
      public String getLabel() {
         return "PlSqlAnyIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.enterPlSqlAnyIdentifier(node);
      }

      @Override
      public void exitRule(OraclePlSqlVisitor visitor, Node node) {
         visitor.exitPlSqlAnyIdentifier(node);
      }
   };

   @Override
   public int getValue() {
      return ordinal();
   }
}
