/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.parser.Rule;

public enum HarbourUnprocessedRuleType implements Rule<HarbourUnprocessedVisitor> {
   HARBOUR_PROGRAM {
      @Override
      public String getLabel() {
         return "HarbourProgram";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterHarbourProgram(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitHarbourProgram(node);
      }
   },
   STATEMENTS {
      @Override
      public String getLabel() {
         return "Statements";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStatements(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStatements(node);
      }
   },
   STATEMENT {
      @Override
      public String getLabel() {
         return "Statement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStatement(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStatement(node);
      }
   },
   UNKNOWN_COMMAND {
      @Override
      public String getLabel() {
         return "UnknownCommand";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUnknownCommand(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUnknownCommand(node);
      }
   },
   LOCAL_VARIABLES_DECLARATION {
      @Override
      public String getLabel() {
         return "LocalVariablesDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLocalVariablesDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLocalVariablesDeclaration(node);
      }
   },
   FUNCTION_DECLARATION {
      @Override
      public String getLabel() {
         return "FunctionDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFunctionDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFunctionDeclaration(node);
      }
   },
   PROCEDURE_DECLARATION {
      @Override
      public String getLabel() {
         return "ProcedureDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterProcedureDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitProcedureDeclaration(node);
      }
   },
   METHOD_DEFINITION {
      @Override
      public String getLabel() {
         return "MethodDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMethodDefinition(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMethodDefinition(node);
      }
   },
   CLASS_OWNER {
      @Override
      public String getLabel() {
         return "ClassOwner";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClassOwner(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClassOwner(node);
      }
   },
   CREATE_CLASS {
      @Override
      public String getLabel() {
         return "CreateClass";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCreateClass(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCreateClass(node);
      }
   },
   END_CLASS {
      @Override
      public String getLabel() {
         return "EndClass";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEndClass(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEndClass(node);
      }
   },
   CLASS_BODY_STMT {
      @Override
      public String getLabel() {
         return "ClassBodyStmt";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClassBodyStmt(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClassBodyStmt(node);
      }
   },
   SECTION_SCOPE {
      @Override
      public String getLabel() {
         return "SectionScope";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSectionScope(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSectionScope(node);
      }
   },
   MEMBER_SCOPE {
      @Override
      public String getLabel() {
         return "MemberScope";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMemberScope(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMemberScope(node);
      }
   },
   MEMBER_SCOPES {
      @Override
      public String getLabel() {
         return "MemberScopes";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMemberScopes(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMemberScopes(node);
      }
   },
   METHOD_MEMBER {
      @Override
      public String getLabel() {
         return "MethodMember";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMethodMember(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMethodMember(node);
      }
   },
   FIELD_MEMBER {
      @Override
      public String getLabel() {
         return "FieldMember";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFieldMember(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFieldMember(node);
      }
   },
   IN_LINE_EXPRESSION {
      @Override
      public String getLabel() {
         return "InLineExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterInLineExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitInLineExpression(node);
      }
   },
   INIT_FIELD_MEMBER {
      @Override
      public String getLabel() {
         return "InitFieldMember";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterInitFieldMember(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitInitFieldMember(node);
      }
   },
   IS_IN_OBJECT {
      @Override
      public String getLabel() {
         return "IsInObject";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIsInObject(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIsInObject(node);
      }
   },
   VARIABLE {
      @Override
      public String getLabel() {
         return "Variable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterVariable(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitVariable(node);
      }
   },
   STATIC_VARIABLES_DECLARATION {
      @Override
      public String getLabel() {
         return "StaticVariablesDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStaticVariablesDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStaticVariablesDeclaration(node);
      }
   },
   FIELDS_DECLARATION {
      @Override
      public String getLabel() {
         return "FieldsDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFieldsDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFieldsDeclaration(node);
      }
   },
   CLASS_DECLARATION {
      @Override
      public String getLabel() {
         return "ClassDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClassDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClassDeclaration(node);
      }
   },
   OLD_STYLE_PARAMETERS_DECLARATION {
      @Override
      public String getLabel() {
         return "OldStyleParametersDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOldStyleParametersDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOldStyleParametersDeclaration(node);
      }
   },
   DECLARE_STATEMENT {
      @Override
      public String getLabel() {
         return "DeclareStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDeclareStatement(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDeclareStatement(node);
      }
   },
   EXIT_STMT {
      @Override
      public String getLabel() {
         return "ExitStmt";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterExitStmt(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitExitStmt(node);
      }
   },
   LOOP_STMT {
      @Override
      public String getLabel() {
         return "LoopStmt";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLoopStmt(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLoopStmt(node);
      }
   },
   DIRECTIVE {
      @Override
      public String getLabel() {
         return "Directive";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDirective(node);
      }
   },
   LINE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "LineDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLineDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLineDirective(node);
      }
   },
   INCLUDE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IncludeDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIncludeDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIncludeDirective(node);
      }
   },
   DEFINE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "DefineDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDefineDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDefineDirective(node);
      }
   },
   TRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "TranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterTranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitTranslateDirective(node);
      }
   },
   XTRANSLATE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "XTranslateDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterXTranslateDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitXTranslateDirective(node);
      }
   },
   XCOMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "XCommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterXCommandDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitXCommandDirective(node);
      }
   },
   COMMAND_DIRECTIVE {
      @Override
      public String getLabel() {
         return "CommandDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommandDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommandDirective(node);
      }
   },
   IF_DEF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IfDefDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIfDefDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIfDefDirective(node);
      }
   },
   IF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IfDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIfDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIfDirective(node);
      }
   },
   IF_NDEF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "IfNDefDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIfNDefDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIfNDefDirective(node);
      }
   },
   ELSE_DIRECTIVE {
      @Override
      public String getLabel() {
         return "ElseDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterElseDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitElseDirective(node);
      }
   },
   END_IF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "EndIfDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEndIfDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEndIfDirective(node);
      }
   },
   PRAGMA_DIRECTIVE {
      @Override
      public String getLabel() {
         return "PragmaDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPragmaDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPragmaDirective(node);
      }
   },
   UNDEF_DIRECTIVE {
      @Override
      public String getLabel() {
         return "UndefDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUndefDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUndefDirective(node);
      }
   },
   STDOUT_DIRECTIVE {
      @Override
      public String getLabel() {
         return "StdoutDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStdoutDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStdoutDirective(node);
      }
   },
   ERROR_DIRECTIVE {
      @Override
      public String getLabel() {
         return "ErrorDirective";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterErrorDirective(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitErrorDirective(node);
      }
   },
   ANY_TOKEN {
      @Override
      public String getLabel() {
         return "AnyToken";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAnyToken(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAnyToken(node);
      }
   },
   SEPARATOR {
      @Override
      public String getLabel() {
         return "Separator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSeparator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSeparator(node);
      }
   },
   CMD_COMPLEMENTATION {
      @Override
      public String getLabel() {
         return "CmdComplementation";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCmdComplementation(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCmdComplementation(node);
      }
   },
   UNKNOWN_IDENTIFIER {
      @Override
      public String getLabel() {
         return "UnknownIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUnknownIdentifier(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUnknownIdentifier(node);
      }
   },
   BEGIN_PRODUCER {
      @Override
      public String getLabel() {
         return "BeginProducer";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBeginProducer(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBeginProducer(node);
      }
   },
   END_PRODUCER {
      @Override
      public String getLabel() {
         return "EndProducer";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEndProducer(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEndProducer(node);
      }
   },
   BEGIN_TRANSACTION {
      @Override
      public String getLabel() {
         return "BeginTransaction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBeginTransaction(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBeginTransaction(node);
      }
   },
   COMMIT_TRANSACTION {
      @Override
      public String getLabel() {
         return "CommitTransaction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommitTransaction(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommitTransaction(node);
      }
   },
   ROLLBACK_TRANSACTION {
      @Override
      public String getLabel() {
         return "RollbackTransaction";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRollbackTransaction(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRollbackTransaction(node);
      }
   },
   USE_AS {
      @Override
      public String getLabel() {
         return "UseAs";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAs(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAs(node);
      }
   },
   USE_AS_DATABASE {
      @Override
      public String getLabel() {
         return "UseAsDatabase";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAsDatabase(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAsDatabase(node);
      }
   },
   USE_AS_COMMAND {
      @Override
      public String getLabel() {
         return "UseAsCommand";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAsCommand(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAsCommand(node);
      }
   },
   USE_AS_TYPE {
      @Override
      public String getLabel() {
         return "UseAsType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAsType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAsType(node);
      }
   },
   USE_AS_PARAMS {
      @Override
      public String getLabel() {
         return "UseAsParams";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAsParams(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAsParams(node);
      }
   },
   USE_ALIAS {
      @Override
      public String getLabel() {
         return "UseAlias";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAlias(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAlias(node);
      }
   },
   USE_AS_PRECISION {
      @Override
      public String getLabel() {
         return "UseAsPrecision";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAsPrecision(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAsPrecision(node);
      }
   },
   USE_AS_OPTIONS {
      @Override
      public String getLabel() {
         return "UseAsOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAsOptions(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAsOptions(node);
      }
   },
   USE_AREA {
      @Override
      public String getLabel() {
         return "UseArea";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseArea(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseArea(node);
      }
   },
   USE_DATABASE {
      @Override
      public String getLabel() {
         return "UseDatabase";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseDatabase(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseDatabase(node);
      }
   },
   USE_AREA_VIA {
      @Override
      public String getLabel() {
         return "UseAreaVia";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseAreaVia(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseAreaVia(node);
      }
   },
   USE_CODEPAGE {
      @Override
      public String getLabel() {
         return "UseCodepage";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseCodepage(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseCodepage(node);
      }
   },
   USE_OPTIONS {
      @Override
      public String getLabel() {
         return "UseOptions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseOptions(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseOptions(node);
      }
   },
   USE_INDEXES {
      @Override
      public String getLabel() {
         return "UseIndexes";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUseIndexes(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUseIndexes(node);
      }
   },
   ARROBA_GET_SAY {
      @Override
      public String getLabel() {
         return "ArrobaGetSay";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrobaGetSay(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrobaGetSay(node);
      }
   },
   SET_CMD {
      @Override
      public String getLabel() {
         return "SetCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSetCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSetCmd(node);
      }
   },
   READ_CMD {
      @Override
      public String getLabel() {
         return "ReadCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterReadCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitReadCmd(node);
      }
   },
   CLS_CMD {
      @Override
      public String getLabel() {
         return "ClsCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClsCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClsCmd(node);
      }
   },
   CLEAR_CMD {
      @Override
      public String getLabel() {
         return "ClearCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClearCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClearCmd(node);
      }
   },
   KEYBOARD_CMD {
      @Override
      public String getLabel() {
         return "KeyboardCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterKeyboardCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitKeyboardCmd(node);
      }
   },
   WAIT_CMD {
      @Override
      public String getLabel() {
         return "WaitCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterWaitCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitWaitCmd(node);
      }
   },
   ACCEPT_CMD {
      @Override
      public String getLabel() {
         return "AcceptCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAcceptCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAcceptCmd(node);
      }
   },
   INPUT_CMD {
      @Override
      public String getLabel() {
         return "InputCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterInputCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitInputCmd(node);
      }
   },
   RELEASE_CMD {
      @Override
      public String getLabel() {
         return "ReleaseCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterReleaseCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitReleaseCmd(node);
      }
   },
   RESTORE_CMD {
      @Override
      public String getLabel() {
         return "RestoreCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRestoreCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRestoreCmd(node);
      }
   },
   STORE_CMD {
      @Override
      public String getLabel() {
         return "StoreCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStoreCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStoreCmd(node);
      }
   },
   SAVE_CMD {
      @Override
      public String getLabel() {
         return "SaveCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSaveCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSaveCmd(node);
      }
   },
   JOIN_CMD {
      @Override
      public String getLabel() {
         return "JoinCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterJoinCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitJoinCmd(node);
      }
   },
   EJECT_CMD {
      @Override
      public String getLabel() {
         return "EjectCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEjectCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEjectCmd(node);
      }
   },
   ERASE_CMD {
      @Override
      public String getLabel() {
         return "EraseCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEraseCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEraseCmd(node);
      }
   },
   DELETE_CMD {
      @Override
      public String getLabel() {
         return "DeleteCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDeleteCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDeleteCmd(node);
      }
   },
   RENAME_CMD {
      @Override
      public String getLabel() {
         return "RenameCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRenameCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRenameCmd(node);
      }
   },
   COPY_CMD {
      @Override
      public String getLabel() {
         return "CopyCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCopyCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCopyCmd(node);
      }
   },
   DIR_CMD {
      @Override
      public String getLabel() {
         return "DirCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDirCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDirCmd(node);
      }
   },
   TYPE_CMD {
      @Override
      public String getLabel() {
         return "TypeCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterTypeCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitTypeCmd(node);
      }
   },
   REQUEST_CMD {
      @Override
      public String getLabel() {
         return "RequestCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRequestCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRequestCmd(node);
      }
   },
   CANCEL_CMD {
      @Override
      public String getLabel() {
         return "CancelCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCancelCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCancelCmd(node);
      }
   },
   QUIT_CMD {
      @Override
      public String getLabel() {
         return "QuitCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterQuitCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitQuitCmd(node);
      }
   },
   RUN_CMD {
      @Override
      public String getLabel() {
         return "RunCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRunCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRunCmd(node);
      }
   },
   OUT_CMD {
      @Override
      public String getLabel() {
         return "OutCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOutCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOutCmd(node);
      }
   },
   CLOSE_CMD {
      @Override
      public String getLabel() {
         return "CloseCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCloseCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCloseCmd(node);
      }
   },
   SELECT_CMD {
      @Override
      public String getLabel() {
         return "SelectCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSelectCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSelectCmd(node);
      }
   },
   APPEND_CMD {
      @Override
      public String getLabel() {
         return "AppendCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAppendCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAppendCmd(node);
      }
   },
   PACK_CMD {
      @Override
      public String getLabel() {
         return "PackCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPackCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPackCmd(node);
      }
   },
   ZAP_CMD {
      @Override
      public String getLabel() {
         return "ZapCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterZapCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitZapCmd(node);
      }
   },
   UNLOCK_CMD {
      @Override
      public String getLabel() {
         return "UnlockCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUnlockCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUnlockCmd(node);
      }
   },
   COMMIT_CMD {
      @Override
      public String getLabel() {
         return "CommitCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommitCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommitCmd(node);
      }
   },
   GOTO_CMD {
      @Override
      public String getLabel() {
         return "GotoCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterGotoCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitGotoCmd(node);
      }
   },
   SKIP_CMD {
      @Override
      public String getLabel() {
         return "SkipCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSkipCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSkipCmd(node);
      }
   },
   FIND_CMD {
      @Override
      public String getLabel() {
         return "FindCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFindCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFindCmd(node);
      }
   },
   CONTINUE_CMD {
      @Override
      public String getLabel() {
         return "ContinueCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterContinueCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitContinueCmd(node);
      }
   },
   SEEK_CMD {
      @Override
      public String getLabel() {
         return "SeekCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSeekCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSeekCmd(node);
      }
   },
   LOCATE_CMD {
      @Override
      public String getLabel() {
         return "LocateCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLocateCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLocateCmd(node);
      }
   },
   REPLACE_CMD {
      @Override
      public String getLabel() {
         return "ReplaceCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterReplaceCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitReplaceCmd(node);
      }
   },
   RECALL_CMD {
      @Override
      public String getLabel() {
         return "RecallCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRecallCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRecallCmd(node);
      }
   },
   CREATE_CMD {
      @Override
      public String getLabel() {
         return "CreateCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCreateCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCreateCmd(node);
      }
   },
   SORT_CMD {
      @Override
      public String getLabel() {
         return "SortCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSortCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSortCmd(node);
      }
   },
   TOTAL_CMD {
      @Override
      public String getLabel() {
         return "TotalCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterTotalCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitTotalCmd(node);
      }
   },
   UPDATE_CMD {
      @Override
      public String getLabel() {
         return "UpdateCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUpdateCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUpdateCmd(node);
      }
   },
   COUNT_CMD {
      @Override
      public String getLabel() {
         return "CountCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCountCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCountCmd(node);
      }
   },
   SUM_CMD {
      @Override
      public String getLabel() {
         return "SumCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSumCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSumCmd(node);
      }
   },
   AVERAGE_CMD {
      @Override
      public String getLabel() {
         return "AverageCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAverageCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAverageCmd(node);
      }
   },
   LIST_CMD {
      @Override
      public String getLabel() {
         return "ListCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterListCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitListCmd(node);
      }
   },
   DISPLAY_CMD {
      @Override
      public String getLabel() {
         return "DisplayCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDisplayCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDisplayCmd(node);
      }
   },
   REPORT_CMD {
      @Override
      public String getLabel() {
         return "ReportCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterReportCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitReportCmd(node);
      }
   },
   LABEL_CMD {
      @Override
      public String getLabel() {
         return "LabelCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLabelCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLabelCmd(node);
      }
   },
   INDEX_ON_CMD {
      @Override
      public String getLabel() {
         return "IndexOnCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIndexOnCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIndexOnCmd(node);
      }
   },
   REINDEX_CMD {
      @Override
      public String getLabel() {
         return "ReindexCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterReindexCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitReindexCmd(node);
      }
   },
   QOUT_COMMAND {
      @Override
      public String getLabel() {
         return "QOutCommand";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterQOutCommand(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitQOutCommand(node);
      }
   },
   MENU_TO_CMD {
      @Override
      public String getLabel() {
         return "MenuToCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMenuToCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMenuToCmd(node);
      }
   },
   DEFAULT_CMD {
      @Override
      public String getLabel() {
         return "DefaultCmd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDefaultCmd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDefaultCmd(node);
      }
   },
   MACRO_SUBSTITION {
      @Override
      public String getLabel() {
         return "MacroSubstition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacroSubstition(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacroSubstition(node);
      }
   },
   IGNORE_LINE {
      @Override
      public String getLabel() {
         return "IgnoreLine";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIgnoreLine(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIgnoreLine(node);
      }
   },
   VARIABLE_DECLARATION_LIST {
      @Override
      public String getLabel() {
         return "VariableDeclarationList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterVariableDeclarationList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitVariableDeclarationList(node);
      }
   },
   PARAMETERS_DECLARATION_LIST {
      @Override
      public String getLabel() {
         return "ParametersDeclarationList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParametersDeclarationList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParametersDeclarationList(node);
      }
   },
   COMMA_VARIABLE_DEFINITION {
      @Override
      public String getLabel() {
         return "CommaVariableDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommaVariableDefinition(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommaVariableDefinition(node);
      }
   },
   VARIABLE_DEFINITION {
      @Override
      public String getLabel() {
         return "VariableDefinition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterVariableDefinition(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitVariableDefinition(node);
      }
   },
   VARIABLE_DEFINITION_COMMA_LIST {
      @Override
      public String getLabel() {
         return "VariableDefinitionCommaList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterVariableDefinitionCommaList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitVariableDefinitionCommaList(node);
      }
   },
   ASSIGNMENT_OPERATOR {
      @Override
      public String getLabel() {
         return "AssignmentOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAssignmentOperator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAssignmentOperator(node);
      }
   },
   INITIALIZE_VARIABLE {
      @Override
      public String getLabel() {
         return "InitializeVariable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterInitializeVariable(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitInitializeVariable(node);
      }
   },
   EXPRESSION_AS_TYPE {
      @Override
      public String getLabel() {
         return "ExpressionAsType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterExpressionAsType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitExpressionAsType(node);
      }
   },
   AS_TYPE {
      @Override
      public String getLabel() {
         return "AsType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAsType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAsType(node);
      }
   },
   OPTIONAL_ARRAY_DIMENSION {
      @Override
      public String getLabel() {
         return "OptionalArrayDimension";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOptionalArrayDimension(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOptionalArrayDimension(node);
      }
   },
   ARRAY_DIMENSION {
      @Override
      public String getLabel() {
         return "ArrayDimension";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayDimension(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayDimension(node);
      }
   },
   VALUES_LIST {
      @Override
      public String getLabel() {
         return "ValuesList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterValuesList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitValuesList(node);
      }
   },
   IN_TABLE {
      @Override
      public String getLabel() {
         return "InTable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterInTable(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitInTable(node);
      }
   },
   VARIABLE_LIST {
      @Override
      public String getLabel() {
         return "VariableList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterVariableList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitVariableList(node);
      }
   },
   IDENTIFIER_LIST {
      @Override
      public String getLabel() {
         return "IdentifierList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIdentifierList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIdentifierList(node);
      }
   },
   MEMVAR_DECLARATION {
      @Override
      public String getLabel() {
         return "MemvarDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMemvarDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMemvarDeclaration(node);
      }
   },
   ALIAS_IDENTIFIER {
      @Override
      public String getLabel() {
         return "AliasIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAliasIdentifier(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAliasIdentifier(node);
      }
   },
   EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "ExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterExpressionList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitExpressionList(node);
      }
   },
   MACRO {
      @Override
      public String getLabel() {
         return "Macro";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacro(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacro(node);
      }
   },
   ALIASED_EXPRESSION {
      @Override
      public String getLabel() {
         return "AliasedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAliasedExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAliasedExpression(node);
      }
   },
   PARENTHESES_EXPRESSION_LIST {
      @Override
      public String getLabel() {
         return "ParenthesesExpressionList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParenthesesExpressionList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParenthesesExpressionList(node);
      }
   },
   PARENTHESES_STATEMENT {
      @Override
      public String getLabel() {
         return "ParenthesesStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParenthesesStatement(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParenthesesStatement(node);
      }
   },
   QUALIFIED_VARIABLE {
      @Override
      public String getLabel() {
         return "QualifiedVariable";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterQualifiedVariable(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitQualifiedVariable(node);
      }
   },
   MACRO_FUNCTION_CALL {
      @Override
      public String getLabel() {
         return "MacroFunctionCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacroFunctionCall(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacroFunctionCall(node);
      }
   },
   PAR_PARAMETERS {
      @Override
      public String getLabel() {
         return "ParParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParParameters(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParParameters(node);
      }
   },
   SIMPLE_FUNCTION_CALL {
      @Override
      public String getLabel() {
         return "SimpleFunctionCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSimpleFunctionCall(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSimpleFunctionCall(node);
      }
   },
   IGNORE_REST_OF_LINE {
      @Override
      public String getLabel() {
         return "IgnoreRestOfLine";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIgnoreRestOfLine(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIgnoreRestOfLine(node);
      }
   },
   IF_IN_LINE {
      @Override
      public String getLabel() {
         return "IfInLine";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIfInLine(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIfInLine(node);
      }
   },
   IF_BEGIN {
      @Override
      public String getLabel() {
         return "IfBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIfBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIfBegin(node);
      }
   },
   CONDITION {
      @Override
      public String getLabel() {
         return "Condition";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCondition(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCondition(node);
      }
   },
   IF_END {
      @Override
      public String getLabel() {
         return "IfEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIfEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIfEnd(node);
      }
   },
   END_KEYWORD {
      @Override
      public String getLabel() {
         return "EndKeyword";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEndKeyword(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEndKeyword(node);
      }
   },
   DO_WHILE_BEGIN {
      @Override
      public String getLabel() {
         return "DoWhileBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDoWhileBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDoWhileBegin(node);
      }
   },
   DO_WHILE_END {
      @Override
      public String getLabel() {
         return "DoWhileEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDoWhileEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDoWhileEnd(node);
      }
   },
   FOR_NEXT_BEGIN {
      @Override
      public String getLabel() {
         return "ForNextBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterForNextBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitForNextBegin(node);
      }
   },
   FOR_NEXT_END {
      @Override
      public String getLabel() {
         return "ForNextEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterForNextEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitForNextEnd(node);
      }
   },
   BEGIN_SEQUENCE_BEGIN {
      @Override
      public String getLabel() {
         return "BeginSequenceBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBeginSequenceBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBeginSequenceBegin(node);
      }
   },
   DO_CASE_BEGIN {
      @Override
      public String getLabel() {
         return "DoCaseBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDoCaseBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDoCaseBegin(node);
      }
   },
   DO_CASE_END {
      @Override
      public String getLabel() {
         return "DoCaseEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDoCaseEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDoCaseEnd(node);
      }
   },
   FOR_EACH_BEGIN {
      @Override
      public String getLabel() {
         return "ForEachBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterForEachBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitForEachBegin(node);
      }
   },
   FOR_EACH_END {
      @Override
      public String getLabel() {
         return "ForEachEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterForEachEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitForEachEnd(node);
      }
   },
   SWITCH_BEGIN {
      @Override
      public String getLabel() {
         return "SwitchBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSwitchBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSwitchBegin(node);
      }
   },
   SWITCH_END {
      @Override
      public String getLabel() {
         return "SwitchEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSwitchEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSwitchEnd(node);
      }
   },
   TRY_CATCH_BEGIN {
      @Override
      public String getLabel() {
         return "TryCatchBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterTryCatchBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitTryCatchBegin(node);
      }
   },
   TRY_CATCH_END {
      @Override
      public String getLabel() {
         return "TryCatchEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterTryCatchEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitTryCatchEnd(node);
      }
   },
   FINALLY_BLOCK_BEGIN {
      @Override
      public String getLabel() {
         return "FinallyBlockBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFinallyBlockBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFinallyBlockBegin(node);
      }
   },
   RETURN {
      @Override
      public String getLabel() {
         return "Return";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterReturn(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitReturn(node);
      }
   },
   BREAK {
      @Override
      public String getLabel() {
         return "Break";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBreak(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBreak(node);
      }
   },
   CLASS_MEMBER_DECLARATION {
      @Override
      public String getLabel() {
         return "ClassMemberDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClassMemberDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClassMemberDeclaration(node);
      }
   },
   PUBLIC_VARIABLE_DECLARATION {
      @Override
      public String getLabel() {
         return "PublicVariableDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPublicVariableDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPublicVariableDeclaration(node);
      }
   },
   PRIVATE_VARIABLE_DECLARATION {
      @Override
      public String getLabel() {
         return "PrivateVariableDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPrivateVariableDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPrivateVariableDeclaration(node);
      }
   },
   EXTERNAL {
      @Override
      public String getLabel() {
         return "External";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterExternal(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitExternal(node);
      }
   },
   ANNOUNCE {
      @Override
      public String getLabel() {
         return "Announce";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAnnounce(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAnnounce(node);
      }
   },
   REQUEST {
      @Override
      public String getLabel() {
         return "Request";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRequest(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRequest(node);
      }
   },
   THROW {
      @Override
      public String getLabel() {
         return "Throw";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterThrow(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitThrow(node);
      }
   },
   STATEMENT_ASSIGNMENT_EXPRESSION {
      @Override
      public String getLabel() {
         return "StatementAssignmentExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStatementAssignmentExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStatementAssignmentExpression(node);
      }
   },
   SELF_EXPRESSION {
      @Override
      public String getLabel() {
         return "SelfExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSelfExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSelfExpression(node);
      }
   },
   ALIASED_MACRO {
      @Override
      public String getLabel() {
         return "AliasedMacro";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAliasedMacro(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAliasedMacro(node);
      }
   },
   QUALIFIED_EXPRESSION {
      @Override
      public String getLabel() {
         return "QualifiedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterQualifiedExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitQualifiedExpression(node);
      }
   },
   MEMBER_CALL {
      @Override
      public String getLabel() {
         return "MemberCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMemberCall(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMemberCall(node);
      }
   },
   KEYWORDS_FUNCTION_CALL {
      @Override
      public String getLabel() {
         return "KeywordsFunctionCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterKeywordsFunctionCall(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitKeywordsFunctionCall(node);
      }
   },
   METHOD_DECLARATION {
      @Override
      public String getLabel() {
         return "MethodDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMethodDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMethodDeclaration(node);
      }
   },
   PAR_PARAMETERS_DECLARATION {
      @Override
      public String getLabel() {
         return "ParParametersDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParParametersDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParParametersDeclaration(node);
      }
   },
   ATTRIBUTE_LIST_DECLARATION {
      @Override
      public String getLabel() {
         return "AttributeListDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAttributeListDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAttributeListDeclaration(node);
      }
   },
   MACRO_PREFIX {
      @Override
      public String getLabel() {
         return "MacroPrefix";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacroPrefix(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacroPrefix(node);
      }
   },
   MACRO_SUFIX {
      @Override
      public String getLabel() {
         return "MacroSufix";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacroSufix(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacroSufix(node);
      }
   },
   MACRO_VAR {
      @Override
      public String getLabel() {
         return "MacroVar";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacroVar(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacroVar(node);
      }
   },
   MACRO_EXPRESSION {
      @Override
      public String getLabel() {
         return "MacroExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMacroExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMacroExpression(node);
      }
   },
   FUNCTION_REFERENCE {
      @Override
      public String getLabel() {
         return "FunctionReference";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFunctionReference(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFunctionReference(node);
      }
   },
   VALUE_BY_REFERENCE {
      @Override
      public String getLabel() {
         return "ValueByReference";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterValueByReference(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitValueByReference(node);
      }
   },
   ALIASED_FIELD {
      @Override
      public String getLabel() {
         return "AliasedField";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAliasedField(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAliasedField(node);
      }
   },
   PARAMETER {
      @Override
      public String getLabel() {
         return "Parameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParameter(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParameter(node);
      }
   },
   COMMA_PARAMETER {
      @Override
      public String getLabel() {
         return "CommaParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommaParameter(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommaParameter(node);
      }
   },
   PARAMETER_COMMA_LIST {
      @Override
      public String getLabel() {
         return "ParameterCommaList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParameterCommaList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParameterCommaList(node);
      }
   },
   PARAMETERS_LIST {
      @Override
      public String getLabel() {
         return "ParametersList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParametersList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParametersList(node);
      }
   },
   OPTIONAL_PARAMETERS_LIST {
      @Override
      public String getLabel() {
         return "OptionalParametersList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOptionalParametersList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOptionalParametersList(node);
      }
   },
   ELSE_IF_BEGIN {
      @Override
      public String getLabel() {
         return "ElseIfBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterElseIfBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitElseIfBegin(node);
      }
   },
   ELSE_BEGIN {
      @Override
      public String getLabel() {
         return "ElseBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterElseBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitElseBegin(node);
      }
   },
   OTHERWISE_BEGIN {
      @Override
      public String getLabel() {
         return "OtherwiseBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOtherwiseBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOtherwiseBegin(node);
      }
   },
   DO_CASE_OPTION_BEGIN {
      @Override
      public String getLabel() {
         return "DoCaseOptionBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDoCaseOptionBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDoCaseOptionBegin(node);
      }
   },
   STEP_ARGUMENT {
      @Override
      public String getLabel() {
         return "StepArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStepArgument(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStepArgument(node);
      }
   },
   STEP {
      @Override
      public String getLabel() {
         return "Step";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStep(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStep(node);
      }
   },
   ASSIGNMENT_EXPRESSION {
      @Override
      public String getLabel() {
         return "AssignmentExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAssignmentExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAssignmentExpression(node);
      }
   },
   BEGIN_SEQUENCE_KEYWORD {
      @Override
      public String getLabel() {
         return "BeginSequenceKeyword";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBeginSequenceKeyword(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBeginSequenceKeyword(node);
      }
   },
   WITH_OPTION {
      @Override
      public String getLabel() {
         return "WithOption";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterWithOption(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitWithOption(node);
      }
   },
   CODE_BLOCK_LITERAL {
      @Override
      public String getLabel() {
         return "CodeBlockLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCodeBlockLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCodeBlockLiteral(node);
      }
   },
   WITH_CODE_BLOCK {
      @Override
      public String getLabel() {
         return "WithCodeBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterWithCodeBlock(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitWithCodeBlock(node);
      }
   },
   BEGIN_SEQUENCE_END {
      @Override
      public String getLabel() {
         return "BeginSequenceEnd";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBeginSequenceEnd(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBeginSequenceEnd(node);
      }
   },
   USING_SPEC {
      @Override
      public String getLabel() {
         return "UsingSpec";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUsingSpec(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUsingSpec(node);
      }
   },
   USING_IDENTIFIER {
      @Override
      public String getLabel() {
         return "UsingIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterUsingIdentifier(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitUsingIdentifier(node);
      }
   },
   RECOVER_BEGIN {
      @Override
      public String getLabel() {
         return "RecoverBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRecoverBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRecoverBegin(node);
      }
   },
   ALWAYS_BEGIN {
      @Override
      public String getLabel() {
         return "AlwaysBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAlwaysBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAlwaysBegin(node);
      }
   },
   PARENTHESES_SWITCH_CONSTANT {
      @Override
      public String getLabel() {
         return "ParenthesesSwitchConstant";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParenthesesSwitchConstant(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParenthesesSwitchConstant(node);
      }
   },
   SWITCH_CONSTANT {
      @Override
      public String getLabel() {
         return "SwitchConstant";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSwitchConstant(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSwitchConstant(node);
      }
   },
   LOGICAL_LITERAL {
      @Override
      public String getLabel() {
         return "LogicalLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLogicalLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLogicalLiteral(node);
      }
   },
   SWITCH_OPTION_BEGIN {
      @Override
      public String getLabel() {
         return "SwitchOptionBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSwitchOptionBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSwitchOptionBegin(node);
      }
   },
   SWITCH_DEFAULT_BEGIN {
      @Override
      public String getLabel() {
         return "SwitchDefaultBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSwitchDefaultBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSwitchDefaultBegin(node);
      }
   },
   CATCH_BLOCK_BEGIN {
      @Override
      public String getLabel() {
         return "CatchBlockBegin";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCatchBlockBegin(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCatchBlockBegin(node);
      }
   },
   CODE_BLOCK_PARAMETERS {
      @Override
      public String getLabel() {
         return "CodeBlockParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCodeBlockParameters(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCodeBlockParameters(node);
      }
   },
   ARRAY_LITERAL {
      @Override
      public String getLabel() {
         return "ArrayLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayLiteral(node);
      }
   },
   ARRAY_ITEM_LIST {
      @Override
      public String getLabel() {
         return "ArrayItemList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayItemList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayItemList(node);
      }
   },
   ARRAY_ITEM {
      @Override
      public String getLabel() {
         return "ArrayItem";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayItem(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayItem(node);
      }
   },
   VARIABLE_BY_REF {
      @Override
      public String getLabel() {
         return "VariableByRef";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterVariableByRef(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitVariableByRef(node);
      }
   },
   ALIASED_FIELD_BY_REF {
      @Override
      public String getLabel() {
         return "AliasedFieldByRef";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAliasedFieldByRef(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAliasedFieldByRef(node);
      }
   },
   QUALIFIED_VARIABLE_BY_REF {
      @Override
      public String getLabel() {
         return "QualifiedVariableByRef";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterQualifiedVariableByRef(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitQualifiedVariableByRef(node);
      }
   },
   ARRAY_BY_REF {
      @Override
      public String getLabel() {
         return "ArrayByRef";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayByRef(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayByRef(node);
      }
   },
   HASH_ITEM {
      @Override
      public String getLabel() {
         return "HashItem";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterHashItem(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitHashItem(node);
      }
   },
   HASH_ITEMS_LIST {
      @Override
      public String getLabel() {
         return "HashItemsList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterHashItemsList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitHashItemsList(node);
      }
   },
   HASH_ITEMS {
      @Override
      public String getLabel() {
         return "HashItems";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterHashItems(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitHashItems(node);
      }
   },
   HASH_CONTENT {
      @Override
      public String getLabel() {
         return "HashContent";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterHashContent(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitHashContent(node);
      }
   },
   HASH_LITERAL {
      @Override
      public String getLabel() {
         return "HashLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterHashLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitHashLiteral(node);
      }
   },
   NIL_VALUE {
      @Override
      public String getLabel() {
         return "NilValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterNilValue(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitNilValue(node);
      }
   },
   LITERAL {
      @Override
      public String getLabel() {
         return "Literal";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLiteral(node);
      }
   },
   DATE_TIME_LITERAL {
      @Override
      public String getLabel() {
         return "DateTimeLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDateTimeLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDateTimeLiteral(node);
      }
   },
   TIME_LITERAL {
      @Override
      public String getLabel() {
         return "TimeLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterTimeLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitTimeLiteral(node);
      }
   },
   INTEGER_NUMBER {
      @Override
      public String getLabel() {
         return "IntegerNumber";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIntegerNumber(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIntegerNumber(node);
      }
   },
   DATE_PATTERN {
      @Override
      public String getLabel() {
         return "DatePattern";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDatePattern(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDatePattern(node);
      }
   },
   COMMA_OR_CLOSE_OPEN_BRACKET {
      @Override
      public String getLabel() {
         return "CommaOrCloseOpenBracket";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommaOrCloseOpenBracket(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommaOrCloseOpenBracket(node);
      }
   },
   COMMA_INDEX_ITEM {
      @Override
      public String getLabel() {
         return "CommaIndexItem";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterCommaIndexItem(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitCommaIndexItem(node);
      }
   },
   INDEX_ITEM_COMMA_LIST {
      @Override
      public String getLabel() {
         return "IndexItemCommaList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIndexItemCommaList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIndexItemCommaList(node);
      }
   },
   INDEX_LIST {
      @Override
      public String getLabel() {
         return "IndexList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIndexList(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIndexList(node);
      }
   },
   INDEX_ITEM {
      @Override
      public String getLabel() {
         return "IndexItem";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIndexItem(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIndexItem(node);
      }
   },
   ARRAY_INDEX {
      @Override
      public String getLabel() {
         return "ArrayIndex";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayIndex(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayIndex(node);
      }
   },
   ASSIGN_OPERATOR {
      @Override
      public String getLabel() {
         return "AssignOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAssignOperator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAssignOperator(node);
      }
   },
   EXPRESSION {
      @Override
      public String getLabel() {
         return "Expression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitExpression(node);
      }
   },
   OPTIONAL_OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOptionalOrExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOptionalOrExpression(node);
      }
   },
   OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "OrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOrExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOrExpression(node);
      }
   },
   OPTIONAL_AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalAndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOptionalAndExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOptionalAndExpression(node);
      }
   },
   AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "AndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAndExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAndExpression(node);
      }
   },
   RELATIONAL_OPERATOR {
      @Override
      public String getLabel() {
         return "RelationalOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRelationalOperator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRelationalOperator(node);
      }
   },
   OPTIONAL_RELATIONAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalRelationalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOptionalRelationalExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOptionalRelationalExpression(node);
      }
   },
   RELATIONAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "RelationalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterRelationalExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitRelationalExpression(node);
      }
   },
   MATH_OPERATOR {
      @Override
      public String getLabel() {
         return "MathOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMathOperator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMathOperator(node);
      }
   },
   OPTIONAL_MATH_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalMathExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterOptionalMathExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitOptionalMathExpression(node);
      }
   },
   MATH_EXPRESSION {
      @Override
      public String getLabel() {
         return "MathExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterMathExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitMathExpression(node);
      }
   },
   PREFIXED_EXPRESSION {
      @Override
      public String getLabel() {
         return "PrefixedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPrefixedExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPrefixedExpression(node);
      }
   },
   POSTFIXED_EXPRESSION {
      @Override
      public String getLabel() {
         return "PostfixedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPostfixedExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPostfixedExpression(node);
      }
   },
   PRIMARY_EXPRESSION {
      @Override
      public String getLabel() {
         return "PrimaryExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPrimaryExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPrimaryExpression(node);
      }
   },
   PREFIX_OPERATOR {
      @Override
      public String getLabel() {
         return "PrefixOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPrefixOperator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPrefixOperator(node);
      }
   },
   POSTFIX_OPERATOR {
      @Override
      public String getLabel() {
         return "PostfixOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterPostfixOperator(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitPostfixOperator(node);
      }
   },
   ATOMIC_EXPRESSION {
      @Override
      public String getLabel() {
         return "AtomicExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAtomicExpression(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAtomicExpression(node);
      }
   },
   KEYBOARD_CALL {
      @Override
      public String getLabel() {
         return "KeyboardCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterKeyboardCall(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitKeyboardCall(node);
      }
   },
   CLEAR_TYPEHEAD {
      @Override
      public String getLabel() {
         return "ClearTypehead";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClearTypehead(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClearTypehead(node);
      }
   },
   ARRAY_ACCESS {
      @Override
      public String getLabel() {
         return "ArrayAccess";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayAccess(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayAccess(node);
      }
   },
   LEFT_VALUE {
      @Override
      public String getLabel() {
         return "LeftValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLeftValue(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLeftValue(node);
      }
   },
   PARENTHESES_LEFT_VALUE {
      @Override
      public String getLabel() {
         return "ParenthesesLeftValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParenthesesLeftValue(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParenthesesLeftValue(node);
      }
   },
   DUMP {
      @Override
      public String getLabel() {
         return "Dump";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDump(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDump(node);
      }
   },
   END_DUMP {
      @Override
      public String getLabel() {
         return "EndDump";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEndDump(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEndDump(node);
      }
   },
   PARAMETER_DECLARATION {
      @Override
      public String getLabel() {
         return "ParameterDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParameterDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParameterDeclaration(node);
      }
   },
   PARAMETERS_DECLARATION {
      @Override
      public String getLabel() {
         return "ParametersDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterParametersDeclaration(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitParametersDeclaration(node);
      }
   },
   FUNCTION_MODIFIERS {
      @Override
      public String getLabel() {
         return "FunctionModifiers";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFunctionModifiers(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFunctionModifiers(node);
      }
   },
   FUNCTION_MODIFIER {
      @Override
      public String getLabel() {
         return "FunctionModifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterFunctionModifier(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitFunctionModifier(node);
      }
   },
   STRING_LITERAL {
      @Override
      public String getLabel() {
         return "StringLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterStringLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitStringLiteral(node);
      }
   },
   NUMBER_LITERAL {
      @Override
      public String getLabel() {
         return "NumberLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterNumberLiteral(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitNumberLiteral(node);
      }
   },
   ARRAY_SUB_TYPE {
      @Override
      public String getLabel() {
         return "ArraySubType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArraySubType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArraySubType(node);
      }
   },
   DATA_TYPE {
      @Override
      public String getLabel() {
         return "DataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterDataType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitDataType(node);
      }
   },
   ARRAY_TYPE {
      @Override
      public String getLabel() {
         return "ArrayType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArrayType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArrayType(node);
      }
   },
   ARRAY {
      @Override
      public String getLabel() {
         return "Array";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterArray(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitArray(node);
      }
   },
   CLASS {
      @Override
      public String getLabel() {
         return "Class";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterClass(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitClass(node);
      }
   },
   AS_DATA_TYPE {
      @Override
      public String getLabel() {
         return "AsDataType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAsDataType(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAsDataType(node);
      }
   },
   IDENTIFIER {
      @Override
      public String getLabel() {
         return "Identifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterIdentifier(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitIdentifier(node);
      }
   },
   WHITESPACE {
      @Override
      public String getLabel() {
         return "Whitespace";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterWhitespace(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitWhitespace(node);
      }
   },
   LINE_COMMENT {
      @Override
      public String getLabel() {
         return "LineComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterLineComment(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitLineComment(node);
      }
   },
   BLOCK_COMMENT {
      @Override
      public String getLabel() {
         return "BlockComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterBlockComment(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitBlockComment(node);
      }
   },
   ALONE_LINE_COMMENT {
      @Override
      public String getLabel() {
         return "AloneLineComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterAloneLineComment(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitAloneLineComment(node);
      }
   },
   END_STMT {
      @Override
      public String getLabel() {
         return "EndStmt";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterEndStmt(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitEndStmt(node);
      }
   },
   SPACING {
      @Override
      public String getLabel() {
         return "Spacing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterSpacing(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitSpacing(node);
      }
   },
   CONTINUE_NL {
      @Override
      public String getLabel() {
         return "ContinueNL";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.enterContinueNL(node);
      }

      @Override
      public void exitRule(HarbourUnprocessedVisitor visitor, Node node) {
         visitor.exitContinueNL(node);
      }
   };

   @Override
   public int getValue() {
      return ordinal();
   }
}
