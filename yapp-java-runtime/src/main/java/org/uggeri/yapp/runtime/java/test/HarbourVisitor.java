/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.node.NodeVisitor;

public abstract class HarbourVisitor implements NodeVisitor {

   public void enterHarbourProgram(Node node) {}
   public void exitHarbourProgram(Node node) {}

   public void enterStatements(Node node) {}
   public void exitStatements(Node node) {}

   public void enterStatement(Node node) {}
   public void exitStatement(Node node) {}

   public void enterLocalVariablesDeclaration(Node node) {}
   public void exitLocalVariablesDeclaration(Node node) {}

   public void enterFunctionDeclaration(Node node) {}
   public void exitFunctionDeclaration(Node node) {}

   public void enterProcedureDeclaration(Node node) {}
   public void exitProcedureDeclaration(Node node) {}

   public void enterStaticVariablesDeclaration(Node node) {}
   public void exitStaticVariablesDeclaration(Node node) {}

   public void enterLineDirective(Node node) {}
   public void exitLineDirective(Node node) {}

   public void enterPragmaDump(Node node) {}
   public void exitPragmaDump(Node node) {}

   public void enterFieldsDeclaration(Node node) {}
   public void exitFieldsDeclaration(Node node) {}

   public void enterClassDeclaration(Node node) {}
   public void exitClassDeclaration(Node node) {}

   public void enterOldStyleParametersDeclaration(Node node) {}
   public void exitOldStyleParametersDeclaration(Node node) {}

   public void enterDeclareStatement(Node node) {}
   public void exitDeclareStatement(Node node) {}

   public void enterBodyStatement(Node node) {}
   public void exitBodyStatement(Node node) {}

   public void enterVariableDeclarationList(Node node) {}
   public void exitVariableDeclarationList(Node node) {}

   public void enterParametersDeclarationList(Node node) {}
   public void exitParametersDeclarationList(Node node) {}

   public void enterCommaVariableDefinition(Node node) {}
   public void exitCommaVariableDefinition(Node node) {}

   public void enterVariableDefinition(Node node) {}
   public void exitVariableDefinition(Node node) {}

   public void enterVariableDefinitionCommaList(Node node) {}
   public void exitVariableDefinitionCommaList(Node node) {}

   public void enterAssignmentOperator(Node node) {}
   public void exitAssignmentOperator(Node node) {}

   public void enterEqualOperator(Node node) {}
   public void exitEqualOperator(Node node) {}

   public void enterInitializeVariable(Node node) {}
   public void exitInitializeVariable(Node node) {}

   public void enterExpressionAsType(Node node) {}
   public void exitExpressionAsType(Node node) {}

   public void enterExpression(Node node) {}
   public void exitExpression(Node node) {}

   public void enterAsType(Node node) {}
   public void exitAsType(Node node) {}

   public void enterOptionalArrayDimension(Node node) {}
   public void exitOptionalArrayDimension(Node node) {}

   public void enterArrayDimension(Node node) {}
   public void exitArrayDimension(Node node) {}

   public void enterValuesList(Node node) {}
   public void exitValuesList(Node node) {}

   public void enterInTable(Node node) {}
   public void exitInTable(Node node) {}

   public void enterVariableList(Node node) {}
   public void exitVariableList(Node node) {}

   public void enterIdentifierList(Node node) {}
   public void exitIdentifierList(Node node) {}

   public void enterMemvarDeclaration(Node node) {}
   public void exitMemvarDeclaration(Node node) {}

   public void enterAliasIdentifier(Node node) {}
   public void exitAliasIdentifier(Node node) {}

   public void enterExpressionList(Node node) {}
   public void exitExpressionList(Node node) {}

   public void enterMacro(Node node) {}
   public void exitMacro(Node node) {}

   public void enterAliasedExpression(Node node) {}
   public void exitAliasedExpression(Node node) {}

   public void enterParenthesesExpressionList(Node node) {}
   public void exitParenthesesExpressionList(Node node) {}

   public void enterQualifiedVariable(Node node) {}
   public void exitQualifiedVariable(Node node) {}

   public void enterAnyQualifiedVariable(Node node) {}
   public void exitAnyQualifiedVariable(Node node) {}

   public void enterMacroFunctionCall(Node node) {}
   public void exitMacroFunctionCall(Node node) {}

   public void enterParParameters(Node node) {}
   public void exitParParameters(Node node) {}

   public void enterSimpleFunctionCall(Node node) {}
   public void exitSimpleFunctionCall(Node node) {}

   public void enterIfInLine(Node node) {}
   public void exitIfInLine(Node node) {}

   public void enterIfEndif(Node node) {}
   public void exitIfEndif(Node node) {}

   public void enterDoWhile(Node node) {}
   public void exitDoWhile(Node node) {}

   public void enterForNext(Node node) {}
   public void exitForNext(Node node) {}

   public void enterBeginSequence(Node node) {}
   public void exitBeginSequence(Node node) {}

   public void enterDoCase(Node node) {}
   public void exitDoCase(Node node) {}

   public void enterForEach(Node node) {}
   public void exitForEach(Node node) {}

   public void enterDoSwitch(Node node) {}
   public void exitDoSwitch(Node node) {}

   public void enterTryCatch(Node node) {}
   public void exitTryCatch(Node node) {}

   public void enterReturn(Node node) {}
   public void exitReturn(Node node) {}

   public void enterBreak(Node node) {}
   public void exitBreak(Node node) {}

   public void enterClassMemberDeclaration(Node node) {}
   public void exitClassMemberDeclaration(Node node) {}

   public void enterPublicVariableDeclaration(Node node) {}
   public void exitPublicVariableDeclaration(Node node) {}

   public void enterPrivateVariableDeclaration(Node node) {}
   public void exitPrivateVariableDeclaration(Node node) {}

   public void enterExternal(Node node) {}
   public void exitExternal(Node node) {}

   public void enterAnnounce(Node node) {}
   public void exitAnnounce(Node node) {}

   public void enterRequest(Node node) {}
   public void exitRequest(Node node) {}

   public void enterThrow(Node node) {}
   public void exitThrow(Node node) {}

   public void enterStatementAssignmentExpression(Node node) {}
   public void exitStatementAssignmentExpression(Node node) {}

   public void enterSelfExpression(Node node) {}
   public void exitSelfExpression(Node node) {}

   public void enterPrefixedExpression(Node node) {}
   public void exitPrefixedExpression(Node node) {}

   public void enterPostfixedExpression(Node node) {}
   public void exitPostfixedExpression(Node node) {}

   public void enterAliasedMacro(Node node) {}
   public void exitAliasedMacro(Node node) {}

   public void enterQualifiedExpression(Node node) {}
   public void exitQualifiedExpression(Node node) {}

   public void enterKeywordsFunction(Node node) {}
   public void exitKeywordsFunction(Node node) {}

   public void enterMethodDeclaration(Node node) {}
   public void exitMethodDeclaration(Node node) {}

   public void enterParParametersDeclaration(Node node) {}
   public void exitParParametersDeclaration(Node node) {}

   public void enterAttributeListDeclaration(Node node) {}
   public void exitAttributeListDeclaration(Node node) {}

   public void enterMacroPrefix(Node node) {}
   public void exitMacroPrefix(Node node) {}

   public void enterMacroSufix(Node node) {}
   public void exitMacroSufix(Node node) {}

   public void enterMacroVar(Node node) {}
   public void exitMacroVar(Node node) {}

   public void enterMacroExpression(Node node) {}
   public void exitMacroExpression(Node node) {}

   public void enterFunctionReference(Node node) {}
   public void exitFunctionReference(Node node) {}

   public void enterValueByReference(Node node) {}
   public void exitValueByReference(Node node) {}

   public void enterAliasedField(Node node) {}
   public void exitAliasedField(Node node) {}

   public void enterParameter(Node node) {}
   public void exitParameter(Node node) {}

   public void enterCommaParameter(Node node) {}
   public void exitCommaParameter(Node node) {}

   public void enterParameterCommaList(Node node) {}
   public void exitParameterCommaList(Node node) {}

   public void enterParametersList(Node node) {}
   public void exitParametersList(Node node) {}

   public void enterOptionalParametersList(Node node) {}
   public void exitOptionalParametersList(Node node) {}

   public void enterBody(Node node) {}
   public void exitBody(Node node) {}

   public void enterElseIf(Node node) {}
   public void exitElseIf(Node node) {}

   public void enterElseIfList(Node node) {}
   public void exitElseIfList(Node node) {}

   public void enterElse(Node node) {}
   public void exitElse(Node node) {}

   public void enterOtherwiseBlock(Node node) {}
   public void exitOtherwiseBlock(Node node) {}

   public void enterOtherwise(Node node) {}
   public void exitOtherwise(Node node) {}

   public void enterDoCaseOption(Node node) {}
   public void exitDoCaseOption(Node node) {}

   public void enterDoCaseOptions(Node node) {}
   public void exitDoCaseOptions(Node node) {}

   public void enterDoWhileKeyword(Node node) {}
   public void exitDoWhileKeyword(Node node) {}

   public void enterStepArgument(Node node) {}
   public void exitStepArgument(Node node) {}

   public void enterStep(Node node) {}
   public void exitStep(Node node) {}

   public void enterAssignment(Node node) {}
   public void exitAssignment(Node node) {}

   public void enterBeginSequenceKeyword(Node node) {}
   public void exitBeginSequenceKeyword(Node node) {}

   public void enterWithOption(Node node) {}
   public void exitWithOption(Node node) {}

   public void enterCodeBlockLiteral(Node node) {}
   public void exitCodeBlockLiteral(Node node) {}

   public void enterWithCodeBlock(Node node) {}
   public void exitWithCodeBlock(Node node) {}

   public void enterEndSequenceKeyword(Node node) {}
   public void exitEndSequenceKeyword(Node node) {}

   public void enterUsingSpec(Node node) {}
   public void exitUsingSpec(Node node) {}

   public void enterUsingIdentifier(Node node) {}
   public void exitUsingIdentifier(Node node) {}

   public void enterRecoverBlock(Node node) {}
   public void exitRecoverBlock(Node node) {}

   public void enterRecover(Node node) {}
   public void exitRecover(Node node) {}

   public void enterAlwaysBlock(Node node) {}
   public void exitAlwaysBlock(Node node) {}

   public void enterAlways(Node node) {}
   public void exitAlways(Node node) {}

   public void enterParenthesesSwitchConstant(Node node) {}
   public void exitParenthesesSwitchConstant(Node node) {}

   public void enterSwitchConstant(Node node) {}
   public void exitSwitchConstant(Node node) {}

   public void enterLogicalLiteral(Node node) {}
   public void exitLogicalLiteral(Node node) {}

   public void enterStringLiteral(Node node) {}
   public void exitStringLiteral(Node node) {}

   public void enterNumberLiteral(Node node) {}
   public void exitNumberLiteral(Node node) {}

   public void enterCaseSwitchOption(Node node) {}
   public void exitCaseSwitchOption(Node node) {}

   public void enterCaseSwitchOptions(Node node) {}
   public void exitCaseSwitchOptions(Node node) {}

   public void enterSwitchDefaultBody(Node node) {}
   public void exitSwitchDefaultBody(Node node) {}

   public void enterSwitchDefault(Node node) {}
   public void exitSwitchDefault(Node node) {}

   public void enterCatchBlock(Node node) {}
   public void exitCatchBlock(Node node) {}

   public void enterCodeBlockParameters(Node node) {}
   public void exitCodeBlockParameters(Node node) {}

   public void enterCodeBlockPattern(Node node) {}
   public void exitCodeBlockPattern(Node node) {}

   public void enterArrayItems(Node node) {}
   public void exitArrayItems(Node node) {}

   public void enterArrayLiteral(Node node) {}
   public void exitArrayLiteral(Node node) {}

   public void enterArrayPattern(Node node) {}
   public void exitArrayPattern(Node node) {}

   public void enterHashItem(Node node) {}
   public void exitHashItem(Node node) {}

   public void enterHashItemsList(Node node) {}
   public void exitHashItemsList(Node node) {}

   public void enterHashItems(Node node) {}
   public void exitHashItems(Node node) {}

   public void enterHashContent(Node node) {}
   public void exitHashContent(Node node) {}

   public void enterHashLiteral(Node node) {}
   public void exitHashLiteral(Node node) {}

   public void enterHashPattern(Node node) {}
   public void exitHashPattern(Node node) {}

   public void enterNilValue(Node node) {}
   public void exitNilValue(Node node) {}

   public void enterLiteral(Node node) {}
   public void exitLiteral(Node node) {}

   public void enterDateTimeLiteral(Node node) {}
   public void exitDateTimeLiteral(Node node) {}

   public void enterDateTimePattern(Node node) {}
   public void exitDateTimePattern(Node node) {}

   public void enterIntegerNumber(Node node) {}
   public void exitIntegerNumber(Node node) {}

   public void enterTimePattern(Node node) {}
   public void exitTimePattern(Node node) {}

   public void enterDatePattern(Node node) {}
   public void exitDatePattern(Node node) {}

   public void enterCommaOrOpenCloseBracket(Node node) {}
   public void exitCommaOrOpenCloseBracket(Node node) {}

   public void enterCommaIndexItem(Node node) {}
   public void exitCommaIndexItem(Node node) {}

   public void enterIndexItemCommaList(Node node) {}
   public void exitIndexItemCommaList(Node node) {}

   public void enterIndexList(Node node) {}
   public void exitIndexList(Node node) {}

   public void enterArrayIndex(Node node) {}
   public void exitArrayIndex(Node node) {}

   public void enterAssignOperator(Node node) {}
   public void exitAssignOperator(Node node) {}

   public void enterAssignmentExpression(Node node) {}
   public void exitAssignmentExpression(Node node) {}

   public void enterConditionalOrExpression(Node node) {}
   public void exitConditionalOrExpression(Node node) {}

   public void enterOrExpression(Node node) {}
   public void exitOrExpression(Node node) {}

   public void enterConditionalAndExpression(Node node) {}
   public void exitConditionalAndExpression(Node node) {}

   public void enterAndExpression(Node node) {}
   public void exitAndExpression(Node node) {}

   public void enterOptionalRelationalExpression(Node node) {}
   public void exitOptionalRelationalExpression(Node node) {}

   public void enterRelationalExpression(Node node) {}
   public void exitRelationalExpression(Node node) {}

   public void enterOptionalAdditiveExpression(Node node) {}
   public void exitOptionalAdditiveExpression(Node node) {}

   public void enterRelationalOperator(Node node) {}
   public void exitRelationalOperator(Node node) {}

   public void enterAdditiveExpression(Node node) {}
   public void exitAdditiveExpression(Node node) {}

   public void enterOptionalMultiplicativeExpression(Node node) {}
   public void exitOptionalMultiplicativeExpression(Node node) {}

   public void enterPlusSign(Node node) {}
   public void exitPlusSign(Node node) {}

   public void enterMinusSign(Node node) {}
   public void exitMinusSign(Node node) {}

   public void enterMultiplicativeExpression(Node node) {}
   public void exitMultiplicativeExpression(Node node) {}

   public void enterOptionalBitOrExpression(Node node) {}
   public void exitOptionalBitOrExpression(Node node) {}

   public void enterMultOperator(Node node) {}
   public void exitMultOperator(Node node) {}

   public void enterBitOrExpression(Node node) {}
   public void exitBitOrExpression(Node node) {}

   public void enterOptionalBitXOrExpression(Node node) {}
   public void exitOptionalBitXOrExpression(Node node) {}

   public void enterBitXOrExpression(Node node) {}
   public void exitBitXOrExpression(Node node) {}

   public void enterOptionalBitAndExpression(Node node) {}
   public void exitOptionalBitAndExpression(Node node) {}

   public void enterBitAndExpression(Node node) {}
   public void exitBitAndExpression(Node node) {}

   public void enterOptionalShiftExpression(Node node) {}
   public void exitOptionalShiftExpression(Node node) {}

   public void enterShiftExpression(Node node) {}
   public void exitShiftExpression(Node node) {}

   public void enterUnaryExpression(Node node) {}
   public void exitUnaryExpression(Node node) {}

   public void enterPrimaryExpression(Node node) {}
   public void exitPrimaryExpression(Node node) {}

   public void enterPrefixOperator(Node node) {}
   public void exitPrefixOperator(Node node) {}

   public void enterPostfixOperator(Node node) {}
   public void exitPostfixOperator(Node node) {}

   public void enterAtomicExpression(Node node) {}
   public void exitAtomicExpression(Node node) {}

   public void enterArrayAccess(Node node) {}
   public void exitArrayAccess(Node node) {}

   public void enterLeftValue(Node node) {}
   public void exitLeftValue(Node node) {}

   public void enterNotOperator(Node node) {}
   public void exitNotOperator(Node node) {}

   public void enterGreaterOperator(Node node) {}
   public void exitGreaterOperator(Node node) {}

   public void enterLessOperator(Node node) {}
   public void exitLessOperator(Node node) {}

   public void enterIsContainedOperator(Node node) {}
   public void exitIsContainedOperator(Node node) {}

   public void enterDump(Node node) {}
   public void exitDump(Node node) {}

   public void enterEndDump(Node node) {}
   public void exitEndDump(Node node) {}

   public void enterParameterDeclaration(Node node) {}
   public void exitParameterDeclaration(Node node) {}

   public void enterParametersDeclaration(Node node) {}
   public void exitParametersDeclaration(Node node) {}

   public void enterFunctionModifier(Node node) {}
   public void exitFunctionModifier(Node node) {}

   public void enterStringPattern(Node node) {}
   public void exitStringPattern(Node node) {}

   public void enterLogicalPattern(Node node) {}
   public void exitLogicalPattern(Node node) {}

   public void enterNumberPattern(Node node) {}
   public void exitNumberPattern(Node node) {}

   public void enterEndsNumber(Node node) {}
   public void exitEndsNumber(Node node) {}

   public void enterArraySubType(Node node) {}
   public void exitArraySubType(Node node) {}

   public void enterDataType(Node node) {}
   public void exitDataType(Node node) {}

   public void enterArrayType(Node node) {}
   public void exitArrayType(Node node) {}

   public void enterArray(Node node) {}
   public void exitArray(Node node) {}

   public void enterClass(Node node) {}
   public void exitClass(Node node) {}

   public void enterAsDataType(Node node) {}
   public void exitAsDataType(Node node) {}

   public void enterAnyIdentifier(Node node) {}
   public void exitAnyIdentifier(Node node) {}

   public void enterIdentifier(Node node) {}
   public void exitIdentifier(Node node) {}

   public void enterEndStmt(Node node) {}
   public void exitEndStmt(Node node) {}

   public void enterWhitespace(Node node) {}
   public void exitWhitespace(Node node) {}

   public void enterLineComment(Node node) {}
   public void exitLineComment(Node node) {}

   public void enterBlockComment(Node node) {}
   public void exitBlockComment(Node node) {}

   public void enterAloneLineComment(Node node) {}
   public void exitAloneLineComment(Node node) {}

   public void enterNewLine(Node node) {}
   public void exitNewLine(Node node) {}

   public void enterSpacing(Node node) {}
   public void exitSpacing(Node node) {}

   public void enterTestNoAlpha(Node node) {}
   public void exitTestNoAlpha(Node node) {}

   public void enterOptionalSpacing(Node node) {}
   public void exitOptionalSpacing(Node node) {}}
