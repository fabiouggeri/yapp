/***************************************************
 * PEG Parser - Generated By YAPP Parser Generator *
 ***************************************************/

package org.uggeri.yapp.runtime.java.test;

import org.uggeri.yapp.runtime.java.node.Node;
import org.uggeri.yapp.runtime.java.parser.Rule;

public enum JavaRuleType implements Rule<JavaVisitor> {
   COMPILATION_UNIT {
      @Override
      public String getLabel() {
         return "CompilationUnit";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCompilationUnit(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCompilationUnit(node);
      }
   },
   PACKAGE_DECLARATION {
      @Override
      public String getLabel() {
         return "PackageDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterPackageDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitPackageDeclaration(node);
      }
   },
   IMPORT_DECLARATION {
      @Override
      public String getLabel() {
         return "ImportDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterImportDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitImportDeclaration(node);
      }
   },
   TYPE_DECLARATION {
      @Override
      public String getLabel() {
         return "TypeDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypeDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypeDeclaration(node);
      }
   },
   ANNOTATIONS {
      @Override
      public String getLabel() {
         return "Annotations";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotations(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotations(node);
      }
   },
   ANNOTATION {
      @Override
      public String getLabel() {
         return "Annotation";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotation(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotation(node);
      }
   },
   QUALIFIED_IDENTIFIER {
      @Override
      public String getLabel() {
         return "QualifiedIdentifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterQualifiedIdentifier(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitQualifiedIdentifier(node);
      }
   },
   DOT_STAR {
      @Override
      public String getLabel() {
         return "DotStar";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDotStar(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDotStar(node);
      }
   },
   MODIFIERS {
      @Override
      public String getLabel() {
         return "Modifiers";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterModifiers(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitModifiers(node);
      }
   },
   MODIFIER {
      @Override
      public String getLabel() {
         return "Modifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterModifier(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitModifier(node);
      }
   },
   CLASS_DECLARATION {
      @Override
      public String getLabel() {
         return "ClassDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassDeclaration(node);
      }
   },
   ENUM_DECLARATION {
      @Override
      public String getLabel() {
         return "EnumDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEnumDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEnumDeclaration(node);
      }
   },
   INTERFACE_DECLARATION {
      @Override
      public String getLabel() {
         return "InterfaceDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterInterfaceDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitInterfaceDeclaration(node);
      }
   },
   ANNOTATION_DECLARATION {
      @Override
      public String getLabel() {
         return "AnnotationDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotationDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotationDeclaration(node);
      }
   },
   EXTENDS {
      @Override
      public String getLabel() {
         return "Extends";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterExtends(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitExtends(node);
      }
   },
   QUALIFIED_CLASS_NAME {
      @Override
      public String getLabel() {
         return "QualifiedClassName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterQualifiedClassName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitQualifiedClassName(node);
      }
   },
   IMPLEMENTS {
      @Override
      public String getLabel() {
         return "Implements";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterImplements(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitImplements(node);
      }
   },
   CLASS_TYPE_LIST {
      @Override
      public String getLabel() {
         return "ClassTypeList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassTypeList(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassTypeList(node);
      }
   },
   IDENTIFIER {
      @Override
      public String getLabel() {
         return "Identifier";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterIdentifier(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitIdentifier(node);
      }
   },
   TYPE_PARAMETERS {
      @Override
      public String getLabel() {
         return "TypeParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypeParameters(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypeParameters(node);
      }
   },
   CLASS_BODY {
      @Override
      public String getLabel() {
         return "ClassBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassBody(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassBody(node);
      }
   },
   CLASS_BODY_DECLARATION {
      @Override
      public String getLabel() {
         return "ClassBodyDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassBodyDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassBodyDeclaration(node);
      }
   },
   STATIC_BLOCK {
      @Override
      public String getLabel() {
         return "StaticBlock";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterStaticBlock(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitStaticBlock(node);
      }
   },
   BLOCK {
      @Override
      public String getLabel() {
         return "Block";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBlock(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBlock(node);
      }
   },
   METHOD_DECLARATION {
      @Override
      public String getLabel() {
         return "MethodDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterMethodDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitMethodDeclaration(node);
      }
   },
   CONSTRUCTOR_DECLARATION {
      @Override
      public String getLabel() {
         return "ConstructorDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConstructorDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConstructorDeclaration(node);
      }
   },
   FIELDS_DECLARATIONS {
      @Override
      public String getLabel() {
         return "FieldsDeclarations";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterFieldsDeclarations(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitFieldsDeclarations(node);
      }
   },
   TYPE {
      @Override
      public String getLabel() {
         return "Type";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitType(node);
      }
   },
   VARIABLE_DECLARATIONS {
      @Override
      public String getLabel() {
         return "VariableDeclarations";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterVariableDeclarations(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitVariableDeclarations(node);
      }
   },
   THROWS {
      @Override
      public String getLabel() {
         return "Throws";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterThrows(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitThrows(node);
      }
   },
   EMPTY_BODY {
      @Override
      public String getLabel() {
         return "EmptyBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEmptyBody(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEmptyBody(node);
      }
   },
   RETURN_TYPE {
      @Override
      public String getLabel() {
         return "ReturnType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterReturnType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitReturnType(node);
      }
   },
   METHOD_SIGNATURE {
      @Override
      public String getLabel() {
         return "MethodSignature";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterMethodSignature(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitMethodSignature(node);
      }
   },
   PARAMETERS_DECLARATIONS {
      @Override
      public String getLabel() {
         return "ParametersDeclarations";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterParametersDeclarations(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitParametersDeclarations(node);
      }
   },
   DIMENSIONS {
      @Override
      public String getLabel() {
         return "Dimensions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDimensions(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDimensions(node);
      }
   },
   INTERFACE_BODY {
      @Override
      public String getLabel() {
         return "InterfaceBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterInterfaceBody(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitInterfaceBody(node);
      }
   },
   INTERFACE_BODY_DECLARATION {
      @Override
      public String getLabel() {
         return "InterfaceBodyDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterInterfaceBodyDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitInterfaceBodyDeclaration(node);
      }
   },
   INTERFACE_METHOD {
      @Override
      public String getLabel() {
         return "InterfaceMethod";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterInterfaceMethod(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitInterfaceMethod(node);
      }
   },
   CONSTANTS_DECLARATIONS {
      @Override
      public String getLabel() {
         return "ConstantsDeclarations";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConstantsDeclarations(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConstantsDeclarations(node);
      }
   },
   CONSTANTS_DECLARATIONS_LIST {
      @Override
      public String getLabel() {
         return "ConstantsDeclarationsList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConstantsDeclarationsList(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConstantsDeclarationsList(node);
      }
   },
   CONSTANT_DECLARATION {
      @Override
      public String getLabel() {
         return "ConstantDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConstantDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConstantDeclaration(node);
      }
   },
   VARIABLE_INITIALIZER {
      @Override
      public String getLabel() {
         return "VariableInitializer";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterVariableInitializer(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitVariableInitializer(node);
      }
   },
   ENUM_BODY {
      @Override
      public String getLabel() {
         return "EnumBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEnumBody(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEnumBody(node);
      }
   },
   ENUM_CONSTANTS {
      @Override
      public String getLabel() {
         return "EnumConstants";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEnumConstants(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEnumConstants(node);
      }
   },
   ENUM_BODY_DECLARATIONS {
      @Override
      public String getLabel() {
         return "EnumBodyDeclarations";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEnumBodyDeclarations(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEnumBodyDeclarations(node);
      }
   },
   ENUM_CONSTANT {
      @Override
      public String getLabel() {
         return "EnumConstant";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEnumConstant(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEnumConstant(node);
      }
   },
   ARGUMENTS {
      @Override
      public String getLabel() {
         return "Arguments";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArguments(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArguments(node);
      }
   },
   FINAL {
      @Override
      public String getLabel() {
         return "Final";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterFinal(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitFinal(node);
      }
   },
   VARIABLE_MODIFIERS {
      @Override
      public String getLabel() {
         return "VariableModifiers";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterVariableModifiers(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitVariableModifiers(node);
      }
   },
   LOCAL_VARIABLE_DECLARATION_STATEMENT {
      @Override
      public String getLabel() {
         return "LocalVariableDeclarationStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterLocalVariableDeclarationStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitLocalVariableDeclarationStatement(node);
      }
   },
   VARIABLE_DECLARATION {
      @Override
      public String getLabel() {
         return "VariableDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterVariableDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitVariableDeclaration(node);
      }
   },
   VARIABLE_INITIALIZATION {
      @Override
      public String getLabel() {
         return "VariableInitialization";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterVariableInitialization(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitVariableInitialization(node);
      }
   },
   PARAMETERS_DECLARATION_LIST {
      @Override
      public String getLabel() {
         return "ParametersDeclarationList";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterParametersDeclarationList(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitParametersDeclarationList(node);
      }
   },
   PARAMETER_DECLARATION {
      @Override
      public String getLabel() {
         return "ParameterDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterParameterDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitParameterDeclaration(node);
      }
   },
   PARAMETER_VARIABLE_DECLARATION {
      @Override
      public String getLabel() {
         return "ParameterVariableDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterParameterVariableDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitParameterVariableDeclaration(node);
      }
   },
   BLOCK_STATEMENTS {
      @Override
      public String getLabel() {
         return "BlockStatements";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBlockStatements(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBlockStatements(node);
      }
   },
   BLOCK_STATEMENT {
      @Override
      public String getLabel() {
         return "BlockStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBlockStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBlockStatement(node);
      }
   },
   STATEMENT {
      @Override
      public String getLabel() {
         return "Statement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitStatement(node);
      }
   },
   ASSERT_STATEMENT {
      @Override
      public String getLabel() {
         return "AssertStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAssertStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAssertStatement(node);
      }
   },
   IF_STATEMENT {
      @Override
      public String getLabel() {
         return "IfStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterIfStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitIfStatement(node);
      }
   },
   FOR_STATEMENT {
      @Override
      public String getLabel() {
         return "ForStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterForStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitForStatement(node);
      }
   },
   FOR_ITERABLE_STATEMENT {
      @Override
      public String getLabel() {
         return "ForIterableStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterForIterableStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitForIterableStatement(node);
      }
   },
   WHILE_STATEMENT {
      @Override
      public String getLabel() {
         return "WhileStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterWhileStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitWhileStatement(node);
      }
   },
   DO_WHILE_STATEMENT {
      @Override
      public String getLabel() {
         return "DoWhileStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDoWhileStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDoWhileStatement(node);
      }
   },
   TRY_CATCH_STATEMENT {
      @Override
      public String getLabel() {
         return "TryCatchStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTryCatchStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTryCatchStatement(node);
      }
   },
   RESOURCE_SPECIFICATION {
      @Override
      public String getLabel() {
         return "ResourceSpecification";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterResourceSpecification(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitResourceSpecification(node);
      }
   },
   RESOURCES {
      @Override
      public String getLabel() {
         return "Resources";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterResources(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitResources(node);
      }
   },
   RESOURCE {
      @Override
      public String getLabel() {
         return "Resource";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterResource(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitResource(node);
      }
   },
   SWITCH_STATEMENT {
      @Override
      public String getLabel() {
         return "SwitchStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSwitchStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSwitchStatement(node);
      }
   },
   SYNCHRONIZED_STATEMENT {
      @Override
      public String getLabel() {
         return "SynchronizedStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSynchronizedStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSynchronizedStatement(node);
      }
   },
   RETURN_STATEMENT {
      @Override
      public String getLabel() {
         return "ReturnStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterReturnStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitReturnStatement(node);
      }
   },
   THROW_STATEMENT {
      @Override
      public String getLabel() {
         return "ThrowStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterThrowStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitThrowStatement(node);
      }
   },
   BREAK_STATEMENT {
      @Override
      public String getLabel() {
         return "BreakStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBreakStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBreakStatement(node);
      }
   },
   CONTINUE_STATEMENT {
      @Override
      public String getLabel() {
         return "ContinueStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterContinueStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitContinueStatement(node);
      }
   },
   IDENTIFIED_STATEMENT {
      @Override
      public String getLabel() {
         return "IdentifiedStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterIdentifiedStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitIdentifiedStatement(node);
      }
   },
   STATEMENT_EXPRESSION {
      @Override
      public String getLabel() {
         return "StatementExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterStatementExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitStatementExpression(node);
      }
   },
   ELSE_STATEMENT {
      @Override
      public String getLabel() {
         return "ElseStatement";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterElseStatement(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitElseStatement(node);
      }
   },
   PAR_EXPRESSION {
      @Override
      public String getLabel() {
         return "ParExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterParExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitParExpression(node);
      }
   },
   RECURSIVE_EXPRESSION {
      @Override
      public String getLabel() {
         return "RecursiveExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterRecursiveExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitRecursiveExpression(node);
      }
   },
   EXPRESSION {
      @Override
      public String getLabel() {
         return "Expression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitExpression(node);
      }
   },
   FOR_INIT {
      @Override
      public String getLabel() {
         return "ForInit";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterForInit(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitForInit(node);
      }
   },
   FOR_UPDATE {
      @Override
      public String getLabel() {
         return "ForUpdate";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterForUpdate(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitForUpdate(node);
      }
   },
   CATCH_TYPE {
      @Override
      public String getLabel() {
         return "CatchType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCatchType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCatchType(node);
      }
   },
   CATCH_PARAMETER {
      @Override
      public String getLabel() {
         return "CatchParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCatchParameter(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCatchParameter(node);
      }
   },
   CATCH {
      @Override
      public String getLabel() {
         return "Catch";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCatch(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCatch(node);
      }
   },
   FINALLY {
      @Override
      public String getLabel() {
         return "Finally";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterFinally(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitFinally(node);
      }
   },
   SWITCH_BLOCK_STATEMENT_GROUPS {
      @Override
      public String getLabel() {
         return "SwitchBlockStatementGroups";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSwitchBlockStatementGroups(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSwitchBlockStatementGroups(node);
      }
   },
   SWITCH_BLOCK_STATEMENT_GROUP {
      @Override
      public String getLabel() {
         return "SwitchBlockStatementGroup";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSwitchBlockStatementGroup(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSwitchBlockStatementGroup(node);
      }
   },
   SWITCH_LABEL {
      @Override
      public String getLabel() {
         return "SwitchLabel";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSwitchLabel(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSwitchLabel(node);
      }
   },
   ENUM_CONSTANT_NAME {
      @Override
      public String getLabel() {
         return "EnumConstantName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEnumConstantName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEnumConstantName(node);
      }
   },
   FOR_INIT_VARIABLES {
      @Override
      public String getLabel() {
         return "ForInitVariables";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterForInitVariables(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitForInitVariables(node);
      }
   },
   FOR_INIT_EXPRESSIONS {
      @Override
      public String getLabel() {
         return "ForInitExpressions";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterForInitExpressions(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitForInitExpressions(node);
      }
   },
   ASSIGNMENT_EXPRESSION {
      @Override
      public String getLabel() {
         return "AssignmentExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAssignmentExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAssignmentExpression(node);
      }
   },
   CONDITIONAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "ConditionalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConditionalExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConditionalExpression(node);
      }
   },
   ASSIGNMENT_OPERATOR {
      @Override
      public String getLabel() {
         return "AssignmentOperator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAssignmentOperator(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAssignmentOperator(node);
      }
   },
   TERNARY_EXPRESSION {
      @Override
      public String getLabel() {
         return "TernaryExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTernaryExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTernaryExpression(node);
      }
   },
   CONDITIONAL_OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "ConditionalOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConditionalOrExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConditionalOrExpression(node);
      }
   },
   OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "OrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOrExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOrExpression(node);
      }
   },
   CONDITIONAL_AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "ConditionalAndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterConditionalAndExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitConditionalAndExpression(node);
      }
   },
   AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "AndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAndExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAndExpression(node);
      }
   },
   OPTIONAL_BIT_OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalBitOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalBitOrExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalBitOrExpression(node);
      }
   },
   BIT_OR_EXPRESSION {
      @Override
      public String getLabel() {
         return "BitOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBitOrExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBitOrExpression(node);
      }
   },
   OPTIONAL_BIT_XOR_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalBitXOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalBitXOrExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalBitXOrExpression(node);
      }
   },
   BIT_XOR_EXPRESSION {
      @Override
      public String getLabel() {
         return "BitXOrExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBitXOrExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBitXOrExpression(node);
      }
   },
   OPTIONAL_BIT_AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalBitAndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalBitAndExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalBitAndExpression(node);
      }
   },
   BIT_AND_EXPRESSION {
      @Override
      public String getLabel() {
         return "BitAndExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBitAndExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBitAndExpression(node);
      }
   },
   OPTIONAL_RELATIONAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalRelationalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalRelationalExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalRelationalExpression(node);
      }
   },
   RELATIONAL_EXPRESSION {
      @Override
      public String getLabel() {
         return "RelationalExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterRelationalExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitRelationalExpression(node);
      }
   },
   OPTIONAL_INSTANCE_OF_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalInstanceOfExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalInstanceOfExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalInstanceOfExpression(node);
      }
   },
   INSTANCE_OF_EXPRESSION {
      @Override
      public String getLabel() {
         return "InstanceOfExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterInstanceOfExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitInstanceOfExpression(node);
      }
   },
   OPTIONAL_ADDITIVE_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalAdditiveExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalAdditiveExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalAdditiveExpression(node);
      }
   },
   REFERENCE_TYPE {
      @Override
      public String getLabel() {
         return "ReferenceType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterReferenceType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitReferenceType(node);
      }
   },
   ADDITIVE_EXPRESSION {
      @Override
      public String getLabel() {
         return "AdditiveExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAdditiveExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAdditiveExpression(node);
      }
   },
   OPTIONAL_MULTIPLICATIVE_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalMultiplicativeExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalMultiplicativeExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalMultiplicativeExpression(node);
      }
   },
   MULTIPLICATIVE_EXPRESSION {
      @Override
      public String getLabel() {
         return "MultiplicativeExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterMultiplicativeExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitMultiplicativeExpression(node);
      }
   },
   OPTIONAL_SHIFT_EXPRESSION {
      @Override
      public String getLabel() {
         return "OptionalShiftExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterOptionalShiftExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitOptionalShiftExpression(node);
      }
   },
   SHIFT_EXPRESSION {
      @Override
      public String getLabel() {
         return "ShiftExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterShiftExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitShiftExpression(node);
      }
   },
   UNARY_EXPRESSION {
      @Override
      public String getLabel() {
         return "UnaryExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterUnaryExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitUnaryExpression(node);
      }
   },
   PREFIXED_EXPRESSION {
      @Override
      public String getLabel() {
         return "PrefixedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterPrefixedExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitPrefixedExpression(node);
      }
   },
   CAST_EXPRESSION {
      @Override
      public String getLabel() {
         return "CastExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCastExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCastExpression(node);
      }
   },
   POSTFIXED_EXPRESSION {
      @Override
      public String getLabel() {
         return "PostfixedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterPostfixedExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitPostfixedExpression(node);
      }
   },
   PREFIX_OP {
      @Override
      public String getLabel() {
         return "PrefixOp";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterPrefixOp(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitPrefixOp(node);
      }
   },
   POST_FIX_OP {
      @Override
      public String getLabel() {
         return "PostFixOp";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterPostFixOp(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitPostFixOp(node);
      }
   },
   PRIMARY {
      @Override
      public String getLabel() {
         return "Primary";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterPrimary(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitPrimary(node);
      }
   },
   QUALIFIED_EXPRESSION {
      @Override
      public String getLabel() {
         return "QualifiedExpression";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterQualifiedExpression(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitQualifiedExpression(node);
      }
   },
   ARRAY_ACCESS {
      @Override
      public String getLabel() {
         return "ArrayAccess";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArrayAccess(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArrayAccess(node);
      }
   },
   ATOMIC {
      @Override
      public String getLabel() {
         return "Atomic";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAtomic(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAtomic(node);
      }
   },
   CLASS_TYPE_REFERENCE {
      @Override
      public String getLabel() {
         return "ClassTypeReference";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassTypeReference(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassTypeReference(node);
      }
   },
   LITERAL {
      @Override
      public String getLabel() {
         return "Literal";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterLiteral(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitLiteral(node);
      }
   },
   BASIC_TYPE_CLASS_REFERENCE {
      @Override
      public String getLabel() {
         return "BasicTypeClassReference";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBasicTypeClassReference(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBasicTypeClassReference(node);
      }
   },
   VOID_CLASS_REFERENCE {
      @Override
      public String getLabel() {
         return "VoidClassReference";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterVoidClassReference(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitVoidClassReference(node);
      }
   },
   THIS_METHOD_CALL {
      @Override
      public String getLabel() {
         return "ThisMethodCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterThisMethodCall(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitThisMethodCall(node);
      }
   },
   THIS {
      @Override
      public String getLabel() {
         return "This";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterThis(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitThis(node);
      }
   },
   SUPER {
      @Override
      public String getLabel() {
         return "Super";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSuper(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSuper(node);
      }
   },
   SUPER_METHOD_CALL {
      @Override
      public String getLabel() {
         return "SuperMethodCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSuperMethodCall(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSuperMethodCall(node);
      }
   },
   SUPER_CONSTRUCTOR_CALL {
      @Override
      public String getLabel() {
         return "SuperConstructorCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSuperConstructorCall(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSuperConstructorCall(node);
      }
   },
   SUPER_FIELD_ACCESS {
      @Override
      public String getLabel() {
         return "SuperFieldAccess";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSuperFieldAccess(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSuperFieldAccess(node);
      }
   },
   NEW {
      @Override
      public String getLabel() {
         return "New";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterNew(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitNew(node);
      }
   },
   CLASS_CREATOR {
      @Override
      public String getLabel() {
         return "ClassCreator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassCreator(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassCreator(node);
      }
   },
   ARRAY_CREATOR {
      @Override
      public String getLabel() {
         return "ArrayCreator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArrayCreator(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArrayCreator(node);
      }
   },
   METHOD_CALL {
      @Override
      public String getLabel() {
         return "MethodCall";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterMethodCall(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitMethodCall(node);
      }
   },
   ARRAY_INDEX {
      @Override
      public String getLabel() {
         return "ArrayIndex";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArrayIndex(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArrayIndex(node);
      }
   },
   DIM_EXPR {
      @Override
      public String getLabel() {
         return "DimExpr";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDimExpr(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDimExpr(node);
      }
   },
   BASIC_TYPE {
      @Override
      public String getLabel() {
         return "BasicType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBasicType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBasicType(node);
      }
   },
   NON_WILDCARD_TYPE_ARGUMENTS {
      @Override
      public String getLabel() {
         return "NonWildcardTypeArguments";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterNonWildcardTypeArguments(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitNonWildcardTypeArguments(node);
      }
   },
   CREATED_NAME {
      @Override
      public String getLabel() {
         return "CreatedName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCreatedName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCreatedName(node);
      }
   },
   INITIALIZED_ARRAY_CREATOR {
      @Override
      public String getLabel() {
         return "InitializedArrayCreator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterInitializedArrayCreator(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitInitializedArrayCreator(node);
      }
   },
   EMPTY_ARRAY_CREATOR {
      @Override
      public String getLabel() {
         return "EmptyArrayCreator";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterEmptyArrayCreator(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitEmptyArrayCreator(node);
      }
   },
   ARRAY_TYPE {
      @Override
      public String getLabel() {
         return "ArrayType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArrayType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArrayType(node);
      }
   },
   DIM {
      @Override
      public String getLabel() {
         return "Dim";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDim(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDim(node);
      }
   },
   ARRAY_INITIALIZER {
      @Override
      public String getLabel() {
         return "ArrayInitializer";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArrayInitializer(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArrayInitializer(node);
      }
   },
   TYPED_NAME {
      @Override
      public String getLabel() {
         return "TypedName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypedName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypedName(node);
      }
   },
   TYPE_NAME {
      @Override
      public String getLabel() {
         return "TypeName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypeName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypeName(node);
      }
   },
   ARRAY {
      @Override
      public String getLabel() {
         return "Array";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterArray(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitArray(node);
      }
   },
   BASIC_TYPE_ARRAY {
      @Override
      public String getLabel() {
         return "BasicTypeArray";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBasicTypeArray(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBasicTypeArray(node);
      }
   },
   QUALIFIED_CLASS_NAME_ARRAY {
      @Override
      public String getLabel() {
         return "QualifiedClassNameArray";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterQualifiedClassNameArray(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitQualifiedClassNameArray(node);
      }
   },
   CLASS_NAME {
      @Override
      public String getLabel() {
         return "ClassName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterClassName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitClassName(node);
      }
   },
   TYPED_CLASS_NAME {
      @Override
      public String getLabel() {
         return "TypedClassName";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypedClassName(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypedClassName(node);
      }
   },
   TYPE_ARGUMENTS {
      @Override
      public String getLabel() {
         return "TypeArguments";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypeArguments(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypeArguments(node);
      }
   },
   TYPE_ARGUMENT {
      @Override
      public String getLabel() {
         return "TypeArgument";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypeArgument(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypeArgument(node);
      }
   },
   QUERY_TYPE {
      @Override
      public String getLabel() {
         return "QueryType";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterQueryType(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitQueryType(node);
      }
   },
   TYPE_PARAMETER {
      @Override
      public String getLabel() {
         return "TypeParameter";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTypeParameter(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTypeParameter(node);
      }
   },
   BOUND {
      @Override
      public String getLabel() {
         return "Bound";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBound(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBound(node);
      }
   },
   ANNOTATION_TYPE_BODY {
      @Override
      public String getLabel() {
         return "AnnotationTypeBody";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotationTypeBody(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotationTypeBody(node);
      }
   },
   ANNOTATION_TYPE_ELEMENT_DECLARATION {
      @Override
      public String getLabel() {
         return "AnnotationTypeElementDeclaration";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotationTypeElementDeclaration(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotationTypeElementDeclaration(node);
      }
   },
   ANNOTATION_METHOD {
      @Override
      public String getLabel() {
         return "AnnotationMethod";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotationMethod(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotationMethod(node);
      }
   },
   ANNOTATIONS_CONSTANTS {
      @Override
      public String getLabel() {
         return "AnnotationsConstants";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotationsConstants(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotationsConstants(node);
      }
   },
   DEFAULT_VALUE {
      @Override
      public String getLabel() {
         return "DefaultValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDefaultValue(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDefaultValue(node);
      }
   },
   ELEMENT_VALUE {
      @Override
      public String getLabel() {
         return "ElementValue";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterElementValue(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitElementValue(node);
      }
   },
   ANNOTATION_PARAMETERS {
      @Override
      public String getLabel() {
         return "AnnotationParameters";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterAnnotationParameters(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitAnnotationParameters(node);
      }
   },
   NORMAL_ANNOTATION_REST {
      @Override
      public String getLabel() {
         return "NormalAnnotationRest";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterNormalAnnotationRest(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitNormalAnnotationRest(node);
      }
   },
   SINGLE_ELEMENT_ANNOTATION_REST {
      @Override
      public String getLabel() {
         return "SingleElementAnnotationRest";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSingleElementAnnotationRest(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSingleElementAnnotationRest(node);
      }
   },
   ELEMENT_VALUE_PAIRS {
      @Override
      public String getLabel() {
         return "ElementValuePairs";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterElementValuePairs(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitElementValuePairs(node);
      }
   },
   ELEMENT_VALUE_PAIR {
      @Override
      public String getLabel() {
         return "ElementValuePair";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterElementValuePair(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitElementValuePair(node);
      }
   },
   ELEMENT_VALUE_ARRAY_INITIALIZER {
      @Override
      public String getLabel() {
         return "ElementValueArrayInitializer";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterElementValueArrayInitializer(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitElementValueArrayInitializer(node);
      }
   },
   ELEMENT_VALUES {
      @Override
      public String getLabel() {
         return "ElementValues";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return true;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterElementValues(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitElementValues(node);
      }
   },
   TEST_NO_ALPHA {
      @Override
      public String getLabel() {
         return "TestNoAlpha";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTestNoAlpha(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTestNoAlpha(node);
      }
   },
   SPACING {
      @Override
      public String getLabel() {
         return "Spacing";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSpacing(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSpacing(node);
      }
   },
   SPACES {
      @Override
      public String getLabel() {
         return "Spaces";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSpaces(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSpaces(node);
      }
   },
   BLOCK_COMMENT {
      @Override
      public String getLabel() {
         return "BlockComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterBlockComment(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitBlockComment(node);
      }
   },
   NEW_LINE {
      @Override
      public String getLabel() {
         return "NewLine";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterNewLine(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitNewLine(node);
      }
   },
   LINE_COMMENT {
      @Override
      public String getLabel() {
         return "LineComment";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterLineComment(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitLineComment(node);
      }
   },
   FLOAT_LITERAL {
      @Override
      public String getLabel() {
         return "FloatLiteral";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterFloatLiteral(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitFloatLiteral(node);
      }
   },
   LONG_LITERAL {
      @Override
      public String getLabel() {
         return "LongLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterLongLiteral(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitLongLiteral(node);
      }
   },
   INTEGER_LITERAL {
      @Override
      public String getLabel() {
         return "IntegerLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterIntegerLiteral(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitIntegerLiteral(node);
      }
   },
   CHAR_LITERAL {
      @Override
      public String getLabel() {
         return "CharLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterCharLiteral(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitCharLiteral(node);
      }
   },
   STRING_LITERAL {
      @Override
      public String getLabel() {
         return "StringLiteral";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterStringLiteral(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitStringLiteral(node);
      }
   },
   TRUE {
      @Override
      public String getLabel() {
         return "True";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterTrue(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitTrue(node);
      }
   },
   FALSE {
      @Override
      public String getLabel() {
         return "False";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterFalse(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitFalse(node);
      }
   },
   NULL {
      @Override
      public String getLabel() {
         return "Null";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterNull(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitNull(node);
      }
   },
   HEX_FLOAT {
      @Override
      public String getLabel() {
         return "HexFloat";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterHexFloat(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitHexFloat(node);
      }
   },
   DECIMAL_FLOAT {
      @Override
      public String getLabel() {
         return "DecimalFloat";
      }

      @Override
      public boolean isAtomic() {
         return true;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterDecimalFloat(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitDecimalFloat(node);
      }
   },
   SEMICOLON {
      @Override
      public String getLabel() {
         return "Semicolon";
      }

      @Override
      public boolean isAtomic() {
         return false;
      }

      @Override
      public boolean isSkiped() {
         return false;
      }

      @Override
      public void enterRule(JavaVisitor visitor, Node node) {
         visitor.enterSemicolon(node);
      }

      @Override
      public void exitRule(JavaVisitor visitor, Node node) {
         visitor.exitSemicolon(node);
      }
   };

   @Override
   public int getValue() {
      return ordinal();
   }
}
